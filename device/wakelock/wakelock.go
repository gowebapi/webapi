// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package wakelock

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.PromiseFinally

// source idl files:
// promises.idl
// wake-lock.idl

// transform files:
// promises.go.md
// wake-lock.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: WakeLockType
type WakeLockType int

const (
	ScreenWakeLockType WakeLockType = iota
	SystemWakeLockType
)

var wakeLockTypeToWasmTable = []string{
	"screen", "system",
}

var wakeLockTypeFromWasmTable = map[string]WakeLockType{
	"screen": ScreenWakeLockType, "system": SystemWakeLockType,
}

// JSValue is converting this enum into a javascript object
func (this *WakeLockType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this WakeLockType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(wakeLockTypeToWasmTable) {
		return wakeLockTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// WakeLockTypeFromJS is converting a javascript value into
// a WakeLockType enum value.
func WakeLockTypeFromJS(value js.Value) WakeLockType {
	key := value.String()
	conv, ok := wakeLockTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromiseWakeLockOnFulfilledFunc func(value *WakeLock)

// PromiseWakeLockOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseWakeLockOnFulfilled js.Func

func PromiseWakeLockOnFulfilledToJS(callback PromiseWakeLockOnFulfilledFunc) *PromiseWakeLockOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseWakeLockOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *WakeLock // javascript: WakeLock value
		)
		_p0 = WakeLockFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseWakeLockOnFulfilledFromJS(_value js.Value) PromiseWakeLockOnFulfilledFunc {
	return func(value *WakeLock) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseWakeLockOnRejectedFunc func(reason js.Value)

// PromiseWakeLockOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseWakeLockOnRejected js.Func

func PromiseWakeLockOnRejectedToJS(callback PromiseWakeLockOnRejectedFunc) *PromiseWakeLockOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseWakeLockOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseWakeLockOnRejectedFromJS(_value js.Value) PromiseWakeLockOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// class: Promise
type PromiseWakeLock struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseWakeLock) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseWakeLockFromJS is casting a js.Value into PromiseWakeLock.
func PromiseWakeLockFromJS(value js.Value) *PromiseWakeLock {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseWakeLock{}
	ret.Value_JS = value
	return ret
}

// PromiseWakeLockFromJS is casting from something that holds a js.Value into PromiseWakeLock.
func PromiseWakeLockFromWrapper(input core.Wrapper) *PromiseWakeLock {
	return PromiseWakeLockFromJS(input.JSValue())
}

func (_this *PromiseWakeLock) Then(onFulfilled *PromiseWakeLockOnFulfilled, onRejected *PromiseWakeLockOnRejected) (_result *PromiseWakeLock) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseWakeLock // javascript: Promise _what_return_name
	)
	_converted = PromiseWakeLockFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseWakeLock) Catch(onRejected *PromiseWakeLockOnRejected) (_result *PromiseWakeLock) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseWakeLock // javascript: Promise _what_return_name
	)
	_converted = PromiseWakeLockFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseWakeLock) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseWakeLock) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseWakeLock // javascript: Promise _what_return_name
	)
	_converted = PromiseWakeLockFromJS(_returned)
	_result = _converted
	return
}

// class: WakeLock
type WakeLock struct {
	domcore.EventTarget
}

// WakeLockFromJS is casting a js.Value into WakeLock.
func WakeLockFromJS(value js.Value) *WakeLock {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WakeLock{}
	ret.Value_JS = value
	return ret
}

// WakeLockFromJS is casting from something that holds a js.Value into WakeLock.
func WakeLockFromWrapper(input core.Wrapper) *WakeLock {
	return WakeLockFromJS(input.JSValue())
}

// Type returning attribute 'type' with
// type WakeLockType (idl: WakeLockType).
func (_this *WakeLock) Type() WakeLockType {
	var ret WakeLockType
	value := _this.Value_JS.Get("type")
	ret = WakeLockTypeFromJS(value)
	return ret
}

// Active returning attribute 'active' with
// type bool (idl: boolean).
func (_this *WakeLock) Active() bool {
	var ret bool
	value := _this.Value_JS.Get("active")
	ret = (value).Bool()
	return ret
}

// OnActiveChange returning attribute 'onactivechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WakeLock) OnActiveChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onactivechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncWakeLock_domcore_Event(listener func(event *domcore.Event, target *WakeLock)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := WakeLockFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddActiveChange is adding doing AddEventListener for 'ActiveChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WakeLock) AddEventActiveChange(listener func(event *domcore.Event, currentTarget *WakeLock)) js.Func {
	cb := eventFuncWakeLock_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "activechange", cb)
	return cb
}

// SetOnActiveChange is assigning a function to 'onactivechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WakeLock) SetOnActiveChange(listener func(event *domcore.Event, currentTarget *WakeLock)) js.Func {
	cb := eventFuncWakeLock_domcore_Event(listener)
	_this.Value_JS.Set("onactivechange", cb)
	return cb
}

func (_this *WakeLock) CreateRequest() (_result *WakeLockRequest) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRequest", _args[0:_end]...)
	var (
		_converted *WakeLockRequest // javascript: WakeLockRequest _what_return_name
	)
	_converted = WakeLockRequestFromJS(_returned)
	_result = _converted
	return
}

// class: WakeLockRequest
type WakeLockRequest struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *WakeLockRequest) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// WakeLockRequestFromJS is casting a js.Value into WakeLockRequest.
func WakeLockRequestFromJS(value js.Value) *WakeLockRequest {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WakeLockRequest{}
	ret.Value_JS = value
	return ret
}

// WakeLockRequestFromJS is casting from something that holds a js.Value into WakeLockRequest.
func WakeLockRequestFromWrapper(input core.Wrapper) *WakeLockRequest {
	return WakeLockRequestFromJS(input.JSValue())
}

func (_this *WakeLockRequest) Cancel() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("cancel", _args[0:_end]...)
	return
}
