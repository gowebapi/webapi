// Code generated by webidl-bind. DO NOT EDIT.

package battery

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
)

// using following types:
// domcore.EventHandler
// domcore.EventTarget

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// interface: BatteryManager
type BatteryManager struct {
	domcore.EventTarget
}

// BatteryManagerFromJS is casting a js.Wrapper into BatteryManager.
func BatteryManagerFromJS(value js.Wrapper) *BatteryManager {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &BatteryManager{}
	ret.Value_JS = input
	return ret
}

// Charging returning attribute 'charging' with
// type bool (idl: boolean).
func (_this *BatteryManager) Charging() bool {
	var ret bool
	value := _this.Value_JS.Get("charging")
	ret = (value).Bool()
	return ret
}

// ChargingTime returning attribute 'chargingTime' with
// type float64 (idl: unrestricted double).
func (_this *BatteryManager) ChargingTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("chargingTime")
	ret = (value).Float()
	return ret
}

// DischargingTime returning attribute 'dischargingTime' with
// type float64 (idl: unrestricted double).
func (_this *BatteryManager) DischargingTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("dischargingTime")
	ret = (value).Float()
	return ret
}

// Level returning attribute 'level' with
// type float64 (idl: double).
func (_this *BatteryManager) Level() float64 {
	var ret float64
	value := _this.Value_JS.Get("level")
	ret = (value).Float()
	return ret
}

// Onchargingchange returning attribute 'onchargingchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) Onchargingchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchargingchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchargingchange setting attribute 'onchargingchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) SetOnchargingchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchargingchange", input)
}

// Onchargingtimechange returning attribute 'onchargingtimechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) Onchargingtimechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchargingtimechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchargingtimechange setting attribute 'onchargingtimechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) SetOnchargingtimechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchargingtimechange", input)
}

// Ondischargingtimechange returning attribute 'ondischargingtimechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) Ondischargingtimechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondischargingtimechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndischargingtimechange setting attribute 'ondischargingtimechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) SetOndischargingtimechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondischargingtimechange", input)
}

// Onlevelchange returning attribute 'onlevelchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) Onlevelchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlevelchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnlevelchange setting attribute 'onlevelchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *BatteryManager) SetOnlevelchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onlevelchange", input)
}
