// Code generated by webidl-bind. DO NOT EDIT.

package webxr

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/graphics/webgl"
	"github.com/gowebapi/webapi/html/canvas"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// canvas.HTMLCanvasElement
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// geometry.DOMPointInit
// geometry.DOMPointReadOnly
// javascript.Float32Array
// javascript.FrozenArray
// javascript.Promise
// webgl.Framebuffer

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: XREnvironmentBlendMode
type XREnvironmentBlendMode int

const (
	OpaqueXREnvironmentBlendMode XREnvironmentBlendMode = iota
	AdditiveXREnvironmentBlendMode
	AlphaBlendXREnvironmentBlendMode
)

var xREnvironmentBlendModeToWasmTable = []string{
	"opaque", "additive", "alpha-blend",
}

var xREnvironmentBlendModeFromWasmTable = map[string]XREnvironmentBlendMode{
	"opaque": OpaqueXREnvironmentBlendMode, "additive": AdditiveXREnvironmentBlendMode, "alpha-blend": AlphaBlendXREnvironmentBlendMode,
}

// JSValue is converting this enum into a java object
func (this *XREnvironmentBlendMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XREnvironmentBlendMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xREnvironmentBlendModeToWasmTable) {
		return xREnvironmentBlendModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XREnvironmentBlendModeFromJS is converting a javascript value into
// a XREnvironmentBlendMode enum value.
func XREnvironmentBlendModeFromJS(value js.Value) XREnvironmentBlendMode {
	key := value.String()
	conv, ok := xREnvironmentBlendModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XREye
type XREye int

const (
	LeftXREye XREye = iota
	RightXREye
)

var xREyeToWasmTable = []string{
	"left", "right",
}

var xREyeFromWasmTable = map[string]XREye{
	"left": LeftXREye, "right": RightXREye,
}

// JSValue is converting this enum into a java object
func (this *XREye) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XREye) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xREyeToWasmTable) {
		return xREyeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XREyeFromJS is converting a javascript value into
// a XREye enum value.
func XREyeFromJS(value js.Value) XREye {
	key := value.String()
	conv, ok := xREyeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XRHandedness
type XRHandedness int

const (
	NoneXRHandedness XRHandedness = iota
	LeftXRHandedness
	RightXRHandedness
)

var xRHandednessToWasmTable = []string{
	"none", "left", "right",
}

var xRHandednessFromWasmTable = map[string]XRHandedness{
	"none": NoneXRHandedness, "left": LeftXRHandedness, "right": RightXRHandedness,
}

// JSValue is converting this enum into a java object
func (this *XRHandedness) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XRHandedness) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xRHandednessToWasmTable) {
		return xRHandednessToWasmTable[idx]
	}
	panic("unknown input value")
}

// XRHandednessFromJS is converting a javascript value into
// a XRHandedness enum value.
func XRHandednessFromJS(value js.Value) XRHandedness {
	key := value.String()
	conv, ok := xRHandednessFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XRReferenceSpaceType
type XRReferenceSpaceType int

const (
	StationaryXRReferenceSpaceType XRReferenceSpaceType = iota
	BoundedXRReferenceSpaceType
	UnboundedXRReferenceSpaceType
)

var xRReferenceSpaceTypeToWasmTable = []string{
	"stationary", "bounded", "unbounded",
}

var xRReferenceSpaceTypeFromWasmTable = map[string]XRReferenceSpaceType{
	"stationary": StationaryXRReferenceSpaceType, "bounded": BoundedXRReferenceSpaceType, "unbounded": UnboundedXRReferenceSpaceType,
}

// JSValue is converting this enum into a java object
func (this *XRReferenceSpaceType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XRReferenceSpaceType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xRReferenceSpaceTypeToWasmTable) {
		return xRReferenceSpaceTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XRReferenceSpaceTypeFromJS is converting a javascript value into
// a XRReferenceSpaceType enum value.
func XRReferenceSpaceTypeFromJS(value js.Value) XRReferenceSpaceType {
	key := value.String()
	conv, ok := xRReferenceSpaceTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XRSessionMode
type XRSessionMode int

const (
	InlineXRSessionMode XRSessionMode = iota
	ImmersiveVrXRSessionMode
	ImmersiveArXRSessionMode
)

var xRSessionModeToWasmTable = []string{
	"inline", "immersive-vr", "immersive-ar",
}

var xRSessionModeFromWasmTable = map[string]XRSessionMode{
	"inline": InlineXRSessionMode, "immersive-vr": ImmersiveVrXRSessionMode, "immersive-ar": ImmersiveArXRSessionMode,
}

// JSValue is converting this enum into a java object
func (this *XRSessionMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XRSessionMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xRSessionModeToWasmTable) {
		return xRSessionModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XRSessionModeFromJS is converting a javascript value into
// a XRSessionMode enum value.
func XRSessionModeFromJS(value js.Value) XRSessionMode {
	key := value.String()
	conv, ok := xRSessionModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XRStationaryReferenceSpaceSubtype
type XRStationaryReferenceSpaceSubtype int

const (
	EyeLevelXRStationaryReferenceSpaceSubtype XRStationaryReferenceSpaceSubtype = iota
	FloorLevelXRStationaryReferenceSpaceSubtype
	PositionDisabledXRStationaryReferenceSpaceSubtype
)

var xRStationaryReferenceSpaceSubtypeToWasmTable = []string{
	"eye-level", "floor-level", "position-disabled",
}

var xRStationaryReferenceSpaceSubtypeFromWasmTable = map[string]XRStationaryReferenceSpaceSubtype{
	"eye-level": EyeLevelXRStationaryReferenceSpaceSubtype, "floor-level": FloorLevelXRStationaryReferenceSpaceSubtype, "position-disabled": PositionDisabledXRStationaryReferenceSpaceSubtype,
}

// JSValue is converting this enum into a java object
func (this *XRStationaryReferenceSpaceSubtype) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XRStationaryReferenceSpaceSubtype) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xRStationaryReferenceSpaceSubtypeToWasmTable) {
		return xRStationaryReferenceSpaceSubtypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XRStationaryReferenceSpaceSubtypeFromJS is converting a javascript value into
// a XRStationaryReferenceSpaceSubtype enum value.
func XRStationaryReferenceSpaceSubtypeFromJS(value js.Value) XRStationaryReferenceSpaceSubtype {
	key := value.String()
	conv, ok := xRStationaryReferenceSpaceSubtypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: XRTargetRayMode
type XRTargetRayMode int

const (
	GazeXRTargetRayMode XRTargetRayMode = iota
	TrackedPointerXRTargetRayMode
	ScreenXRTargetRayMode
)

var xRTargetRayModeToWasmTable = []string{
	"gaze", "tracked-pointer", "screen",
}

var xRTargetRayModeFromWasmTable = map[string]XRTargetRayMode{
	"gaze": GazeXRTargetRayMode, "tracked-pointer": TrackedPointerXRTargetRayMode, "screen": ScreenXRTargetRayMode,
}

// JSValue is converting this enum into a java object
func (this *XRTargetRayMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this XRTargetRayMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(xRTargetRayModeToWasmTable) {
		return xRTargetRayModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// XRTargetRayModeFromJS is converting a javascript value into
// a XRTargetRayMode enum value.
func XRTargetRayModeFromJS(value js.Value) XRTargetRayMode {
	key := value.String()
	conv, ok := xRTargetRayModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: XRFrameRequestCallback
type XRFrameRequestCallbackFunc func(time float64, frame *XRFrame)

// XRFrameRequestCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type XRFrameRequestCallback js.Func

func XRFrameRequestCallbackToJS(callback XRFrameRequestCallbackFunc) *XRFrameRequestCallback {
	if callback == nil {
		return nil
	}
	ret := XRFrameRequestCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 float64  // javascript: double time
			_p1 *XRFrame // javascript: XRFrame frame
		)
		_p0 = (args[0]).Float()
		_p1 = XRFrameFromJS(args[1])
		callback(_p0, _p1)
		// returning no return value
		return nil
	}))
	return &ret
}

func XRFrameRequestCallbackFromJS(_value js.Value) XRFrameRequestCallbackFunc {
	return func(time float64, frame *XRFrame) {
		var (
			_args [2]interface{}
			_end  int
		)
		_p0 := time
		_args[0] = _p0
		_end++
		_p1 := frame.JSValue()
		_args[1] = _p1
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: XRInputSourceEventInit
type XRInputSourceEventInit struct {
	Bubbles     bool
	Cancelable  bool
	Composed    bool
	Frame       *XRFrame
	InputSource *XRInputSource
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRInputSourceEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Frame.JSValue()
	out.Set("frame", value3)
	value4 := _this.InputSource.JSValue()
	out.Set("inputSource", value4)
	return out
}

// XRInputSourceEventInitFromJS is allocating a new
// XRInputSourceEventInit object and copy all values from
// input javascript object
func XRInputSourceEventInitFromJS(value js.Wrapper) *XRInputSourceEventInit {
	input := value.JSValue()
	var out XRInputSourceEventInit
	var (
		value0 bool           // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool           // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool           // javascript: boolean {composed Composed composed}
		value3 *XRFrame       // javascript: XRFrame {frame Frame frame}
		value4 *XRInputSource // javascript: XRInputSource {inputSource InputSource inputSource}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = XRFrameFromJS(input.Get("frame"))
	out.Frame = value3
	value4 = XRInputSourceFromJS(input.Get("inputSource"))
	out.InputSource = value4
	return &out
}

// dictionary: XRReferenceSpaceEventInit
type XRReferenceSpaceEventInit struct {
	Bubbles        bool
	Cancelable     bool
	Composed       bool
	ReferenceSpace *XRReferenceSpace
	Transform      *XRRigidTransform
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRReferenceSpaceEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.ReferenceSpace.JSValue()
	out.Set("referenceSpace", value3)
	value4 := _this.Transform.JSValue()
	out.Set("transform", value4)
	return out
}

// XRReferenceSpaceEventInitFromJS is allocating a new
// XRReferenceSpaceEventInit object and copy all values from
// input javascript object
func XRReferenceSpaceEventInitFromJS(value js.Wrapper) *XRReferenceSpaceEventInit {
	input := value.JSValue()
	var out XRReferenceSpaceEventInit
	var (
		value0 bool              // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool              // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool              // javascript: boolean {composed Composed composed}
		value3 *XRReferenceSpace // javascript: XRReferenceSpace {referenceSpace ReferenceSpace referenceSpace}
		value4 *XRRigidTransform // javascript: XRRigidTransform {transform Transform transform}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = XRReferenceSpaceFromJS(input.Get("referenceSpace"))
	out.ReferenceSpace = value3
	value4 = XRRigidTransformFromJS(input.Get("transform"))
	out.Transform = value4
	return &out
}

// dictionary: XRReferenceSpaceOptions
type XRReferenceSpaceOptions struct {
	Type    XRReferenceSpaceType
	Subtype XRStationaryReferenceSpaceSubtype
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRReferenceSpaceOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type.JSValue()
	out.Set("type", value0)
	value1 := _this.Subtype.JSValue()
	out.Set("subtype", value1)
	return out
}

// XRReferenceSpaceOptionsFromJS is allocating a new
// XRReferenceSpaceOptions object and copy all values from
// input javascript object
func XRReferenceSpaceOptionsFromJS(value js.Wrapper) *XRReferenceSpaceOptions {
	input := value.JSValue()
	var out XRReferenceSpaceOptions
	var (
		value0 XRReferenceSpaceType              // javascript: XRReferenceSpaceType {type Type _type}
		value1 XRStationaryReferenceSpaceSubtype // javascript: XRStationaryReferenceSpaceSubtype {subtype Subtype subtype}
	)
	value0 = XRReferenceSpaceTypeFromJS(input.Get("type"))
	out.Type = value0
	value1 = XRStationaryReferenceSpaceSubtypeFromJS(input.Get("subtype"))
	out.Subtype = value1
	return &out
}

// dictionary: XRRenderStateInit
type XRRenderStateInit struct {
	DepthNear float64
	DepthFar  float64
	BaseLayer *XRLayer
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRRenderStateInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.DepthNear
	out.Set("depthNear", value0)
	value1 := _this.DepthFar
	out.Set("depthFar", value1)
	value2 := _this.BaseLayer.JSValue()
	out.Set("baseLayer", value2)
	return out
}

// XRRenderStateInitFromJS is allocating a new
// XRRenderStateInit object and copy all values from
// input javascript object
func XRRenderStateInitFromJS(value js.Wrapper) *XRRenderStateInit {
	input := value.JSValue()
	var out XRRenderStateInit
	var (
		value0 float64  // javascript: double {depthNear DepthNear depthNear}
		value1 float64  // javascript: double {depthFar DepthFar depthFar}
		value2 *XRLayer // javascript: XRLayer {baseLayer BaseLayer baseLayer}
	)
	value0 = (input.Get("depthNear")).Float()
	out.DepthNear = value0
	value1 = (input.Get("depthFar")).Float()
	out.DepthFar = value1
	if input.Get("baseLayer").Type() != js.TypeNull {
		value2 = XRLayerFromJS(input.Get("baseLayer"))
	}
	out.BaseLayer = value2
	return &out
}

// dictionary: XRSessionCreationOptions
type XRSessionCreationOptions struct {
	Mode          XRSessionMode
	OutputContext *XRPresentationContext
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRSessionCreationOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Mode.JSValue()
	out.Set("mode", value0)
	value1 := _this.OutputContext.JSValue()
	out.Set("outputContext", value1)
	return out
}

// XRSessionCreationOptionsFromJS is allocating a new
// XRSessionCreationOptions object and copy all values from
// input javascript object
func XRSessionCreationOptionsFromJS(value js.Wrapper) *XRSessionCreationOptions {
	input := value.JSValue()
	var out XRSessionCreationOptions
	var (
		value0 XRSessionMode          // javascript: XRSessionMode {mode Mode mode}
		value1 *XRPresentationContext // javascript: XRPresentationContext {outputContext OutputContext outputContext}
	)
	value0 = XRSessionModeFromJS(input.Get("mode"))
	out.Mode = value0
	if input.Get("outputContext").Type() != js.TypeNull {
		value1 = XRPresentationContextFromJS(input.Get("outputContext"))
	}
	out.OutputContext = value1
	return &out
}

// dictionary: XRSessionEventInit
type XRSessionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Session    *XRSession
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRSessionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Session.JSValue()
	out.Set("session", value3)
	return out
}

// XRSessionEventInitFromJS is allocating a new
// XRSessionEventInit object and copy all values from
// input javascript object
func XRSessionEventInitFromJS(value js.Wrapper) *XRSessionEventInit {
	input := value.JSValue()
	var out XRSessionEventInit
	var (
		value0 bool       // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool       // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool       // javascript: boolean {composed Composed composed}
		value3 *XRSession // javascript: XRSession {session Session session}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = XRSessionFromJS(input.Get("session"))
	out.Session = value3
	return &out
}

// dictionary: XRWebGLLayerInit
type XRWebGLLayerInit struct {
	Antialias              bool
	Depth                  bool
	Stencil                bool
	Alpha                  bool
	FramebufferScaleFactor float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *XRWebGLLayerInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Antialias
	out.Set("antialias", value0)
	value1 := _this.Depth
	out.Set("depth", value1)
	value2 := _this.Stencil
	out.Set("stencil", value2)
	value3 := _this.Alpha
	out.Set("alpha", value3)
	value4 := _this.FramebufferScaleFactor
	out.Set("framebufferScaleFactor", value4)
	return out
}

// XRWebGLLayerInitFromJS is allocating a new
// XRWebGLLayerInit object and copy all values from
// input javascript object
func XRWebGLLayerInitFromJS(value js.Wrapper) *XRWebGLLayerInit {
	input := value.JSValue()
	var out XRWebGLLayerInit
	var (
		value0 bool    // javascript: boolean {antialias Antialias antialias}
		value1 bool    // javascript: boolean {depth Depth depth}
		value2 bool    // javascript: boolean {stencil Stencil stencil}
		value3 bool    // javascript: boolean {alpha Alpha alpha}
		value4 float64 // javascript: double {framebufferScaleFactor FramebufferScaleFactor framebufferScaleFactor}
	)
	value0 = (input.Get("antialias")).Bool()
	out.Antialias = value0
	value1 = (input.Get("depth")).Bool()
	out.Depth = value1
	value2 = (input.Get("stencil")).Bool()
	out.Stencil = value2
	value3 = (input.Get("alpha")).Bool()
	out.Alpha = value3
	value4 = (input.Get("framebufferScaleFactor")).Float()
	out.FramebufferScaleFactor = value4
	return &out
}

// interface: XR
type XR struct {
	domcore.EventTarget
}

// XRFromJS is casting a js.Wrapper into XR.
func XRFromJS(value js.Wrapper) *XR {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XR{}
	ret.Value_JS = input
	return ret
}

// Ondevicechange returning attribute 'ondevicechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XR) Ondevicechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondevicechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndevicechange setting attribute 'ondevicechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XR) SetOndevicechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondevicechange", input)
}

func (_this *XR) SupportsSessionMode(mode XRSessionMode) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("supportsSessionMode", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *XR) RequestSession(parameters *XRSessionCreationOptions) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if parameters != nil {
		_p0 := parameters.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("requestSession", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: XRBoundedReferenceSpace
type XRBoundedReferenceSpace struct {
	XRReferenceSpace
}

// XRBoundedReferenceSpaceFromJS is casting a js.Wrapper into XRBoundedReferenceSpace.
func XRBoundedReferenceSpaceFromJS(value js.Wrapper) *XRBoundedReferenceSpace {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRBoundedReferenceSpace{}
	ret.Value_JS = input
	return ret
}

// BoundsGeometry returning attribute 'boundsGeometry' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *XRBoundedReferenceSpace) BoundsGeometry() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("boundsGeometry")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: XRFrame
type XRFrame struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRFrame) JSValue() js.Value {
	return _this.Value_JS
}

// XRFrameFromJS is casting a js.Wrapper into XRFrame.
func XRFrameFromJS(value js.Wrapper) *XRFrame {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRFrame{}
	ret.Value_JS = input
	return ret
}

// Session returning attribute 'session' with
// type XRSession (idl: XRSession).
func (_this *XRFrame) Session() *XRSession {
	var ret *XRSession
	value := _this.Value_JS.Get("session")
	ret = XRSessionFromJS(value)
	return ret
}

func (_this *XRFrame) GetViewerPose(referenceSpace *XRReferenceSpace) (_result *XRViewerPose) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := referenceSpace.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getViewerPose", _args[0:_end]...)
	var (
		_converted *XRViewerPose // javascript: XRViewerPose _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = XRViewerPoseFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *XRFrame) GetPose(space *XRSpace, relativeTo *XRSpace) (_result *XRPose) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := space.JSValue()
	_args[0] = _p0
	_end++
	_p1 := relativeTo.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getPose", _args[0:_end]...)
	var (
		_converted *XRPose // javascript: XRPose _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = XRPoseFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: XRInputSource
type XRInputSource struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRInputSource) JSValue() js.Value {
	return _this.Value_JS
}

// XRInputSourceFromJS is casting a js.Wrapper into XRInputSource.
func XRInputSourceFromJS(value js.Wrapper) *XRInputSource {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRInputSource{}
	ret.Value_JS = input
	return ret
}

// Handedness returning attribute 'handedness' with
// type XRHandedness (idl: XRHandedness).
func (_this *XRInputSource) Handedness() XRHandedness {
	var ret XRHandedness
	value := _this.Value_JS.Get("handedness")
	ret = XRHandednessFromJS(value)
	return ret
}

// TargetRayMode returning attribute 'targetRayMode' with
// type XRTargetRayMode (idl: XRTargetRayMode).
func (_this *XRInputSource) TargetRayMode() XRTargetRayMode {
	var ret XRTargetRayMode
	value := _this.Value_JS.Get("targetRayMode")
	ret = XRTargetRayModeFromJS(value)
	return ret
}

// TargetRaySpace returning attribute 'targetRaySpace' with
// type XRSpace (idl: XRSpace).
func (_this *XRInputSource) TargetRaySpace() *XRSpace {
	var ret *XRSpace
	value := _this.Value_JS.Get("targetRaySpace")
	ret = XRSpaceFromJS(value)
	return ret
}

// GripSpace returning attribute 'gripSpace' with
// type XRSpace (idl: XRSpace).
func (_this *XRInputSource) GripSpace() *XRSpace {
	var ret *XRSpace
	value := _this.Value_JS.Get("gripSpace")
	if value.Type() != js.TypeNull {
		ret = XRSpaceFromJS(value)
	}
	return ret
}

// interface: XRInputSourceEvent
type XRInputSourceEvent struct {
	domcore.Event
}

// XRInputSourceEventFromJS is casting a js.Wrapper into XRInputSourceEvent.
func XRInputSourceEventFromJS(value js.Wrapper) *XRInputSourceEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRInputSourceEvent{}
	ret.Value_JS = input
	return ret
}

func NewXRInputSourceEvent(_type string, eventInitDict *XRInputSourceEventInit) (_result *XRInputSourceEvent) {
	_klass := js.Global().Get("XRInputSourceEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRInputSourceEvent // javascript: XRInputSourceEvent _what_return_name
	)
	_converted = XRInputSourceEventFromJS(_returned)
	_result = _converted
	return
}

// Frame returning attribute 'frame' with
// type XRFrame (idl: XRFrame).
func (_this *XRInputSourceEvent) Frame() *XRFrame {
	var ret *XRFrame
	value := _this.Value_JS.Get("frame")
	ret = XRFrameFromJS(value)
	return ret
}

// InputSource returning attribute 'inputSource' with
// type XRInputSource (idl: XRInputSource).
func (_this *XRInputSourceEvent) InputSource() *XRInputSource {
	var ret *XRInputSource
	value := _this.Value_JS.Get("inputSource")
	ret = XRInputSourceFromJS(value)
	return ret
}

// interface: XRLayer
type XRLayer struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRLayer) JSValue() js.Value {
	return _this.Value_JS
}

// XRLayerFromJS is casting a js.Wrapper into XRLayer.
func XRLayerFromJS(value js.Wrapper) *XRLayer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRLayer{}
	ret.Value_JS = input
	return ret
}

// interface: XRPose
type XRPose struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRPose) JSValue() js.Value {
	return _this.Value_JS
}

// XRPoseFromJS is casting a js.Wrapper into XRPose.
func XRPoseFromJS(value js.Wrapper) *XRPose {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRPose{}
	ret.Value_JS = input
	return ret
}

// Transform returning attribute 'transform' with
// type XRRigidTransform (idl: XRRigidTransform).
func (_this *XRPose) Transform() *XRRigidTransform {
	var ret *XRRigidTransform
	value := _this.Value_JS.Get("transform")
	ret = XRRigidTransformFromJS(value)
	return ret
}

// EmulatedPosition returning attribute 'emulatedPosition' with
// type bool (idl: boolean).
func (_this *XRPose) EmulatedPosition() bool {
	var ret bool
	value := _this.Value_JS.Get("emulatedPosition")
	ret = (value).Bool()
	return ret
}

// interface: XRPresentationContext
type XRPresentationContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRPresentationContext) JSValue() js.Value {
	return _this.Value_JS
}

// XRPresentationContextFromJS is casting a js.Wrapper into XRPresentationContext.
func XRPresentationContextFromJS(value js.Wrapper) *XRPresentationContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRPresentationContext{}
	ret.Value_JS = input
	return ret
}

// Canvas returning attribute 'canvas' with
// type canvas.HTMLCanvasElement (idl: HTMLCanvasElement).
func (_this *XRPresentationContext) Canvas() *canvas.HTMLCanvasElement {
	var ret *canvas.HTMLCanvasElement
	value := _this.Value_JS.Get("canvas")
	ret = canvas.HTMLCanvasElementFromJS(value)
	return ret
}

// interface: XRRay
type XRRay struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRRay) JSValue() js.Value {
	return _this.Value_JS
}

// XRRayFromJS is casting a js.Wrapper into XRRay.
func XRRayFromJS(value js.Wrapper) *XRRay {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRRay{}
	ret.Value_JS = input
	return ret
}

func NewXRRay(transform *XRRigidTransform) (_result *XRRay) {
	_klass := js.Global().Get("XRRay")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := transform.JSValue()
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRRay // javascript: XRRay _what_return_name
	)
	_converted = XRRayFromJS(_returned)
	_result = _converted
	return
}

// Origin returning attribute 'origin' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *XRRay) Origin() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("origin")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// Direction returning attribute 'direction' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *XRRay) Direction() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("direction")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// Matrix returning attribute 'matrix' with
// type javascript.Float32Array (idl: Float32Array).
func (_this *XRRay) Matrix() *javascript.Float32Array {
	var ret *javascript.Float32Array
	value := _this.Value_JS.Get("matrix")
	ret = javascript.Float32ArrayFromJS(value)
	return ret
}

// interface: XRReferenceSpace
type XRReferenceSpace struct {
	XRSpace
}

// XRReferenceSpaceFromJS is casting a js.Wrapper into XRReferenceSpace.
func XRReferenceSpaceFromJS(value js.Wrapper) *XRReferenceSpace {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRReferenceSpace{}
	ret.Value_JS = input
	return ret
}

// OriginOffset returning attribute 'originOffset' with
// type XRRigidTransform (idl: XRRigidTransform).
func (_this *XRReferenceSpace) OriginOffset() *XRRigidTransform {
	var ret *XRRigidTransform
	value := _this.Value_JS.Get("originOffset")
	ret = XRRigidTransformFromJS(value)
	return ret
}

// SetOriginOffset setting attribute 'originOffset' with
// type XRRigidTransform (idl: XRRigidTransform).
func (_this *XRReferenceSpace) SetOriginOffset(value *XRRigidTransform) {
	input := value.JSValue()
	_this.Value_JS.Set("originOffset", input)
}

// Onreset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRReferenceSpace) Onreset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnreset setting attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRReferenceSpace) SetOnreset(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onreset", input)
}

// interface: XRReferenceSpaceEvent
type XRReferenceSpaceEvent struct {
	domcore.Event
}

// XRReferenceSpaceEventFromJS is casting a js.Wrapper into XRReferenceSpaceEvent.
func XRReferenceSpaceEventFromJS(value js.Wrapper) *XRReferenceSpaceEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRReferenceSpaceEvent{}
	ret.Value_JS = input
	return ret
}

func NewXRReferenceSpaceEvent(_type string, eventInitDict *XRReferenceSpaceEventInit) (_result *XRReferenceSpaceEvent) {
	_klass := js.Global().Get("XRReferenceSpaceEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRReferenceSpaceEvent // javascript: XRReferenceSpaceEvent _what_return_name
	)
	_converted = XRReferenceSpaceEventFromJS(_returned)
	_result = _converted
	return
}

// ReferenceSpace returning attribute 'referenceSpace' with
// type XRReferenceSpace (idl: XRReferenceSpace).
func (_this *XRReferenceSpaceEvent) ReferenceSpace() *XRReferenceSpace {
	var ret *XRReferenceSpace
	value := _this.Value_JS.Get("referenceSpace")
	ret = XRReferenceSpaceFromJS(value)
	return ret
}

// Transform returning attribute 'transform' with
// type XRRigidTransform (idl: XRRigidTransform).
func (_this *XRReferenceSpaceEvent) Transform() *XRRigidTransform {
	var ret *XRRigidTransform
	value := _this.Value_JS.Get("transform")
	if value.Type() != js.TypeNull {
		ret = XRRigidTransformFromJS(value)
	}
	return ret
}

// interface: XRRenderState
type XRRenderState struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRRenderState) JSValue() js.Value {
	return _this.Value_JS
}

// XRRenderStateFromJS is casting a js.Wrapper into XRRenderState.
func XRRenderStateFromJS(value js.Wrapper) *XRRenderState {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRRenderState{}
	ret.Value_JS = input
	return ret
}

// DepthNear returning attribute 'depthNear' with
// type float64 (idl: double).
func (_this *XRRenderState) DepthNear() float64 {
	var ret float64
	value := _this.Value_JS.Get("depthNear")
	ret = (value).Float()
	return ret
}

// DepthFar returning attribute 'depthFar' with
// type float64 (idl: double).
func (_this *XRRenderState) DepthFar() float64 {
	var ret float64
	value := _this.Value_JS.Get("depthFar")
	ret = (value).Float()
	return ret
}

// BaseLayer returning attribute 'baseLayer' with
// type XRLayer (idl: XRLayer).
func (_this *XRRenderState) BaseLayer() *XRLayer {
	var ret *XRLayer
	value := _this.Value_JS.Get("baseLayer")
	if value.Type() != js.TypeNull {
		ret = XRLayerFromJS(value)
	}
	return ret
}

// interface: XRRigidTransform
type XRRigidTransform struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRRigidTransform) JSValue() js.Value {
	return _this.Value_JS
}

// XRRigidTransformFromJS is casting a js.Wrapper into XRRigidTransform.
func XRRigidTransformFromJS(value js.Wrapper) *XRRigidTransform {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRRigidTransform{}
	ret.Value_JS = input
	return ret
}

func NewXRRigidTransform(position *geometry.DOMPointInit, orientation *geometry.DOMPointInit) (_result *XRRigidTransform) {
	_klass := js.Global().Get("XRRigidTransform")
	var (
		_args [2]interface{}
		_end  int
	)
	if position != nil {
		_p0 := position.JSValue()
		_args[0] = _p0
		_end++
	}
	if orientation != nil {
		_p1 := orientation.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRRigidTransform // javascript: XRRigidTransform _what_return_name
	)
	_converted = XRRigidTransformFromJS(_returned)
	_result = _converted
	return
}

// Position returning attribute 'position' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *XRRigidTransform) Position() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("position")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// Orientation returning attribute 'orientation' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *XRRigidTransform) Orientation() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("orientation")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// Matrix returning attribute 'matrix' with
// type javascript.Float32Array (idl: Float32Array).
func (_this *XRRigidTransform) Matrix() *javascript.Float32Array {
	var ret *javascript.Float32Array
	value := _this.Value_JS.Get("matrix")
	ret = javascript.Float32ArrayFromJS(value)
	return ret
}

// interface: XRSession
type XRSession struct {
	domcore.EventTarget
}

// XRSessionFromJS is casting a js.Wrapper into XRSession.
func XRSessionFromJS(value js.Wrapper) *XRSession {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRSession{}
	ret.Value_JS = input
	return ret
}

// Mode returning attribute 'mode' with
// type XRSessionMode (idl: XRSessionMode).
func (_this *XRSession) Mode() XRSessionMode {
	var ret XRSessionMode
	value := _this.Value_JS.Get("mode")
	ret = XRSessionModeFromJS(value)
	return ret
}

// OutputContext returning attribute 'outputContext' with
// type XRPresentationContext (idl: XRPresentationContext).
func (_this *XRSession) OutputContext() *XRPresentationContext {
	var ret *XRPresentationContext
	value := _this.Value_JS.Get("outputContext")
	if value.Type() != js.TypeNull {
		ret = XRPresentationContextFromJS(value)
	}
	return ret
}

// EnvironmentBlendMode returning attribute 'environmentBlendMode' with
// type XREnvironmentBlendMode (idl: XREnvironmentBlendMode).
func (_this *XRSession) EnvironmentBlendMode() XREnvironmentBlendMode {
	var ret XREnvironmentBlendMode
	value := _this.Value_JS.Get("environmentBlendMode")
	ret = XREnvironmentBlendModeFromJS(value)
	return ret
}

// RenderState returning attribute 'renderState' with
// type XRRenderState (idl: XRRenderState).
func (_this *XRSession) RenderState() *XRRenderState {
	var ret *XRRenderState
	value := _this.Value_JS.Get("renderState")
	ret = XRRenderStateFromJS(value)
	return ret
}

// ViewerSpace returning attribute 'viewerSpace' with
// type XRSpace (idl: XRSpace).
func (_this *XRSession) ViewerSpace() *XRSpace {
	var ret *XRSpace
	value := _this.Value_JS.Get("viewerSpace")
	ret = XRSpaceFromJS(value)
	return ret
}

// Onblur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onblur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnblur setting attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnblur(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onblur", input)
}

// Onfocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onfocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnfocus setting attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnfocus(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onfocus", input)
}

// Onend returning attribute 'onend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnend setting attribute 'onend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onend", input)
}

// Onselect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onselect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselect setting attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnselect(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselect", input)
}

// Oninputsourceschange returning attribute 'oninputsourceschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Oninputsourceschange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninputsourceschange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninputsourceschange setting attribute 'oninputsourceschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOninputsourceschange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oninputsourceschange", input)
}

// Onselectstart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onselectstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselectstart setting attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnselectstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselectstart", input)
}

// Onselectend returning attribute 'onselectend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) Onselectend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselectend setting attribute 'onselectend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *XRSession) SetOnselectend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselectend", input)
}

func (_this *XRSession) UpdateRenderState(state *XRRenderStateInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if state != nil {
		_p0 := state.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("updateRenderState", _args[0:_end]...)
	return
}

func (_this *XRSession) RequestReferenceSpace(options *XRReferenceSpaceOptions) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := options.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestReferenceSpace", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *XRSession) GetInputSources() (_result *javascript.FrozenArray) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getInputSources", _args[0:_end]...)
	var (
		_converted *javascript.FrozenArray // javascript: FrozenArray _what_return_name
	)
	_converted = javascript.FrozenArrayFromJS(_returned)
	_result = _converted
	return
}

func (_this *XRSession) RequestAnimationFrame(callback *XRFrameRequestCallback) (_result int) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestAnimationFrame", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *XRSession) CancelAnimationFrame(handle int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelAnimationFrame", _args[0:_end]...)
	return
}

func (_this *XRSession) End() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("end", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: XRSessionEvent
type XRSessionEvent struct {
	domcore.Event
}

// XRSessionEventFromJS is casting a js.Wrapper into XRSessionEvent.
func XRSessionEventFromJS(value js.Wrapper) *XRSessionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRSessionEvent{}
	ret.Value_JS = input
	return ret
}

func NewXRSessionEvent(_type string, eventInitDict *XRSessionEventInit) (_result *XRSessionEvent) {
	_klass := js.Global().Get("XRSessionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRSessionEvent // javascript: XRSessionEvent _what_return_name
	)
	_converted = XRSessionEventFromJS(_returned)
	_result = _converted
	return
}

// Session returning attribute 'session' with
// type XRSession (idl: XRSession).
func (_this *XRSessionEvent) Session() *XRSession {
	var ret *XRSession
	value := _this.Value_JS.Get("session")
	ret = XRSessionFromJS(value)
	return ret
}

// interface: XRSpace
type XRSpace struct {
	domcore.EventTarget
}

// XRSpaceFromJS is casting a js.Wrapper into XRSpace.
func XRSpaceFromJS(value js.Wrapper) *XRSpace {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRSpace{}
	ret.Value_JS = input
	return ret
}

// interface: XRStationaryReferenceSpace
type XRStationaryReferenceSpace struct {
	XRReferenceSpace
}

// XRStationaryReferenceSpaceFromJS is casting a js.Wrapper into XRStationaryReferenceSpace.
func XRStationaryReferenceSpaceFromJS(value js.Wrapper) *XRStationaryReferenceSpace {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRStationaryReferenceSpace{}
	ret.Value_JS = input
	return ret
}

// Subtype returning attribute 'subtype' with
// type XRStationaryReferenceSpaceSubtype (idl: XRStationaryReferenceSpaceSubtype).
func (_this *XRStationaryReferenceSpace) Subtype() XRStationaryReferenceSpaceSubtype {
	var ret XRStationaryReferenceSpaceSubtype
	value := _this.Value_JS.Get("subtype")
	ret = XRStationaryReferenceSpaceSubtypeFromJS(value)
	return ret
}

// interface: XRUnboundedReferenceSpace
type XRUnboundedReferenceSpace struct {
	XRReferenceSpace
}

// XRUnboundedReferenceSpaceFromJS is casting a js.Wrapper into XRUnboundedReferenceSpace.
func XRUnboundedReferenceSpaceFromJS(value js.Wrapper) *XRUnboundedReferenceSpace {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRUnboundedReferenceSpace{}
	ret.Value_JS = input
	return ret
}

// interface: XRView
type XRView struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRView) JSValue() js.Value {
	return _this.Value_JS
}

// XRViewFromJS is casting a js.Wrapper into XRView.
func XRViewFromJS(value js.Wrapper) *XRView {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRView{}
	ret.Value_JS = input
	return ret
}

// Eye returning attribute 'eye' with
// type XREye (idl: XREye).
func (_this *XRView) Eye() XREye {
	var ret XREye
	value := _this.Value_JS.Get("eye")
	ret = XREyeFromJS(value)
	return ret
}

// ProjectionMatrix returning attribute 'projectionMatrix' with
// type javascript.Float32Array (idl: Float32Array).
func (_this *XRView) ProjectionMatrix() *javascript.Float32Array {
	var ret *javascript.Float32Array
	value := _this.Value_JS.Get("projectionMatrix")
	ret = javascript.Float32ArrayFromJS(value)
	return ret
}

// ViewMatrix returning attribute 'viewMatrix' with
// type javascript.Float32Array (idl: Float32Array).
func (_this *XRView) ViewMatrix() *javascript.Float32Array {
	var ret *javascript.Float32Array
	value := _this.Value_JS.Get("viewMatrix")
	ret = javascript.Float32ArrayFromJS(value)
	return ret
}

// Transform returning attribute 'transform' with
// type XRRigidTransform (idl: XRRigidTransform).
func (_this *XRView) Transform() *XRRigidTransform {
	var ret *XRRigidTransform
	value := _this.Value_JS.Get("transform")
	ret = XRRigidTransformFromJS(value)
	return ret
}

// interface: XRViewerPose
type XRViewerPose struct {
	XRPose
}

// XRViewerPoseFromJS is casting a js.Wrapper into XRViewerPose.
func XRViewerPoseFromJS(value js.Wrapper) *XRViewerPose {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRViewerPose{}
	ret.Value_JS = input
	return ret
}

// Views returning attribute 'views' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *XRViewerPose) Views() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("views")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// interface: XRViewport
type XRViewport struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *XRViewport) JSValue() js.Value {
	return _this.Value_JS
}

// XRViewportFromJS is casting a js.Wrapper into XRViewport.
func XRViewportFromJS(value js.Wrapper) *XRViewport {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRViewport{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type int (idl: long).
func (_this *XRViewport) X() int {
	var ret int
	value := _this.Value_JS.Get("x")
	ret = (value).Int()
	return ret
}

// Y returning attribute 'y' with
// type int (idl: long).
func (_this *XRViewport) Y() int {
	var ret int
	value := _this.Value_JS.Get("y")
	ret = (value).Int()
	return ret
}

// Width returning attribute 'width' with
// type int (idl: long).
func (_this *XRViewport) Width() int {
	var ret int
	value := _this.Value_JS.Get("width")
	ret = (value).Int()
	return ret
}

// Height returning attribute 'height' with
// type int (idl: long).
func (_this *XRViewport) Height() int {
	var ret int
	value := _this.Value_JS.Get("height")
	ret = (value).Int()
	return ret
}

// interface: XRWebGLLayer
type XRWebGLLayer struct {
	XRLayer
}

// XRWebGLLayerFromJS is casting a js.Wrapper into XRWebGLLayer.
func XRWebGLLayerFromJS(value js.Wrapper) *XRWebGLLayer {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &XRWebGLLayer{}
	ret.Value_JS = input
	return ret
}

func GetNativeFramebufferScaleFactor(session *XRSession) (_result float64) {
	_klass := js.Global().Get("XRWebGLLayer")
	_method := _klass.Get("getNativeFramebufferScaleFactor")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := session.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted float64 // javascript: double _what_return_name
	)
	_converted = (_returned).Float()
	_result = _converted
	return
}

func NewXRWebGLLayer(session *XRSession, context *Union, layerInit *XRWebGLLayerInit) (_result *XRWebGLLayer) {
	_klass := js.Global().Get("XRWebGLLayer")
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := session.JSValue()
	_args[0] = _p0
	_end++
	_p1 := context.JSValue()
	_args[1] = _p1
	_end++
	if layerInit != nil {
		_p2 := layerInit.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *XRWebGLLayer // javascript: XRWebGLLayer _what_return_name
	)
	_converted = XRWebGLLayerFromJS(_returned)
	_result = _converted
	return
}

// Context returning attribute 'context' with
// type Union (idl: Union).
func (_this *XRWebGLLayer) Context() *Union {
	var ret *Union
	value := _this.Value_JS.Get("context")
	ret = UnionFromJS(value)
	return ret
}

// Antialias returning attribute 'antialias' with
// type bool (idl: boolean).
func (_this *XRWebGLLayer) Antialias() bool {
	var ret bool
	value := _this.Value_JS.Get("antialias")
	ret = (value).Bool()
	return ret
}

// Depth returning attribute 'depth' with
// type bool (idl: boolean).
func (_this *XRWebGLLayer) Depth() bool {
	var ret bool
	value := _this.Value_JS.Get("depth")
	ret = (value).Bool()
	return ret
}

// Stencil returning attribute 'stencil' with
// type bool (idl: boolean).
func (_this *XRWebGLLayer) Stencil() bool {
	var ret bool
	value := _this.Value_JS.Get("stencil")
	ret = (value).Bool()
	return ret
}

// Alpha returning attribute 'alpha' with
// type bool (idl: boolean).
func (_this *XRWebGLLayer) Alpha() bool {
	var ret bool
	value := _this.Value_JS.Get("alpha")
	ret = (value).Bool()
	return ret
}

// Framebuffer returning attribute 'framebuffer' with
// type webgl.Framebuffer (idl: WebGLFramebuffer).
func (_this *XRWebGLLayer) Framebuffer() *webgl.Framebuffer {
	var ret *webgl.Framebuffer
	value := _this.Value_JS.Get("framebuffer")
	ret = webgl.FramebufferFromJS(value)
	return ret
}

// FramebufferWidth returning attribute 'framebufferWidth' with
// type uint (idl: unsigned long).
func (_this *XRWebGLLayer) FramebufferWidth() uint {
	var ret uint
	value := _this.Value_JS.Get("framebufferWidth")
	ret = (uint)((value).Int())
	return ret
}

// FramebufferHeight returning attribute 'framebufferHeight' with
// type uint (idl: unsigned long).
func (_this *XRWebGLLayer) FramebufferHeight() uint {
	var ret uint
	value := _this.Value_JS.Get("framebufferHeight")
	ret = (uint)((value).Int())
	return ret
}

func (_this *XRWebGLLayer) GetViewport(view *XRView) (_result *XRViewport) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := view.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getViewport", _args[0:_end]...)
	var (
		_converted *XRViewport // javascript: XRViewport _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = XRViewportFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *XRWebGLLayer) RequestViewportScaling(viewportScaleFactor float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := viewportScaleFactor
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("requestViewportScaling", _args[0:_end]...)
	return
}
