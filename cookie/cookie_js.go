// Code generated by webidl-bind. DO NOT EDIT.

package cookie

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// domcore.ExtendableEvent
// javascript.PromiseFinally
// javascript.PromiseVoid

// source idl files:
// cookie-store.idl
// promises.idl

// transform files:
// cookie-store.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: CookieMatchType
type CookieMatchType int

const (
	EqualsCookieMatchType CookieMatchType = iota
	StartsWithCookieMatchType
)

var cookieMatchTypeToWasmTable = []string{
	"equals", "starts-with",
}

var cookieMatchTypeFromWasmTable = map[string]CookieMatchType{
	"equals": EqualsCookieMatchType, "starts-with": StartsWithCookieMatchType,
}

// JSValue is converting this enum into a javascript object
func (this *CookieMatchType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CookieMatchType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(cookieMatchTypeToWasmTable) {
		return cookieMatchTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// CookieMatchTypeFromJS is converting a javascript value into
// a CookieMatchType enum value.
func CookieMatchTypeFromJS(value js.Value) CookieMatchType {
	key := value.String()
	conv, ok := cookieMatchTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CookieSameSite
type CookieSameSite int

const (
	StrictCookieSameSite CookieSameSite = iota
	LaxCookieSameSite
	UnrestrictedCookieSameSite
)

var cookieSameSiteToWasmTable = []string{
	"strict", "lax", "unrestricted",
}

var cookieSameSiteFromWasmTable = map[string]CookieSameSite{
	"strict": StrictCookieSameSite, "lax": LaxCookieSameSite, "unrestricted": UnrestrictedCookieSameSite,
}

// JSValue is converting this enum into a javascript object
func (this *CookieSameSite) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CookieSameSite) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(cookieSameSiteToWasmTable) {
		return cookieSameSiteToWasmTable[idx]
	}
	panic("unknown input value")
}

// CookieSameSiteFromJS is converting a javascript value into
// a CookieSameSite enum value.
func CookieSameSiteFromJS(value js.Value) CookieSameSite {
	key := value.String()
	conv, ok := cookieSameSiteFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromiseNilCookieListItemOnFulfilledFunc func(value *CookieListItem)

// PromiseNilCookieListItemOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseNilCookieListItemOnFulfilled js.Func

func PromiseNilCookieListItemOnFulfilledToJS(callback PromiseNilCookieListItemOnFulfilledFunc) *PromiseNilCookieListItemOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseNilCookieListItemOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *CookieListItem // javascript: CookieListItem value
		)
		_p0 = CookieListItemFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseNilCookieListItemOnFulfilledFromJS(_value js.Value) PromiseNilCookieListItemOnFulfilledFunc {
	return func(value *CookieListItem) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseNilCookieListItemOnRejectedFunc func(reason js.Value)

// PromiseNilCookieListItemOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseNilCookieListItemOnRejected js.Func

func PromiseNilCookieListItemOnRejectedToJS(callback PromiseNilCookieListItemOnRejectedFunc) *PromiseNilCookieListItemOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseNilCookieListItemOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseNilCookieListItemOnRejectedFromJS(_value js.Value) PromiseNilCookieListItemOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceCookieListItemOnFulfilledFunc func(value []*CookieListItem)

// PromiseSequenceCookieListItemOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceCookieListItemOnFulfilled js.Func

func PromiseSequenceCookieListItemOnFulfilledToJS(callback PromiseSequenceCookieListItemOnFulfilledFunc) *PromiseSequenceCookieListItemOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceCookieListItemOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*CookieListItem // javascript: sequence<CookieListItem> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*CookieListItem, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *CookieListItem
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = CookieListItemFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceCookieListItemOnFulfilledFromJS(_value js.Value) PromiseSequenceCookieListItemOnFulfilledFunc {
	return func(value []*CookieListItem) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceCookieListItemOnRejectedFunc func(reason js.Value)

// PromiseSequenceCookieListItemOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceCookieListItemOnRejected js.Func

func PromiseSequenceCookieListItemOnRejectedToJS(callback PromiseSequenceCookieListItemOnRejectedFunc) *PromiseSequenceCookieListItemOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceCookieListItemOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceCookieListItemOnRejectedFromJS(_value js.Value) PromiseSequenceCookieListItemOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceCookieStoreGetOptionsOnFulfilledFunc func(value []*CookieStoreGetOptions)

// PromiseSequenceCookieStoreGetOptionsOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceCookieStoreGetOptionsOnFulfilled js.Func

func PromiseSequenceCookieStoreGetOptionsOnFulfilledToJS(callback PromiseSequenceCookieStoreGetOptionsOnFulfilledFunc) *PromiseSequenceCookieStoreGetOptionsOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceCookieStoreGetOptionsOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*CookieStoreGetOptions // javascript: sequence<CookieStoreGetOptions> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*CookieStoreGetOptions, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *CookieStoreGetOptions
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = CookieStoreGetOptionsFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceCookieStoreGetOptionsOnFulfilledFromJS(_value js.Value) PromiseSequenceCookieStoreGetOptionsOnFulfilledFunc {
	return func(value []*CookieStoreGetOptions) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceCookieStoreGetOptionsOnRejectedFunc func(reason js.Value)

// PromiseSequenceCookieStoreGetOptionsOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceCookieStoreGetOptionsOnRejected js.Func

func PromiseSequenceCookieStoreGetOptionsOnRejectedToJS(callback PromiseSequenceCookieStoreGetOptionsOnRejectedFunc) *PromiseSequenceCookieStoreGetOptionsOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceCookieStoreGetOptionsOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceCookieStoreGetOptionsOnRejectedFromJS(_value js.Value) PromiseSequenceCookieStoreGetOptionsOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: CookieChangeEventInit
type CookieChangeEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Changed    []*CookieListItem
	Deleted    []*CookieListItem
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := js.Global().Get("Array").New(len(_this.Changed))
	for __idx3, __seq_in3 := range _this.Changed {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("changed", value3)
	value4 := js.Global().Get("Array").New(len(_this.Deleted))
	for __idx4, __seq_in4 := range _this.Deleted {
		__seq_out4 := __seq_in4.JSValue()
		value4.SetIndex(__idx4, __seq_out4)
	}
	out.Set("deleted", value4)
	return out
}

// CookieChangeEventInitFromJS is allocating a new
// CookieChangeEventInit object and copy all values in the value javascript object.
func CookieChangeEventInitFromJS(value js.Value) *CookieChangeEventInit {
	var out CookieChangeEventInit
	var (
		value0 bool              // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool              // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool              // javascript: boolean {composed Composed composed}
		value3 []*CookieListItem // javascript: sequence<CookieListItem> {changed Changed changed}
		value4 []*CookieListItem // javascript: sequence<CookieListItem> {deleted Deleted deleted}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	__length3 := value.Get("changed").Length()
	__array3 := make([]*CookieListItem, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *CookieListItem
		__seq_in3 := value.Get("changed").Index(__idx3)
		__seq_out3 = CookieListItemFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.Changed = value3
	__length4 := value.Get("deleted").Length()
	__array4 := make([]*CookieListItem, __length4, __length4)
	for __idx4 := 0; __idx4 < __length4; __idx4++ {
		var __seq_out4 *CookieListItem
		__seq_in4 := value.Get("deleted").Index(__idx4)
		__seq_out4 = CookieListItemFromJS(__seq_in4)
		__array4[__idx4] = __seq_out4
	}
	value4 = __array4
	out.Deleted = value4
	return &out
}

// dictionary: CookieListItem
type CookieListItem struct {
	Name     string
	Value    string
	Domain   *string
	Path     string
	Expires  *int
	Secure   bool
	SameSite CookieSameSite
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieListItem) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Value
	out.Set("value", value1)

	var value2 interface{}
	if _this.Domain != nil {
		value2 = *(_this.Domain)
	} else {
		value2 = nil
	}
	out.Set("domain", value2)
	value3 := _this.Path
	out.Set("path", value3)

	var value4 interface{}
	if _this.Expires != nil {
		value4 = *(_this.Expires)
	} else {
		value4 = nil
	}
	out.Set("expires", value4)
	value5 := _this.Secure
	out.Set("secure", value5)
	value6 := _this.SameSite.JSValue()
	out.Set("sameSite", value6)
	return out
}

// CookieListItemFromJS is allocating a new
// CookieListItem object and copy all values in the value javascript object.
func CookieListItemFromJS(value js.Value) *CookieListItem {
	var out CookieListItem
	var (
		value0 string         // javascript: USVString {name Name name}
		value1 string         // javascript: USVString {value Value value}
		value2 *string        // javascript: USVString {domain Domain domain}
		value3 string         // javascript: USVString {path Path path}
		value4 *int           // javascript: unsigned long long {expires Expires expires}
		value5 bool           // javascript: boolean {secure Secure secure}
		value6 CookieSameSite // javascript: CookieSameSite {sameSite SameSite sameSite}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("value")).String()
	out.Value = value1
	if value.Get("domain").Type() != js.TypeNull && value.Get("domain").Type() != js.TypeUndefined {
		__tmp := (value.Get("domain")).String()
		value2 = &__tmp
	}
	out.Domain = value2
	value3 = (value.Get("path")).String()
	out.Path = value3
	if value.Get("expires").Type() != js.TypeNull && value.Get("expires").Type() != js.TypeUndefined {
		__tmp := (value.Get("expires")).Int()
		value4 = &__tmp
	}
	out.Expires = value4
	value5 = (value.Get("secure")).Bool()
	out.Secure = value5
	value6 = CookieSameSiteFromJS(value.Get("sameSite"))
	out.SameSite = value6
	return &out
}

// dictionary: CookieStoreDeleteOptions
type CookieStoreDeleteOptions struct {
	Name   string
	Domain *string
	Path   string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieStoreDeleteOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)

	var value1 interface{}
	if _this.Domain != nil {
		value1 = *(_this.Domain)
	} else {
		value1 = nil
	}
	out.Set("domain", value1)
	value2 := _this.Path
	out.Set("path", value2)
	return out
}

// CookieStoreDeleteOptionsFromJS is allocating a new
// CookieStoreDeleteOptions object and copy all values in the value javascript object.
func CookieStoreDeleteOptionsFromJS(value js.Value) *CookieStoreDeleteOptions {
	var out CookieStoreDeleteOptions
	var (
		value0 string  // javascript: USVString {name Name name}
		value1 *string // javascript: USVString {domain Domain domain}
		value2 string  // javascript: USVString {path Path path}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	if value.Get("domain").Type() != js.TypeNull && value.Get("domain").Type() != js.TypeUndefined {
		__tmp := (value.Get("domain")).String()
		value1 = &__tmp
	}
	out.Domain = value1
	value2 = (value.Get("path")).String()
	out.Path = value2
	return &out
}

// dictionary: CookieStoreGetOptions
type CookieStoreGetOptions struct {
	Name      string
	Url       string
	MatchType CookieMatchType
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieStoreGetOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Url
	out.Set("url", value1)
	value2 := _this.MatchType.JSValue()
	out.Set("matchType", value2)
	return out
}

// CookieStoreGetOptionsFromJS is allocating a new
// CookieStoreGetOptions object and copy all values in the value javascript object.
func CookieStoreGetOptionsFromJS(value js.Value) *CookieStoreGetOptions {
	var out CookieStoreGetOptions
	var (
		value0 string          // javascript: USVString {name Name name}
		value1 string          // javascript: USVString {url Url url}
		value2 CookieMatchType // javascript: CookieMatchType {matchType MatchType matchType}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("url")).String()
	out.Url = value1
	value2 = CookieMatchTypeFromJS(value.Get("matchType"))
	out.MatchType = value2
	return &out
}

// dictionary: CookieStoreSetExtraOptions
type CookieStoreSetExtraOptions struct {
	Expires  *int
	Domain   *string
	Path     string
	Secure   bool
	SameSite CookieSameSite
	Name     string
	Value    string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieStoreSetExtraOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()

	var value0 interface{}
	if _this.Expires != nil {
		value0 = *(_this.Expires)
	} else {
		value0 = nil
	}
	out.Set("expires", value0)

	var value1 interface{}
	if _this.Domain != nil {
		value1 = *(_this.Domain)
	} else {
		value1 = nil
	}
	out.Set("domain", value1)
	value2 := _this.Path
	out.Set("path", value2)
	value3 := _this.Secure
	out.Set("secure", value3)
	value4 := _this.SameSite.JSValue()
	out.Set("sameSite", value4)
	value5 := _this.Name
	out.Set("name", value5)
	value6 := _this.Value
	out.Set("value", value6)
	return out
}

// CookieStoreSetExtraOptionsFromJS is allocating a new
// CookieStoreSetExtraOptions object and copy all values in the value javascript object.
func CookieStoreSetExtraOptionsFromJS(value js.Value) *CookieStoreSetExtraOptions {
	var out CookieStoreSetExtraOptions
	var (
		value0 *int           // javascript: unsigned long long {expires Expires expires}
		value1 *string        // javascript: USVString {domain Domain domain}
		value2 string         // javascript: USVString {path Path path}
		value3 bool           // javascript: boolean {secure Secure secure}
		value4 CookieSameSite // javascript: CookieSameSite {sameSite SameSite sameSite}
		value5 string         // javascript: USVString {name Name name}
		value6 string         // javascript: USVString {value Value value}
	)
	if value.Get("expires").Type() != js.TypeNull && value.Get("expires").Type() != js.TypeUndefined {
		__tmp := (value.Get("expires")).Int()
		value0 = &__tmp
	}
	out.Expires = value0
	if value.Get("domain").Type() != js.TypeNull && value.Get("domain").Type() != js.TypeUndefined {
		__tmp := (value.Get("domain")).String()
		value1 = &__tmp
	}
	out.Domain = value1
	value2 = (value.Get("path")).String()
	out.Path = value2
	value3 = (value.Get("secure")).Bool()
	out.Secure = value3
	value4 = CookieSameSiteFromJS(value.Get("sameSite"))
	out.SameSite = value4
	value5 = (value.Get("name")).String()
	out.Name = value5
	value6 = (value.Get("value")).String()
	out.Value = value6
	return &out
}

// dictionary: CookieStoreSetOptions
type CookieStoreSetOptions struct {
	Expires  *int
	Domain   *string
	Path     string
	Secure   bool
	SameSite CookieSameSite
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CookieStoreSetOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()

	var value0 interface{}
	if _this.Expires != nil {
		value0 = *(_this.Expires)
	} else {
		value0 = nil
	}
	out.Set("expires", value0)

	var value1 interface{}
	if _this.Domain != nil {
		value1 = *(_this.Domain)
	} else {
		value1 = nil
	}
	out.Set("domain", value1)
	value2 := _this.Path
	out.Set("path", value2)
	value3 := _this.Secure
	out.Set("secure", value3)
	value4 := _this.SameSite.JSValue()
	out.Set("sameSite", value4)
	return out
}

// CookieStoreSetOptionsFromJS is allocating a new
// CookieStoreSetOptions object and copy all values in the value javascript object.
func CookieStoreSetOptionsFromJS(value js.Value) *CookieStoreSetOptions {
	var out CookieStoreSetOptions
	var (
		value0 *int           // javascript: unsigned long long {expires Expires expires}
		value1 *string        // javascript: USVString {domain Domain domain}
		value2 string         // javascript: USVString {path Path path}
		value3 bool           // javascript: boolean {secure Secure secure}
		value4 CookieSameSite // javascript: CookieSameSite {sameSite SameSite sameSite}
	)
	if value.Get("expires").Type() != js.TypeNull && value.Get("expires").Type() != js.TypeUndefined {
		__tmp := (value.Get("expires")).Int()
		value0 = &__tmp
	}
	out.Expires = value0
	if value.Get("domain").Type() != js.TypeNull && value.Get("domain").Type() != js.TypeUndefined {
		__tmp := (value.Get("domain")).String()
		value1 = &__tmp
	}
	out.Domain = value1
	value2 = (value.Get("path")).String()
	out.Path = value2
	value3 = (value.Get("secure")).Bool()
	out.Secure = value3
	value4 = CookieSameSiteFromJS(value.Get("sameSite"))
	out.SameSite = value4
	return &out
}

// dictionary: ExtendableCookieChangeEventInit
type ExtendableCookieChangeEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Changed    []*CookieListItem
	Deleted    []*CookieListItem
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ExtendableCookieChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := js.Global().Get("Array").New(len(_this.Changed))
	for __idx3, __seq_in3 := range _this.Changed {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("changed", value3)
	value4 := js.Global().Get("Array").New(len(_this.Deleted))
	for __idx4, __seq_in4 := range _this.Deleted {
		__seq_out4 := __seq_in4.JSValue()
		value4.SetIndex(__idx4, __seq_out4)
	}
	out.Set("deleted", value4)
	return out
}

// ExtendableCookieChangeEventInitFromJS is allocating a new
// ExtendableCookieChangeEventInit object and copy all values in the value javascript object.
func ExtendableCookieChangeEventInitFromJS(value js.Value) *ExtendableCookieChangeEventInit {
	var out ExtendableCookieChangeEventInit
	var (
		value0 bool              // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool              // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool              // javascript: boolean {composed Composed composed}
		value3 []*CookieListItem // javascript: sequence<CookieListItem> {changed Changed changed}
		value4 []*CookieListItem // javascript: sequence<CookieListItem> {deleted Deleted deleted}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	__length3 := value.Get("changed").Length()
	__array3 := make([]*CookieListItem, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *CookieListItem
		__seq_in3 := value.Get("changed").Index(__idx3)
		__seq_out3 = CookieListItemFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.Changed = value3
	__length4 := value.Get("deleted").Length()
	__array4 := make([]*CookieListItem, __length4, __length4)
	for __idx4 := 0; __idx4 < __length4; __idx4++ {
		var __seq_out4 *CookieListItem
		__seq_in4 := value.Get("deleted").Index(__idx4)
		__seq_out4 = CookieListItemFromJS(__seq_in4)
		__array4[__idx4] = __seq_out4
	}
	value4 = __array4
	out.Deleted = value4
	return &out
}

// class: CookieChangeEvent
type CookieChangeEvent struct {
	domcore.Event
}

// CookieChangeEventFromJS is casting a js.Value into CookieChangeEvent.
func CookieChangeEventFromJS(value js.Value) *CookieChangeEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CookieChangeEvent{}
	ret.Value_JS = value
	return ret
}

// CookieChangeEventFromJS is casting from something that holds a js.Value into CookieChangeEvent.
func CookieChangeEventFromWrapper(input core.Wrapper) *CookieChangeEvent {
	return CookieChangeEventFromJS(input.JSValue())
}

func NewCookieChangeEvent(_type string, eventInitDict *CookieChangeEventInit) (_result *CookieChangeEvent) {
	_klass := js.Global().Get("CookieChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *CookieChangeEvent // javascript: CookieChangeEvent _what_return_name
	)
	_converted = CookieChangeEventFromJS(_returned)
	_result = _converted
	return
}

// Changed returning attribute 'changed' with
// type []CookieListItem (idl: sequence<CookieListItem>).
func (_this *CookieChangeEvent) Changed() []*CookieListItem {
	var ret []*CookieListItem
	value := _this.Value_JS.Get("changed")
	__length0 := value.Length()
	__array0 := make([]*CookieListItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *CookieListItem
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = CookieListItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// Deleted returning attribute 'deleted' with
// type []CookieListItem (idl: sequence<CookieListItem>).
func (_this *CookieChangeEvent) Deleted() []*CookieListItem {
	var ret []*CookieListItem
	value := _this.Value_JS.Get("deleted")
	__length0 := value.Length()
	__array0 := make([]*CookieListItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *CookieListItem
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = CookieListItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// class: CookieStore
type CookieStore struct {
	domcore.EventTarget
}

// CookieStoreFromJS is casting a js.Value into CookieStore.
func CookieStoreFromJS(value js.Value) *CookieStore {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CookieStore{}
	ret.Value_JS = value
	return ret
}

// CookieStoreFromJS is casting from something that holds a js.Value into CookieStore.
func CookieStoreFromWrapper(input core.Wrapper) *CookieStore {
	return CookieStoreFromJS(input.JSValue())
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *CookieStore) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: CookieChangeEvent
func eventFuncCookieStore_CookieChangeEvent(listener func(event *CookieChangeEvent, target *CookieStore)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *CookieChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = CookieChangeEventFromJS(value)
		src := CookieStoreFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *CookieStore) AddEventChange(listener func(event *CookieChangeEvent, currentTarget *CookieStore)) js.Func {
	cb := eventFuncCookieStore_CookieChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *CookieStore) SetOnChange(listener func(event *CookieChangeEvent, currentTarget *CookieStore)) js.Func {
	cb := eventFuncCookieStore_CookieChangeEvent(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

func (_this *CookieStore) Get(name string) (_result *PromiseNilCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *PromiseNilCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) Get2(options *CookieStoreGetOptions) (_result *PromiseNilCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *PromiseNilCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) GetAll(name string) (_result *PromiseSequenceCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAll", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) GetAll2(options *CookieStoreGetOptions) (_result *PromiseSequenceCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getAll", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) Set(name string, value string, options *CookieStoreSetOptions) (_result *javascript.PromiseVoid) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("set", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) Set2(options *CookieStoreSetExtraOptions) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := options.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("set", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) Delete(name string) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("delete", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) Delete2(options *CookieStoreDeleteOptions) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := options.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("delete", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) SubscribeToChanges(subscriptions []*CookieStoreGetOptions) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(subscriptions))
	for __idx0, __seq_in0 := range subscriptions {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("subscribeToChanges", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CookieStore) GetChangeSubscriptions() (_result *PromiseSequenceCookieStoreGetOptions) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getChangeSubscriptions", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieStoreGetOptions // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieStoreGetOptionsFromJS(_returned)
	_result = _converted
	return
}

// class: ExtendableCookieChangeEvent
type ExtendableCookieChangeEvent struct {
	domcore.ExtendableEvent
}

// ExtendableCookieChangeEventFromJS is casting a js.Value into ExtendableCookieChangeEvent.
func ExtendableCookieChangeEventFromJS(value js.Value) *ExtendableCookieChangeEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ExtendableCookieChangeEvent{}
	ret.Value_JS = value
	return ret
}

// ExtendableCookieChangeEventFromJS is casting from something that holds a js.Value into ExtendableCookieChangeEvent.
func ExtendableCookieChangeEventFromWrapper(input core.Wrapper) *ExtendableCookieChangeEvent {
	return ExtendableCookieChangeEventFromJS(input.JSValue())
}

func NewExtendableCookieChangeEvent(_type string, eventInitDict *ExtendableCookieChangeEventInit) (_result *ExtendableCookieChangeEvent) {
	_klass := js.Global().Get("ExtendableCookieChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ExtendableCookieChangeEvent // javascript: ExtendableCookieChangeEvent _what_return_name
	)
	_converted = ExtendableCookieChangeEventFromJS(_returned)
	_result = _converted
	return
}

// Changed returning attribute 'changed' with
// type []CookieListItem (idl: sequence<CookieListItem>).
func (_this *ExtendableCookieChangeEvent) Changed() []*CookieListItem {
	var ret []*CookieListItem
	value := _this.Value_JS.Get("changed")
	__length0 := value.Length()
	__array0 := make([]*CookieListItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *CookieListItem
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = CookieListItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// Deleted returning attribute 'deleted' with
// type []CookieListItem (idl: sequence<CookieListItem>).
func (_this *ExtendableCookieChangeEvent) Deleted() []*CookieListItem {
	var ret []*CookieListItem
	value := _this.Value_JS.Get("deleted")
	__length0 := value.Length()
	__array0 := make([]*CookieListItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *CookieListItem
		__seq_in0 := value.Index(__idx0)
		__seq_out0 = CookieListItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	ret = __array0
	return ret
}

// class: Promise
type PromiseNilCookieListItem struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseNilCookieListItem) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseNilCookieListItemFromJS is casting a js.Value into PromiseNilCookieListItem.
func PromiseNilCookieListItemFromJS(value js.Value) *PromiseNilCookieListItem {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseNilCookieListItem{}
	ret.Value_JS = value
	return ret
}

// PromiseNilCookieListItemFromJS is casting from something that holds a js.Value into PromiseNilCookieListItem.
func PromiseNilCookieListItemFromWrapper(input core.Wrapper) *PromiseNilCookieListItem {
	return PromiseNilCookieListItemFromJS(input.JSValue())
}

func (_this *PromiseNilCookieListItem) Then(onFulfilled *PromiseNilCookieListItemOnFulfilled, onRejected *PromiseNilCookieListItemOnRejected) (_result *PromiseNilCookieListItem) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseNilCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseNilCookieListItem) Catch(onRejected *PromiseNilCookieListItemOnRejected) (_result *PromiseNilCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseNilCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseNilCookieListItem) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseNilCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseNilCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseNilCookieListItemFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceCookieListItem struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseSequenceCookieListItem) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseSequenceCookieListItemFromJS is casting a js.Value into PromiseSequenceCookieListItem.
func PromiseSequenceCookieListItemFromJS(value js.Value) *PromiseSequenceCookieListItem {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceCookieListItem{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceCookieListItemFromJS is casting from something that holds a js.Value into PromiseSequenceCookieListItem.
func PromiseSequenceCookieListItemFromWrapper(input core.Wrapper) *PromiseSequenceCookieListItem {
	return PromiseSequenceCookieListItemFromJS(input.JSValue())
}

func (_this *PromiseSequenceCookieListItem) Then(onFulfilled *PromiseSequenceCookieListItemOnFulfilled, onRejected *PromiseSequenceCookieListItemOnRejected) (_result *PromiseSequenceCookieListItem) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceCookieListItem) Catch(onRejected *PromiseSequenceCookieListItemOnRejected) (_result *PromiseSequenceCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieListItemFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceCookieListItem) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceCookieListItem) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieListItem // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieListItemFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceCookieStoreGetOptions struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseSequenceCookieStoreGetOptions) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseSequenceCookieStoreGetOptionsFromJS is casting a js.Value into PromiseSequenceCookieStoreGetOptions.
func PromiseSequenceCookieStoreGetOptionsFromJS(value js.Value) *PromiseSequenceCookieStoreGetOptions {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceCookieStoreGetOptions{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceCookieStoreGetOptionsFromJS is casting from something that holds a js.Value into PromiseSequenceCookieStoreGetOptions.
func PromiseSequenceCookieStoreGetOptionsFromWrapper(input core.Wrapper) *PromiseSequenceCookieStoreGetOptions {
	return PromiseSequenceCookieStoreGetOptionsFromJS(input.JSValue())
}

func (_this *PromiseSequenceCookieStoreGetOptions) Then(onFulfilled *PromiseSequenceCookieStoreGetOptionsOnFulfilled, onRejected *PromiseSequenceCookieStoreGetOptionsOnRejected) (_result *PromiseSequenceCookieStoreGetOptions) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieStoreGetOptions // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieStoreGetOptionsFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceCookieStoreGetOptions) Catch(onRejected *PromiseSequenceCookieStoreGetOptionsOnRejected) (_result *PromiseSequenceCookieStoreGetOptions) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieStoreGetOptions // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieStoreGetOptionsFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceCookieStoreGetOptions) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceCookieStoreGetOptions) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceCookieStoreGetOptions // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceCookieStoreGetOptionsFromJS(_returned)
	_result = _converted
	return
}
