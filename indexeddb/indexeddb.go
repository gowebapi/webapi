// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package indexeddb

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.DOMException
// domcore.DOMStringList
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.PromiseFinally

// source idl files:
// IndexedDB.idl
// promises.idl

// transform files:
// IndexedDB.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: IDBCursorDirection
type IDBCursorDirection int

const (
	NextIDBCursorDirection IDBCursorDirection = iota
	NextuniqueIDBCursorDirection
	PrevIDBCursorDirection
	PrevuniqueIDBCursorDirection
)

var iDBCursorDirectionToWasmTable = []string{
	"next", "nextunique", "prev", "prevunique",
}

var iDBCursorDirectionFromWasmTable = map[string]IDBCursorDirection{
	"next": NextIDBCursorDirection, "nextunique": NextuniqueIDBCursorDirection, "prev": PrevIDBCursorDirection, "prevunique": PrevuniqueIDBCursorDirection,
}

// JSValue is converting this enum into a javascript object
func (this *IDBCursorDirection) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this IDBCursorDirection) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(iDBCursorDirectionToWasmTable) {
		return iDBCursorDirectionToWasmTable[idx]
	}
	panic("unknown input value")
}

// IDBCursorDirectionFromJS is converting a javascript value into
// a IDBCursorDirection enum value.
func IDBCursorDirectionFromJS(value js.Value) IDBCursorDirection {
	key := value.String()
	conv, ok := iDBCursorDirectionFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: IDBRequestReadyState
type IDBRequestReadyState int

const (
	PendingIDBRequestReadyState IDBRequestReadyState = iota
	DoneIDBRequestReadyState
)

var iDBRequestReadyStateToWasmTable = []string{
	"pending", "done",
}

var iDBRequestReadyStateFromWasmTable = map[string]IDBRequestReadyState{
	"pending": PendingIDBRequestReadyState, "done": DoneIDBRequestReadyState,
}

// JSValue is converting this enum into a javascript object
func (this *IDBRequestReadyState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this IDBRequestReadyState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(iDBRequestReadyStateToWasmTable) {
		return iDBRequestReadyStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// IDBRequestReadyStateFromJS is converting a javascript value into
// a IDBRequestReadyState enum value.
func IDBRequestReadyStateFromJS(value js.Value) IDBRequestReadyState {
	key := value.String()
	conv, ok := iDBRequestReadyStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: IDBTransactionMode
type IDBTransactionMode int

const (
	ReadonlyIDBTransactionMode IDBTransactionMode = iota
	ReadwriteIDBTransactionMode
	VersionchangeIDBTransactionMode
)

var iDBTransactionModeToWasmTable = []string{
	"readonly", "readwrite", "versionchange",
}

var iDBTransactionModeFromWasmTable = map[string]IDBTransactionMode{
	"readonly": ReadonlyIDBTransactionMode, "readwrite": ReadwriteIDBTransactionMode, "versionchange": VersionchangeIDBTransactionMode,
}

// JSValue is converting this enum into a javascript object
func (this *IDBTransactionMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this IDBTransactionMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(iDBTransactionModeToWasmTable) {
		return iDBTransactionModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// IDBTransactionModeFromJS is converting a javascript value into
// a IDBTransactionMode enum value.
func IDBTransactionModeFromJS(value js.Value) IDBTransactionMode {
	key := value.String()
	conv, ok := iDBTransactionModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceIDBDatabaseInfoOnFulfilledFunc func(value []*IDBDatabaseInfo)

// PromiseSequenceIDBDatabaseInfoOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceIDBDatabaseInfoOnFulfilled js.Func

func PromiseSequenceIDBDatabaseInfoOnFulfilledToJS(callback PromiseSequenceIDBDatabaseInfoOnFulfilledFunc) *PromiseSequenceIDBDatabaseInfoOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceIDBDatabaseInfoOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*IDBDatabaseInfo // javascript: sequence<IDBDatabaseInfo> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*IDBDatabaseInfo, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *IDBDatabaseInfo
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = IDBDatabaseInfoFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceIDBDatabaseInfoOnFulfilledFromJS(_value js.Value) PromiseSequenceIDBDatabaseInfoOnFulfilledFunc {
	return func(value []*IDBDatabaseInfo) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceIDBDatabaseInfoOnRejectedFunc func(reason js.Value)

// PromiseSequenceIDBDatabaseInfoOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceIDBDatabaseInfoOnRejected js.Func

func PromiseSequenceIDBDatabaseInfoOnRejectedToJS(callback PromiseSequenceIDBDatabaseInfoOnRejectedFunc) *PromiseSequenceIDBDatabaseInfoOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceIDBDatabaseInfoOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceIDBDatabaseInfoOnRejectedFromJS(_value js.Value) PromiseSequenceIDBDatabaseInfoOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: IDBDatabaseInfo
type IDBDatabaseInfo struct {
	Name    string
	Version int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IDBDatabaseInfo) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Version
	out.Set("version", value1)
	return out
}

// IDBDatabaseInfoFromJS is allocating a new
// IDBDatabaseInfo object and copy all values in the value javascript object.
func IDBDatabaseInfoFromJS(value js.Value) *IDBDatabaseInfo {
	var out IDBDatabaseInfo
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 int    // javascript: unsigned long long {version Version version}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("version")).Int()
	out.Version = value1
	return &out
}

// dictionary: IDBIndexParameters
type IDBIndexParameters struct {
	Unique     bool
	MultiEntry bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IDBIndexParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Unique
	out.Set("unique", value0)
	value1 := _this.MultiEntry
	out.Set("multiEntry", value1)
	return out
}

// IDBIndexParametersFromJS is allocating a new
// IDBIndexParameters object and copy all values in the value javascript object.
func IDBIndexParametersFromJS(value js.Value) *IDBIndexParameters {
	var out IDBIndexParameters
	var (
		value0 bool // javascript: boolean {unique Unique unique}
		value1 bool // javascript: boolean {multiEntry MultiEntry multiEntry}
	)
	value0 = (value.Get("unique")).Bool()
	out.Unique = value0
	value1 = (value.Get("multiEntry")).Bool()
	out.MultiEntry = value1
	return &out
}

// dictionary: IDBObjectStoreParameters
type IDBObjectStoreParameters struct {
	KeyPath       *Union
	AutoIncrement bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IDBObjectStoreParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.KeyPath.JSValue()
	out.Set("keyPath", value0)
	value1 := _this.AutoIncrement
	out.Set("autoIncrement", value1)
	return out
}

// IDBObjectStoreParametersFromJS is allocating a new
// IDBObjectStoreParameters object and copy all values in the value javascript object.
func IDBObjectStoreParametersFromJS(value js.Value) *IDBObjectStoreParameters {
	var out IDBObjectStoreParameters
	var (
		value0 *Union // javascript: Union {keyPath KeyPath keyPath}
		value1 bool   // javascript: boolean {autoIncrement AutoIncrement autoIncrement}
	)
	if value.Get("keyPath").Type() != js.TypeNull && value.Get("keyPath").Type() != js.TypeUndefined {
		value0 = UnionFromJS(value.Get("keyPath"))
	}
	out.KeyPath = value0
	value1 = (value.Get("autoIncrement")).Bool()
	out.AutoIncrement = value1
	return &out
}

// dictionary: IDBVersionChangeEventInit
type IDBVersionChangeEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	OldVersion int
	NewVersion *int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IDBVersionChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.OldVersion
	out.Set("oldVersion", value3)

	var value4 interface{}
	if _this.NewVersion != nil {
		value4 = *(_this.NewVersion)
	} else {
		value4 = nil
	}
	out.Set("newVersion", value4)
	return out
}

// IDBVersionChangeEventInitFromJS is allocating a new
// IDBVersionChangeEventInit object and copy all values in the value javascript object.
func IDBVersionChangeEventInitFromJS(value js.Value) *IDBVersionChangeEventInit {
	var out IDBVersionChangeEventInit
	var (
		value0 bool // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool // javascript: boolean {composed Composed composed}
		value3 int  // javascript: unsigned long long {oldVersion OldVersion oldVersion}
		value4 *int // javascript: unsigned long long {newVersion NewVersion newVersion}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = (value.Get("oldVersion")).Int()
	out.OldVersion = value3
	if value.Get("newVersion").Type() != js.TypeNull && value.Get("newVersion").Type() != js.TypeUndefined {
		__tmp := (value.Get("newVersion")).Int()
		value4 = &__tmp
	}
	out.NewVersion = value4
	return &out
}

// class: IDBCursor
type IDBCursor struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *IDBCursor) JSValue() js.Value {
	return _this.Value_JS
}

// IDBCursorFromJS is casting a js.Value into IDBCursor.
func IDBCursorFromJS(value js.Value) *IDBCursor {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBCursor{}
	ret.Value_JS = value
	return ret
}

// IDBCursorFromJS is casting from something that holds a js.Value into IDBCursor.
func IDBCursorFromWrapper(input core.Wrapper) *IDBCursor {
	return IDBCursorFromJS(input.JSValue())
}

// Source returning attribute 'source' with
// type Union (idl: Union).
func (_this *IDBCursor) Source() *Union {
	var ret *Union
	value := _this.Value_JS.Get("source")
	ret = UnionFromJS(value)
	return ret
}

// Direction returning attribute 'direction' with
// type IDBCursorDirection (idl: IDBCursorDirection).
func (_this *IDBCursor) Direction() IDBCursorDirection {
	var ret IDBCursorDirection
	value := _this.Value_JS.Get("direction")
	ret = IDBCursorDirectionFromJS(value)
	return ret
}

// Key returning attribute 'key' with
// type Any (idl: any).
func (_this *IDBCursor) Key() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("key")
	ret = value
	return ret
}

// PrimaryKey returning attribute 'primaryKey' with
// type Any (idl: any).
func (_this *IDBCursor) PrimaryKey() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("primaryKey")
	ret = value
	return ret
}

func (_this *IDBCursor) Advance(count uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := count
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("advance", _args[0:_end]...)
	return
}

func (_this *IDBCursor) Continue(key interface{}) {
	var (
		_args [1]interface{}
		_end  int
	)
	if key != nil {
		_p0 := key
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("continue", _args[0:_end]...)
	return
}

func (_this *IDBCursor) ContinuePrimaryKey(key interface{}, primaryKey interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_p1 := primaryKey
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("continuePrimaryKey", _args[0:_end]...)
	return
}

func (_this *IDBCursor) Update(value interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("update", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBCursor) Delete() (_result *IDBRequest) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("delete", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

// class: IDBCursorWithValue
type IDBCursorWithValue struct {
	IDBCursor
}

// IDBCursorWithValueFromJS is casting a js.Value into IDBCursorWithValue.
func IDBCursorWithValueFromJS(value js.Value) *IDBCursorWithValue {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBCursorWithValue{}
	ret.Value_JS = value
	return ret
}

// IDBCursorWithValueFromJS is casting from something that holds a js.Value into IDBCursorWithValue.
func IDBCursorWithValueFromWrapper(input core.Wrapper) *IDBCursorWithValue {
	return IDBCursorWithValueFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type Any (idl: any).
func (_this *IDBCursorWithValue) Value() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("value")
	ret = value
	return ret
}

// class: IDBDatabase
type IDBDatabase struct {
	domcore.EventTarget
}

// IDBDatabaseFromJS is casting a js.Value into IDBDatabase.
func IDBDatabaseFromJS(value js.Value) *IDBDatabase {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBDatabase{}
	ret.Value_JS = value
	return ret
}

// IDBDatabaseFromJS is casting from something that holds a js.Value into IDBDatabase.
func IDBDatabaseFromWrapper(input core.Wrapper) *IDBDatabase {
	return IDBDatabaseFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *IDBDatabase) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// Version returning attribute 'version' with
// type int (idl: unsigned long long).
func (_this *IDBDatabase) Version() int {
	var ret int
	value := _this.Value_JS.Get("version")
	ret = (value).Int()
	return ret
}

// ObjectStoreNames returning attribute 'objectStoreNames' with
// type domcore.DOMStringList (idl: DOMStringList).
func (_this *IDBDatabase) ObjectStoreNames() *domcore.DOMStringList {
	var ret *domcore.DOMStringList
	value := _this.Value_JS.Get("objectStoreNames")
	ret = domcore.DOMStringListFromJS(value)
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBDatabase) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBDatabase) OnClose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBDatabase) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVersionChange returning attribute 'onversionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBDatabase) OnVersionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onversionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncIDBDatabase_domcore_Event(listener func(event *domcore.Event, target *IDBDatabase)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := IDBDatabaseFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) AddEventAbort(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) SetOnAbort(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// AddClose is adding doing AddEventListener for 'Close' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) AddEventClose(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "close", cb)
	return cb
}

// SetOnClose is assigning a function to 'onclose'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) SetOnClose(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Set("onclose", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) AddEventError(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) SetOnError(listener func(event *domcore.Event, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// event attribute: IDBVersionChangeEvent
func eventFuncIDBDatabase_IDBVersionChangeEvent(listener func(event *IDBVersionChangeEvent, target *IDBDatabase)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *IDBVersionChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = IDBVersionChangeEventFromJS(value)
		src := IDBDatabaseFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddVersionChange is adding doing AddEventListener for 'VersionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) AddEventVersionChange(listener func(event *IDBVersionChangeEvent, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_IDBVersionChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "versionchange", cb)
	return cb
}

// SetOnVersionChange is assigning a function to 'onversionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBDatabase) SetOnVersionChange(listener func(event *IDBVersionChangeEvent, currentTarget *IDBDatabase)) js.Func {
	cb := eventFuncIDBDatabase_IDBVersionChangeEvent(listener)
	_this.Value_JS.Set("onversionchange", cb)
	return cb
}

func (_this *IDBDatabase) Transaction(storeNames *Union, mode *IDBTransactionMode) (_result *IDBTransaction) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := storeNames.JSValue()
	_args[0] = _p0
	_end++
	if mode != nil {
		_p1 := mode.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("transaction", _args[0:_end]...)
	var (
		_converted *IDBTransaction // javascript: IDBTransaction _what_return_name
	)
	_converted = IDBTransactionFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBDatabase) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *IDBDatabase) CreateObjectStore(name string, options *IDBObjectStoreParameters) (_result *IDBObjectStore) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createObjectStore", _args[0:_end]...)
	var (
		_converted *IDBObjectStore // javascript: IDBObjectStore _what_return_name
	)
	_converted = IDBObjectStoreFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBDatabase) DeleteObjectStore(name string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteObjectStore", _args[0:_end]...)
	return
}

// class: IDBFactory
type IDBFactory struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *IDBFactory) JSValue() js.Value {
	return _this.Value_JS
}

// IDBFactoryFromJS is casting a js.Value into IDBFactory.
func IDBFactoryFromJS(value js.Value) *IDBFactory {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBFactory{}
	ret.Value_JS = value
	return ret
}

// IDBFactoryFromJS is casting from something that holds a js.Value into IDBFactory.
func IDBFactoryFromWrapper(input core.Wrapper) *IDBFactory {
	return IDBFactoryFromJS(input.JSValue())
}

func (_this *IDBFactory) Open(name string, version *int) (_result *IDBOpenDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	if version != nil {

		var _p1 interface{}
		if version != nil {
			_p1 = *(version)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *IDBOpenDBRequest // javascript: IDBOpenDBRequest _what_return_name
	)
	_converted = IDBOpenDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBFactory) DeleteDatabase(name string) (_result *IDBOpenDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("deleteDatabase", _args[0:_end]...)
	var (
		_converted *IDBOpenDBRequest // javascript: IDBOpenDBRequest _what_return_name
	)
	_converted = IDBOpenDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBFactory) Databases() (_result *PromiseSequenceIDBDatabaseInfo) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("databases", _args[0:_end]...)
	var (
		_converted *PromiseSequenceIDBDatabaseInfo // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceIDBDatabaseInfoFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBFactory) Cmp(first interface{}, second interface{}) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := first
	_args[0] = _p0
	_end++
	_p1 := second
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("cmp", _args[0:_end]...)
	var (
		_converted int // javascript: short _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

// class: IDBIndex
type IDBIndex struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *IDBIndex) JSValue() js.Value {
	return _this.Value_JS
}

// IDBIndexFromJS is casting a js.Value into IDBIndex.
func IDBIndexFromJS(value js.Value) *IDBIndex {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBIndex{}
	ret.Value_JS = value
	return ret
}

// IDBIndexFromJS is casting from something that holds a js.Value into IDBIndex.
func IDBIndexFromWrapper(input core.Wrapper) *IDBIndex {
	return IDBIndexFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *IDBIndex) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *IDBIndex) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// ObjectStore returning attribute 'objectStore' with
// type IDBObjectStore (idl: IDBObjectStore).
func (_this *IDBIndex) ObjectStore() *IDBObjectStore {
	var ret *IDBObjectStore
	value := _this.Value_JS.Get("objectStore")
	ret = IDBObjectStoreFromJS(value)
	return ret
}

// KeyPath returning attribute 'keyPath' with
// type Any (idl: any).
func (_this *IDBIndex) KeyPath() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("keyPath")
	ret = value
	return ret
}

// MultiEntry returning attribute 'multiEntry' with
// type bool (idl: boolean).
func (_this *IDBIndex) MultiEntry() bool {
	var ret bool
	value := _this.Value_JS.Get("multiEntry")
	ret = (value).Bool()
	return ret
}

// Unique returning attribute 'unique' with
// type bool (idl: boolean).
func (_this *IDBIndex) Unique() bool {
	var ret bool
	value := _this.Value_JS.Get("unique")
	ret = (value).Bool()
	return ret
}

func (_this *IDBIndex) Get(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) GetKey(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getKey", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) GetAll(query interface{}, count *uint) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if count != nil {

		var _p1 interface{}
		if count != nil {
			_p1 = *(count)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getAll", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) GetAllKeys(query interface{}, count *uint) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if count != nil {

		var _p1 interface{}
		if count != nil {
			_p1 = *(count)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getAllKeys", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) Count(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("count", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) OpenCursor(query interface{}, direction *IDBCursorDirection) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if direction != nil {
		_p1 := direction.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("openCursor", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBIndex) OpenKeyCursor(query interface{}, direction *IDBCursorDirection) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if direction != nil {
		_p1 := direction.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("openKeyCursor", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

// class: IDBKeyRange
type IDBKeyRange struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *IDBKeyRange) JSValue() js.Value {
	return _this.Value_JS
}

// IDBKeyRangeFromJS is casting a js.Value into IDBKeyRange.
func IDBKeyRangeFromJS(value js.Value) *IDBKeyRange {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBKeyRange{}
	ret.Value_JS = value
	return ret
}

// IDBKeyRangeFromJS is casting from something that holds a js.Value into IDBKeyRange.
func IDBKeyRangeFromWrapper(input core.Wrapper) *IDBKeyRange {
	return IDBKeyRangeFromJS(input.JSValue())
}

func Only(value interface{}) (_result *IDBKeyRange) {
	_klass := js.Global().Get("IDBKeyRange")
	_method := _klass.Get("only")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *IDBKeyRange // javascript: IDBKeyRange _what_return_name
	)
	_converted = IDBKeyRangeFromJS(_returned)
	_result = _converted
	return
}

func LowerBound(lower interface{}, open *bool) (_result *IDBKeyRange) {
	_klass := js.Global().Get("IDBKeyRange")
	_method := _klass.Get("lowerBound")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := lower
	_args[0] = _p0
	_end++
	if open != nil {

		var _p1 interface{}
		if open != nil {
			_p1 = *(open)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *IDBKeyRange // javascript: IDBKeyRange _what_return_name
	)
	_converted = IDBKeyRangeFromJS(_returned)
	_result = _converted
	return
}

func UpperBound(upper interface{}, open *bool) (_result *IDBKeyRange) {
	_klass := js.Global().Get("IDBKeyRange")
	_method := _klass.Get("upperBound")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := upper
	_args[0] = _p0
	_end++
	if open != nil {

		var _p1 interface{}
		if open != nil {
			_p1 = *(open)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *IDBKeyRange // javascript: IDBKeyRange _what_return_name
	)
	_converted = IDBKeyRangeFromJS(_returned)
	_result = _converted
	return
}

func Bound(lower interface{}, upper interface{}, lowerOpen *bool, upperOpen *bool) (_result *IDBKeyRange) {
	_klass := js.Global().Get("IDBKeyRange")
	_method := _klass.Get("bound")
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := lower
	_args[0] = _p0
	_end++
	_p1 := upper
	_args[1] = _p1
	_end++
	if lowerOpen != nil {

		var _p2 interface{}
		if lowerOpen != nil {
			_p2 = *(lowerOpen)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	if upperOpen != nil {

		var _p3 interface{}
		if upperOpen != nil {
			_p3 = *(upperOpen)
		} else {
			_p3 = nil
		}
		_args[3] = _p3
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *IDBKeyRange // javascript: IDBKeyRange _what_return_name
	)
	_converted = IDBKeyRangeFromJS(_returned)
	_result = _converted
	return
}

// Lower returning attribute 'lower' with
// type Any (idl: any).
func (_this *IDBKeyRange) Lower() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("lower")
	ret = value
	return ret
}

// Upper returning attribute 'upper' with
// type Any (idl: any).
func (_this *IDBKeyRange) Upper() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("upper")
	ret = value
	return ret
}

// LowerOpen returning attribute 'lowerOpen' with
// type bool (idl: boolean).
func (_this *IDBKeyRange) LowerOpen() bool {
	var ret bool
	value := _this.Value_JS.Get("lowerOpen")
	ret = (value).Bool()
	return ret
}

// UpperOpen returning attribute 'upperOpen' with
// type bool (idl: boolean).
func (_this *IDBKeyRange) UpperOpen() bool {
	var ret bool
	value := _this.Value_JS.Get("upperOpen")
	ret = (value).Bool()
	return ret
}

func (_this *IDBKeyRange) Includes(key interface{}) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("includes", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: IDBObjectStore
type IDBObjectStore struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *IDBObjectStore) JSValue() js.Value {
	return _this.Value_JS
}

// IDBObjectStoreFromJS is casting a js.Value into IDBObjectStore.
func IDBObjectStoreFromJS(value js.Value) *IDBObjectStore {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBObjectStore{}
	ret.Value_JS = value
	return ret
}

// IDBObjectStoreFromJS is casting from something that holds a js.Value into IDBObjectStore.
func IDBObjectStoreFromWrapper(input core.Wrapper) *IDBObjectStore {
	return IDBObjectStoreFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *IDBObjectStore) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *IDBObjectStore) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// KeyPath returning attribute 'keyPath' with
// type Any (idl: any).
func (_this *IDBObjectStore) KeyPath() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("keyPath")
	ret = value
	return ret
}

// IndexNames returning attribute 'indexNames' with
// type domcore.DOMStringList (idl: DOMStringList).
func (_this *IDBObjectStore) IndexNames() *domcore.DOMStringList {
	var ret *domcore.DOMStringList
	value := _this.Value_JS.Get("indexNames")
	ret = domcore.DOMStringListFromJS(value)
	return ret
}

// Transaction returning attribute 'transaction' with
// type IDBTransaction (idl: IDBTransaction).
func (_this *IDBObjectStore) Transaction() *IDBTransaction {
	var ret *IDBTransaction
	value := _this.Value_JS.Get("transaction")
	ret = IDBTransactionFromJS(value)
	return ret
}

// AutoIncrement returning attribute 'autoIncrement' with
// type bool (idl: boolean).
func (_this *IDBObjectStore) AutoIncrement() bool {
	var ret bool
	value := _this.Value_JS.Get("autoIncrement")
	ret = (value).Bool()
	return ret
}

func (_this *IDBObjectStore) Put(value interface{}, key interface{}) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	if key != nil {
		_p1 := key
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("put", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Add(value interface{}, key interface{}) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	if key != nil {
		_p1 := key
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("add", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Delete(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("delete", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Clear() (_result *IDBRequest) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("clear", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Get(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) GetKey(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getKey", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) GetAll(query interface{}, count *uint) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if count != nil {

		var _p1 interface{}
		if count != nil {
			_p1 = *(count)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getAll", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) GetAllKeys(query interface{}, count *uint) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if count != nil {

		var _p1 interface{}
		if count != nil {
			_p1 = *(count)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getAllKeys", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Count(query interface{}) (_result *IDBRequest) {
	var (
		_args [1]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("count", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) OpenCursor(query interface{}, direction *IDBCursorDirection) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if direction != nil {
		_p1 := direction.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("openCursor", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) OpenKeyCursor(query interface{}, direction *IDBCursorDirection) (_result *IDBRequest) {
	var (
		_args [2]interface{}
		_end  int
	)
	if query != nil {
		_p0 := query
		_args[0] = _p0
		_end++
	}
	if direction != nil {
		_p1 := direction.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("openKeyCursor", _args[0:_end]...)
	var (
		_converted *IDBRequest // javascript: IDBRequest _what_return_name
	)
	_converted = IDBRequestFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) Index(name string) (_result *IDBIndex) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("index", _args[0:_end]...)
	var (
		_converted *IDBIndex // javascript: IDBIndex _what_return_name
	)
	_converted = IDBIndexFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) CreateIndex(name string, keyPath *Union, options *IDBIndexParameters) (_result *IDBIndex) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := keyPath.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createIndex", _args[0:_end]...)
	var (
		_converted *IDBIndex // javascript: IDBIndex _what_return_name
	)
	_converted = IDBIndexFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBObjectStore) DeleteIndex(name string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteIndex", _args[0:_end]...)
	return
}

// class: IDBOpenDBRequest
type IDBOpenDBRequest struct {
	IDBRequest
}

// IDBOpenDBRequestFromJS is casting a js.Value into IDBOpenDBRequest.
func IDBOpenDBRequestFromJS(value js.Value) *IDBOpenDBRequest {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBOpenDBRequest{}
	ret.Value_JS = value
	return ret
}

// IDBOpenDBRequestFromJS is casting from something that holds a js.Value into IDBOpenDBRequest.
func IDBOpenDBRequestFromWrapper(input core.Wrapper) *IDBOpenDBRequest {
	return IDBOpenDBRequestFromJS(input.JSValue())
}

// OnBlocked returning attribute 'onblocked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBOpenDBRequest) OnBlocked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblocked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUpgradeNeeded returning attribute 'onupgradeneeded' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBOpenDBRequest) OnUpgradeNeeded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onupgradeneeded")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncIDBOpenDBRequest_domcore_Event(listener func(event *domcore.Event, target *IDBOpenDBRequest)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := IDBOpenDBRequestFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBlocked is adding doing AddEventListener for 'Blocked' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBOpenDBRequest) AddEventBlocked(listener func(event *domcore.Event, currentTarget *IDBOpenDBRequest)) js.Func {
	cb := eventFuncIDBOpenDBRequest_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "blocked", cb)
	return cb
}

// SetOnBlocked is assigning a function to 'onblocked'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBOpenDBRequest) SetOnBlocked(listener func(event *domcore.Event, currentTarget *IDBOpenDBRequest)) js.Func {
	cb := eventFuncIDBOpenDBRequest_domcore_Event(listener)
	_this.Value_JS.Set("onblocked", cb)
	return cb
}

// AddUpgradeNeeded is adding doing AddEventListener for 'UpgradeNeeded' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBOpenDBRequest) AddEventUpgradeNeeded(listener func(event *domcore.Event, currentTarget *IDBOpenDBRequest)) js.Func {
	cb := eventFuncIDBOpenDBRequest_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "upgradeneeded", cb)
	return cb
}

// SetOnUpgradeNeeded is assigning a function to 'onupgradeneeded'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBOpenDBRequest) SetOnUpgradeNeeded(listener func(event *domcore.Event, currentTarget *IDBOpenDBRequest)) js.Func {
	cb := eventFuncIDBOpenDBRequest_domcore_Event(listener)
	_this.Value_JS.Set("onupgradeneeded", cb)
	return cb
}

// class: IDBRequest
type IDBRequest struct {
	domcore.EventTarget
}

// IDBRequestFromJS is casting a js.Value into IDBRequest.
func IDBRequestFromJS(value js.Value) *IDBRequest {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBRequest{}
	ret.Value_JS = value
	return ret
}

// IDBRequestFromJS is casting from something that holds a js.Value into IDBRequest.
func IDBRequestFromWrapper(input core.Wrapper) *IDBRequest {
	return IDBRequestFromJS(input.JSValue())
}

// Result returning attribute 'result' with
// type Any (idl: any).
func (_this *IDBRequest) Result() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("result")
	ret = value
	return ret
}

// Error returning attribute 'error' with
// type domcore.DOMException (idl: DOMException).
func (_this *IDBRequest) Error() *domcore.DOMException {
	var ret *domcore.DOMException
	value := _this.Value_JS.Get("error")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.DOMExceptionFromJS(value)
	}
	return ret
}

// Source returning attribute 'source' with
// type Union (idl: Union).
func (_this *IDBRequest) Source() *Union {
	var ret *Union
	value := _this.Value_JS.Get("source")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = UnionFromJS(value)
	}
	return ret
}

// Transaction returning attribute 'transaction' with
// type IDBTransaction (idl: IDBTransaction).
func (_this *IDBRequest) Transaction() *IDBTransaction {
	var ret *IDBTransaction
	value := _this.Value_JS.Get("transaction")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = IDBTransactionFromJS(value)
	}
	return ret
}

// ReadyState returning attribute 'readyState' with
// type IDBRequestReadyState (idl: IDBRequestReadyState).
func (_this *IDBRequest) ReadyState() IDBRequestReadyState {
	var ret IDBRequestReadyState
	value := _this.Value_JS.Get("readyState")
	ret = IDBRequestReadyStateFromJS(value)
	return ret
}

// OnSuccess returning attribute 'onsuccess' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBRequest) OnSuccess() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuccess")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBRequest) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncIDBRequest_domcore_Event(listener func(event *domcore.Event, target *IDBRequest)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := IDBRequestFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBRequest) AddEventError(listener func(event *domcore.Event, currentTarget *IDBRequest)) js.Func {
	cb := eventFuncIDBRequest_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBRequest) SetOnError(listener func(event *domcore.Event, currentTarget *IDBRequest)) js.Func {
	cb := eventFuncIDBRequest_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddSuccess is adding doing AddEventListener for 'Success' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBRequest) AddEventSuccess(listener func(event *domcore.Event, currentTarget *IDBRequest)) js.Func {
	cb := eventFuncIDBRequest_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "success", cb)
	return cb
}

// SetOnSuccess is assigning a function to 'onsuccess'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBRequest) SetOnSuccess(listener func(event *domcore.Event, currentTarget *IDBRequest)) js.Func {
	cb := eventFuncIDBRequest_domcore_Event(listener)
	_this.Value_JS.Set("onsuccess", cb)
	return cb
}

// class: IDBTransaction
type IDBTransaction struct {
	domcore.EventTarget
}

// IDBTransactionFromJS is casting a js.Value into IDBTransaction.
func IDBTransactionFromJS(value js.Value) *IDBTransaction {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBTransaction{}
	ret.Value_JS = value
	return ret
}

// IDBTransactionFromJS is casting from something that holds a js.Value into IDBTransaction.
func IDBTransactionFromWrapper(input core.Wrapper) *IDBTransaction {
	return IDBTransactionFromJS(input.JSValue())
}

// ObjectStoreNames returning attribute 'objectStoreNames' with
// type domcore.DOMStringList (idl: DOMStringList).
func (_this *IDBTransaction) ObjectStoreNames() *domcore.DOMStringList {
	var ret *domcore.DOMStringList
	value := _this.Value_JS.Get("objectStoreNames")
	ret = domcore.DOMStringListFromJS(value)
	return ret
}

// Mode returning attribute 'mode' with
// type IDBTransactionMode (idl: IDBTransactionMode).
func (_this *IDBTransaction) Mode() IDBTransactionMode {
	var ret IDBTransactionMode
	value := _this.Value_JS.Get("mode")
	ret = IDBTransactionModeFromJS(value)
	return ret
}

// Db returning attribute 'db' with
// type IDBDatabase (idl: IDBDatabase).
func (_this *IDBTransaction) Db() *IDBDatabase {
	var ret *IDBDatabase
	value := _this.Value_JS.Get("db")
	ret = IDBDatabaseFromJS(value)
	return ret
}

// Error returning attribute 'error' with
// type domcore.DOMException (idl: DOMException).
func (_this *IDBTransaction) Error() *domcore.DOMException {
	var ret *domcore.DOMException
	value := _this.Value_JS.Get("error")
	ret = domcore.DOMExceptionFromJS(value)
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBTransaction) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnComplete returning attribute 'oncomplete' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBTransaction) OnComplete() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncomplete")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *IDBTransaction) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncIDBTransaction_domcore_Event(listener func(event *domcore.Event, target *IDBTransaction)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := IDBTransactionFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) AddEventAbort(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) SetOnAbort(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// AddComplete is adding doing AddEventListener for 'Complete' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) AddEventComplete(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "complete", cb)
	return cb
}

// SetOnComplete is assigning a function to 'oncomplete'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) SetOnComplete(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Set("oncomplete", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) AddEventError(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *IDBTransaction) SetOnError(listener func(event *domcore.Event, currentTarget *IDBTransaction)) js.Func {
	cb := eventFuncIDBTransaction_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

func (_this *IDBTransaction) ObjectStore(name string) (_result *IDBObjectStore) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("objectStore", _args[0:_end]...)
	var (
		_converted *IDBObjectStore // javascript: IDBObjectStore _what_return_name
	)
	_converted = IDBObjectStoreFromJS(_returned)
	_result = _converted
	return
}

func (_this *IDBTransaction) Commit() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("commit", _args[0:_end]...)
	return
}

func (_this *IDBTransaction) Abort() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("abort", _args[0:_end]...)
	return
}

// class: IDBVersionChangeEvent
type IDBVersionChangeEvent struct {
	domcore.Event
}

// IDBVersionChangeEventFromJS is casting a js.Value into IDBVersionChangeEvent.
func IDBVersionChangeEventFromJS(value js.Value) *IDBVersionChangeEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IDBVersionChangeEvent{}
	ret.Value_JS = value
	return ret
}

// IDBVersionChangeEventFromJS is casting from something that holds a js.Value into IDBVersionChangeEvent.
func IDBVersionChangeEventFromWrapper(input core.Wrapper) *IDBVersionChangeEvent {
	return IDBVersionChangeEventFromJS(input.JSValue())
}

func NewIDBVersionChangeEvent(_type string, eventInitDict *IDBVersionChangeEventInit) (_result *IDBVersionChangeEvent) {
	_klass := js.Global().Get("IDBVersionChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *IDBVersionChangeEvent // javascript: IDBVersionChangeEvent _what_return_name
	)
	_converted = IDBVersionChangeEventFromJS(_returned)
	_result = _converted
	return
}

// OldVersion returning attribute 'oldVersion' with
// type int (idl: unsigned long long).
func (_this *IDBVersionChangeEvent) OldVersion() int {
	var ret int
	value := _this.Value_JS.Get("oldVersion")
	ret = (value).Int()
	return ret
}

// NewVersion returning attribute 'newVersion' with
// type int (idl: unsigned long long).
func (_this *IDBVersionChangeEvent) NewVersion() *int {
	var ret *int
	value := _this.Value_JS.Get("newVersion")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Int()
		ret = &__tmp
	}
	return ret
}

// class: Promise
type PromiseSequenceIDBDatabaseInfo struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseSequenceIDBDatabaseInfo) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseSequenceIDBDatabaseInfoFromJS is casting a js.Value into PromiseSequenceIDBDatabaseInfo.
func PromiseSequenceIDBDatabaseInfoFromJS(value js.Value) *PromiseSequenceIDBDatabaseInfo {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceIDBDatabaseInfo{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceIDBDatabaseInfoFromJS is casting from something that holds a js.Value into PromiseSequenceIDBDatabaseInfo.
func PromiseSequenceIDBDatabaseInfoFromWrapper(input core.Wrapper) *PromiseSequenceIDBDatabaseInfo {
	return PromiseSequenceIDBDatabaseInfoFromJS(input.JSValue())
}

func (_this *PromiseSequenceIDBDatabaseInfo) Then(onFulfilled *PromiseSequenceIDBDatabaseInfoOnFulfilled, onRejected *PromiseSequenceIDBDatabaseInfoOnRejected) (_result *PromiseSequenceIDBDatabaseInfo) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceIDBDatabaseInfo // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceIDBDatabaseInfoFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceIDBDatabaseInfo) Catch(onRejected *PromiseSequenceIDBDatabaseInfoOnRejected) (_result *PromiseSequenceIDBDatabaseInfo) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceIDBDatabaseInfo // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceIDBDatabaseInfoFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceIDBDatabaseInfo) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceIDBDatabaseInfo) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceIDBDatabaseInfo // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceIDBDatabaseInfoFromJS(_returned)
	_result = _converted
	return
}
