// Code generated by webidl-bind. DO NOT EDIT.

package transitions

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
)

// using following types:
// domcore.Event

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: TransitionEventInit
type TransitionEventInit struct {
	Bubbles       bool
	Cancelable    bool
	Composed      bool
	PropertyName  string
	ElapsedTime   float64
	PseudoElement string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *TransitionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.PropertyName
	out.Set("propertyName", value3)
	value4 := _this.ElapsedTime
	out.Set("elapsedTime", value4)
	value5 := _this.PseudoElement
	out.Set("pseudoElement", value5)
	return out
}

// TransitionEventInitFromJS is allocating a new
// TransitionEventInit object and copy all values from
// input javascript object
func TransitionEventInitFromJS(value js.Wrapper) *TransitionEventInit {
	input := value.JSValue()
	var out TransitionEventInit
	var (
		value0 bool    // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool    // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool    // javascript: boolean {composed Composed composed}
		value3 string  // javascript: DOMString {propertyName PropertyName propertyName}
		value4 float64 // javascript: double {elapsedTime ElapsedTime elapsedTime}
		value5 string  // javascript: DOMString {pseudoElement PseudoElement pseudoElement}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("propertyName")).String()
	out.PropertyName = value3
	value4 = (input.Get("elapsedTime")).Float()
	out.ElapsedTime = value4
	value5 = (input.Get("pseudoElement")).String()
	out.PseudoElement = value5
	return &out
}

// interface: TransitionEvent
type TransitionEvent struct {
	domcore.Event
}

// TransitionEventFromJS is casting a js.Wrapper into TransitionEvent.
func TransitionEventFromJS(value js.Wrapper) *TransitionEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TransitionEvent{}
	ret.Value_JS = input
	return ret
}

func NewTransitionEvent(_type string, transitionEventInitDict *TransitionEventInit) (_result *TransitionEvent) {
	_klass := js.Global().Get("TransitionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if transitionEventInitDict != nil {
		_p1 := transitionEventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *TransitionEvent // javascript: TransitionEvent _what_return_name
	)
	_converted = TransitionEventFromJS(_returned)
	_result = _converted
	return
}

// PropertyName returning attribute 'propertyName' with
// type string (idl: DOMString).
func (_this *TransitionEvent) PropertyName() string {
	var ret string
	value := _this.Value_JS.Get("propertyName")
	ret = (value).String()
	return ret
}

// ElapsedTime returning attribute 'elapsedTime' with
// type float64 (idl: double).
func (_this *TransitionEvent) ElapsedTime() float64 {
	var ret float64
	value := _this.Value_JS.Get("elapsedTime")
	ret = (value).Float()
	return ret
}

// PseudoElement returning attribute 'pseudoElement' with
// type string (idl: DOMString).
func (_this *TransitionEvent) PseudoElement() string {
	var ret string
	value := _this.Value_JS.Get("pseudoElement")
	ret = (value).String()
	return ret
}
