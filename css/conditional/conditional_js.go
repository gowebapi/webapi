// Code generated by webidl-bind. DO NOT EDIT.

package conditional

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/css/cssom"
)

// using following types:
// cssom.CSSGroupingRule
// cssom.MediaList

// source idl files:
// css-conditional.idl

// transform files:
// css-conditional.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// class: CSSConditionRule
type CSSConditionRule struct {
	cssom.CSSGroupingRule
}

// CSSConditionRuleFromJS is casting a js.Value into CSSConditionRule.
func CSSConditionRuleFromJS(value js.Value) *CSSConditionRule {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CSSConditionRule{}
	ret.Value_JS = value
	return ret
}

// CSSConditionRuleFromJS is casting from something that holds a js.Value into CSSConditionRule.
func CSSConditionRuleFromWrapper(input core.Wrapper) *CSSConditionRule {
	return CSSConditionRuleFromJS(input.JSValue())
}

// ConditionText returning attribute 'conditionText' with
// type string (idl: DOMString).
func (_this *CSSConditionRule) ConditionText() string {
	var ret string
	value := _this.Value_JS.Get("conditionText")
	ret = (value).String()
	return ret
}

// SetConditionText setting attribute 'conditionText' with
// type string (idl: DOMString).
func (_this *CSSConditionRule) SetConditionText(value string) {
	input := value
	_this.Value_JS.Set("conditionText", input)
}

// class: CSSMediaRule
type CSSMediaRule struct {
	CSSConditionRule
}

// CSSMediaRuleFromJS is casting a js.Value into CSSMediaRule.
func CSSMediaRuleFromJS(value js.Value) *CSSMediaRule {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CSSMediaRule{}
	ret.Value_JS = value
	return ret
}

// CSSMediaRuleFromJS is casting from something that holds a js.Value into CSSMediaRule.
func CSSMediaRuleFromWrapper(input core.Wrapper) *CSSMediaRule {
	return CSSMediaRuleFromJS(input.JSValue())
}

// Media returning attribute 'media' with
// type cssom.MediaList (idl: MediaList).
func (_this *CSSMediaRule) Media() *cssom.MediaList {
	var ret *cssom.MediaList
	value := _this.Value_JS.Get("media")
	ret = cssom.MediaListFromJS(value)
	return ret
}

// class: CSSSupportsRule
type CSSSupportsRule struct {
	CSSConditionRule
}

// CSSSupportsRuleFromJS is casting a js.Value into CSSSupportsRule.
func CSSSupportsRuleFromJS(value js.Value) *CSSSupportsRule {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CSSSupportsRule{}
	ret.Value_JS = value
	return ret
}

// CSSSupportsRuleFromJS is casting from something that holds a js.Value into CSSSupportsRule.
func CSSSupportsRuleFromWrapper(input core.Wrapper) *CSSSupportsRule {
	return CSSSupportsRuleFromJS(input.JSValue())
}
