// Code generated by webidl-bind. DO NOT EDIT.

package layout

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/webidl"
	"github.com/gowebapi/webapi/worklets"
)

// using following types:
// javascript.FrozenArray
// javascript.PromiseFinally
// typedom.StylePropertyMapReadOnly
// webidl.VoidFunction
// worklets.WorkletGlobalScope

// source idl files:
// css-layout-api.idl
// promises.idl

// transform files:
// css-layout-api.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: BlockFragmentationType
type BlockFragmentationType int

const (
	NoneBlockFragmentationType BlockFragmentationType = iota
	PageBlockFragmentationType
	ColumnBlockFragmentationType
	RegionBlockFragmentationType
)

var blockFragmentationTypeToWasmTable = []string{
	"none", "page", "column", "region",
}

var blockFragmentationTypeFromWasmTable = map[string]BlockFragmentationType{
	"none": NoneBlockFragmentationType, "page": PageBlockFragmentationType, "column": ColumnBlockFragmentationType, "region": RegionBlockFragmentationType,
}

// JSValue is converting this enum into a javascript object
func (this *BlockFragmentationType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this BlockFragmentationType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(blockFragmentationTypeToWasmTable) {
		return blockFragmentationTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// BlockFragmentationTypeFromJS is converting a javascript value into
// a BlockFragmentationType enum value.
func BlockFragmentationTypeFromJS(value js.Value) BlockFragmentationType {
	key := value.String()
	conv, ok := blockFragmentationTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: BreakType
type BreakType int

const (
	NoneBreakType BreakType = iota
	LineBreakType
	ColumnBreakType
	PageBreakType
	RegionBreakType
)

var breakTypeToWasmTable = []string{
	"none", "line", "column", "page", "region",
}

var breakTypeFromWasmTable = map[string]BreakType{
	"none": NoneBreakType, "line": LineBreakType, "column": ColumnBreakType, "page": PageBreakType, "region": RegionBreakType,
}

// JSValue is converting this enum into a javascript object
func (this *BreakType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this BreakType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(breakTypeToWasmTable) {
		return breakTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// BreakTypeFromJS is converting a javascript value into
// a BreakType enum value.
func BreakTypeFromJS(value js.Value) BreakType {
	key := value.String()
	conv, ok := breakTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ChildDisplayType
type ChildDisplayType int

const (
	BlockChildDisplayType ChildDisplayType = iota
	NormalChildDisplayType
)

var childDisplayTypeToWasmTable = []string{
	"block", "normal",
}

var childDisplayTypeFromWasmTable = map[string]ChildDisplayType{
	"block": BlockChildDisplayType, "normal": NormalChildDisplayType,
}

// JSValue is converting this enum into a javascript object
func (this *ChildDisplayType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ChildDisplayType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(childDisplayTypeToWasmTable) {
		return childDisplayTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// ChildDisplayTypeFromJS is converting a javascript value into
// a ChildDisplayType enum value.
func ChildDisplayTypeFromJS(value js.Value) ChildDisplayType {
	key := value.String()
	conv, ok := childDisplayTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: LayoutSizingMode
type LayoutSizingMode int

const (
	BlockLikeLayoutSizingMode LayoutSizingMode = iota
	ManualLayoutSizingMode
)

var layoutSizingModeToWasmTable = []string{
	"block-like", "manual",
}

var layoutSizingModeFromWasmTable = map[string]LayoutSizingMode{
	"block-like": BlockLikeLayoutSizingMode, "manual": ManualLayoutSizingMode,
}

// JSValue is converting this enum into a javascript object
func (this *LayoutSizingMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this LayoutSizingMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(layoutSizingModeToWasmTable) {
		return layoutSizingModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// LayoutSizingModeFromJS is converting a javascript value into
// a LayoutSizingMode enum value.
func LayoutSizingModeFromJS(value js.Value) LayoutSizingMode {
	key := value.String()
	conv, ok := layoutSizingModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromiseIntrinsicSizesOnFulfilledFunc func(value *IntrinsicSizes)

// PromiseIntrinsicSizesOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseIntrinsicSizesOnFulfilled js.Func

func PromiseIntrinsicSizesOnFulfilledToJS(callback PromiseIntrinsicSizesOnFulfilledFunc) *PromiseIntrinsicSizesOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseIntrinsicSizesOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *IntrinsicSizes // javascript: IntrinsicSizes value
		)
		_p0 = IntrinsicSizesFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseIntrinsicSizesOnFulfilledFromJS(_value js.Value) PromiseIntrinsicSizesOnFulfilledFunc {
	return func(value *IntrinsicSizes) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseIntrinsicSizesOnRejectedFunc func(reason js.Value)

// PromiseIntrinsicSizesOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseIntrinsicSizesOnRejected js.Func

func PromiseIntrinsicSizesOnRejectedToJS(callback PromiseIntrinsicSizesOnRejectedFunc) *PromiseIntrinsicSizesOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseIntrinsicSizesOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseIntrinsicSizesOnRejectedFromJS(_value js.Value) PromiseIntrinsicSizesOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseLayoutFragmentOnFulfilledFunc func(value *LayoutFragment)

// PromiseLayoutFragmentOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseLayoutFragmentOnFulfilled js.Func

func PromiseLayoutFragmentOnFulfilledToJS(callback PromiseLayoutFragmentOnFulfilledFunc) *PromiseLayoutFragmentOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseLayoutFragmentOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *LayoutFragment // javascript: LayoutFragment value
		)
		_p0 = LayoutFragmentFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseLayoutFragmentOnFulfilledFromJS(_value js.Value) PromiseLayoutFragmentOnFulfilledFunc {
	return func(value *LayoutFragment) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseLayoutFragmentOnRejectedFunc func(reason js.Value)

// PromiseLayoutFragmentOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseLayoutFragmentOnRejected js.Func

func PromiseLayoutFragmentOnRejectedToJS(callback PromiseLayoutFragmentOnRejectedFunc) *PromiseLayoutFragmentOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseLayoutFragmentOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseLayoutFragmentOnRejectedFromJS(_value js.Value) PromiseLayoutFragmentOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: BreakTokenOptions
type BreakTokenOptions struct {
	ChildBreakTokens []*ChildBreakToken
	Data             js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *BreakTokenOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.ChildBreakTokens))
	for __idx0, __seq_in0 := range _this.ChildBreakTokens {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("childBreakTokens", value0)
	value1 := _this.Data
	out.Set("data", value1)
	return out
}

// BreakTokenOptionsFromJS is allocating a new
// BreakTokenOptions object and copy all values in the value javascript object.
func BreakTokenOptionsFromJS(value js.Value) *BreakTokenOptions {
	var out BreakTokenOptions
	var (
		value0 []*ChildBreakToken // javascript: sequence<ChildBreakToken> {childBreakTokens ChildBreakTokens childBreakTokens}
		value1 js.Value           // javascript: any {data Data data}
	)
	__length0 := value.Get("childBreakTokens").Length()
	__array0 := make([]*ChildBreakToken, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *ChildBreakToken
		__seq_in0 := value.Get("childBreakTokens").Index(__idx0)
		__seq_out0 = ChildBreakTokenFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.ChildBreakTokens = value0
	value1 = value.Get("data")
	out.Data = value1
	return &out
}

// dictionary: FragmentResultOptions
type FragmentResultOptions struct {
	InlineSize     float64
	BlockSize      float64
	AutoBlockSize  float64
	ChildFragments []*LayoutFragment
	Data           js.Value
	BreakToken     *BreakTokenOptions
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FragmentResultOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.InlineSize
	out.Set("inlineSize", value0)
	value1 := _this.BlockSize
	out.Set("blockSize", value1)
	value2 := _this.AutoBlockSize
	out.Set("autoBlockSize", value2)
	value3 := js.Global().Get("Array").New(len(_this.ChildFragments))
	for __idx3, __seq_in3 := range _this.ChildFragments {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("childFragments", value3)
	value4 := _this.Data
	out.Set("data", value4)
	value5 := _this.BreakToken.JSValue()
	out.Set("breakToken", value5)
	return out
}

// FragmentResultOptionsFromJS is allocating a new
// FragmentResultOptions object and copy all values in the value javascript object.
func FragmentResultOptionsFromJS(value js.Value) *FragmentResultOptions {
	var out FragmentResultOptions
	var (
		value0 float64            // javascript: double {inlineSize InlineSize inlineSize}
		value1 float64            // javascript: double {blockSize BlockSize blockSize}
		value2 float64            // javascript: double {autoBlockSize AutoBlockSize autoBlockSize}
		value3 []*LayoutFragment  // javascript: sequence<LayoutFragment> {childFragments ChildFragments childFragments}
		value4 js.Value           // javascript: any {data Data data}
		value5 *BreakTokenOptions // javascript: BreakTokenOptions {breakToken BreakToken breakToken}
	)
	value0 = (value.Get("inlineSize")).Float()
	out.InlineSize = value0
	value1 = (value.Get("blockSize")).Float()
	out.BlockSize = value1
	value2 = (value.Get("autoBlockSize")).Float()
	out.AutoBlockSize = value2
	__length3 := value.Get("childFragments").Length()
	__array3 := make([]*LayoutFragment, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *LayoutFragment
		__seq_in3 := value.Get("childFragments").Index(__idx3)
		__seq_out3 = LayoutFragmentFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.ChildFragments = value3
	value4 = value.Get("data")
	out.Data = value4
	value5 = BreakTokenOptionsFromJS(value.Get("breakToken"))
	out.BreakToken = value5
	return &out
}

// dictionary: IntrinsicSizesResultOptions
type IntrinsicSizesResultOptions struct {
	MaxContentSize float64
	MinContentSize float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IntrinsicSizesResultOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.MaxContentSize
	out.Set("maxContentSize", value0)
	value1 := _this.MinContentSize
	out.Set("minContentSize", value1)
	return out
}

// IntrinsicSizesResultOptionsFromJS is allocating a new
// IntrinsicSizesResultOptions object and copy all values in the value javascript object.
func IntrinsicSizesResultOptionsFromJS(value js.Value) *IntrinsicSizesResultOptions {
	var out IntrinsicSizesResultOptions
	var (
		value0 float64 // javascript: double {maxContentSize MaxContentSize maxContentSize}
		value1 float64 // javascript: double {minContentSize MinContentSize minContentSize}
	)
	value0 = (value.Get("maxContentSize")).Float()
	out.MaxContentSize = value0
	value1 = (value.Get("minContentSize")).Float()
	out.MinContentSize = value1
	return &out
}

// dictionary: LayoutConstraintsOptions
type LayoutConstraintsOptions struct {
	AvailableInlineSize      float64
	AvailableBlockSize       float64
	FixedInlineSize          float64
	FixedBlockSize           float64
	PercentageInlineSize     float64
	PercentageBlockSize      float64
	BlockFragmentationOffset float64
	BlockFragmentationType   BlockFragmentationType
	Data                     js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *LayoutConstraintsOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.AvailableInlineSize
	out.Set("availableInlineSize", value0)
	value1 := _this.AvailableBlockSize
	out.Set("availableBlockSize", value1)
	value2 := _this.FixedInlineSize
	out.Set("fixedInlineSize", value2)
	value3 := _this.FixedBlockSize
	out.Set("fixedBlockSize", value3)
	value4 := _this.PercentageInlineSize
	out.Set("percentageInlineSize", value4)
	value5 := _this.PercentageBlockSize
	out.Set("percentageBlockSize", value5)
	value6 := _this.BlockFragmentationOffset
	out.Set("blockFragmentationOffset", value6)
	value7 := _this.BlockFragmentationType.JSValue()
	out.Set("blockFragmentationType", value7)
	value8 := _this.Data
	out.Set("data", value8)
	return out
}

// LayoutConstraintsOptionsFromJS is allocating a new
// LayoutConstraintsOptions object and copy all values in the value javascript object.
func LayoutConstraintsOptionsFromJS(value js.Value) *LayoutConstraintsOptions {
	var out LayoutConstraintsOptions
	var (
		value0 float64                // javascript: double {availableInlineSize AvailableInlineSize availableInlineSize}
		value1 float64                // javascript: double {availableBlockSize AvailableBlockSize availableBlockSize}
		value2 float64                // javascript: double {fixedInlineSize FixedInlineSize fixedInlineSize}
		value3 float64                // javascript: double {fixedBlockSize FixedBlockSize fixedBlockSize}
		value4 float64                // javascript: double {percentageInlineSize PercentageInlineSize percentageInlineSize}
		value5 float64                // javascript: double {percentageBlockSize PercentageBlockSize percentageBlockSize}
		value6 float64                // javascript: double {blockFragmentationOffset BlockFragmentationOffset blockFragmentationOffset}
		value7 BlockFragmentationType // javascript: BlockFragmentationType {blockFragmentationType BlockFragmentationType blockFragmentationType}
		value8 js.Value               // javascript: any {data Data data}
	)
	value0 = (value.Get("availableInlineSize")).Float()
	out.AvailableInlineSize = value0
	value1 = (value.Get("availableBlockSize")).Float()
	out.AvailableBlockSize = value1
	value2 = (value.Get("fixedInlineSize")).Float()
	out.FixedInlineSize = value2
	value3 = (value.Get("fixedBlockSize")).Float()
	out.FixedBlockSize = value3
	value4 = (value.Get("percentageInlineSize")).Float()
	out.PercentageInlineSize = value4
	value5 = (value.Get("percentageBlockSize")).Float()
	out.PercentageBlockSize = value5
	value6 = (value.Get("blockFragmentationOffset")).Float()
	out.BlockFragmentationOffset = value6
	value7 = BlockFragmentationTypeFromJS(value.Get("blockFragmentationType"))
	out.BlockFragmentationType = value7
	value8 = value.Get("data")
	out.Data = value8
	return &out
}

// dictionary: LayoutOptions
type LayoutOptions struct {
	ChildDisplay ChildDisplayType
	Sizing       LayoutSizingMode
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *LayoutOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.ChildDisplay.JSValue()
	out.Set("childDisplay", value0)
	value1 := _this.Sizing.JSValue()
	out.Set("sizing", value1)
	return out
}

// LayoutOptionsFromJS is allocating a new
// LayoutOptions object and copy all values in the value javascript object.
func LayoutOptionsFromJS(value js.Value) *LayoutOptions {
	var out LayoutOptions
	var (
		value0 ChildDisplayType // javascript: ChildDisplayType {childDisplay ChildDisplay childDisplay}
		value1 LayoutSizingMode // javascript: LayoutSizingMode {sizing Sizing sizing}
	)
	value0 = ChildDisplayTypeFromJS(value.Get("childDisplay"))
	out.ChildDisplay = value0
	value1 = LayoutSizingModeFromJS(value.Get("sizing"))
	out.Sizing = value1
	return &out
}

// class: BreakToken
type BreakToken struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *BreakToken) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// BreakTokenFromJS is casting a js.Value into BreakToken.
func BreakTokenFromJS(value js.Value) *BreakToken {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &BreakToken{}
	ret.Value_JS = value
	return ret
}

// BreakTokenFromJS is casting from something that holds a js.Value into BreakToken.
func BreakTokenFromWrapper(input core.Wrapper) *BreakToken {
	return BreakTokenFromJS(input.JSValue())
}

// ChildBreakTokens returning attribute 'childBreakTokens' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *BreakToken) ChildBreakTokens() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("childBreakTokens")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Data returning attribute 'data' with
// type Any (idl: any).
func (_this *BreakToken) Data() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("data")
	ret = value
	return ret
}

// class: ChildBreakToken
type ChildBreakToken struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ChildBreakToken) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ChildBreakTokenFromJS is casting a js.Value into ChildBreakToken.
func ChildBreakTokenFromJS(value js.Value) *ChildBreakToken {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ChildBreakToken{}
	ret.Value_JS = value
	return ret
}

// ChildBreakTokenFromJS is casting from something that holds a js.Value into ChildBreakToken.
func ChildBreakTokenFromWrapper(input core.Wrapper) *ChildBreakToken {
	return ChildBreakTokenFromJS(input.JSValue())
}

// BreakType returning attribute 'breakType' with
// type BreakType (idl: BreakType).
func (_this *ChildBreakToken) BreakType() BreakType {
	var ret BreakType
	value := _this.Value_JS.Get("breakType")
	ret = BreakTypeFromJS(value)
	return ret
}

// Child returning attribute 'child' with
// type LayoutChild (idl: LayoutChild).
func (_this *ChildBreakToken) Child() *LayoutChild {
	var ret *LayoutChild
	value := _this.Value_JS.Get("child")
	ret = LayoutChildFromJS(value)
	return ret
}

// class: FragmentResult
type FragmentResult struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *FragmentResult) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// FragmentResultFromJS is casting a js.Value into FragmentResult.
func FragmentResultFromJS(value js.Value) *FragmentResult {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FragmentResult{}
	ret.Value_JS = value
	return ret
}

// FragmentResultFromJS is casting from something that holds a js.Value into FragmentResult.
func FragmentResultFromWrapper(input core.Wrapper) *FragmentResult {
	return FragmentResultFromJS(input.JSValue())
}

func NewFragmentResult(options *FragmentResultOptions) (_result *FragmentResult) {
	_klass := js.Global().Get("FragmentResult")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := options.JSValue()
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FragmentResult // javascript: FragmentResult _what_return_name
	)
	_converted = FragmentResultFromJS(_returned)
	_result = _converted
	return
}

// InlineSize returning attribute 'inlineSize' with
// type float64 (idl: double).
func (_this *FragmentResult) InlineSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("inlineSize")
	ret = (value).Float()
	return ret
}

// BlockSize returning attribute 'blockSize' with
// type float64 (idl: double).
func (_this *FragmentResult) BlockSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("blockSize")
	ret = (value).Float()
	return ret
}

// class: IntrinsicSizes
type IntrinsicSizes struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *IntrinsicSizes) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// IntrinsicSizesFromJS is casting a js.Value into IntrinsicSizes.
func IntrinsicSizesFromJS(value js.Value) *IntrinsicSizes {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &IntrinsicSizes{}
	ret.Value_JS = value
	return ret
}

// IntrinsicSizesFromJS is casting from something that holds a js.Value into IntrinsicSizes.
func IntrinsicSizesFromWrapper(input core.Wrapper) *IntrinsicSizes {
	return IntrinsicSizesFromJS(input.JSValue())
}

// MinContentSize returning attribute 'minContentSize' with
// type float64 (idl: double).
func (_this *IntrinsicSizes) MinContentSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("minContentSize")
	ret = (value).Float()
	return ret
}

// MaxContentSize returning attribute 'maxContentSize' with
// type float64 (idl: double).
func (_this *IntrinsicSizes) MaxContentSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("maxContentSize")
	ret = (value).Float()
	return ret
}

// class: LayoutChild
type LayoutChild struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *LayoutChild) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// LayoutChildFromJS is casting a js.Value into LayoutChild.
func LayoutChildFromJS(value js.Value) *LayoutChild {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &LayoutChild{}
	ret.Value_JS = value
	return ret
}

// LayoutChildFromJS is casting from something that holds a js.Value into LayoutChild.
func LayoutChildFromWrapper(input core.Wrapper) *LayoutChild {
	return LayoutChildFromJS(input.JSValue())
}

// StyleMap returning attribute 'styleMap' with
// type typedom.StylePropertyMapReadOnly (idl: StylePropertyMapReadOnly).
func (_this *LayoutChild) StyleMap() *typedom.StylePropertyMapReadOnly {
	var ret *typedom.StylePropertyMapReadOnly
	value := _this.Value_JS.Get("styleMap")
	ret = typedom.StylePropertyMapReadOnlyFromJS(value)
	return ret
}

func (_this *LayoutChild) IntrinsicSizes() (_result *PromiseIntrinsicSizes) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("intrinsicSizes", _args[0:_end]...)
	var (
		_converted *PromiseIntrinsicSizes // javascript: Promise _what_return_name
	)
	_converted = PromiseIntrinsicSizesFromJS(_returned)
	_result = _converted
	return
}

func (_this *LayoutChild) LayoutNextFragment(constraints *LayoutConstraintsOptions, breakToken *ChildBreakToken) (_result *PromiseLayoutFragment) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := constraints.JSValue()
	_args[0] = _p0
	_end++
	_p1 := breakToken.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("layoutNextFragment", _args[0:_end]...)
	var (
		_converted *PromiseLayoutFragment // javascript: Promise _what_return_name
	)
	_converted = PromiseLayoutFragmentFromJS(_returned)
	_result = _converted
	return
}

// class: LayoutConstraints
type LayoutConstraints struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *LayoutConstraints) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// LayoutConstraintsFromJS is casting a js.Value into LayoutConstraints.
func LayoutConstraintsFromJS(value js.Value) *LayoutConstraints {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &LayoutConstraints{}
	ret.Value_JS = value
	return ret
}

// LayoutConstraintsFromJS is casting from something that holds a js.Value into LayoutConstraints.
func LayoutConstraintsFromWrapper(input core.Wrapper) *LayoutConstraints {
	return LayoutConstraintsFromJS(input.JSValue())
}

// AvailableInlineSize returning attribute 'availableInlineSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) AvailableInlineSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("availableInlineSize")
	ret = (value).Float()
	return ret
}

// AvailableBlockSize returning attribute 'availableBlockSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) AvailableBlockSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("availableBlockSize")
	ret = (value).Float()
	return ret
}

// FixedInlineSize returning attribute 'fixedInlineSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) FixedInlineSize() *float64 {
	var ret *float64
	value := _this.Value_JS.Get("fixedInlineSize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Float()
		ret = &__tmp
	}
	return ret
}

// FixedBlockSize returning attribute 'fixedBlockSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) FixedBlockSize() *float64 {
	var ret *float64
	value := _this.Value_JS.Get("fixedBlockSize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Float()
		ret = &__tmp
	}
	return ret
}

// PercentageInlineSize returning attribute 'percentageInlineSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) PercentageInlineSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("percentageInlineSize")
	ret = (value).Float()
	return ret
}

// PercentageBlockSize returning attribute 'percentageBlockSize' with
// type float64 (idl: double).
func (_this *LayoutConstraints) PercentageBlockSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("percentageBlockSize")
	ret = (value).Float()
	return ret
}

// BlockFragmentationOffset returning attribute 'blockFragmentationOffset' with
// type float64 (idl: double).
func (_this *LayoutConstraints) BlockFragmentationOffset() *float64 {
	var ret *float64
	value := _this.Value_JS.Get("blockFragmentationOffset")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Float()
		ret = &__tmp
	}
	return ret
}

// BlockFragmentationType returning attribute 'blockFragmentationType' with
// type BlockFragmentationType (idl: BlockFragmentationType).
func (_this *LayoutConstraints) BlockFragmentationType() BlockFragmentationType {
	var ret BlockFragmentationType
	value := _this.Value_JS.Get("blockFragmentationType")
	ret = BlockFragmentationTypeFromJS(value)
	return ret
}

// Data returning attribute 'data' with
// type Any (idl: any).
func (_this *LayoutConstraints) Data() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("data")
	ret = value
	return ret
}

// class: LayoutEdges
type LayoutEdges struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *LayoutEdges) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// LayoutEdgesFromJS is casting a js.Value into LayoutEdges.
func LayoutEdgesFromJS(value js.Value) *LayoutEdges {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &LayoutEdges{}
	ret.Value_JS = value
	return ret
}

// LayoutEdgesFromJS is casting from something that holds a js.Value into LayoutEdges.
func LayoutEdgesFromWrapper(input core.Wrapper) *LayoutEdges {
	return LayoutEdgesFromJS(input.JSValue())
}

// InlineStart returning attribute 'inlineStart' with
// type float64 (idl: double).
func (_this *LayoutEdges) InlineStart() float64 {
	var ret float64
	value := _this.Value_JS.Get("inlineStart")
	ret = (value).Float()
	return ret
}

// InlineEnd returning attribute 'inlineEnd' with
// type float64 (idl: double).
func (_this *LayoutEdges) InlineEnd() float64 {
	var ret float64
	value := _this.Value_JS.Get("inlineEnd")
	ret = (value).Float()
	return ret
}

// BlockStart returning attribute 'blockStart' with
// type float64 (idl: double).
func (_this *LayoutEdges) BlockStart() float64 {
	var ret float64
	value := _this.Value_JS.Get("blockStart")
	ret = (value).Float()
	return ret
}

// BlockEnd returning attribute 'blockEnd' with
// type float64 (idl: double).
func (_this *LayoutEdges) BlockEnd() float64 {
	var ret float64
	value := _this.Value_JS.Get("blockEnd")
	ret = (value).Float()
	return ret
}

// Inline returning attribute 'inline' with
// type float64 (idl: double).
func (_this *LayoutEdges) Inline() float64 {
	var ret float64
	value := _this.Value_JS.Get("inline")
	ret = (value).Float()
	return ret
}

// Block returning attribute 'block' with
// type float64 (idl: double).
func (_this *LayoutEdges) Block() float64 {
	var ret float64
	value := _this.Value_JS.Get("block")
	ret = (value).Float()
	return ret
}

// class: LayoutFragment
type LayoutFragment struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *LayoutFragment) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// LayoutFragmentFromJS is casting a js.Value into LayoutFragment.
func LayoutFragmentFromJS(value js.Value) *LayoutFragment {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &LayoutFragment{}
	ret.Value_JS = value
	return ret
}

// LayoutFragmentFromJS is casting from something that holds a js.Value into LayoutFragment.
func LayoutFragmentFromWrapper(input core.Wrapper) *LayoutFragment {
	return LayoutFragmentFromJS(input.JSValue())
}

// InlineSize returning attribute 'inlineSize' with
// type float64 (idl: double).
func (_this *LayoutFragment) InlineSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("inlineSize")
	ret = (value).Float()
	return ret
}

// BlockSize returning attribute 'blockSize' with
// type float64 (idl: double).
func (_this *LayoutFragment) BlockSize() float64 {
	var ret float64
	value := _this.Value_JS.Get("blockSize")
	ret = (value).Float()
	return ret
}

// InlineOffset returning attribute 'inlineOffset' with
// type float64 (idl: double).
func (_this *LayoutFragment) InlineOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("inlineOffset")
	ret = (value).Float()
	return ret
}

// SetInlineOffset setting attribute 'inlineOffset' with
// type float64 (idl: double).
func (_this *LayoutFragment) SetInlineOffset(value float64) {
	input := value
	_this.Value_JS.Set("inlineOffset", input)
}

// BlockOffset returning attribute 'blockOffset' with
// type float64 (idl: double).
func (_this *LayoutFragment) BlockOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("blockOffset")
	ret = (value).Float()
	return ret
}

// SetBlockOffset setting attribute 'blockOffset' with
// type float64 (idl: double).
func (_this *LayoutFragment) SetBlockOffset(value float64) {
	input := value
	_this.Value_JS.Set("blockOffset", input)
}

// Data returning attribute 'data' with
// type Any (idl: any).
func (_this *LayoutFragment) Data() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("data")
	ret = value
	return ret
}

// BreakToken returning attribute 'breakToken' with
// type ChildBreakToken (idl: ChildBreakToken).
func (_this *LayoutFragment) BreakToken() *ChildBreakToken {
	var ret *ChildBreakToken
	value := _this.Value_JS.Get("breakToken")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ChildBreakTokenFromJS(value)
	}
	return ret
}

// class: LayoutWorkletGlobalScope
type LayoutWorkletGlobalScope struct {
	worklets.WorkletGlobalScope
}

// LayoutWorkletGlobalScopeFromJS is casting a js.Value into LayoutWorkletGlobalScope.
func LayoutWorkletGlobalScopeFromJS(value js.Value) *LayoutWorkletGlobalScope {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &LayoutWorkletGlobalScope{}
	ret.Value_JS = value
	return ret
}

// LayoutWorkletGlobalScopeFromJS is casting from something that holds a js.Value into LayoutWorkletGlobalScope.
func LayoutWorkletGlobalScopeFromWrapper(input core.Wrapper) *LayoutWorkletGlobalScope {
	return LayoutWorkletGlobalScopeFromJS(input.JSValue())
}

func (_this *LayoutWorkletGlobalScope) RegisterLayout(name string, layoutCtor *webidl.VoidFunction) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++

	var __callback1 js.Value
	if layoutCtor != nil {
		__callback1 = (*layoutCtor).Value
	} else {
		__callback1 = js.Null()
	}
	_p1 := __callback1
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("registerLayout", _args[0:_end]...)
	return
}

// class: Promise
type PromiseIntrinsicSizes struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseIntrinsicSizes) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseIntrinsicSizesFromJS is casting a js.Value into PromiseIntrinsicSizes.
func PromiseIntrinsicSizesFromJS(value js.Value) *PromiseIntrinsicSizes {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseIntrinsicSizes{}
	ret.Value_JS = value
	return ret
}

// PromiseIntrinsicSizesFromJS is casting from something that holds a js.Value into PromiseIntrinsicSizes.
func PromiseIntrinsicSizesFromWrapper(input core.Wrapper) *PromiseIntrinsicSizes {
	return PromiseIntrinsicSizesFromJS(input.JSValue())
}

func (_this *PromiseIntrinsicSizes) Then(onFulfilled *PromiseIntrinsicSizesOnFulfilled, onRejected *PromiseIntrinsicSizesOnRejected) (_result *PromiseIntrinsicSizes) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseIntrinsicSizes // javascript: Promise _what_return_name
	)
	_converted = PromiseIntrinsicSizesFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseIntrinsicSizes) Catch(onRejected *PromiseIntrinsicSizesOnRejected) (_result *PromiseIntrinsicSizes) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseIntrinsicSizes // javascript: Promise _what_return_name
	)
	_converted = PromiseIntrinsicSizesFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseIntrinsicSizes) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseIntrinsicSizes) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseIntrinsicSizes // javascript: Promise _what_return_name
	)
	_converted = PromiseIntrinsicSizesFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseLayoutFragment struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseLayoutFragment) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseLayoutFragmentFromJS is casting a js.Value into PromiseLayoutFragment.
func PromiseLayoutFragmentFromJS(value js.Value) *PromiseLayoutFragment {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseLayoutFragment{}
	ret.Value_JS = value
	return ret
}

// PromiseLayoutFragmentFromJS is casting from something that holds a js.Value into PromiseLayoutFragment.
func PromiseLayoutFragmentFromWrapper(input core.Wrapper) *PromiseLayoutFragment {
	return PromiseLayoutFragmentFromJS(input.JSValue())
}

func (_this *PromiseLayoutFragment) Then(onFulfilled *PromiseLayoutFragmentOnFulfilled, onRejected *PromiseLayoutFragmentOnRejected) (_result *PromiseLayoutFragment) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseLayoutFragment // javascript: Promise _what_return_name
	)
	_converted = PromiseLayoutFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseLayoutFragment) Catch(onRejected *PromiseLayoutFragmentOnRejected) (_result *PromiseLayoutFragment) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseLayoutFragment // javascript: Promise _what_return_name
	)
	_converted = PromiseLayoutFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseLayoutFragment) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseLayoutFragment) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseLayoutFragment // javascript: Promise _what_return_name
	)
	_converted = PromiseLayoutFragmentFromJS(_returned)
	_result = _converted
	return
}
