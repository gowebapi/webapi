// Code generated by webidl-bind. DO NOT EDIT.

package loading

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.FrozenArray
// javascript.Promise
// javascript.PromiseFinally

// source idl files:
// css-font-loading.idl
// promises.idl

// transform files:
// css-font-loading.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: FontFaceLoadStatus
type FontFaceLoadStatus int

const (
	UnloadedFontFaceLoadStatus FontFaceLoadStatus = iota
	LoadingFontFaceLoadStatus
	LoadedFontFaceLoadStatus
	ErrorFontFaceLoadStatus
)

var fontFaceLoadStatusToWasmTable = []string{
	"unloaded", "loading", "loaded", "error",
}

var fontFaceLoadStatusFromWasmTable = map[string]FontFaceLoadStatus{
	"unloaded": UnloadedFontFaceLoadStatus, "loading": LoadingFontFaceLoadStatus, "loaded": LoadedFontFaceLoadStatus, "error": ErrorFontFaceLoadStatus,
}

// JSValue is converting this enum into a javascript object
func (this *FontFaceLoadStatus) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this FontFaceLoadStatus) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(fontFaceLoadStatusToWasmTable) {
		return fontFaceLoadStatusToWasmTable[idx]
	}
	panic("unknown input value")
}

// FontFaceLoadStatusFromJS is converting a javascript value into
// a FontFaceLoadStatus enum value.
func FontFaceLoadStatusFromJS(value js.Value) FontFaceLoadStatus {
	key := value.String()
	conv, ok := fontFaceLoadStatusFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: FontFaceSetLoadStatus
type FontFaceSetLoadStatus int

const (
	LoadingFontFaceSetLoadStatus FontFaceSetLoadStatus = iota
	LoadedFontFaceSetLoadStatus
)

var fontFaceSetLoadStatusToWasmTable = []string{
	"loading", "loaded",
}

var fontFaceSetLoadStatusFromWasmTable = map[string]FontFaceSetLoadStatus{
	"loading": LoadingFontFaceSetLoadStatus, "loaded": LoadedFontFaceSetLoadStatus,
}

// JSValue is converting this enum into a javascript object
func (this *FontFaceSetLoadStatus) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this FontFaceSetLoadStatus) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(fontFaceSetLoadStatusToWasmTable) {
		return fontFaceSetLoadStatusToWasmTable[idx]
	}
	panic("unknown input value")
}

// FontFaceSetLoadStatusFromJS is converting a javascript value into
// a FontFaceSetLoadStatus enum value.
func FontFaceSetLoadStatusFromJS(value js.Value) FontFaceSetLoadStatus {
	key := value.String()
	conv, ok := fontFaceSetLoadStatusFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: FontFaceSetForEach
type FontFaceSetForEachFunc func(currentValue *FontFace, currentValueAgain *FontFace, listObj *FontFaceSet)

// FontFaceSetForEach is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type FontFaceSetForEach js.Func

func FontFaceSetForEachToJS(callback FontFaceSetForEachFunc) *FontFaceSetForEach {
	if callback == nil {
		return nil
	}
	ret := FontFaceSetForEach(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *FontFace    // javascript: FontFace currentValue
			_p1 *FontFace    // javascript: FontFace currentValueAgain
			_p2 *FontFaceSet // javascript: FontFaceSet listObj
		)
		_p0 = FontFaceFromJS(args[0])
		_p1 = FontFaceFromJS(args[1])
		_p2 = FontFaceSetFromJS(args[2])
		callback(_p0, _p1, _p2)

		// returning no return value
		return nil
	}))
	return &ret
}

func FontFaceSetForEachFromJS(_value js.Value) FontFaceSetForEachFunc {
	return func(currentValue *FontFace, currentValueAgain *FontFace, listObj *FontFaceSet) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := currentValue.JSValue()
		_args[0] = _p0
		_end++
		_p1 := currentValueAgain.JSValue()
		_args[1] = _p1
		_end++
		_p2 := listObj.JSValue()
		_args[2] = _p2
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseFontFaceOnFulfilledFunc func(value *FontFace)

// PromiseFontFaceOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseFontFaceOnFulfilled js.Func

func PromiseFontFaceOnFulfilledToJS(callback PromiseFontFaceOnFulfilledFunc) *PromiseFontFaceOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseFontFaceOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *FontFace // javascript: FontFace value
		)
		_p0 = FontFaceFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseFontFaceOnFulfilledFromJS(_value js.Value) PromiseFontFaceOnFulfilledFunc {
	return func(value *FontFace) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseFontFaceOnRejectedFunc func(reason js.Value)

// PromiseFontFaceOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseFontFaceOnRejected js.Func

func PromiseFontFaceOnRejectedToJS(callback PromiseFontFaceOnRejectedFunc) *PromiseFontFaceOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseFontFaceOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseFontFaceOnRejectedFromJS(_value js.Value) PromiseFontFaceOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceFontFaceOnFulfilledFunc func(value []*FontFace)

// PromiseSequenceFontFaceOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceFontFaceOnFulfilled js.Func

func PromiseSequenceFontFaceOnFulfilledToJS(callback PromiseSequenceFontFaceOnFulfilledFunc) *PromiseSequenceFontFaceOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceFontFaceOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*FontFace // javascript: sequence<FontFace> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*FontFace, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *FontFace
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = FontFaceFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceFontFaceOnFulfilledFromJS(_value js.Value) PromiseSequenceFontFaceOnFulfilledFunc {
	return func(value []*FontFace) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceFontFaceOnRejectedFunc func(reason js.Value)

// PromiseSequenceFontFaceOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceFontFaceOnRejected js.Func

func PromiseSequenceFontFaceOnRejectedToJS(callback PromiseSequenceFontFaceOnRejectedFunc) *PromiseSequenceFontFaceOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceFontFaceOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceFontFaceOnRejectedFromJS(_value js.Value) PromiseSequenceFontFaceOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: FontFaceDescriptors
type FontFaceDescriptors struct {
	Style             string
	Weight            string
	Stretch           string
	UnicodeRange      string
	Variant           string
	FeatureSettings   string
	VariationSettings string
	Display           string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FontFaceDescriptors) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Style
	out.Set("style", value0)
	value1 := _this.Weight
	out.Set("weight", value1)
	value2 := _this.Stretch
	out.Set("stretch", value2)
	value3 := _this.UnicodeRange
	out.Set("unicodeRange", value3)
	value4 := _this.Variant
	out.Set("variant", value4)
	value5 := _this.FeatureSettings
	out.Set("featureSettings", value5)
	value6 := _this.VariationSettings
	out.Set("variationSettings", value6)
	value7 := _this.Display
	out.Set("display", value7)
	return out
}

// FontFaceDescriptorsFromJS is allocating a new
// FontFaceDescriptors object and copy all values in the value javascript object.
func FontFaceDescriptorsFromJS(value js.Value) *FontFaceDescriptors {
	var out FontFaceDescriptors
	var (
		value0 string // javascript: DOMString {style Style style}
		value1 string // javascript: DOMString {weight Weight weight}
		value2 string // javascript: DOMString {stretch Stretch stretch}
		value3 string // javascript: DOMString {unicodeRange UnicodeRange unicodeRange}
		value4 string // javascript: DOMString {variant Variant variant}
		value5 string // javascript: DOMString {featureSettings FeatureSettings featureSettings}
		value6 string // javascript: DOMString {variationSettings VariationSettings variationSettings}
		value7 string // javascript: DOMString {display Display display}
	)
	value0 = (value.Get("style")).String()
	out.Style = value0
	value1 = (value.Get("weight")).String()
	out.Weight = value1
	value2 = (value.Get("stretch")).String()
	out.Stretch = value2
	value3 = (value.Get("unicodeRange")).String()
	out.UnicodeRange = value3
	value4 = (value.Get("variant")).String()
	out.Variant = value4
	value5 = (value.Get("featureSettings")).String()
	out.FeatureSettings = value5
	value6 = (value.Get("variationSettings")).String()
	out.VariationSettings = value6
	value7 = (value.Get("display")).String()
	out.Display = value7
	return &out
}

// dictionary: FontFaceSetEntryIteratorValue
type FontFaceSetEntryIteratorValue struct {
	Value []*FontFace
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FontFaceSetEntryIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Value))
	for __idx0, __seq_in0 := range _this.Value {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FontFaceSetEntryIteratorValueFromJS is allocating a new
// FontFaceSetEntryIteratorValue object and copy all values in the value javascript object.
func FontFaceSetEntryIteratorValueFromJS(value js.Value) *FontFaceSetEntryIteratorValue {
	var out FontFaceSetEntryIteratorValue
	var (
		value0 []*FontFace // javascript: sequence<FontFace> {value Value value}
		value1 bool        // javascript: boolean {done Done done}
	)
	__length0 := value.Get("value").Length()
	__array0 := make([]*FontFace, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *FontFace
		__seq_in0 := value.Get("value").Index(__idx0)
		__seq_out0 = FontFaceFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: FontFaceSetKeyIteratorValue
type FontFaceSetKeyIteratorValue struct {
	Value *FontFace
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FontFaceSetKeyIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FontFaceSetKeyIteratorValueFromJS is allocating a new
// FontFaceSetKeyIteratorValue object and copy all values in the value javascript object.
func FontFaceSetKeyIteratorValueFromJS(value js.Value) *FontFaceSetKeyIteratorValue {
	var out FontFaceSetKeyIteratorValue
	var (
		value0 *FontFace // javascript: FontFace {value Value value}
		value1 bool      // javascript: boolean {done Done done}
	)
	value0 = FontFaceFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: FontFaceSetLoadEventInit
type FontFaceSetLoadEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Fontfaces  []*FontFace
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FontFaceSetLoadEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := js.Global().Get("Array").New(len(_this.Fontfaces))
	for __idx3, __seq_in3 := range _this.Fontfaces {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("fontfaces", value3)
	return out
}

// FontFaceSetLoadEventInitFromJS is allocating a new
// FontFaceSetLoadEventInit object and copy all values in the value javascript object.
func FontFaceSetLoadEventInitFromJS(value js.Value) *FontFaceSetLoadEventInit {
	var out FontFaceSetLoadEventInit
	var (
		value0 bool        // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool        // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool        // javascript: boolean {composed Composed composed}
		value3 []*FontFace // javascript: sequence<FontFace> {fontfaces Fontfaces fontfaces}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	__length3 := value.Get("fontfaces").Length()
	__array3 := make([]*FontFace, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *FontFace
		__seq_in3 := value.Get("fontfaces").Index(__idx3)
		__seq_out3 = FontFaceFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.Fontfaces = value3
	return &out
}

// dictionary: FontFaceSetValueIteratorValue
type FontFaceSetValueIteratorValue struct {
	Value *FontFace
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FontFaceSetValueIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FontFaceSetValueIteratorValueFromJS is allocating a new
// FontFaceSetValueIteratorValue object and copy all values in the value javascript object.
func FontFaceSetValueIteratorValueFromJS(value js.Value) *FontFaceSetValueIteratorValue {
	var out FontFaceSetValueIteratorValue
	var (
		value0 *FontFace // javascript: FontFace {value Value value}
		value1 bool      // javascript: boolean {done Done done}
	)
	value0 = FontFaceFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// class: FontFace
type FontFace struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FontFace) JSValue() js.Value {
	return _this.Value_JS
}

// FontFaceFromJS is casting a js.Value into FontFace.
func FontFaceFromJS(value js.Value) *FontFace {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFace{}
	ret.Value_JS = value
	return ret
}

// FontFaceFromJS is casting from something that holds a js.Value into FontFace.
func FontFaceFromWrapper(input core.Wrapper) *FontFace {
	return FontFaceFromJS(input.JSValue())
}

func NewFontFace(family string, source *Union, descriptors *FontFaceDescriptors) (_result *FontFace) {
	_klass := js.Global().Get("FontFace")
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := family
	_args[0] = _p0
	_end++
	_p1 := source.JSValue()
	_args[1] = _p1
	_end++
	if descriptors != nil {
		_p2 := descriptors.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FontFace // javascript: FontFace _what_return_name
	)
	_converted = FontFaceFromJS(_returned)
	_result = _converted
	return
}

// Family returning attribute 'family' with
// type string (idl: DOMString).
func (_this *FontFace) Family() string {
	var ret string
	value := _this.Value_JS.Get("family")
	ret = (value).String()
	return ret
}

// SetFamily setting attribute 'family' with
// type string (idl: DOMString).
func (_this *FontFace) SetFamily(value string) {
	input := value
	_this.Value_JS.Set("family", input)
}

// Style returning attribute 'style' with
// type string (idl: DOMString).
func (_this *FontFace) Style() string {
	var ret string
	value := _this.Value_JS.Get("style")
	ret = (value).String()
	return ret
}

// SetStyle setting attribute 'style' with
// type string (idl: DOMString).
func (_this *FontFace) SetStyle(value string) {
	input := value
	_this.Value_JS.Set("style", input)
}

// Weight returning attribute 'weight' with
// type string (idl: DOMString).
func (_this *FontFace) Weight() string {
	var ret string
	value := _this.Value_JS.Get("weight")
	ret = (value).String()
	return ret
}

// SetWeight setting attribute 'weight' with
// type string (idl: DOMString).
func (_this *FontFace) SetWeight(value string) {
	input := value
	_this.Value_JS.Set("weight", input)
}

// Stretch returning attribute 'stretch' with
// type string (idl: DOMString).
func (_this *FontFace) Stretch() string {
	var ret string
	value := _this.Value_JS.Get("stretch")
	ret = (value).String()
	return ret
}

// SetStretch setting attribute 'stretch' with
// type string (idl: DOMString).
func (_this *FontFace) SetStretch(value string) {
	input := value
	_this.Value_JS.Set("stretch", input)
}

// UnicodeRange returning attribute 'unicodeRange' with
// type string (idl: DOMString).
func (_this *FontFace) UnicodeRange() string {
	var ret string
	value := _this.Value_JS.Get("unicodeRange")
	ret = (value).String()
	return ret
}

// SetUnicodeRange setting attribute 'unicodeRange' with
// type string (idl: DOMString).
func (_this *FontFace) SetUnicodeRange(value string) {
	input := value
	_this.Value_JS.Set("unicodeRange", input)
}

// Variant returning attribute 'variant' with
// type string (idl: DOMString).
func (_this *FontFace) Variant() string {
	var ret string
	value := _this.Value_JS.Get("variant")
	ret = (value).String()
	return ret
}

// SetVariant setting attribute 'variant' with
// type string (idl: DOMString).
func (_this *FontFace) SetVariant(value string) {
	input := value
	_this.Value_JS.Set("variant", input)
}

// FeatureSettings returning attribute 'featureSettings' with
// type string (idl: DOMString).
func (_this *FontFace) FeatureSettings() string {
	var ret string
	value := _this.Value_JS.Get("featureSettings")
	ret = (value).String()
	return ret
}

// SetFeatureSettings setting attribute 'featureSettings' with
// type string (idl: DOMString).
func (_this *FontFace) SetFeatureSettings(value string) {
	input := value
	_this.Value_JS.Set("featureSettings", input)
}

// VariationSettings returning attribute 'variationSettings' with
// type string (idl: DOMString).
func (_this *FontFace) VariationSettings() string {
	var ret string
	value := _this.Value_JS.Get("variationSettings")
	ret = (value).String()
	return ret
}

// SetVariationSettings setting attribute 'variationSettings' with
// type string (idl: DOMString).
func (_this *FontFace) SetVariationSettings(value string) {
	input := value
	_this.Value_JS.Set("variationSettings", input)
}

// Display returning attribute 'display' with
// type string (idl: DOMString).
func (_this *FontFace) Display() string {
	var ret string
	value := _this.Value_JS.Get("display")
	ret = (value).String()
	return ret
}

// SetDisplay setting attribute 'display' with
// type string (idl: DOMString).
func (_this *FontFace) SetDisplay(value string) {
	input := value
	_this.Value_JS.Set("display", input)
}

// Status returning attribute 'status' with
// type FontFaceLoadStatus (idl: FontFaceLoadStatus).
func (_this *FontFace) Status() FontFaceLoadStatus {
	var ret FontFaceLoadStatus
	value := _this.Value_JS.Get("status")
	ret = FontFaceLoadStatusFromJS(value)
	return ret
}

// Loaded returning attribute 'loaded' with
// type javascript.Promise (idl: Promise).
func (_this *FontFace) Loaded() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("loaded")
	ret = javascript.PromiseFromJS(value)
	return ret
}

func (_this *FontFace) Load() (_result *PromiseFontFace) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("load", _args[0:_end]...)
	var (
		_converted *PromiseFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseFontFaceFromJS(_returned)
	_result = _converted
	return
}

// class: FontFaceSet
type FontFaceSet struct {
	domcore.EventTarget
}

// FontFaceSetFromJS is casting a js.Value into FontFaceSet.
func FontFaceSetFromJS(value js.Value) *FontFaceSet {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSet{}
	ret.Value_JS = value
	return ret
}

// FontFaceSetFromJS is casting from something that holds a js.Value into FontFaceSet.
func FontFaceSetFromWrapper(input core.Wrapper) *FontFaceSet {
	return FontFaceSetFromJS(input.JSValue())
}

func NewFontFaceSet(initialFaces []*FontFace) (_result *FontFaceSet) {
	_klass := js.Global().Get("FontFaceSet")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(initialFaces))
	for __idx0, __seq_in0 := range initialFaces {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FontFaceSet // javascript: FontFaceSet _what_return_name
	)
	_converted = FontFaceSetFromJS(_returned)
	_result = _converted
	return
}

// OnLoading returning attribute 'onloading' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *FontFaceSet) OnLoading() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloading")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadingDone returning attribute 'onloadingdone' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *FontFaceSet) OnLoadingDone() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadingdone")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadingError returning attribute 'onloadingerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *FontFaceSet) OnLoadingError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadingerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Ready returning attribute 'ready' with
// type javascript.Promise (idl: Promise).
func (_this *FontFaceSet) Ready() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("ready")
	ret = javascript.PromiseFromJS(value)
	return ret
}

// Status returning attribute 'status' with
// type FontFaceSetLoadStatus (idl: FontFaceSetLoadStatus).
func (_this *FontFaceSet) Status() FontFaceSetLoadStatus {
	var ret FontFaceSetLoadStatus
	value := _this.Value_JS.Get("status")
	ret = FontFaceSetLoadStatusFromJS(value)
	return ret
}

// Size returning attribute 'size' with
// type int (idl: long).
func (_this *FontFaceSet) Size() int {
	var ret int
	value := _this.Value_JS.Get("size")
	ret = (value).Int()
	return ret
}

// event attribute: FontFaceSetLoadEvent
func eventFuncFontFaceSet_FontFaceSetLoadEvent(listener func(event *FontFaceSetLoadEvent, target *FontFaceSet)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *FontFaceSetLoadEvent
		value := args[0]
		incoming := value.Get("target")
		ret = FontFaceSetLoadEventFromJS(value)
		src := FontFaceSetFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddLoading is adding doing AddEventListener for 'Loading' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) AddEventLoading(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Call("addEventListener", "loading", cb)
	return cb
}

// SetOnLoading is assigning a function to 'onloading'. This
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) SetOnLoading(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Set("onloading", cb)
	return cb
}

// AddLoadingDone is adding doing AddEventListener for 'LoadingDone' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) AddEventLoadingDone(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadingdone", cb)
	return cb
}

// SetOnLoadingDone is assigning a function to 'onloadingdone'. This
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) SetOnLoadingDone(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Set("onloadingdone", cb)
	return cb
}

// AddLoadingError is adding doing AddEventListener for 'LoadingError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) AddEventLoadingError(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadingerror", cb)
	return cb
}

// SetOnLoadingError is assigning a function to 'onloadingerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *FontFaceSet) SetOnLoadingError(listener func(event *FontFaceSetLoadEvent, currentTarget *FontFaceSet)) js.Func {
	cb := eventFuncFontFaceSet_FontFaceSetLoadEvent(listener)
	_this.Value_JS.Set("onloadingerror", cb)
	return cb
}

func (_this *FontFaceSet) Add(font *FontFace) (_result *FontFaceSet) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := font.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("add", _args[0:_end]...)
	var (
		_converted *FontFaceSet // javascript: FontFaceSet _what_return_name
	)
	_converted = FontFaceSetFromJS(_returned)
	_result = _converted
	return
}

func (_this *FontFaceSet) Delete(font *FontFace) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := font.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("delete", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *FontFaceSet) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *FontFaceSet) Load(font string, text *string) (_result *PromiseSequenceFontFace) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := font
	_args[0] = _p0
	_end++
	if text != nil {

		var _p1 interface{}
		if text != nil {
			_p1 = *(text)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("load", _args[0:_end]...)
	var (
		_converted *PromiseSequenceFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceFontFaceFromJS(_returned)
	_result = _converted
	return
}

func (_this *FontFaceSet) Check(font string, text *string) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := font
	_args[0] = _p0
	_end++
	if text != nil {

		var _p1 interface{}
		if text != nil {
			_p1 = *(text)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("check", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *FontFaceSet) Entries() (_result *FontFaceSetEntryIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("entries", _args[0:_end]...)
	var (
		_converted *FontFaceSetEntryIterator // javascript: FontFaceSetEntryIterator _what_return_name
	)
	_converted = FontFaceSetEntryIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *FontFaceSet) ForEach(callback *FontFaceSetForEach, optionalThisForCallbackArgument interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if optionalThisForCallbackArgument != nil {
		_p1 := optionalThisForCallbackArgument
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("forEach", _args[0:_end]...)
	return
}

func (_this *FontFaceSet) Keys() (_result *FontFaceSetKeyIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("keys", _args[0:_end]...)
	var (
		_converted *FontFaceSetKeyIterator // javascript: FontFaceSetKeyIterator _what_return_name
	)
	_converted = FontFaceSetKeyIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *FontFaceSet) Values() (_result *FontFaceSetValueIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("values", _args[0:_end]...)
	var (
		_converted *FontFaceSetValueIterator // javascript: FontFaceSetValueIterator _what_return_name
	)
	_converted = FontFaceSetValueIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *FontFaceSet) Get(key *FontFace) (_result *FontFace) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *FontFace // javascript: FontFace _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = FontFaceFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *FontFaceSet) Has(key *FontFace) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("has", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: FontFaceSetEntryIterator
type FontFaceSetEntryIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FontFaceSetEntryIterator) JSValue() js.Value {
	return _this.Value_JS
}

// FontFaceSetEntryIteratorFromJS is casting a js.Value into FontFaceSetEntryIterator.
func FontFaceSetEntryIteratorFromJS(value js.Value) *FontFaceSetEntryIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSetEntryIterator{}
	ret.Value_JS = value
	return ret
}

// FontFaceSetEntryIteratorFromJS is casting from something that holds a js.Value into FontFaceSetEntryIterator.
func FontFaceSetEntryIteratorFromWrapper(input core.Wrapper) *FontFaceSetEntryIterator {
	return FontFaceSetEntryIteratorFromJS(input.JSValue())
}

func (_this *FontFaceSetEntryIterator) Next() (_result *FontFaceSetEntryIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FontFaceSetEntryIteratorValue // javascript: FontFaceSetEntryIteratorValue _what_return_name
	)
	_converted = FontFaceSetEntryIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: FontFaceSetKeyIterator
type FontFaceSetKeyIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FontFaceSetKeyIterator) JSValue() js.Value {
	return _this.Value_JS
}

// FontFaceSetKeyIteratorFromJS is casting a js.Value into FontFaceSetKeyIterator.
func FontFaceSetKeyIteratorFromJS(value js.Value) *FontFaceSetKeyIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSetKeyIterator{}
	ret.Value_JS = value
	return ret
}

// FontFaceSetKeyIteratorFromJS is casting from something that holds a js.Value into FontFaceSetKeyIterator.
func FontFaceSetKeyIteratorFromWrapper(input core.Wrapper) *FontFaceSetKeyIterator {
	return FontFaceSetKeyIteratorFromJS(input.JSValue())
}

func (_this *FontFaceSetKeyIterator) Next() (_result *FontFaceSetKeyIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FontFaceSetKeyIteratorValue // javascript: FontFaceSetKeyIteratorValue _what_return_name
	)
	_converted = FontFaceSetKeyIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: FontFaceSetLoadEvent
type FontFaceSetLoadEvent struct {
	domcore.Event
}

// FontFaceSetLoadEventFromJS is casting a js.Value into FontFaceSetLoadEvent.
func FontFaceSetLoadEventFromJS(value js.Value) *FontFaceSetLoadEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSetLoadEvent{}
	ret.Value_JS = value
	return ret
}

// FontFaceSetLoadEventFromJS is casting from something that holds a js.Value into FontFaceSetLoadEvent.
func FontFaceSetLoadEventFromWrapper(input core.Wrapper) *FontFaceSetLoadEvent {
	return FontFaceSetLoadEventFromJS(input.JSValue())
}

func NewFontFaceSetLoadEvent(_type string, eventInitDict *FontFaceSetLoadEventInit) (_result *FontFaceSetLoadEvent) {
	_klass := js.Global().Get("FontFaceSetLoadEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FontFaceSetLoadEvent // javascript: FontFaceSetLoadEvent _what_return_name
	)
	_converted = FontFaceSetLoadEventFromJS(_returned)
	_result = _converted
	return
}

// Fontfaces returning attribute 'fontfaces' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *FontFaceSetLoadEvent) Fontfaces() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("fontfaces")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// class: FontFaceSetValueIterator
type FontFaceSetValueIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FontFaceSetValueIterator) JSValue() js.Value {
	return _this.Value_JS
}

// FontFaceSetValueIteratorFromJS is casting a js.Value into FontFaceSetValueIterator.
func FontFaceSetValueIteratorFromJS(value js.Value) *FontFaceSetValueIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSetValueIterator{}
	ret.Value_JS = value
	return ret
}

// FontFaceSetValueIteratorFromJS is casting from something that holds a js.Value into FontFaceSetValueIterator.
func FontFaceSetValueIteratorFromWrapper(input core.Wrapper) *FontFaceSetValueIterator {
	return FontFaceSetValueIteratorFromJS(input.JSValue())
}

func (_this *FontFaceSetValueIterator) Next() (_result *FontFaceSetValueIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FontFaceSetValueIteratorValue // javascript: FontFaceSetValueIteratorValue _what_return_name
	)
	_converted = FontFaceSetValueIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: FontFaceSource
type FontFaceSource struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *FontFaceSource) JSValue() js.Value {
	return _this.Value_JS
}

// FontFaceSourceFromJS is casting a js.Value into FontFaceSource.
func FontFaceSourceFromJS(value js.Value) *FontFaceSource {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FontFaceSource{}
	ret.Value_JS = value
	return ret
}

// FontFaceSourceFromJS is casting from something that holds a js.Value into FontFaceSource.
func FontFaceSourceFromWrapper(input core.Wrapper) *FontFaceSource {
	return FontFaceSourceFromJS(input.JSValue())
}

// Fonts returning attribute 'fonts' with
// type FontFaceSet (idl: FontFaceSet).
func (_this *FontFaceSource) Fonts() *FontFaceSet {
	var ret *FontFaceSet
	value := _this.Value_JS.Get("fonts")
	ret = FontFaceSetFromJS(value)
	return ret
}

// class: Promise
type PromiseFontFace struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseFontFace) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseFontFaceFromJS is casting a js.Value into PromiseFontFace.
func PromiseFontFaceFromJS(value js.Value) *PromiseFontFace {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseFontFace{}
	ret.Value_JS = value
	return ret
}

// PromiseFontFaceFromJS is casting from something that holds a js.Value into PromiseFontFace.
func PromiseFontFaceFromWrapper(input core.Wrapper) *PromiseFontFace {
	return PromiseFontFaceFromJS(input.JSValue())
}

func (_this *PromiseFontFace) Then(onFulfilled *PromiseFontFaceOnFulfilled, onRejected *PromiseFontFaceOnRejected) (_result *PromiseFontFace) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseFontFaceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseFontFace) Catch(onRejected *PromiseFontFaceOnRejected) (_result *PromiseFontFace) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseFontFaceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseFontFace) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseFontFace) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseFontFaceFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceFontFace struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseSequenceFontFace) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseSequenceFontFaceFromJS is casting a js.Value into PromiseSequenceFontFace.
func PromiseSequenceFontFaceFromJS(value js.Value) *PromiseSequenceFontFace {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceFontFace{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceFontFaceFromJS is casting from something that holds a js.Value into PromiseSequenceFontFace.
func PromiseSequenceFontFaceFromWrapper(input core.Wrapper) *PromiseSequenceFontFace {
	return PromiseSequenceFontFaceFromJS(input.JSValue())
}

func (_this *PromiseSequenceFontFace) Then(onFulfilled *PromiseSequenceFontFaceOnFulfilled, onRejected *PromiseSequenceFontFaceOnRejected) (_result *PromiseSequenceFontFace) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceFontFaceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceFontFace) Catch(onRejected *PromiseSequenceFontFaceOnRejected) (_result *PromiseSequenceFontFace) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceFontFaceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceFontFace) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceFontFace) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceFontFace // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceFontFaceFromJS(_returned)
	_result = _converted
	return
}
