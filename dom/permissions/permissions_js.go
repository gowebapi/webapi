// Code generated by webidl-bind. DO NOT EDIT.

package permissions

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.EventHandler
// domcore.EventTarget
// javascript.Object
// javascript.Promise

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: PermissionState
type PermissionState int

const (
	GrantedPermissionState PermissionState = iota
	DeniedPermissionState
	PromptPermissionState
)

var permissionStateToWasmTable = []string{
	"granted", "denied", "prompt",
}

var permissionStateFromWasmTable = map[string]PermissionState{
	"granted": GrantedPermissionState, "denied": DeniedPermissionState, "prompt": PromptPermissionState,
}

// JSValue is converting this enum into a java object
func (this *PermissionState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PermissionState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(permissionStateToWasmTable) {
		return permissionStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// PermissionStateFromJS is converting a javascript value into
// a PermissionState enum value.
func PermissionStateFromJS(value js.Value) PermissionState {
	key := value.String()
	conv, ok := permissionStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// interface: PermissionStatus
type PermissionStatus struct {
	domcore.EventTarget
}

// PermissionStatusFromJS is casting a js.Wrapper into PermissionStatus.
func PermissionStatusFromJS(value js.Wrapper) *PermissionStatus {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PermissionStatus{}
	ret.Value_JS = input
	return ret
}

// State returning attribute 'state' with
// type PermissionState (idl: PermissionState).
func (_this *PermissionStatus) State() PermissionState {
	var ret PermissionState
	value := _this.Value_JS.Get("state")
	ret = PermissionStateFromJS(value)
	return ret
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PermissionStatus) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PermissionStatus) SetOnchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchange", input)
}

// interface: Permissions
type Permissions struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Permissions) JSValue() js.Value {
	return _this.Value_JS
}

// PermissionsFromJS is casting a js.Wrapper into Permissions.
func PermissionsFromJS(value js.Wrapper) *Permissions {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Permissions{}
	ret.Value_JS = input
	return ret
}

func (_this *Permissions) Query(permissionDesc *javascript.Object) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := permissionDesc.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("query", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}
