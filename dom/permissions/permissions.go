// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package permissions

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.Object
// javascript.PromiseFinally

// source idl files:
// permissions.idl
// promises.idl

// transform files:
// permissions.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: PermissionState
type PermissionState int

const (
	GrantedPermissionState PermissionState = iota
	DeniedPermissionState
	PromptPermissionState
)

var permissionStateToWasmTable = []string{
	"granted", "denied", "prompt",
}

var permissionStateFromWasmTable = map[string]PermissionState{
	"granted": GrantedPermissionState, "denied": DeniedPermissionState, "prompt": PromptPermissionState,
}

// JSValue is converting this enum into a javascript object
func (this *PermissionState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PermissionState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(permissionStateToWasmTable) {
		return permissionStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// PermissionStateFromJS is converting a javascript value into
// a PermissionState enum value.
func PermissionStateFromJS(value js.Value) PermissionState {
	key := value.String()
	conv, ok := permissionStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: PromiseTemplateOnFulfilled
type PromisePermissionStatusOnFulfilledFunc func(value *PermissionStatus)

// PromisePermissionStatusOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromisePermissionStatusOnFulfilled js.Func

func PromisePermissionStatusOnFulfilledToJS(callback PromisePermissionStatusOnFulfilledFunc) *PromisePermissionStatusOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromisePermissionStatusOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *PermissionStatus // javascript: PermissionStatus value
		)
		_p0 = PermissionStatusFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromisePermissionStatusOnFulfilledFromJS(_value js.Value) PromisePermissionStatusOnFulfilledFunc {
	return func(value *PermissionStatus) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromisePermissionStatusOnRejectedFunc func(reason js.Value)

// PromisePermissionStatusOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromisePermissionStatusOnRejected js.Func

func PromisePermissionStatusOnRejectedToJS(callback PromisePermissionStatusOnRejectedFunc) *PromisePermissionStatusOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromisePermissionStatusOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromisePermissionStatusOnRejectedFromJS(_value js.Value) PromisePermissionStatusOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: DevicePermissionDescriptor
type DevicePermissionDescriptor struct {
	Name     string
	DeviceId string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *DevicePermissionDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.DeviceId
	out.Set("deviceId", value1)
	return out
}

// DevicePermissionDescriptorFromJS is allocating a new
// DevicePermissionDescriptor object and copy all values in the value javascript object.
func DevicePermissionDescriptorFromJS(value js.Value) *DevicePermissionDescriptor {
	var out DevicePermissionDescriptor
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 string // javascript: DOMString {deviceId DeviceId deviceId}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("deviceId")).String()
	out.DeviceId = value1
	return &out
}

// dictionary: MidiPermissionDescriptor
type MidiPermissionDescriptor struct {
	Name  string
	Sysex bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *MidiPermissionDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.Sysex
	out.Set("sysex", value1)
	return out
}

// MidiPermissionDescriptorFromJS is allocating a new
// MidiPermissionDescriptor object and copy all values in the value javascript object.
func MidiPermissionDescriptorFromJS(value js.Value) *MidiPermissionDescriptor {
	var out MidiPermissionDescriptor
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 bool   // javascript: boolean {sysex Sysex sysex}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("sysex")).Bool()
	out.Sysex = value1
	return &out
}

// dictionary: PermissionDescriptor
type PermissionDescriptor struct {
	Name string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PermissionDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	return out
}

// PermissionDescriptorFromJS is allocating a new
// PermissionDescriptor object and copy all values in the value javascript object.
func PermissionDescriptorFromJS(value js.Value) *PermissionDescriptor {
	var out PermissionDescriptor
	var (
		value0 string // javascript: DOMString {name Name name}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	return &out
}

// dictionary: PermissionSetParameters
type PermissionSetParameters struct {
	Descriptor *PermissionDescriptor
	State      PermissionState
	OneRealm   bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PermissionSetParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Descriptor.JSValue()
	out.Set("descriptor", value0)
	value1 := _this.State.JSValue()
	out.Set("state", value1)
	value2 := _this.OneRealm
	out.Set("oneRealm", value2)
	return out
}

// PermissionSetParametersFromJS is allocating a new
// PermissionSetParameters object and copy all values in the value javascript object.
func PermissionSetParametersFromJS(value js.Value) *PermissionSetParameters {
	var out PermissionSetParameters
	var (
		value0 *PermissionDescriptor // javascript: PermissionDescriptor {descriptor Descriptor descriptor}
		value1 PermissionState       // javascript: PermissionState {state State state}
		value2 bool                  // javascript: boolean {oneRealm OneRealm oneRealm}
	)
	value0 = PermissionDescriptorFromJS(value.Get("descriptor"))
	out.Descriptor = value0
	value1 = PermissionStateFromJS(value.Get("state"))
	out.State = value1
	value2 = (value.Get("oneRealm")).Bool()
	out.OneRealm = value2
	return &out
}

// dictionary: PushPermissionDescriptor
type PushPermissionDescriptor struct {
	Name            string
	UserVisibleOnly bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PushPermissionDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.UserVisibleOnly
	out.Set("userVisibleOnly", value1)
	return out
}

// PushPermissionDescriptorFromJS is allocating a new
// PushPermissionDescriptor object and copy all values in the value javascript object.
func PushPermissionDescriptorFromJS(value js.Value) *PushPermissionDescriptor {
	var out PushPermissionDescriptor
	var (
		value0 string // javascript: DOMString {name Name name}
		value1 bool   // javascript: boolean {userVisibleOnly UserVisibleOnly userVisibleOnly}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("userVisibleOnly")).Bool()
	out.UserVisibleOnly = value1
	return &out
}

// class: PermissionStatus
type PermissionStatus struct {
	domcore.EventTarget
}

// PermissionStatusFromJS is casting a js.Value into PermissionStatus.
func PermissionStatusFromJS(value js.Value) *PermissionStatus {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PermissionStatus{}
	ret.Value_JS = value
	return ret
}

// PermissionStatusFromJS is casting from something that holds a js.Value into PermissionStatus.
func PermissionStatusFromWrapper(input core.Wrapper) *PermissionStatus {
	return PermissionStatusFromJS(input.JSValue())
}

// State returning attribute 'state' with
// type PermissionState (idl: PermissionState).
func (_this *PermissionStatus) State() PermissionState {
	var ret PermissionState
	value := _this.Value_JS.Get("state")
	ret = PermissionStateFromJS(value)
	return ret
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PermissionStatus) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncPermissionStatus_domcore_Event(listener func(event *domcore.Event, target *PermissionStatus)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := PermissionStatusFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *PermissionStatus) AddEventChange(listener func(event *domcore.Event, currentTarget *PermissionStatus)) js.Func {
	cb := eventFuncPermissionStatus_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *PermissionStatus) SetOnChange(listener func(event *domcore.Event, currentTarget *PermissionStatus)) js.Func {
	cb := eventFuncPermissionStatus_domcore_Event(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

// class: Permissions
type Permissions struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Permissions) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PermissionsFromJS is casting a js.Value into Permissions.
func PermissionsFromJS(value js.Value) *Permissions {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Permissions{}
	ret.Value_JS = value
	return ret
}

// PermissionsFromJS is casting from something that holds a js.Value into Permissions.
func PermissionsFromWrapper(input core.Wrapper) *Permissions {
	return PermissionsFromJS(input.JSValue())
}

func (_this *Permissions) Query(permissionDesc *javascript.Object) (_result *PromisePermissionStatus) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := permissionDesc.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("query", _args[0:_end]...)
	var (
		_converted *PromisePermissionStatus // javascript: Promise _what_return_name
	)
	_converted = PromisePermissionStatusFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromisePermissionStatus struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromisePermissionStatus) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromisePermissionStatusFromJS is casting a js.Value into PromisePermissionStatus.
func PromisePermissionStatusFromJS(value js.Value) *PromisePermissionStatus {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromisePermissionStatus{}
	ret.Value_JS = value
	return ret
}

// PromisePermissionStatusFromJS is casting from something that holds a js.Value into PromisePermissionStatus.
func PromisePermissionStatusFromWrapper(input core.Wrapper) *PromisePermissionStatus {
	return PromisePermissionStatusFromJS(input.JSValue())
}

func (_this *PromisePermissionStatus) Then(onFulfilled *PromisePermissionStatusOnFulfilled, onRejected *PromisePermissionStatusOnRejected) (_result *PromisePermissionStatus) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromisePermissionStatus // javascript: Promise _what_return_name
	)
	_converted = PromisePermissionStatusFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromisePermissionStatus) Catch(onRejected *PromisePermissionStatusOnRejected) (_result *PromisePermissionStatus) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromisePermissionStatus // javascript: Promise _what_return_name
	)
	_converted = PromisePermissionStatusFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromisePermissionStatus) Finally(onFinally *javascript.PromiseFinally) (_result *PromisePermissionStatus) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromisePermissionStatus // javascript: Promise _what_return_name
	)
	_converted = PromisePermissionStatusFromJS(_returned)
	_result = _converted
	return
}
