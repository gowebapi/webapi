// Code generated by webidl-bind. DO NOT EDIT.

package dom

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/css/animations/webani"
	"github.com/gowebapi/webapi/css/cssom"
	"github.com/gowebapi/webapi/css/cssom/view"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// cssom.CSSStyleSheet
// cssom.StyleSheetList
// domcore.DOMTokenList
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// geometry.DOMPoint
// geometry.DOMPointInit
// geometry.DOMQuad
// geometry.DOMQuadInit
// geometry.DOMRect
// geometry.DOMRectList
// geometry.DOMRectReadOnly
// javascript.FrozenArray
// javascript.Object
// javascript.PromiseFinally
// javascript.PromiseVoid
// typedom.StylePropertyMapReadOnly
// view.BoxQuadOptions
// view.ConvertCoordinateOptions
// view.ScrollToOptions
// webani.Animation

// source idl files:
// box-tree-api.idl
// dom.idl
// fullscreen.idl
// promises.idl

// transform files:
// box-tree-api.go.md
// dom.go.md
// fullscreen.go.md
// promises.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: FragmentFilter
type FragmentFilter int

const (
	DirectFragmentsOnlyFragmentFilter FragmentFilter = iota
	FragmentHierarchyFragmentFilter
)

var fragmentFilterToWasmTable = []string{
	"direct-fragments-only", "fragment-hierarchy",
}

var fragmentFilterFromWasmTable = map[string]FragmentFilter{
	"direct-fragments-only": DirectFragmentsOnlyFragmentFilter, "fragment-hierarchy": FragmentHierarchyFragmentFilter,
}

// JSValue is converting this enum into a javascript object
func (this *FragmentFilter) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this FragmentFilter) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(fragmentFilterToWasmTable) {
		return fragmentFilterToWasmTable[idx]
	}
	panic("unknown input value")
}

// FragmentFilterFromJS is converting a javascript value into
// a FragmentFilter enum value.
func FragmentFilterFromJS(value js.Value) FragmentFilter {
	key := value.String()
	conv, ok := fragmentFilterFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: FullscreenNavigationUI
type FullscreenNavigationUI int

const (
	AutoFullscreenNavigationUI FullscreenNavigationUI = iota
	ShowFullscreenNavigationUI
	HideFullscreenNavigationUI
)

var fullscreenNavigationUIToWasmTable = []string{
	"auto", "show", "hide",
}

var fullscreenNavigationUIFromWasmTable = map[string]FullscreenNavigationUI{
	"auto": AutoFullscreenNavigationUI, "show": ShowFullscreenNavigationUI, "hide": HideFullscreenNavigationUI,
}

// JSValue is converting this enum into a javascript object
func (this *FullscreenNavigationUI) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this FullscreenNavigationUI) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(fullscreenNavigationUIToWasmTable) {
		return fullscreenNavigationUIToWasmTable[idx]
	}
	panic("unknown input value")
}

// FullscreenNavigationUIFromJS is converting a javascript value into
// a FullscreenNavigationUI enum value.
func FullscreenNavigationUIFromJS(value js.Value) FullscreenNavigationUI {
	key := value.String()
	conv, ok := fullscreenNavigationUIFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ShadowRootMode
type ShadowRootMode int

const (
	OpenShadowRootMode ShadowRootMode = iota
	ClosedShadowRootMode
)

var shadowRootModeToWasmTable = []string{
	"open", "closed",
}

var shadowRootModeFromWasmTable = map[string]ShadowRootMode{
	"open": OpenShadowRootMode, "closed": ClosedShadowRootMode,
}

// JSValue is converting this enum into a javascript object
func (this *ShadowRootMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ShadowRootMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(shadowRootModeToWasmTable) {
		return shadowRootModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// ShadowRootModeFromJS is converting a javascript value into
// a ShadowRootMode enum value.
func ShadowRootModeFromJS(value js.Value) ShadowRootMode {
	key := value.String()
	conv, ok := shadowRootModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: NodeListForEach
type NodeListForEachFunc func(currentValue *Node, currentIndex int, listObj *NodeList)

// NodeListForEach is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type NodeListForEach js.Func

func NodeListForEachToJS(callback NodeListForEachFunc) *NodeListForEach {
	if callback == nil {
		return nil
	}
	ret := NodeListForEach(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Node     // javascript: Node currentValue
			_p1 int       // javascript: long currentIndex
			_p2 *NodeList // javascript: NodeList listObj
		)
		_p0 = NodeFromJS(args[0])
		_p1 = (args[1]).Int()
		_p2 = NodeListFromJS(args[2])
		callback(_p0, _p1, _p2)

		// returning no return value
		return nil
	}))
	return &ret
}

func NodeListForEachFromJS(_value js.Value) NodeListForEachFunc {
	return func(currentValue *Node, currentIndex int, listObj *NodeList) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := currentValue.JSValue()
		_args[0] = _p0
		_end++
		_p1 := currentIndex
		_args[1] = _p1
		_end++
		_p2 := listObj.JSValue()
		_args[2] = _p2
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseDeadFragmentInformationOnFulfilledFunc func(value *DeadFragmentInformation)

// PromiseDeadFragmentInformationOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseDeadFragmentInformationOnFulfilled js.Func

func PromiseDeadFragmentInformationOnFulfilledToJS(callback PromiseDeadFragmentInformationOnFulfilledFunc) *PromiseDeadFragmentInformationOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseDeadFragmentInformationOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *DeadFragmentInformation // javascript: DeadFragmentInformation value
		)
		_p0 = DeadFragmentInformationFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseDeadFragmentInformationOnFulfilledFromJS(_value js.Value) PromiseDeadFragmentInformationOnFulfilledFunc {
	return func(value *DeadFragmentInformation) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseDeadFragmentInformationOnRejectedFunc func(reason js.Value)

// PromiseDeadFragmentInformationOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseDeadFragmentInformationOnRejected js.Func

func PromiseDeadFragmentInformationOnRejectedToJS(callback PromiseDeadFragmentInformationOnRejectedFunc) *PromiseDeadFragmentInformationOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseDeadFragmentInformationOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseDeadFragmentInformationOnRejectedFromJS(_value js.Value) PromiseDeadFragmentInformationOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: FullscreenOptions
type FullscreenOptions struct {
	NavigationUI FullscreenNavigationUI
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FullscreenOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.NavigationUI.JSValue()
	out.Set("navigationUI", value0)
	return out
}

// FullscreenOptionsFromJS is allocating a new
// FullscreenOptions object and copy all values in the value javascript object.
func FullscreenOptionsFromJS(value js.Value) *FullscreenOptions {
	var out FullscreenOptions
	var (
		value0 FullscreenNavigationUI // javascript: FullscreenNavigationUI {navigationUI NavigationUI navigationUI}
	)
	value0 = FullscreenNavigationUIFromJS(value.Get("navigationUI"))
	out.NavigationUI = value0
	return &out
}

// dictionary: GetRootNodeOptions
type GetRootNodeOptions struct {
	Composed bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *GetRootNodeOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Composed
	out.Set("composed", value0)
	return out
}

// GetRootNodeOptionsFromJS is allocating a new
// GetRootNodeOptions object and copy all values in the value javascript object.
func GetRootNodeOptionsFromJS(value js.Value) *GetRootNodeOptions {
	var out GetRootNodeOptions
	var (
		value0 bool // javascript: boolean {composed Composed composed}
	)
	value0 = (value.Get("composed")).Bool()
	out.Composed = value0
	return &out
}

// dictionary: NodeListEntryIteratorValue
type NodeListEntryIteratorValue struct {
	Value []js.Value
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *NodeListEntryIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Value))
	for __idx0, __seq_in0 := range _this.Value {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// NodeListEntryIteratorValueFromJS is allocating a new
// NodeListEntryIteratorValue object and copy all values in the value javascript object.
func NodeListEntryIteratorValueFromJS(value js.Value) *NodeListEntryIteratorValue {
	var out NodeListEntryIteratorValue
	var (
		value0 []js.Value // javascript: sequence<any> {value Value value}
		value1 bool       // javascript: boolean {done Done done}
	)
	__length0 := value.Get("value").Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Get("value").Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: NodeListKeyIteratorValue
type NodeListKeyIteratorValue struct {
	Value uint
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *NodeListKeyIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// NodeListKeyIteratorValueFromJS is allocating a new
// NodeListKeyIteratorValue object and copy all values in the value javascript object.
func NodeListKeyIteratorValueFromJS(value js.Value) *NodeListKeyIteratorValue {
	var out NodeListKeyIteratorValue
	var (
		value0 uint // javascript: unsigned long {value Value value}
		value1 bool // javascript: boolean {done Done done}
	)
	value0 = (uint)((value.Get("value")).Int())
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: NodeListValueIteratorValue
type NodeListValueIteratorValue struct {
	Value *Node
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *NodeListValueIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// NodeListValueIteratorValueFromJS is allocating a new
// NodeListValueIteratorValue object and copy all values in the value javascript object.
func NodeListValueIteratorValueFromJS(value js.Value) *NodeListValueIteratorValue {
	var out NodeListValueIteratorValue
	var (
		value0 *Node // javascript: Node {value Value value}
		value1 bool  // javascript: boolean {done Done done}
	)
	value0 = NodeFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: ShadowRootInit
type ShadowRootInit struct {
	Mode ShadowRootMode
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ShadowRootInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Mode.JSValue()
	out.Set("mode", value0)
	return out
}

// ShadowRootInitFromJS is allocating a new
// ShadowRootInit object and copy all values in the value javascript object.
func ShadowRootInitFromJS(value js.Value) *ShadowRootInit {
	var out ShadowRootInit
	var (
		value0 ShadowRootMode // javascript: ShadowRootMode {mode Mode mode}
	)
	value0 = ShadowRootModeFromJS(value.Get("mode"))
	out.Mode = value0
	return &out
}

// class: AbstractRange
type AbstractRange struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *AbstractRange) JSValue() js.Value {
	return _this.Value_JS
}

// AbstractRangeFromJS is casting a js.Value into AbstractRange.
func AbstractRangeFromJS(value js.Value) *AbstractRange {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &AbstractRange{}
	ret.Value_JS = value
	return ret
}

// AbstractRangeFromJS is casting from something that holds a js.Value into AbstractRange.
func AbstractRangeFromWrapper(input core.Wrapper) *AbstractRange {
	return AbstractRangeFromJS(input.JSValue())
}

// StartContainer returning attribute 'startContainer' with
// type Node (idl: Node).
func (_this *AbstractRange) StartContainer() *Node {
	var ret *Node
	value := _this.Value_JS.Get("startContainer")
	ret = NodeFromJS(value)
	return ret
}

// StartOffset returning attribute 'startOffset' with
// type uint (idl: unsigned long).
func (_this *AbstractRange) StartOffset() uint {
	var ret uint
	value := _this.Value_JS.Get("startOffset")
	ret = (uint)((value).Int())
	return ret
}

// EndContainer returning attribute 'endContainer' with
// type Node (idl: Node).
func (_this *AbstractRange) EndContainer() *Node {
	var ret *Node
	value := _this.Value_JS.Get("endContainer")
	ret = NodeFromJS(value)
	return ret
}

// EndOffset returning attribute 'endOffset' with
// type uint (idl: unsigned long).
func (_this *AbstractRange) EndOffset() uint {
	var ret uint
	value := _this.Value_JS.Get("endOffset")
	ret = (uint)((value).Int())
	return ret
}

// Collapsed returning attribute 'collapsed' with
// type bool (idl: boolean).
func (_this *AbstractRange) Collapsed() bool {
	var ret bool
	value := _this.Value_JS.Get("collapsed")
	ret = (value).Bool()
	return ret
}

// class: Attr
type Attr struct {
	Node
}

// AttrFromJS is casting a js.Value into Attr.
func AttrFromJS(value js.Value) *Attr {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Attr{}
	ret.Value_JS = value
	return ret
}

// AttrFromJS is casting from something that holds a js.Value into Attr.
func AttrFromWrapper(input core.Wrapper) *Attr {
	return AttrFromJS(input.JSValue())
}

// NamespaceURI returning attribute 'namespaceURI' with
// type string (idl: DOMString).
func (_this *Attr) NamespaceURI() *string {
	var ret *string
	value := _this.Value_JS.Get("namespaceURI")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Prefix returning attribute 'prefix' with
// type string (idl: DOMString).
func (_this *Attr) Prefix() *string {
	var ret *string
	value := _this.Value_JS.Get("prefix")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// LocalName returning attribute 'localName' with
// type string (idl: DOMString).
func (_this *Attr) LocalName() string {
	var ret string
	value := _this.Value_JS.Get("localName")
	ret = (value).String()
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *Attr) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *Attr) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *Attr) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// OwnerElement returning attribute 'ownerElement' with
// type Element (idl: Element).
func (_this *Attr) OwnerElement() *Element {
	var ret *Element
	value := _this.Value_JS.Get("ownerElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// Specified returning attribute 'specified' with
// type bool (idl: boolean).
func (_this *Attr) Specified() bool {
	var ret bool
	value := _this.Value_JS.Get("specified")
	ret = (value).Bool()
	return ret
}

// class: CDATASection
type CDATASection struct {
	Text
}

// CDATASectionFromJS is casting a js.Value into CDATASection.
func CDATASectionFromJS(value js.Value) *CDATASection {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CDATASection{}
	ret.Value_JS = value
	return ret
}

// CDATASectionFromJS is casting from something that holds a js.Value into CDATASection.
func CDATASectionFromWrapper(input core.Wrapper) *CDATASection {
	return CDATASectionFromJS(input.JSValue())
}

// class: CharacterData
type CharacterData struct {
	Node
}

// CharacterDataFromJS is casting a js.Value into CharacterData.
func CharacterDataFromJS(value js.Value) *CharacterData {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CharacterData{}
	ret.Value_JS = value
	return ret
}

// CharacterDataFromJS is casting from something that holds a js.Value into CharacterData.
func CharacterDataFromWrapper(input core.Wrapper) *CharacterData {
	return CharacterDataFromJS(input.JSValue())
}

// Data returning attribute 'data' with
// type string (idl: DOMString).
func (_this *CharacterData) Data() string {
	var ret string
	value := _this.Value_JS.Get("data")
	ret = (value).String()
	return ret
}

// SetData setting attribute 'data' with
// type string (idl: DOMString).
func (_this *CharacterData) SetData(value string) {
	input := value
	_this.Value_JS.Set("data", input)
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *CharacterData) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// PreviousElementSibling returning attribute 'previousElementSibling' with
// type Element (idl: Element).
func (_this *CharacterData) PreviousElementSibling() *Element {
	var ret *Element
	value := _this.Value_JS.Get("previousElementSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// NextElementSibling returning attribute 'nextElementSibling' with
// type Element (idl: Element).
func (_this *CharacterData) NextElementSibling() *Element {
	var ret *Element
	value := _this.Value_JS.Get("nextElementSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

func (_this *CharacterData) SubstringData(offset uint, count uint) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("substringData", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *CharacterData) AppendData(data string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("appendData", _args[0:_end]...)
	return
}

func (_this *CharacterData) InsertData(offset uint, data string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_p1 := data
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("insertData", _args[0:_end]...)
	return
}

func (_this *CharacterData) DeleteData(offset uint, count uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("deleteData", _args[0:_end]...)
	return
}

func (_this *CharacterData) ReplaceData(offset uint, count uint, data string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := data
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("replaceData", _args[0:_end]...)
	return
}

func (_this *CharacterData) Before(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("before", _args[0:_end]...)
	return
}

func (_this *CharacterData) After(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("after", _args[0:_end]...)
	return
}

func (_this *CharacterData) ReplaceWith(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("replaceWith", _args[0:_end]...)
	return
}

func (_this *CharacterData) Remove() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

// class: Comment
type Comment struct {
	CharacterData
}

// CommentFromJS is casting a js.Value into Comment.
func CommentFromJS(value js.Value) *Comment {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Comment{}
	ret.Value_JS = value
	return ret
}

// CommentFromJS is casting from something that holds a js.Value into Comment.
func CommentFromWrapper(input core.Wrapper) *Comment {
	return CommentFromJS(input.JSValue())
}

func NewComment(data *string) (_result *Comment) {
	_klass := js.Global().Get("Comment")
	var (
		_args [1]interface{}
		_end  int
	)
	if data != nil {

		var _p0 interface{}
		if data != nil {
			_p0 = *(data)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Comment // javascript: Comment _what_return_name
	)
	_converted = CommentFromJS(_returned)
	_result = _converted
	return
}

// class: DeadFragmentInformation
type DeadFragmentInformation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DeadFragmentInformation) JSValue() js.Value {
	return _this.Value_JS
}

// DeadFragmentInformationFromJS is casting a js.Value into DeadFragmentInformation.
func DeadFragmentInformationFromJS(value js.Value) *DeadFragmentInformation {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DeadFragmentInformation{}
	ret.Value_JS = value
	return ret
}

// DeadFragmentInformationFromJS is casting from something that holds a js.Value into DeadFragmentInformation.
func DeadFragmentInformationFromWrapper(input core.Wrapper) *DeadFragmentInformation {
	return DeadFragmentInformationFromJS(input.JSValue())
}

// Node returning attribute 'node' with
// type Node (idl: Node).
func (_this *DeadFragmentInformation) Node() *Node {
	var ret *Node
	value := _this.Value_JS.Get("node")
	ret = NodeFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type float64 (idl: double).
func (_this *DeadFragmentInformation) Width() float64 {
	var ret float64
	value := _this.Value_JS.Get("width")
	ret = (value).Float()
	return ret
}

// Height returning attribute 'height' with
// type float64 (idl: double).
func (_this *DeadFragmentInformation) Height() float64 {
	var ret float64
	value := _this.Value_JS.Get("height")
	ret = (value).Float()
	return ret
}

// Top returning attribute 'top' with
// type float64 (idl: double).
func (_this *DeadFragmentInformation) Top() float64 {
	var ret float64
	value := _this.Value_JS.Get("top")
	ret = (value).Float()
	return ret
}

// Left returning attribute 'left' with
// type float64 (idl: double).
func (_this *DeadFragmentInformation) Left() float64 {
	var ret float64
	value := _this.Value_JS.Get("left")
	ret = (value).Float()
	return ret
}

// IsOverflowed returning attribute 'isOverflowed' with
// type bool (idl: boolean).
func (_this *DeadFragmentInformation) IsOverflowed() bool {
	var ret bool
	value := _this.Value_JS.Get("isOverflowed")
	ret = (value).Bool()
	return ret
}

// Children returning attribute 'children' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *DeadFragmentInformation) Children() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("children")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = javascript.FrozenArrayFromJS(value)
	}
	return ret
}

// NextSibling returning attribute 'nextSibling' with
// type DeadFragmentInformation (idl: DeadFragmentInformation).
func (_this *DeadFragmentInformation) NextSibling() *DeadFragmentInformation {
	var ret *DeadFragmentInformation
	value := _this.Value_JS.Get("nextSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DeadFragmentInformationFromJS(value)
	}
	return ret
}

// PreviousSibling returning attribute 'previousSibling' with
// type DeadFragmentInformation (idl: DeadFragmentInformation).
func (_this *DeadFragmentInformation) PreviousSibling() *DeadFragmentInformation {
	var ret *DeadFragmentInformation
	value := _this.Value_JS.Get("previousSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DeadFragmentInformationFromJS(value)
	}
	return ret
}

// NextInBox returning attribute 'nextInBox' with
// type DeadFragmentInformation (idl: DeadFragmentInformation).
func (_this *DeadFragmentInformation) NextInBox() *DeadFragmentInformation {
	var ret *DeadFragmentInformation
	value := _this.Value_JS.Get("nextInBox")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DeadFragmentInformationFromJS(value)
	}
	return ret
}

// PreviousInBox returning attribute 'previousInBox' with
// type DeadFragmentInformation (idl: DeadFragmentInformation).
func (_this *DeadFragmentInformation) PreviousInBox() *DeadFragmentInformation {
	var ret *DeadFragmentInformation
	value := _this.Value_JS.Get("previousInBox")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DeadFragmentInformationFromJS(value)
	}
	return ret
}

// class: DocumentFragment
type DocumentFragment struct {
	Node
}

// DocumentFragmentFromJS is casting a js.Value into DocumentFragment.
func DocumentFragmentFromJS(value js.Value) *DocumentFragment {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DocumentFragment{}
	ret.Value_JS = value
	return ret
}

// DocumentFragmentFromJS is casting from something that holds a js.Value into DocumentFragment.
func DocumentFragmentFromWrapper(input core.Wrapper) *DocumentFragment {
	return DocumentFragmentFromJS(input.JSValue())
}

func NewDocumentFragment() (_result *DocumentFragment) {
	_klass := js.Global().Get("DocumentFragment")
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

// Children returning attribute 'children' with
// type HTMLCollection (idl: HTMLCollection).
func (_this *DocumentFragment) Children() *HTMLCollection {
	var ret *HTMLCollection
	value := _this.Value_JS.Get("children")
	ret = HTMLCollectionFromJS(value)
	return ret
}

// FirstElementChild returning attribute 'firstElementChild' with
// type Element (idl: Element).
func (_this *DocumentFragment) FirstElementChild() *Element {
	var ret *Element
	value := _this.Value_JS.Get("firstElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// LastElementChild returning attribute 'lastElementChild' with
// type Element (idl: Element).
func (_this *DocumentFragment) LastElementChild() *Element {
	var ret *Element
	value := _this.Value_JS.Get("lastElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// ChildElementCount returning attribute 'childElementCount' with
// type uint (idl: unsigned long).
func (_this *DocumentFragment) ChildElementCount() uint {
	var ret uint
	value := _this.Value_JS.Get("childElementCount")
	ret = (uint)((value).Int())
	return ret
}

func (_this *DocumentFragment) GetElementById(elementId string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementById", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *DocumentFragment) Prepend(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("prepend", _args[0:_end]...)
	return
}

func (_this *DocumentFragment) Append(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *DocumentFragment) QuerySelector(selectors string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelector", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *DocumentFragment) QuerySelectorAll(selectors string) (_result *NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelectorAll", _args[0:_end]...)
	var (
		_converted *NodeList // javascript: NodeList _what_return_name
	)
	_converted = NodeListFromJS(_returned)
	_result = _converted
	return
}

// class: DocumentType
type DocumentType struct {
	Node
}

// DocumentTypeFromJS is casting a js.Value into DocumentType.
func DocumentTypeFromJS(value js.Value) *DocumentType {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DocumentType{}
	ret.Value_JS = value
	return ret
}

// DocumentTypeFromJS is casting from something that holds a js.Value into DocumentType.
func DocumentTypeFromWrapper(input core.Wrapper) *DocumentType {
	return DocumentTypeFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *DocumentType) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// PublicId returning attribute 'publicId' with
// type string (idl: DOMString).
func (_this *DocumentType) PublicId() string {
	var ret string
	value := _this.Value_JS.Get("publicId")
	ret = (value).String()
	return ret
}

// SystemId returning attribute 'systemId' with
// type string (idl: DOMString).
func (_this *DocumentType) SystemId() string {
	var ret string
	value := _this.Value_JS.Get("systemId")
	ret = (value).String()
	return ret
}

func (_this *DocumentType) Before(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("before", _args[0:_end]...)
	return
}

func (_this *DocumentType) After(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("after", _args[0:_end]...)
	return
}

func (_this *DocumentType) ReplaceWith(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("replaceWith", _args[0:_end]...)
	return
}

func (_this *DocumentType) Remove() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

// class: Element
type Element struct {
	Node
}

// ElementFromJS is casting a js.Value into Element.
func ElementFromJS(value js.Value) *Element {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Element{}
	ret.Value_JS = value
	return ret
}

// ElementFromJS is casting from something that holds a js.Value into Element.
func ElementFromWrapper(input core.Wrapper) *Element {
	return ElementFromJS(input.JSValue())
}

// NamespaceURI returning attribute 'namespaceURI' with
// type string (idl: DOMString).
func (_this *Element) NamespaceURI() *string {
	var ret *string
	value := _this.Value_JS.Get("namespaceURI")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Prefix returning attribute 'prefix' with
// type string (idl: DOMString).
func (_this *Element) Prefix() *string {
	var ret *string
	value := _this.Value_JS.Get("prefix")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// LocalName returning attribute 'localName' with
// type string (idl: DOMString).
func (_this *Element) LocalName() string {
	var ret string
	value := _this.Value_JS.Get("localName")
	ret = (value).String()
	return ret
}

// TagName returning attribute 'tagName' with
// type string (idl: DOMString).
func (_this *Element) TagName() string {
	var ret string
	value := _this.Value_JS.Get("tagName")
	ret = (value).String()
	return ret
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *Element) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// SetId setting attribute 'id' with
// type string (idl: DOMString).
func (_this *Element) SetId(value string) {
	input := value
	_this.Value_JS.Set("id", input)
}

// ClassName returning attribute 'className' with
// type string (idl: DOMString).
func (_this *Element) ClassName() string {
	var ret string
	value := _this.Value_JS.Get("className")
	ret = (value).String()
	return ret
}

// SetClassName setting attribute 'className' with
// type string (idl: DOMString).
func (_this *Element) SetClassName(value string) {
	input := value
	_this.Value_JS.Set("className", input)
}

// ClassList returning attribute 'classList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *Element) ClassList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("classList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Slot returning attribute 'slot' with
// type string (idl: DOMString).
func (_this *Element) Slot() string {
	var ret string
	value := _this.Value_JS.Get("slot")
	ret = (value).String()
	return ret
}

// SetSlot setting attribute 'slot' with
// type string (idl: DOMString).
func (_this *Element) SetSlot(value string) {
	input := value
	_this.Value_JS.Set("slot", input)
}

// Attributes returning attribute 'attributes' with
// type NamedNodeMap (idl: NamedNodeMap).
func (_this *Element) Attributes() *NamedNodeMap {
	var ret *NamedNodeMap
	value := _this.Value_JS.Get("attributes")
	ret = NamedNodeMapFromJS(value)
	return ret
}

// ShadowRoot returning attribute 'shadowRoot' with
// type ShadowRoot (idl: ShadowRoot).
func (_this *Element) ShadowRoot() *ShadowRoot {
	var ret *ShadowRoot
	value := _this.Value_JS.Get("shadowRoot")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ShadowRootFromJS(value)
	}
	return ret
}

// InnerHTML returning attribute 'innerHTML' with
// type string (idl: DOMString).
func (_this *Element) InnerHTML() string {
	var ret string
	value := _this.Value_JS.Get("innerHTML")
	ret = (value).String()
	return ret
}

// SetInnerHTML setting attribute 'innerHTML' with
// type string (idl: DOMString).
func (_this *Element) SetInnerHTML(value string) {
	input := value
	_this.Value_JS.Set("innerHTML", input)
}

// OuterHTML returning attribute 'outerHTML' with
// type string (idl: DOMString).
func (_this *Element) OuterHTML() string {
	var ret string
	value := _this.Value_JS.Get("outerHTML")
	ret = (value).String()
	return ret
}

// SetOuterHTML setting attribute 'outerHTML' with
// type string (idl: DOMString).
func (_this *Element) SetOuterHTML(value string) {
	input := value
	_this.Value_JS.Set("outerHTML", input)
}

// ScrollTop returning attribute 'scrollTop' with
// type float64 (idl: unrestricted double).
func (_this *Element) ScrollTop() float64 {
	var ret float64
	value := _this.Value_JS.Get("scrollTop")
	ret = (value).Float()
	return ret
}

// SetScrollTop setting attribute 'scrollTop' with
// type float64 (idl: unrestricted double).
func (_this *Element) SetScrollTop(value float64) {
	input := value
	_this.Value_JS.Set("scrollTop", input)
}

// ScrollLeft returning attribute 'scrollLeft' with
// type float64 (idl: unrestricted double).
func (_this *Element) ScrollLeft() float64 {
	var ret float64
	value := _this.Value_JS.Get("scrollLeft")
	ret = (value).Float()
	return ret
}

// SetScrollLeft setting attribute 'scrollLeft' with
// type float64 (idl: unrestricted double).
func (_this *Element) SetScrollLeft(value float64) {
	input := value
	_this.Value_JS.Set("scrollLeft", input)
}

// ScrollWidth returning attribute 'scrollWidth' with
// type int (idl: long).
func (_this *Element) ScrollWidth() int {
	var ret int
	value := _this.Value_JS.Get("scrollWidth")
	ret = (value).Int()
	return ret
}

// ScrollHeight returning attribute 'scrollHeight' with
// type int (idl: long).
func (_this *Element) ScrollHeight() int {
	var ret int
	value := _this.Value_JS.Get("scrollHeight")
	ret = (value).Int()
	return ret
}

// ClientTop returning attribute 'clientTop' with
// type int (idl: long).
func (_this *Element) ClientTop() int {
	var ret int
	value := _this.Value_JS.Get("clientTop")
	ret = (value).Int()
	return ret
}

// ClientLeft returning attribute 'clientLeft' with
// type int (idl: long).
func (_this *Element) ClientLeft() int {
	var ret int
	value := _this.Value_JS.Get("clientLeft")
	ret = (value).Int()
	return ret
}

// ClientWidth returning attribute 'clientWidth' with
// type int (idl: long).
func (_this *Element) ClientWidth() int {
	var ret int
	value := _this.Value_JS.Get("clientWidth")
	ret = (value).Int()
	return ret
}

// ClientHeight returning attribute 'clientHeight' with
// type int (idl: long).
func (_this *Element) ClientHeight() int {
	var ret int
	value := _this.Value_JS.Get("clientHeight")
	ret = (value).Int()
	return ret
}

// OnFullscreenChange returning attribute 'onfullscreenchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Element) OnFullscreenChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfullscreenchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFullscreenError returning attribute 'onfullscreenerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Element) OnFullscreenError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfullscreenerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Children returning attribute 'children' with
// type HTMLCollection (idl: HTMLCollection).
func (_this *Element) Children() *HTMLCollection {
	var ret *HTMLCollection
	value := _this.Value_JS.Get("children")
	ret = HTMLCollectionFromJS(value)
	return ret
}

// FirstElementChild returning attribute 'firstElementChild' with
// type Element (idl: Element).
func (_this *Element) FirstElementChild() *Element {
	var ret *Element
	value := _this.Value_JS.Get("firstElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// LastElementChild returning attribute 'lastElementChild' with
// type Element (idl: Element).
func (_this *Element) LastElementChild() *Element {
	var ret *Element
	value := _this.Value_JS.Get("lastElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// ChildElementCount returning attribute 'childElementCount' with
// type uint (idl: unsigned long).
func (_this *Element) ChildElementCount() uint {
	var ret uint
	value := _this.Value_JS.Get("childElementCount")
	ret = (uint)((value).Int())
	return ret
}

// PreviousElementSibling returning attribute 'previousElementSibling' with
// type Element (idl: Element).
func (_this *Element) PreviousElementSibling() *Element {
	var ret *Element
	value := _this.Value_JS.Get("previousElementSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// NextElementSibling returning attribute 'nextElementSibling' with
// type Element (idl: Element).
func (_this *Element) NextElementSibling() *Element {
	var ret *Element
	value := _this.Value_JS.Get("nextElementSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// AssignedSlot returning attribute 'assignedSlot' with
// type js.Value (idl: HTMLSlotElement).
func (_this *Element) AssignedSlot() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("assignedSlot")
	ret = value
	return ret
}

// Role returning attribute 'role' with
// type string (idl: DOMString).
func (_this *Element) Role() *string {
	var ret *string
	value := _this.Value_JS.Get("role")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetRole setting attribute 'role' with
// type string (idl: DOMString).
func (_this *Element) SetRole(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("role", input)
}

// AriaActiveDescendant returning attribute 'ariaActiveDescendant' with
// type string (idl: DOMString).
func (_this *Element) AriaActiveDescendant() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaActiveDescendant")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaActiveDescendant setting attribute 'ariaActiveDescendant' with
// type string (idl: DOMString).
func (_this *Element) SetAriaActiveDescendant(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaActiveDescendant", input)
}

// AriaAtomic returning attribute 'ariaAtomic' with
// type string (idl: DOMString).
func (_this *Element) AriaAtomic() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaAtomic")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaAtomic setting attribute 'ariaAtomic' with
// type string (idl: DOMString).
func (_this *Element) SetAriaAtomic(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaAtomic", input)
}

// AriaAutoComplete returning attribute 'ariaAutoComplete' with
// type string (idl: DOMString).
func (_this *Element) AriaAutoComplete() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaAutoComplete")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaAutoComplete setting attribute 'ariaAutoComplete' with
// type string (idl: DOMString).
func (_this *Element) SetAriaAutoComplete(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaAutoComplete", input)
}

// AriaBusy returning attribute 'ariaBusy' with
// type string (idl: DOMString).
func (_this *Element) AriaBusy() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaBusy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaBusy setting attribute 'ariaBusy' with
// type string (idl: DOMString).
func (_this *Element) SetAriaBusy(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaBusy", input)
}

// AriaChecked returning attribute 'ariaChecked' with
// type string (idl: DOMString).
func (_this *Element) AriaChecked() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaChecked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaChecked setting attribute 'ariaChecked' with
// type string (idl: DOMString).
func (_this *Element) SetAriaChecked(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaChecked", input)
}

// AriaColCount returning attribute 'ariaColCount' with
// type string (idl: DOMString).
func (_this *Element) AriaColCount() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaColCount")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaColCount setting attribute 'ariaColCount' with
// type string (idl: DOMString).
func (_this *Element) SetAriaColCount(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaColCount", input)
}

// AriaColIndex returning attribute 'ariaColIndex' with
// type string (idl: DOMString).
func (_this *Element) AriaColIndex() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaColIndex")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaColIndex setting attribute 'ariaColIndex' with
// type string (idl: DOMString).
func (_this *Element) SetAriaColIndex(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaColIndex", input)
}

// AriaColSpan returning attribute 'ariaColSpan' with
// type string (idl: DOMString).
func (_this *Element) AriaColSpan() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaColSpan")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaColSpan setting attribute 'ariaColSpan' with
// type string (idl: DOMString).
func (_this *Element) SetAriaColSpan(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaColSpan", input)
}

// AriaControls returning attribute 'ariaControls' with
// type string (idl: DOMString).
func (_this *Element) AriaControls() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaControls")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaControls setting attribute 'ariaControls' with
// type string (idl: DOMString).
func (_this *Element) SetAriaControls(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaControls", input)
}

// AriaCurrent returning attribute 'ariaCurrent' with
// type string (idl: DOMString).
func (_this *Element) AriaCurrent() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaCurrent")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaCurrent setting attribute 'ariaCurrent' with
// type string (idl: DOMString).
func (_this *Element) SetAriaCurrent(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaCurrent", input)
}

// AriaDescribedBy returning attribute 'ariaDescribedBy' with
// type string (idl: DOMString).
func (_this *Element) AriaDescribedBy() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaDescribedBy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaDescribedBy setting attribute 'ariaDescribedBy' with
// type string (idl: DOMString).
func (_this *Element) SetAriaDescribedBy(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaDescribedBy", input)
}

// AriaDetails returning attribute 'ariaDetails' with
// type string (idl: DOMString).
func (_this *Element) AriaDetails() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaDetails")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaDetails setting attribute 'ariaDetails' with
// type string (idl: DOMString).
func (_this *Element) SetAriaDetails(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaDetails", input)
}

// AriaDisabled returning attribute 'ariaDisabled' with
// type string (idl: DOMString).
func (_this *Element) AriaDisabled() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaDisabled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaDisabled setting attribute 'ariaDisabled' with
// type string (idl: DOMString).
func (_this *Element) SetAriaDisabled(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaDisabled", input)
}

// AriaErrorMessage returning attribute 'ariaErrorMessage' with
// type string (idl: DOMString).
func (_this *Element) AriaErrorMessage() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaErrorMessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaErrorMessage setting attribute 'ariaErrorMessage' with
// type string (idl: DOMString).
func (_this *Element) SetAriaErrorMessage(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaErrorMessage", input)
}

// AriaExpanded returning attribute 'ariaExpanded' with
// type string (idl: DOMString).
func (_this *Element) AriaExpanded() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaExpanded")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaExpanded setting attribute 'ariaExpanded' with
// type string (idl: DOMString).
func (_this *Element) SetAriaExpanded(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaExpanded", input)
}

// AriaFlowTo returning attribute 'ariaFlowTo' with
// type string (idl: DOMString).
func (_this *Element) AriaFlowTo() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaFlowTo")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaFlowTo setting attribute 'ariaFlowTo' with
// type string (idl: DOMString).
func (_this *Element) SetAriaFlowTo(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaFlowTo", input)
}

// AriaHasPopup returning attribute 'ariaHasPopup' with
// type string (idl: DOMString).
func (_this *Element) AriaHasPopup() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaHasPopup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaHasPopup setting attribute 'ariaHasPopup' with
// type string (idl: DOMString).
func (_this *Element) SetAriaHasPopup(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaHasPopup", input)
}

// AriaHidden returning attribute 'ariaHidden' with
// type string (idl: DOMString).
func (_this *Element) AriaHidden() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaHidden")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaHidden setting attribute 'ariaHidden' with
// type string (idl: DOMString).
func (_this *Element) SetAriaHidden(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaHidden", input)
}

// AriaInvalid returning attribute 'ariaInvalid' with
// type string (idl: DOMString).
func (_this *Element) AriaInvalid() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaInvalid")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaInvalid setting attribute 'ariaInvalid' with
// type string (idl: DOMString).
func (_this *Element) SetAriaInvalid(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaInvalid", input)
}

// AriaKeyShortcuts returning attribute 'ariaKeyShortcuts' with
// type string (idl: DOMString).
func (_this *Element) AriaKeyShortcuts() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaKeyShortcuts")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaKeyShortcuts setting attribute 'ariaKeyShortcuts' with
// type string (idl: DOMString).
func (_this *Element) SetAriaKeyShortcuts(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaKeyShortcuts", input)
}

// AriaLabel returning attribute 'ariaLabel' with
// type string (idl: DOMString).
func (_this *Element) AriaLabel() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaLabel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaLabel setting attribute 'ariaLabel' with
// type string (idl: DOMString).
func (_this *Element) SetAriaLabel(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaLabel", input)
}

// AriaLabelledBy returning attribute 'ariaLabelledBy' with
// type string (idl: DOMString).
func (_this *Element) AriaLabelledBy() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaLabelledBy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaLabelledBy setting attribute 'ariaLabelledBy' with
// type string (idl: DOMString).
func (_this *Element) SetAriaLabelledBy(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaLabelledBy", input)
}

// AriaLevel returning attribute 'ariaLevel' with
// type string (idl: DOMString).
func (_this *Element) AriaLevel() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaLevel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaLevel setting attribute 'ariaLevel' with
// type string (idl: DOMString).
func (_this *Element) SetAriaLevel(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaLevel", input)
}

// AriaLive returning attribute 'ariaLive' with
// type string (idl: DOMString).
func (_this *Element) AriaLive() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaLive")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaLive setting attribute 'ariaLive' with
// type string (idl: DOMString).
func (_this *Element) SetAriaLive(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaLive", input)
}

// AriaModal returning attribute 'ariaModal' with
// type string (idl: DOMString).
func (_this *Element) AriaModal() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaModal")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaModal setting attribute 'ariaModal' with
// type string (idl: DOMString).
func (_this *Element) SetAriaModal(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaModal", input)
}

// AriaMultiLine returning attribute 'ariaMultiLine' with
// type string (idl: DOMString).
func (_this *Element) AriaMultiLine() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaMultiLine")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaMultiLine setting attribute 'ariaMultiLine' with
// type string (idl: DOMString).
func (_this *Element) SetAriaMultiLine(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaMultiLine", input)
}

// AriaMultiSelectable returning attribute 'ariaMultiSelectable' with
// type string (idl: DOMString).
func (_this *Element) AriaMultiSelectable() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaMultiSelectable")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaMultiSelectable setting attribute 'ariaMultiSelectable' with
// type string (idl: DOMString).
func (_this *Element) SetAriaMultiSelectable(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaMultiSelectable", input)
}

// AriaOrientation returning attribute 'ariaOrientation' with
// type string (idl: DOMString).
func (_this *Element) AriaOrientation() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaOrientation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaOrientation setting attribute 'ariaOrientation' with
// type string (idl: DOMString).
func (_this *Element) SetAriaOrientation(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaOrientation", input)
}

// AriaOwns returning attribute 'ariaOwns' with
// type string (idl: DOMString).
func (_this *Element) AriaOwns() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaOwns")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaOwns setting attribute 'ariaOwns' with
// type string (idl: DOMString).
func (_this *Element) SetAriaOwns(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaOwns", input)
}

// AriaPlaceholder returning attribute 'ariaPlaceholder' with
// type string (idl: DOMString).
func (_this *Element) AriaPlaceholder() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaPlaceholder")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaPlaceholder setting attribute 'ariaPlaceholder' with
// type string (idl: DOMString).
func (_this *Element) SetAriaPlaceholder(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaPlaceholder", input)
}

// AriaPosInSet returning attribute 'ariaPosInSet' with
// type string (idl: DOMString).
func (_this *Element) AriaPosInSet() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaPosInSet")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaPosInSet setting attribute 'ariaPosInSet' with
// type string (idl: DOMString).
func (_this *Element) SetAriaPosInSet(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaPosInSet", input)
}

// AriaPressed returning attribute 'ariaPressed' with
// type string (idl: DOMString).
func (_this *Element) AriaPressed() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaPressed")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaPressed setting attribute 'ariaPressed' with
// type string (idl: DOMString).
func (_this *Element) SetAriaPressed(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaPressed", input)
}

// AriaReadOnly returning attribute 'ariaReadOnly' with
// type string (idl: DOMString).
func (_this *Element) AriaReadOnly() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaReadOnly")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaReadOnly setting attribute 'ariaReadOnly' with
// type string (idl: DOMString).
func (_this *Element) SetAriaReadOnly(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaReadOnly", input)
}

// AriaRelevant returning attribute 'ariaRelevant' with
// type string (idl: DOMString).
func (_this *Element) AriaRelevant() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRelevant")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRelevant setting attribute 'ariaRelevant' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRelevant(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRelevant", input)
}

// AriaRequired returning attribute 'ariaRequired' with
// type string (idl: DOMString).
func (_this *Element) AriaRequired() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRequired")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRequired setting attribute 'ariaRequired' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRequired(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRequired", input)
}

// AriaRoleDescription returning attribute 'ariaRoleDescription' with
// type string (idl: DOMString).
func (_this *Element) AriaRoleDescription() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRoleDescription")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRoleDescription setting attribute 'ariaRoleDescription' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRoleDescription(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRoleDescription", input)
}

// AriaRowCount returning attribute 'ariaRowCount' with
// type string (idl: DOMString).
func (_this *Element) AriaRowCount() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRowCount")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRowCount setting attribute 'ariaRowCount' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRowCount(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRowCount", input)
}

// AriaRowIndex returning attribute 'ariaRowIndex' with
// type string (idl: DOMString).
func (_this *Element) AriaRowIndex() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRowIndex")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRowIndex setting attribute 'ariaRowIndex' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRowIndex(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRowIndex", input)
}

// AriaRowSpan returning attribute 'ariaRowSpan' with
// type string (idl: DOMString).
func (_this *Element) AriaRowSpan() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaRowSpan")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaRowSpan setting attribute 'ariaRowSpan' with
// type string (idl: DOMString).
func (_this *Element) SetAriaRowSpan(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaRowSpan", input)
}

// AriaSelected returning attribute 'ariaSelected' with
// type string (idl: DOMString).
func (_this *Element) AriaSelected() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaSelected")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaSelected setting attribute 'ariaSelected' with
// type string (idl: DOMString).
func (_this *Element) SetAriaSelected(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaSelected", input)
}

// AriaSetSize returning attribute 'ariaSetSize' with
// type string (idl: DOMString).
func (_this *Element) AriaSetSize() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaSetSize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaSetSize setting attribute 'ariaSetSize' with
// type string (idl: DOMString).
func (_this *Element) SetAriaSetSize(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaSetSize", input)
}

// AriaSort returning attribute 'ariaSort' with
// type string (idl: DOMString).
func (_this *Element) AriaSort() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaSort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaSort setting attribute 'ariaSort' with
// type string (idl: DOMString).
func (_this *Element) SetAriaSort(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaSort", input)
}

// AriaValueMax returning attribute 'ariaValueMax' with
// type string (idl: DOMString).
func (_this *Element) AriaValueMax() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaValueMax")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaValueMax setting attribute 'ariaValueMax' with
// type string (idl: DOMString).
func (_this *Element) SetAriaValueMax(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaValueMax", input)
}

// AriaValueMin returning attribute 'ariaValueMin' with
// type string (idl: DOMString).
func (_this *Element) AriaValueMin() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaValueMin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaValueMin setting attribute 'ariaValueMin' with
// type string (idl: DOMString).
func (_this *Element) SetAriaValueMin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaValueMin", input)
}

// AriaValueNow returning attribute 'ariaValueNow' with
// type string (idl: DOMString).
func (_this *Element) AriaValueNow() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaValueNow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaValueNow setting attribute 'ariaValueNow' with
// type string (idl: DOMString).
func (_this *Element) SetAriaValueNow(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaValueNow", input)
}

// AriaValueText returning attribute 'ariaValueText' with
// type string (idl: DOMString).
func (_this *Element) AriaValueText() *string {
	var ret *string
	value := _this.Value_JS.Get("ariaValueText")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetAriaValueText setting attribute 'ariaValueText' with
// type string (idl: DOMString).
func (_this *Element) SetAriaValueText(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("ariaValueText", input)
}

// event attribute: domcore.Event
func eventFuncElement_domcore_Event(listener func(event *domcore.Event, target *Element)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := ElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFullscreenChange is adding doing AddEventListener for 'FullscreenChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Element) AddEventFullscreenChange(listener func(event *domcore.Event, currentTarget *Element)) js.Func {
	cb := eventFuncElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "fullscreenchange", cb)
	return cb
}

// SetOnFullscreenChange is assigning a function to 'onfullscreenchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Element) SetOnFullscreenChange(listener func(event *domcore.Event, currentTarget *Element)) js.Func {
	cb := eventFuncElement_domcore_Event(listener)
	_this.Value_JS.Set("onfullscreenchange", cb)
	return cb
}

// AddFullscreenError is adding doing AddEventListener for 'FullscreenError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Element) AddEventFullscreenError(listener func(event *domcore.Event, currentTarget *Element)) js.Func {
	cb := eventFuncElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "fullscreenerror", cb)
	return cb
}

// SetOnFullscreenError is assigning a function to 'onfullscreenerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Element) SetOnFullscreenError(listener func(event *domcore.Event, currentTarget *Element)) js.Func {
	cb := eventFuncElement_domcore_Event(listener)
	_this.Value_JS.Set("onfullscreenerror", cb)
	return cb
}

func (_this *Element) HasAttributes() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasAttributes", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) GetAttributeNames() (_result []string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getAttributeNames", _args[0:_end]...)
	var (
		_converted []string // javascript: sequence<DOMString> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]string, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 string
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = (__seq_in0).String()
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Element) GetAttribute(qualifiedName string) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttribute", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Element) GetAttributeNS(namespace *string, localName string) (_result *string) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttributeNS", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Element) SetAttribute(qualifiedName string, value string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setAttribute", _args[0:_end]...)
	return
}

func (_this *Element) SetAttributeNS(namespace *string, qualifiedName string, value string) {
	var (
		_args [3]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	_p2 := value
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("setAttributeNS", _args[0:_end]...)
	return
}

func (_this *Element) RemoveAttribute(qualifiedName string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("removeAttribute", _args[0:_end]...)
	return
}

func (_this *Element) RemoveAttributeNS(namespace *string, localName string) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("removeAttributeNS", _args[0:_end]...)
	return
}

func (_this *Element) ToggleAttribute(qualifiedName string, force *bool) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	if force != nil {

		var _p1 interface{}
		if force != nil {
			_p1 = *(force)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("toggleAttribute", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) HasAttribute(qualifiedName string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("hasAttribute", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) HasAttributeNS(namespace *string, localName string) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("hasAttributeNS", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) GetAttributeNode(qualifiedName string) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttributeNode", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) GetAttributeNodeNS(namespace *string, localName string) (_result *Attr) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttributeNodeNS", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) SetAttributeNode(attr *Attr) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := attr.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setAttributeNode", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) SetAttributeNodeNS(attr *Attr) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := attr.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setAttributeNodeNS", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) RemoveAttributeNode(attr *Attr) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := attr.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeAttributeNode", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	_converted = AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) AttachShadow(init *ShadowRootInit) (_result *ShadowRoot) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := init.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("attachShadow", _args[0:_end]...)
	var (
		_converted *ShadowRoot // javascript: ShadowRoot _what_return_name
	)
	_converted = ShadowRootFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) Closest(selectors string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("closest", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) Matches(selectors string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("matches", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) WebkitMatchesSelector(selectors string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("webkitMatchesSelector", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) GetElementsByTagName(qualifiedName string) (_result *HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagName", _args[0:_end]...)
	var (
		_converted *HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) GetElementsByTagNameNS(namespace *string, localName string) (_result *HTMLCollection) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagNameNS", _args[0:_end]...)
	var (
		_converted *HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) GetElementsByClassName(classNames string) (_result *HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := classNames
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByClassName", _args[0:_end]...)
	var (
		_converted *HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) InsertAdjacentElement(where string, element *Element) (_result *Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := where
	_args[0] = _p0
	_end++
	_p1 := element.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertAdjacentElement", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) InsertAdjacentText(where string, data string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := where
	_args[0] = _p0
	_end++
	_p1 := data
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("insertAdjacentText", _args[0:_end]...)
	return
}

func (_this *Element) InsertAdjacentHTML(position string, text string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := position
	_args[0] = _p0
	_end++
	_p1 := text
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("insertAdjacentHTML", _args[0:_end]...)
	return
}

func (_this *Element) GetFragmentInformation(filter FragmentFilter) (_result *PromiseDeadFragmentInformation) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := filter.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getFragmentInformation", _args[0:_end]...)
	var (
		_converted *PromiseDeadFragmentInformation // javascript: Promise _what_return_name
	)
	_converted = PromiseDeadFragmentInformationFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) ComputedStyleMap() (_result *typedom.StylePropertyMapReadOnly) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("computedStyleMap", _args[0:_end]...)
	var (
		_converted *typedom.StylePropertyMapReadOnly // javascript: StylePropertyMapReadOnly _what_return_name
	)
	_converted = typedom.StylePropertyMapReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) GetClientRects() (_result *geometry.DOMRectList) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getClientRects", _args[0:_end]...)
	var (
		_converted *geometry.DOMRectList // javascript: DOMRectList _what_return_name
	)
	_converted = geometry.DOMRectListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) GetBoundingClientRect() (_result *geometry.DOMRect) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getBoundingClientRect", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) ScrollIntoView(arg *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	if arg != nil {
		_p0 := arg.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scrollIntoView", _args[0:_end]...)
	return
}

func (_this *Element) Scroll(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scroll", _args[0:_end]...)
	return
}

func (_this *Element) Scroll2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scroll", _args[0:_end]...)
	return
}

func (_this *Element) ScrollTo(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scrollTo", _args[0:_end]...)
	return
}

func (_this *Element) ScrollTo2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scrollTo", _args[0:_end]...)
	return
}

func (_this *Element) ScrollBy(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scrollBy", _args[0:_end]...)
	return
}

func (_this *Element) ScrollBy2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scrollBy", _args[0:_end]...)
	return
}

func (_this *Element) RequestFullscreen(options *FullscreenOptions) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("requestFullscreen", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) SetPointerCapture(pointerId int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pointerId
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setPointerCapture", _args[0:_end]...)
	return
}

func (_this *Element) ReleasePointerCapture(pointerId int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pointerId
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("releasePointerCapture", _args[0:_end]...)
	return
}

func (_this *Element) HasPointerCapture(pointerId int) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pointerId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("hasPointerCapture", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Element) RequestPointerLock() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("requestPointerLock", _args[0:_end]...)
	return
}

func (_this *Element) GetBoxQuads(options *view.BoxQuadOptions) (_result []*geometry.DOMQuad) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getBoxQuads", _args[0:_end]...)
	var (
		_converted []*geometry.DOMQuad // javascript: sequence<DOMQuad> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*geometry.DOMQuad, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *geometry.DOMQuad
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = geometry.DOMQuadFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Element) ConvertQuadFromNode(quad *geometry.DOMQuadInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := quad.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertQuadFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) ConvertRectFromNode(rect *geometry.DOMRectReadOnly, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertRectFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) ConvertPointFromNode(point *geometry.DOMPointInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMPoint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := point.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertPointFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) Prepend(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("prepend", _args[0:_end]...)
	return
}

func (_this *Element) Append(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *Element) QuerySelector(selectors string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelector", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Element) QuerySelectorAll(selectors string) (_result *NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelectorAll", _args[0:_end]...)
	var (
		_converted *NodeList // javascript: NodeList _what_return_name
	)
	_converted = NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) Before(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("before", _args[0:_end]...)
	return
}

func (_this *Element) After(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("after", _args[0:_end]...)
	return
}

func (_this *Element) ReplaceWith(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("replaceWith", _args[0:_end]...)
	return
}

func (_this *Element) Remove() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

func (_this *Element) Animate(keyframes *javascript.Object, options *Union) (_result *webani.Animation) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := keyframes.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("animate", _args[0:_end]...)
	var (
		_converted *webani.Animation // javascript: Animation _what_return_name
	)
	_converted = webani.AnimationFromJS(_returned)
	_result = _converted
	return
}

func (_this *Element) GetAnimations() (_result []*webani.Animation) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getAnimations", _args[0:_end]...)
	var (
		_converted []*webani.Animation // javascript: sequence<Animation> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*webani.Animation, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *webani.Animation
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = webani.AnimationFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// class: HTMLCollection
type HTMLCollection struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *HTMLCollection) JSValue() js.Value {
	return _this.Value_JS
}

// HTMLCollectionFromJS is casting a js.Value into HTMLCollection.
func HTMLCollectionFromJS(value js.Value) *HTMLCollection {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLCollection{}
	ret.Value_JS = value
	return ret
}

// HTMLCollectionFromJS is casting from something that holds a js.Value into HTMLCollection.
func HTMLCollectionFromWrapper(input core.Wrapper) *HTMLCollection {
	return HTMLCollectionFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLCollection) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *HTMLCollection) Index(index uint) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLCollection) Get(name string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLCollection) Item(index uint) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLCollection) NamedItem(name string) (_result *Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = ElementFromJS(_returned)
	}
	_result = _converted
	return
}

// class: NamedNodeMap
type NamedNodeMap struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NamedNodeMap) JSValue() js.Value {
	return _this.Value_JS
}

// NamedNodeMapFromJS is casting a js.Value into NamedNodeMap.
func NamedNodeMapFromJS(value js.Value) *NamedNodeMap {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NamedNodeMap{}
	ret.Value_JS = value
	return ret
}

// NamedNodeMapFromJS is casting from something that holds a js.Value into NamedNodeMap.
func NamedNodeMapFromWrapper(input core.Wrapper) *NamedNodeMap {
	return NamedNodeMapFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *NamedNodeMap) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *NamedNodeMap) Index(index uint) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) Get(qualifiedName string) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getNamedItem", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) Item(index uint) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) GetNamedItem(qualifiedName string) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getNamedItem", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) GetNamedItemNS(namespace *string, localName string) (_result *Attr) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getNamedItemNS", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) SetNamedItem(attr *Attr) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := attr.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setNamedItem", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) SetNamedItemNS(attr *Attr) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := attr.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setNamedItemNS", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = AttrFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NamedNodeMap) RemoveNamedItem(qualifiedName string) (_result *Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeNamedItem", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	_converted = AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *NamedNodeMap) RemoveNamedItemNS(namespace *string, localName string) (_result *Attr) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("removeNamedItemNS", _args[0:_end]...)
	var (
		_converted *Attr // javascript: Attr _what_return_name
	)
	_converted = AttrFromJS(_returned)
	_result = _converted
	return
}

// class: Node
type Node struct {
	domcore.EventTarget
}

// NodeFromJS is casting a js.Value into Node.
func NodeFromJS(value js.Value) *Node {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Node{}
	ret.Value_JS = value
	return ret
}

// NodeFromJS is casting from something that holds a js.Value into Node.
func NodeFromWrapper(input core.Wrapper) *Node {
	return NodeFromJS(input.JSValue())
}

const (
	ELEMENT_NODE                              int = 1
	ATTRIBUTE_NODE                            int = 2
	TEXT_NODE                                 int = 3
	CDATA_SECTION_NODE                        int = 4
	ENTITY_REFERENCE_NODE                     int = 5
	ENTITY_NODE                               int = 6
	PROCESSING_INSTRUCTION_NODE               int = 7
	COMMENT_NODE                              int = 8
	DOCUMENT_NODE                             int = 9
	DOCUMENT_TYPE_NODE                        int = 10
	DOCUMENT_FRAGMENT_NODE                    int = 11
	NOTATION_NODE                             int = 12
	DOCUMENT_POSITION_DISCONNECTED            int = 0x01
	DOCUMENT_POSITION_PRECEDING               int = 0x02
	DOCUMENT_POSITION_FOLLOWING               int = 0x04
	DOCUMENT_POSITION_CONTAINS                int = 0x08
	DOCUMENT_POSITION_CONTAINED_BY            int = 0x10
	DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC int = 0x20
)

// NodeType returning attribute 'nodeType' with
// type int (idl: unsigned short).
func (_this *Node) NodeType() int {
	var ret int
	value := _this.Value_JS.Get("nodeType")
	ret = (value).Int()
	return ret
}

// NodeName returning attribute 'nodeName' with
// type string (idl: DOMString).
func (_this *Node) NodeName() string {
	var ret string
	value := _this.Value_JS.Get("nodeName")
	ret = (value).String()
	return ret
}

// BaseURI returning attribute 'baseURI' with
// type string (idl: USVString).
func (_this *Node) BaseURI() string {
	var ret string
	value := _this.Value_JS.Get("baseURI")
	ret = (value).String()
	return ret
}

// IsConnected returning attribute 'isConnected' with
// type bool (idl: boolean).
func (_this *Node) IsConnected() bool {
	var ret bool
	value := _this.Value_JS.Get("isConnected")
	ret = (value).Bool()
	return ret
}

// OwnerDocument returning attribute 'ownerDocument' with
// type js.Value (idl: Document).
func (_this *Node) OwnerDocument() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("ownerDocument")
	ret = value
	return ret
}

// ParentNode returning attribute 'parentNode' with
// type Node (idl: Node).
func (_this *Node) ParentNode() *Node {
	var ret *Node
	value := _this.Value_JS.Get("parentNode")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFromJS(value)
	}
	return ret
}

// ParentElement returning attribute 'parentElement' with
// type Element (idl: Element).
func (_this *Node) ParentElement() *Element {
	var ret *Element
	value := _this.Value_JS.Get("parentElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// ChildNodes returning attribute 'childNodes' with
// type NodeList (idl: NodeList).
func (_this *Node) ChildNodes() *NodeList {
	var ret *NodeList
	value := _this.Value_JS.Get("childNodes")
	ret = NodeListFromJS(value)
	return ret
}

// FirstChild returning attribute 'firstChild' with
// type Node (idl: Node).
func (_this *Node) FirstChild() *Node {
	var ret *Node
	value := _this.Value_JS.Get("firstChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFromJS(value)
	}
	return ret
}

// LastChild returning attribute 'lastChild' with
// type Node (idl: Node).
func (_this *Node) LastChild() *Node {
	var ret *Node
	value := _this.Value_JS.Get("lastChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFromJS(value)
	}
	return ret
}

// PreviousSibling returning attribute 'previousSibling' with
// type Node (idl: Node).
func (_this *Node) PreviousSibling() *Node {
	var ret *Node
	value := _this.Value_JS.Get("previousSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFromJS(value)
	}
	return ret
}

// NextSibling returning attribute 'nextSibling' with
// type Node (idl: Node).
func (_this *Node) NextSibling() *Node {
	var ret *Node
	value := _this.Value_JS.Get("nextSibling")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFromJS(value)
	}
	return ret
}

// NodeValue returning attribute 'nodeValue' with
// type string (idl: DOMString).
func (_this *Node) NodeValue() *string {
	var ret *string
	value := _this.Value_JS.Get("nodeValue")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetNodeValue setting attribute 'nodeValue' with
// type string (idl: DOMString).
func (_this *Node) SetNodeValue(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("nodeValue", input)
}

// TextContent returning attribute 'textContent' with
// type string (idl: DOMString).
func (_this *Node) TextContent() *string {
	var ret *string
	value := _this.Value_JS.Get("textContent")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetTextContent setting attribute 'textContent' with
// type string (idl: DOMString).
func (_this *Node) SetTextContent(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("textContent", input)
}

func (_this *Node) GetRootNode(options *GetRootNodeOptions) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getRootNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Node) HasChildNodes() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasChildNodes", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Node) Normalize() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("normalize", _args[0:_end]...)
	return
}

func (_this *Node) CloneNode(deep *bool) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	if deep != nil {

		var _p0 interface{}
		if deep != nil {
			_p0 = *(deep)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("cloneNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Node) IsEqualNode(otherNode *Node) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := otherNode.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isEqualNode", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Node) IsSameNode(otherNode *Node) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := otherNode.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isSameNode", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Node) CompareDocumentPosition(other *Node) (_result int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := other.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("compareDocumentPosition", _args[0:_end]...)
	var (
		_converted int // javascript: unsigned short _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Node) Contains(other *Node) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := other.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("contains", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Node) LookupPrefix(namespace *string) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("lookupPrefix", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Node) LookupNamespaceURI(prefix *string) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)

	var _p0 interface{}
	if prefix != nil {
		_p0 = *(prefix)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("lookupNamespaceURI", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Node) IsDefaultNamespace(namespace *string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isDefaultNamespace", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Node) InsertBefore(node *Node, child *Node) (_result *Node) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := child.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertBefore", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Node) AppendChild(node *Node) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendChild", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Node) ReplaceChild(node *Node, child *Node) (_result *Node) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := child.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceChild", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Node) RemoveChild(child *Node) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := child.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeChild", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	_converted = NodeFromJS(_returned)
	_result = _converted
	return
}

const (
	FILTER_ACCEPT               int  = 1
	FILTER_REJECT               int  = 2
	FILTER_SKIP                 int  = 3
	SHOW_ALL                    uint = 0xFFFFFFFF
	SHOW_ELEMENT                uint = 0x1
	SHOW_ATTRIBUTE              uint = 0x2
	SHOW_TEXT                   uint = 0x4
	SHOW_CDATA_SECTION          uint = 0x8
	SHOW_ENTITY_REFERENCE       uint = 0x10
	SHOW_ENTITY                 uint = 0x20
	SHOW_PROCESSING_INSTRUCTION uint = 0x40
	SHOW_COMMENT                uint = 0x80
	SHOW_DOCUMENT               uint = 0x100
	SHOW_DOCUMENT_TYPE          uint = 0x200
	SHOW_DOCUMENT_FRAGMENT      uint = 0x400
	SHOW_NOTATION               uint = 0x800
)

// NodeFilter is a callback interface.
type NodeFilter interface {
	AcceptNode(node *Node) (_result int)
}

// NodeFilterValue is javascript reference value for callback interface NodeFilter.
// This is holding the underlying javascript object.
type NodeFilterValue struct {
	// Value is the underlying javascript object or function.
	Value js.Value

	// Functions is the underlying function objects that is allocated for the interface callback
	Functions [1]js.Func

	// Go interface to invoke
	impl      NodeFilter
	function  func(node *Node) (_result int)
	useInvoke bool
}

// JSValue is returning the javascript object that implements this callback interface
func (t *NodeFilterValue) JSValue() js.Value {
	return t.Value
}

// Release is releasing all resources that is allocated.
func (t *NodeFilterValue) Release() {
	for i := range t.Functions {
		if t.Functions[i].Type() != js.TypeUndefined {
			t.Functions[i].Release()
		}
	}
}

// NewNodeFilter is allocating a new javascript object that
// implements NodeFilter.
func NewNodeFilter(callback NodeFilter) *NodeFilterValue {
	ret := &NodeFilterValue{impl: callback}
	ret.Value = js.Global().Get("Object").New()
	ret.Functions[0] = ret.allocateAcceptNode()
	ret.Value.Set("acceptNode", ret.Functions[0])
	return ret
}

// NewNodeFilterFunc is allocating a new javascript
// function is implements
// NodeFilter interface.
func NewNodeFilterFunc(f func(node *Node) (_result int)) *NodeFilterValue {
	// single function will result in javascript function type, not an object
	ret := &NodeFilterValue{function: f}
	ret.Functions[0] = ret.allocateAcceptNode()
	ret.Value = ret.Functions[0].Value
	return ret
}

// NodeFilterFromJS is taking an javascript object that reference to a
// callback interface and return a corresponding interface that can be used
// to invoke on that element.
func NodeFilterFromJS(value js.Value) *NodeFilterValue {
	if value.Type() == js.TypeObject {
		return &NodeFilterValue{Value: value}
	}
	if value.Type() == js.TypeFunction {
		return &NodeFilterValue{Value: value, useInvoke: true}
	}
	panic("unsupported type")
}

func NodeFilterFromWrapper(input core.Wrapper) *NodeFilterValue {
	return NodeFilterFromJS(input.JSValue())
}

func (t *NodeFilterValue) allocateAcceptNode() js.Func {
	return js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Node // javascript: Node node
		)
		_p0 = NodeFromJS(args[0])
		var _returned int
		if t.function != nil {
			_returned = t.function(_p0)
		} else {
			_returned = t.impl.AcceptNode(_p0)
		}
		_converted := _returned
		return _converted
	})
}

func (_this *NodeFilterValue) AcceptNode(node *Node) (_result int) {
	if _this.function != nil {
		return _this.function(node)
	}
	if _this.impl != nil {
		return _this.impl.AcceptNode(node)
	}
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	var _returned js.Value
	if _this.useInvoke {

		// invoke a javascript function
		_returned = _this.Value.Invoke(_args[0:_end]...)
	} else {
		_returned = _this.Value.Call("acceptNode", _args[0:_end]...)
	}
	var (
		_converted int // javascript: unsigned short _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

// class: NodeIterator
type NodeIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NodeIterator) JSValue() js.Value {
	return _this.Value_JS
}

// NodeIteratorFromJS is casting a js.Value into NodeIterator.
func NodeIteratorFromJS(value js.Value) *NodeIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NodeIterator{}
	ret.Value_JS = value
	return ret
}

// NodeIteratorFromJS is casting from something that holds a js.Value into NodeIterator.
func NodeIteratorFromWrapper(input core.Wrapper) *NodeIterator {
	return NodeIteratorFromJS(input.JSValue())
}

// Root returning attribute 'root' with
// type Node (idl: Node).
func (_this *NodeIterator) Root() *Node {
	var ret *Node
	value := _this.Value_JS.Get("root")
	ret = NodeFromJS(value)
	return ret
}

// ReferenceNode returning attribute 'referenceNode' with
// type Node (idl: Node).
func (_this *NodeIterator) ReferenceNode() *Node {
	var ret *Node
	value := _this.Value_JS.Get("referenceNode")
	ret = NodeFromJS(value)
	return ret
}

// PointerBeforeReferenceNode returning attribute 'pointerBeforeReferenceNode' with
// type bool (idl: boolean).
func (_this *NodeIterator) PointerBeforeReferenceNode() bool {
	var ret bool
	value := _this.Value_JS.Get("pointerBeforeReferenceNode")
	ret = (value).Bool()
	return ret
}

// WhatToShow returning attribute 'whatToShow' with
// type uint (idl: unsigned long).
func (_this *NodeIterator) WhatToShow() uint {
	var ret uint
	value := _this.Value_JS.Get("whatToShow")
	ret = (uint)((value).Int())
	return ret
}

// Filter returning attribute 'filter' with
// type NodeFilter (idl: NodeFilter).
func (_this *NodeIterator) Filter() NodeFilter {
	var ret NodeFilter
	value := _this.Value_JS.Get("filter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFilterFromJS(value)
	}
	return ret
}

func (_this *NodeIterator) NextNode() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("nextNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NodeIterator) PreviousNode() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("previousNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NodeIterator) Detach() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("detach", _args[0:_end]...)
	return
}

// class: NodeList
type NodeList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NodeList) JSValue() js.Value {
	return _this.Value_JS
}

// NodeListFromJS is casting a js.Value into NodeList.
func NodeListFromJS(value js.Value) *NodeList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NodeList{}
	ret.Value_JS = value
	return ret
}

// NodeListFromJS is casting from something that holds a js.Value into NodeList.
func NodeListFromWrapper(input core.Wrapper) *NodeList {
	return NodeListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *NodeList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *NodeList) Index(index uint) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NodeList) Item(index uint) (_result *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *NodeList) Entries() (_result *NodeListEntryIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("entries", _args[0:_end]...)
	var (
		_converted *NodeListEntryIterator // javascript: NodeListEntryIterator _what_return_name
	)
	_converted = NodeListEntryIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *NodeList) ForEach(callback *NodeListForEach, optionalThisForCallbackArgument interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if optionalThisForCallbackArgument != nil {
		_p1 := optionalThisForCallbackArgument
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("forEach", _args[0:_end]...)
	return
}

func (_this *NodeList) Keys() (_result *NodeListKeyIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("keys", _args[0:_end]...)
	var (
		_converted *NodeListKeyIterator // javascript: NodeListKeyIterator _what_return_name
	)
	_converted = NodeListKeyIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *NodeList) Values() (_result *NodeListValueIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("values", _args[0:_end]...)
	var (
		_converted *NodeListValueIterator // javascript: NodeListValueIterator _what_return_name
	)
	_converted = NodeListValueIteratorFromJS(_returned)
	_result = _converted
	return
}

// class: NodeListEntryIterator
type NodeListEntryIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NodeListEntryIterator) JSValue() js.Value {
	return _this.Value_JS
}

// NodeListEntryIteratorFromJS is casting a js.Value into NodeListEntryIterator.
func NodeListEntryIteratorFromJS(value js.Value) *NodeListEntryIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NodeListEntryIterator{}
	ret.Value_JS = value
	return ret
}

// NodeListEntryIteratorFromJS is casting from something that holds a js.Value into NodeListEntryIterator.
func NodeListEntryIteratorFromWrapper(input core.Wrapper) *NodeListEntryIterator {
	return NodeListEntryIteratorFromJS(input.JSValue())
}

func (_this *NodeListEntryIterator) Next() (_result *NodeListEntryIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *NodeListEntryIteratorValue // javascript: NodeListEntryIteratorValue _what_return_name
	)
	_converted = NodeListEntryIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: NodeListKeyIterator
type NodeListKeyIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NodeListKeyIterator) JSValue() js.Value {
	return _this.Value_JS
}

// NodeListKeyIteratorFromJS is casting a js.Value into NodeListKeyIterator.
func NodeListKeyIteratorFromJS(value js.Value) *NodeListKeyIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NodeListKeyIterator{}
	ret.Value_JS = value
	return ret
}

// NodeListKeyIteratorFromJS is casting from something that holds a js.Value into NodeListKeyIterator.
func NodeListKeyIteratorFromWrapper(input core.Wrapper) *NodeListKeyIterator {
	return NodeListKeyIteratorFromJS(input.JSValue())
}

func (_this *NodeListKeyIterator) Next() (_result *NodeListKeyIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *NodeListKeyIteratorValue // javascript: NodeListKeyIteratorValue _what_return_name
	)
	_converted = NodeListKeyIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: NodeListValueIterator
type NodeListValueIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *NodeListValueIterator) JSValue() js.Value {
	return _this.Value_JS
}

// NodeListValueIteratorFromJS is casting a js.Value into NodeListValueIterator.
func NodeListValueIteratorFromJS(value js.Value) *NodeListValueIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &NodeListValueIterator{}
	ret.Value_JS = value
	return ret
}

// NodeListValueIteratorFromJS is casting from something that holds a js.Value into NodeListValueIterator.
func NodeListValueIteratorFromWrapper(input core.Wrapper) *NodeListValueIterator {
	return NodeListValueIteratorFromJS(input.JSValue())
}

func (_this *NodeListValueIterator) Next() (_result *NodeListValueIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *NodeListValueIteratorValue // javascript: NodeListValueIteratorValue _what_return_name
	)
	_converted = NodeListValueIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: ProcessingInstruction
type ProcessingInstruction struct {
	CharacterData
}

// ProcessingInstructionFromJS is casting a js.Value into ProcessingInstruction.
func ProcessingInstructionFromJS(value js.Value) *ProcessingInstruction {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ProcessingInstruction{}
	ret.Value_JS = value
	return ret
}

// ProcessingInstructionFromJS is casting from something that holds a js.Value into ProcessingInstruction.
func ProcessingInstructionFromWrapper(input core.Wrapper) *ProcessingInstruction {
	return ProcessingInstructionFromJS(input.JSValue())
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *ProcessingInstruction) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// Sheet returning attribute 'sheet' with
// type cssom.CSSStyleSheet (idl: CSSStyleSheet).
func (_this *ProcessingInstruction) Sheet() *cssom.CSSStyleSheet {
	var ret *cssom.CSSStyleSheet
	value := _this.Value_JS.Get("sheet")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = cssom.CSSStyleSheetFromJS(value)
	}
	return ret
}

// class: Promise
type PromiseDeadFragmentInformation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PromiseDeadFragmentInformation) JSValue() js.Value {
	return _this.Value_JS
}

// PromiseDeadFragmentInformationFromJS is casting a js.Value into PromiseDeadFragmentInformation.
func PromiseDeadFragmentInformationFromJS(value js.Value) *PromiseDeadFragmentInformation {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseDeadFragmentInformation{}
	ret.Value_JS = value
	return ret
}

// PromiseDeadFragmentInformationFromJS is casting from something that holds a js.Value into PromiseDeadFragmentInformation.
func PromiseDeadFragmentInformationFromWrapper(input core.Wrapper) *PromiseDeadFragmentInformation {
	return PromiseDeadFragmentInformationFromJS(input.JSValue())
}

func (_this *PromiseDeadFragmentInformation) Then(onFulfilled *PromiseDeadFragmentInformationOnFulfilled, onRejected *PromiseDeadFragmentInformationOnRejected) (_result *PromiseDeadFragmentInformation) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseDeadFragmentInformation // javascript: Promise _what_return_name
	)
	_converted = PromiseDeadFragmentInformationFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseDeadFragmentInformation) Catch(onRejected *PromiseDeadFragmentInformationOnRejected) (_result *PromiseDeadFragmentInformation) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseDeadFragmentInformation // javascript: Promise _what_return_name
	)
	_converted = PromiseDeadFragmentInformationFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseDeadFragmentInformation) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseDeadFragmentInformation) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseDeadFragmentInformation // javascript: Promise _what_return_name
	)
	_converted = PromiseDeadFragmentInformationFromJS(_returned)
	_result = _converted
	return
}

// class: Range
type Range struct {
	AbstractRange
}

// RangeFromJS is casting a js.Value into Range.
func RangeFromJS(value js.Value) *Range {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Range{}
	ret.Value_JS = value
	return ret
}

// RangeFromJS is casting from something that holds a js.Value into Range.
func RangeFromWrapper(input core.Wrapper) *Range {
	return RangeFromJS(input.JSValue())
}

const (
	START_TO_START int = 0
	START_TO_END   int = 1
	END_TO_END     int = 2
	END_TO_START   int = 3
)

func NewRange() (_result *Range) {
	_klass := js.Global().Get("Range")
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Range // javascript: Range _what_return_name
	)
	_converted = RangeFromJS(_returned)
	_result = _converted
	return
}

// CommonAncestorContainer returning attribute 'commonAncestorContainer' with
// type Node (idl: Node).
func (_this *Range) CommonAncestorContainer() *Node {
	var ret *Node
	value := _this.Value_JS.Get("commonAncestorContainer")
	ret = NodeFromJS(value)
	return ret
}

func (_this *Range) SetStart(node *Node, offset uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setStart", _args[0:_end]...)
	return
}

func (_this *Range) SetEnd(node *Node, offset uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setEnd", _args[0:_end]...)
	return
}

func (_this *Range) SetStartBefore(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setStartBefore", _args[0:_end]...)
	return
}

func (_this *Range) SetStartAfter(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setStartAfter", _args[0:_end]...)
	return
}

func (_this *Range) SetEndBefore(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setEndBefore", _args[0:_end]...)
	return
}

func (_this *Range) SetEndAfter(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setEndAfter", _args[0:_end]...)
	return
}

func (_this *Range) Collapse(toStart *bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if toStart != nil {

		var _p0 interface{}
		if toStart != nil {
			_p0 = *(toStart)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("collapse", _args[0:_end]...)
	return
}

func (_this *Range) SelectNode(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("selectNode", _args[0:_end]...)
	return
}

func (_this *Range) SelectNodeContents(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("selectNodeContents", _args[0:_end]...)
	return
}

func (_this *Range) CompareBoundaryPoints(how int, sourceRange *Range) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := how
	_args[0] = _p0
	_end++
	_p1 := sourceRange.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("compareBoundaryPoints", _args[0:_end]...)
	var (
		_converted int // javascript: short _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Range) DeleteContents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deleteContents", _args[0:_end]...)
	return
}

func (_this *Range) ExtractContents() (_result *DocumentFragment) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("extractContents", _args[0:_end]...)
	var (
		_converted *DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) CloneContents() (_result *DocumentFragment) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("cloneContents", _args[0:_end]...)
	var (
		_converted *DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) InsertNode(node *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("insertNode", _args[0:_end]...)
	return
}

func (_this *Range) SurroundContents(newParent *Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newParent.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("surroundContents", _args[0:_end]...)
	return
}

func (_this *Range) CloneRange() (_result *Range) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("cloneRange", _args[0:_end]...)
	var (
		_converted *Range // javascript: Range _what_return_name
	)
	_converted = RangeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) Detach() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("detach", _args[0:_end]...)
	return
}

func (_this *Range) IsPointInRange(node *Node, offset uint) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("isPointInRange", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Range) ComparePoint(node *Node, offset uint) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("comparePoint", _args[0:_end]...)
	var (
		_converted int // javascript: short _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Range) IntersectsNode(node *Node) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("intersectsNode", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Range) CreateContextualFragment(fragment string) (_result *DocumentFragment) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := fragment
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createContextualFragment", _args[0:_end]...)
	var (
		_converted *DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) GetClientRects() (_result *geometry.DOMRectList) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getClientRects", _args[0:_end]...)
	var (
		_converted *geometry.DOMRectList // javascript: DOMRectList _what_return_name
	)
	_converted = geometry.DOMRectListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) GetBoundingClientRect() (_result *geometry.DOMRect) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getBoundingClientRect", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *Range) ToString() (_result string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toString", _args[0:_end]...)
	var (
		_converted string // javascript: USVString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

// class: ShadowRoot
type ShadowRoot struct {
	DocumentFragment
}

// ShadowRootFromJS is casting a js.Value into ShadowRoot.
func ShadowRootFromJS(value js.Value) *ShadowRoot {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ShadowRoot{}
	ret.Value_JS = value
	return ret
}

// ShadowRootFromJS is casting from something that holds a js.Value into ShadowRoot.
func ShadowRootFromWrapper(input core.Wrapper) *ShadowRoot {
	return ShadowRootFromJS(input.JSValue())
}

// Mode returning attribute 'mode' with
// type ShadowRootMode (idl: ShadowRootMode).
func (_this *ShadowRoot) Mode() ShadowRootMode {
	var ret ShadowRootMode
	value := _this.Value_JS.Get("mode")
	ret = ShadowRootModeFromJS(value)
	return ret
}

// Host returning attribute 'host' with
// type Element (idl: Element).
func (_this *ShadowRoot) Host() *Element {
	var ret *Element
	value := _this.Value_JS.Get("host")
	ret = ElementFromJS(value)
	return ret
}

// StyleSheets returning attribute 'styleSheets' with
// type cssom.StyleSheetList (idl: StyleSheetList).
func (_this *ShadowRoot) StyleSheets() *cssom.StyleSheetList {
	var ret *cssom.StyleSheetList
	value := _this.Value_JS.Get("styleSheets")
	ret = cssom.StyleSheetListFromJS(value)
	return ret
}

// FullscreenElement returning attribute 'fullscreenElement' with
// type Element (idl: Element).
func (_this *ShadowRoot) FullscreenElement() *Element {
	var ret *Element
	value := _this.Value_JS.Get("fullscreenElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// PictureInPictureElement returning attribute 'pictureInPictureElement' with
// type Element (idl: Element).
func (_this *ShadowRoot) PictureInPictureElement() *Element {
	var ret *Element
	value := _this.Value_JS.Get("pictureInPictureElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// PointerLockElement returning attribute 'pointerLockElement' with
// type Element (idl: Element).
func (_this *ShadowRoot) PointerLockElement() *Element {
	var ret *Element
	value := _this.Value_JS.Get("pointerLockElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ElementFromJS(value)
	}
	return ret
}

// class: StaticRange
type StaticRange struct {
	AbstractRange
}

// StaticRangeFromJS is casting a js.Value into StaticRange.
func StaticRangeFromJS(value js.Value) *StaticRange {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &StaticRange{}
	ret.Value_JS = value
	return ret
}

// StaticRangeFromJS is casting from something that holds a js.Value into StaticRange.
func StaticRangeFromWrapper(input core.Wrapper) *StaticRange {
	return StaticRangeFromJS(input.JSValue())
}

// class: Text
type Text struct {
	CharacterData
}

// TextFromJS is casting a js.Value into Text.
func TextFromJS(value js.Value) *Text {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Text{}
	ret.Value_JS = value
	return ret
}

// TextFromJS is casting from something that holds a js.Value into Text.
func TextFromWrapper(input core.Wrapper) *Text {
	return TextFromJS(input.JSValue())
}

func NewText(data *string) (_result *Text) {
	_klass := js.Global().Get("Text")
	var (
		_args [1]interface{}
		_end  int
	)
	if data != nil {

		var _p0 interface{}
		if data != nil {
			_p0 = *(data)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Text // javascript: Text _what_return_name
	)
	_converted = TextFromJS(_returned)
	_result = _converted
	return
}

// WholeText returning attribute 'wholeText' with
// type string (idl: DOMString).
func (_this *Text) WholeText() string {
	var ret string
	value := _this.Value_JS.Get("wholeText")
	ret = (value).String()
	return ret
}

// AssignedSlot returning attribute 'assignedSlot' with
// type js.Value (idl: HTMLSlotElement).
func (_this *Text) AssignedSlot() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("assignedSlot")
	ret = value
	return ret
}

func (_this *Text) SplitText(offset uint) (_result *Text) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("splitText", _args[0:_end]...)
	var (
		_converted *Text // javascript: Text _what_return_name
	)
	_converted = TextFromJS(_returned)
	_result = _converted
	return
}

func (_this *Text) GetBoxQuads(options *view.BoxQuadOptions) (_result []*geometry.DOMQuad) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getBoxQuads", _args[0:_end]...)
	var (
		_converted []*geometry.DOMQuad // javascript: sequence<DOMQuad> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*geometry.DOMQuad, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *geometry.DOMQuad
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = geometry.DOMQuadFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Text) ConvertQuadFromNode(quad *geometry.DOMQuadInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := quad.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertQuadFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Text) ConvertRectFromNode(rect *geometry.DOMRectReadOnly, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertRectFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Text) ConvertPointFromNode(point *geometry.DOMPointInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMPoint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := point.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertPointFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

// class: TreeWalker
type TreeWalker struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *TreeWalker) JSValue() js.Value {
	return _this.Value_JS
}

// TreeWalkerFromJS is casting a js.Value into TreeWalker.
func TreeWalkerFromJS(value js.Value) *TreeWalker {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &TreeWalker{}
	ret.Value_JS = value
	return ret
}

// TreeWalkerFromJS is casting from something that holds a js.Value into TreeWalker.
func TreeWalkerFromWrapper(input core.Wrapper) *TreeWalker {
	return TreeWalkerFromJS(input.JSValue())
}

// Root returning attribute 'root' with
// type Node (idl: Node).
func (_this *TreeWalker) Root() *Node {
	var ret *Node
	value := _this.Value_JS.Get("root")
	ret = NodeFromJS(value)
	return ret
}

// WhatToShow returning attribute 'whatToShow' with
// type uint (idl: unsigned long).
func (_this *TreeWalker) WhatToShow() uint {
	var ret uint
	value := _this.Value_JS.Get("whatToShow")
	ret = (uint)((value).Int())
	return ret
}

// Filter returning attribute 'filter' with
// type NodeFilter (idl: NodeFilter).
func (_this *TreeWalker) Filter() NodeFilter {
	var ret NodeFilter
	value := _this.Value_JS.Get("filter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = NodeFilterFromJS(value)
	}
	return ret
}

// CurrentNode returning attribute 'currentNode' with
// type Node (idl: Node).
func (_this *TreeWalker) CurrentNode() *Node {
	var ret *Node
	value := _this.Value_JS.Get("currentNode")
	ret = NodeFromJS(value)
	return ret
}

// SetCurrentNode setting attribute 'currentNode' with
// type Node (idl: Node).
func (_this *TreeWalker) SetCurrentNode(value *Node) {
	input := value.JSValue()
	_this.Value_JS.Set("currentNode", input)
}

func (_this *TreeWalker) ParentNode() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("parentNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) FirstChild() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("firstChild", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) LastChild() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("lastChild", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) PreviousSibling() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("previousSibling", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) NextSibling() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("nextSibling", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) PreviousNode() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("previousNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *TreeWalker) NextNode() (_result *Node) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("nextNode", _args[0:_end]...)
	var (
		_converted *Node // javascript: Node _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = NodeFromJS(_returned)
	}
	_result = _converted
	return
}
