// Code generated by webidl-bind. DO NOT EDIT.

package geometry

import "syscall/js"

import (
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// javascript.Float32Array
// javascript.Float64Array
// javascript.Object

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: DOMMatrix2DInit
type DOMMatrix2DInit struct {
	A   float64
	B   float64
	C   float64
	D   float64
	E   float64
	F   float64
	M11 float64
	M12 float64
	M21 float64
	M22 float64
	M41 float64
	M42 float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DOMMatrix2DInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.A
	out.Set("a", value0)
	value1 := _this.B
	out.Set("b", value1)
	value2 := _this.C
	out.Set("c", value2)
	value3 := _this.D
	out.Set("d", value3)
	value4 := _this.E
	out.Set("e", value4)
	value5 := _this.F
	out.Set("f", value5)
	value6 := _this.M11
	out.Set("m11", value6)
	value7 := _this.M12
	out.Set("m12", value7)
	value8 := _this.M21
	out.Set("m21", value8)
	value9 := _this.M22
	out.Set("m22", value9)
	value10 := _this.M41
	out.Set("m41", value10)
	value11 := _this.M42
	out.Set("m42", value11)
	return out
}

// DOMMatrix2DInitFromJS is allocating a new
// DOMMatrix2DInit object and copy all values from
// input javascript object
func DOMMatrix2DInitFromJS(value js.Wrapper) *DOMMatrix2DInit {
	input := value.JSValue()
	var out DOMMatrix2DInit
	var (
		value0  float64 // javascript: unrestricted double {a A a}
		value1  float64 // javascript: unrestricted double {b B b}
		value2  float64 // javascript: unrestricted double {c C c}
		value3  float64 // javascript: unrestricted double {d D d}
		value4  float64 // javascript: unrestricted double {e E e}
		value5  float64 // javascript: unrestricted double {f F f}
		value6  float64 // javascript: unrestricted double {m11 M11 m11}
		value7  float64 // javascript: unrestricted double {m12 M12 m12}
		value8  float64 // javascript: unrestricted double {m21 M21 m21}
		value9  float64 // javascript: unrestricted double {m22 M22 m22}
		value10 float64 // javascript: unrestricted double {m41 M41 m41}
		value11 float64 // javascript: unrestricted double {m42 M42 m42}
	)
	value0 = (input.Get("a")).Float()
	out.A = value0
	value1 = (input.Get("b")).Float()
	out.B = value1
	value2 = (input.Get("c")).Float()
	out.C = value2
	value3 = (input.Get("d")).Float()
	out.D = value3
	value4 = (input.Get("e")).Float()
	out.E = value4
	value5 = (input.Get("f")).Float()
	out.F = value5
	value6 = (input.Get("m11")).Float()
	out.M11 = value6
	value7 = (input.Get("m12")).Float()
	out.M12 = value7
	value8 = (input.Get("m21")).Float()
	out.M21 = value8
	value9 = (input.Get("m22")).Float()
	out.M22 = value9
	value10 = (input.Get("m41")).Float()
	out.M41 = value10
	value11 = (input.Get("m42")).Float()
	out.M42 = value11
	return &out
}

// dictionary: DOMMatrixInit
type DOMMatrixInit struct {
	A    float64
	B    float64
	C    float64
	D    float64
	E    float64
	F    float64
	M11  float64
	M12  float64
	M21  float64
	M22  float64
	M41  float64
	M42  float64
	M13  float64
	M14  float64
	M23  float64
	M24  float64
	M31  float64
	M32  float64
	M33  float64
	M34  float64
	M43  float64
	M44  float64
	Is2D bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DOMMatrixInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.A
	out.Set("a", value0)
	value1 := _this.B
	out.Set("b", value1)
	value2 := _this.C
	out.Set("c", value2)
	value3 := _this.D
	out.Set("d", value3)
	value4 := _this.E
	out.Set("e", value4)
	value5 := _this.F
	out.Set("f", value5)
	value6 := _this.M11
	out.Set("m11", value6)
	value7 := _this.M12
	out.Set("m12", value7)
	value8 := _this.M21
	out.Set("m21", value8)
	value9 := _this.M22
	out.Set("m22", value9)
	value10 := _this.M41
	out.Set("m41", value10)
	value11 := _this.M42
	out.Set("m42", value11)
	value12 := _this.M13
	out.Set("m13", value12)
	value13 := _this.M14
	out.Set("m14", value13)
	value14 := _this.M23
	out.Set("m23", value14)
	value15 := _this.M24
	out.Set("m24", value15)
	value16 := _this.M31
	out.Set("m31", value16)
	value17 := _this.M32
	out.Set("m32", value17)
	value18 := _this.M33
	out.Set("m33", value18)
	value19 := _this.M34
	out.Set("m34", value19)
	value20 := _this.M43
	out.Set("m43", value20)
	value21 := _this.M44
	out.Set("m44", value21)
	value22 := _this.Is2D
	out.Set("is2D", value22)
	return out
}

// DOMMatrixInitFromJS is allocating a new
// DOMMatrixInit object and copy all values from
// input javascript object
func DOMMatrixInitFromJS(value js.Wrapper) *DOMMatrixInit {
	input := value.JSValue()
	var out DOMMatrixInit
	var (
		value0  float64 // javascript: unrestricted double {a A a}
		value1  float64 // javascript: unrestricted double {b B b}
		value2  float64 // javascript: unrestricted double {c C c}
		value3  float64 // javascript: unrestricted double {d D d}
		value4  float64 // javascript: unrestricted double {e E e}
		value5  float64 // javascript: unrestricted double {f F f}
		value6  float64 // javascript: unrestricted double {m11 M11 m11}
		value7  float64 // javascript: unrestricted double {m12 M12 m12}
		value8  float64 // javascript: unrestricted double {m21 M21 m21}
		value9  float64 // javascript: unrestricted double {m22 M22 m22}
		value10 float64 // javascript: unrestricted double {m41 M41 m41}
		value11 float64 // javascript: unrestricted double {m42 M42 m42}
		value12 float64 // javascript: unrestricted double {m13 M13 m13}
		value13 float64 // javascript: unrestricted double {m14 M14 m14}
		value14 float64 // javascript: unrestricted double {m23 M23 m23}
		value15 float64 // javascript: unrestricted double {m24 M24 m24}
		value16 float64 // javascript: unrestricted double {m31 M31 m31}
		value17 float64 // javascript: unrestricted double {m32 M32 m32}
		value18 float64 // javascript: unrestricted double {m33 M33 m33}
		value19 float64 // javascript: unrestricted double {m34 M34 m34}
		value20 float64 // javascript: unrestricted double {m43 M43 m43}
		value21 float64 // javascript: unrestricted double {m44 M44 m44}
		value22 bool    // javascript: boolean {is2D Is2D is2D}
	)
	value0 = (input.Get("a")).Float()
	out.A = value0
	value1 = (input.Get("b")).Float()
	out.B = value1
	value2 = (input.Get("c")).Float()
	out.C = value2
	value3 = (input.Get("d")).Float()
	out.D = value3
	value4 = (input.Get("e")).Float()
	out.E = value4
	value5 = (input.Get("f")).Float()
	out.F = value5
	value6 = (input.Get("m11")).Float()
	out.M11 = value6
	value7 = (input.Get("m12")).Float()
	out.M12 = value7
	value8 = (input.Get("m21")).Float()
	out.M21 = value8
	value9 = (input.Get("m22")).Float()
	out.M22 = value9
	value10 = (input.Get("m41")).Float()
	out.M41 = value10
	value11 = (input.Get("m42")).Float()
	out.M42 = value11
	value12 = (input.Get("m13")).Float()
	out.M13 = value12
	value13 = (input.Get("m14")).Float()
	out.M14 = value13
	value14 = (input.Get("m23")).Float()
	out.M23 = value14
	value15 = (input.Get("m24")).Float()
	out.M24 = value15
	value16 = (input.Get("m31")).Float()
	out.M31 = value16
	value17 = (input.Get("m32")).Float()
	out.M32 = value17
	value18 = (input.Get("m33")).Float()
	out.M33 = value18
	value19 = (input.Get("m34")).Float()
	out.M34 = value19
	value20 = (input.Get("m43")).Float()
	out.M43 = value20
	value21 = (input.Get("m44")).Float()
	out.M44 = value21
	value22 = (input.Get("is2D")).Bool()
	out.Is2D = value22
	return &out
}

// dictionary: DOMPointInit
type DOMPointInit struct {
	X float64
	Y float64
	Z float64
	W float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DOMPointInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.X
	out.Set("x", value0)
	value1 := _this.Y
	out.Set("y", value1)
	value2 := _this.Z
	out.Set("z", value2)
	value3 := _this.W
	out.Set("w", value3)
	return out
}

// DOMPointInitFromJS is allocating a new
// DOMPointInit object and copy all values from
// input javascript object
func DOMPointInitFromJS(value js.Wrapper) *DOMPointInit {
	input := value.JSValue()
	var out DOMPointInit
	var (
		value0 float64 // javascript: unrestricted double {x X x}
		value1 float64 // javascript: unrestricted double {y Y y}
		value2 float64 // javascript: unrestricted double {z Z z}
		value3 float64 // javascript: unrestricted double {w W w}
	)
	value0 = (input.Get("x")).Float()
	out.X = value0
	value1 = (input.Get("y")).Float()
	out.Y = value1
	value2 = (input.Get("z")).Float()
	out.Z = value2
	value3 = (input.Get("w")).Float()
	out.W = value3
	return &out
}

// dictionary: DOMQuadInit
type DOMQuadInit struct {
	P1 *DOMPointInit
	P2 *DOMPointInit
	P3 *DOMPointInit
	P4 *DOMPointInit
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DOMQuadInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.P1.JSValue()
	out.Set("p1", value0)
	value1 := _this.P2.JSValue()
	out.Set("p2", value1)
	value2 := _this.P3.JSValue()
	out.Set("p3", value2)
	value3 := _this.P4.JSValue()
	out.Set("p4", value3)
	return out
}

// DOMQuadInitFromJS is allocating a new
// DOMQuadInit object and copy all values from
// input javascript object
func DOMQuadInitFromJS(value js.Wrapper) *DOMQuadInit {
	input := value.JSValue()
	var out DOMQuadInit
	var (
		value0 *DOMPointInit // javascript: DOMPointInit {p1 P1 p1}
		value1 *DOMPointInit // javascript: DOMPointInit {p2 P2 p2}
		value2 *DOMPointInit // javascript: DOMPointInit {p3 P3 p3}
		value3 *DOMPointInit // javascript: DOMPointInit {p4 P4 p4}
	)
	value0 = DOMPointInitFromJS(input.Get("p1"))
	out.P1 = value0
	value1 = DOMPointInitFromJS(input.Get("p2"))
	out.P2 = value1
	value2 = DOMPointInitFromJS(input.Get("p3"))
	out.P3 = value2
	value3 = DOMPointInitFromJS(input.Get("p4"))
	out.P4 = value3
	return &out
}

// dictionary: DOMRectInit
type DOMRectInit struct {
	X      float64
	Y      float64
	Width  float64
	Height float64
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *DOMRectInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.X
	out.Set("x", value0)
	value1 := _this.Y
	out.Set("y", value1)
	value2 := _this.Width
	out.Set("width", value2)
	value3 := _this.Height
	out.Set("height", value3)
	return out
}

// DOMRectInitFromJS is allocating a new
// DOMRectInit object and copy all values from
// input javascript object
func DOMRectInitFromJS(value js.Wrapper) *DOMRectInit {
	input := value.JSValue()
	var out DOMRectInit
	var (
		value0 float64 // javascript: unrestricted double {x X x}
		value1 float64 // javascript: unrestricted double {y Y y}
		value2 float64 // javascript: unrestricted double {width Width width}
		value3 float64 // javascript: unrestricted double {height Height height}
	)
	value0 = (input.Get("x")).Float()
	out.X = value0
	value1 = (input.Get("y")).Float()
	out.Y = value1
	value2 = (input.Get("width")).Float()
	out.Width = value2
	value3 = (input.Get("height")).Float()
	out.Height = value3
	return &out
}

// interface: DOMMatrix
type DOMMatrix struct {
	DOMMatrixReadOnly
}

// DOMMatrixFromJS is casting a js.Wrapper into DOMMatrix.
func DOMMatrixFromJS(value js.Wrapper) *DOMMatrix {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMMatrix{}
	ret.Value_JS = input
	return ret
}

func FromMatrix(other *DOMMatrixInit) (_result *DOMMatrix) {
	_klass := js.Global().Get("DOMMatrix")
	_method := _klass.Get("fromMatrix")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func FromFloat32Array(array32 *javascript.Float32Array) (_result *DOMMatrix) {
	_klass := js.Global().Get("DOMMatrix")
	_method := _klass.Get("fromFloat32Array")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array32.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func FromFloat64Array(array64 *javascript.Float64Array) (_result *DOMMatrix) {
	_klass := js.Global().Get("DOMMatrix")
	_method := _klass.Get("fromFloat64Array")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array64.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func NewDOMMatrix(init *Union) (_result *DOMMatrix) {
	_klass := js.Global().Get("DOMMatrix")
	var (
		_args [1]interface{}
		_end  int
	)
	if init != nil {
		_p0 := init.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

// A returning attribute 'a' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) A() float64 {
	var ret float64
	value := _this.Value_JS.Get("a")
	ret = (value).Float()
	return ret
}

// SetA setting attribute 'a' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetA(value float64) {
	input := value
	_this.Value_JS.Set("a", input)
}

// B returning attribute 'b' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) B() float64 {
	var ret float64
	value := _this.Value_JS.Get("b")
	ret = (value).Float()
	return ret
}

// SetB setting attribute 'b' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetB(value float64) {
	input := value
	_this.Value_JS.Set("b", input)
}

// C returning attribute 'c' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) C() float64 {
	var ret float64
	value := _this.Value_JS.Get("c")
	ret = (value).Float()
	return ret
}

// SetC setting attribute 'c' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetC(value float64) {
	input := value
	_this.Value_JS.Set("c", input)
}

// D returning attribute 'd' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) D() float64 {
	var ret float64
	value := _this.Value_JS.Get("d")
	ret = (value).Float()
	return ret
}

// SetD setting attribute 'd' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetD(value float64) {
	input := value
	_this.Value_JS.Set("d", input)
}

// E returning attribute 'e' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) E() float64 {
	var ret float64
	value := _this.Value_JS.Get("e")
	ret = (value).Float()
	return ret
}

// SetE setting attribute 'e' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetE(value float64) {
	input := value
	_this.Value_JS.Set("e", input)
}

// F returning attribute 'f' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) F() float64 {
	var ret float64
	value := _this.Value_JS.Get("f")
	ret = (value).Float()
	return ret
}

// SetF setting attribute 'f' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetF(value float64) {
	input := value
	_this.Value_JS.Set("f", input)
}

// M11 returning attribute 'm11' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M11() float64 {
	var ret float64
	value := _this.Value_JS.Get("m11")
	ret = (value).Float()
	return ret
}

// SetM11 setting attribute 'm11' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM11(value float64) {
	input := value
	_this.Value_JS.Set("m11", input)
}

// M12 returning attribute 'm12' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M12() float64 {
	var ret float64
	value := _this.Value_JS.Get("m12")
	ret = (value).Float()
	return ret
}

// SetM12 setting attribute 'm12' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM12(value float64) {
	input := value
	_this.Value_JS.Set("m12", input)
}

// M13 returning attribute 'm13' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M13() float64 {
	var ret float64
	value := _this.Value_JS.Get("m13")
	ret = (value).Float()
	return ret
}

// SetM13 setting attribute 'm13' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM13(value float64) {
	input := value
	_this.Value_JS.Set("m13", input)
}

// M14 returning attribute 'm14' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M14() float64 {
	var ret float64
	value := _this.Value_JS.Get("m14")
	ret = (value).Float()
	return ret
}

// SetM14 setting attribute 'm14' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM14(value float64) {
	input := value
	_this.Value_JS.Set("m14", input)
}

// M21 returning attribute 'm21' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M21() float64 {
	var ret float64
	value := _this.Value_JS.Get("m21")
	ret = (value).Float()
	return ret
}

// SetM21 setting attribute 'm21' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM21(value float64) {
	input := value
	_this.Value_JS.Set("m21", input)
}

// M22 returning attribute 'm22' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M22() float64 {
	var ret float64
	value := _this.Value_JS.Get("m22")
	ret = (value).Float()
	return ret
}

// SetM22 setting attribute 'm22' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM22(value float64) {
	input := value
	_this.Value_JS.Set("m22", input)
}

// M23 returning attribute 'm23' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M23() float64 {
	var ret float64
	value := _this.Value_JS.Get("m23")
	ret = (value).Float()
	return ret
}

// SetM23 setting attribute 'm23' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM23(value float64) {
	input := value
	_this.Value_JS.Set("m23", input)
}

// M24 returning attribute 'm24' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M24() float64 {
	var ret float64
	value := _this.Value_JS.Get("m24")
	ret = (value).Float()
	return ret
}

// SetM24 setting attribute 'm24' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM24(value float64) {
	input := value
	_this.Value_JS.Set("m24", input)
}

// M31 returning attribute 'm31' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M31() float64 {
	var ret float64
	value := _this.Value_JS.Get("m31")
	ret = (value).Float()
	return ret
}

// SetM31 setting attribute 'm31' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM31(value float64) {
	input := value
	_this.Value_JS.Set("m31", input)
}

// M32 returning attribute 'm32' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M32() float64 {
	var ret float64
	value := _this.Value_JS.Get("m32")
	ret = (value).Float()
	return ret
}

// SetM32 setting attribute 'm32' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM32(value float64) {
	input := value
	_this.Value_JS.Set("m32", input)
}

// M33 returning attribute 'm33' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M33() float64 {
	var ret float64
	value := _this.Value_JS.Get("m33")
	ret = (value).Float()
	return ret
}

// SetM33 setting attribute 'm33' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM33(value float64) {
	input := value
	_this.Value_JS.Set("m33", input)
}

// M34 returning attribute 'm34' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M34() float64 {
	var ret float64
	value := _this.Value_JS.Get("m34")
	ret = (value).Float()
	return ret
}

// SetM34 setting attribute 'm34' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM34(value float64) {
	input := value
	_this.Value_JS.Set("m34", input)
}

// M41 returning attribute 'm41' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M41() float64 {
	var ret float64
	value := _this.Value_JS.Get("m41")
	ret = (value).Float()
	return ret
}

// SetM41 setting attribute 'm41' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM41(value float64) {
	input := value
	_this.Value_JS.Set("m41", input)
}

// M42 returning attribute 'm42' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M42() float64 {
	var ret float64
	value := _this.Value_JS.Get("m42")
	ret = (value).Float()
	return ret
}

// SetM42 setting attribute 'm42' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM42(value float64) {
	input := value
	_this.Value_JS.Set("m42", input)
}

// M43 returning attribute 'm43' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M43() float64 {
	var ret float64
	value := _this.Value_JS.Get("m43")
	ret = (value).Float()
	return ret
}

// SetM43 setting attribute 'm43' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM43(value float64) {
	input := value
	_this.Value_JS.Set("m43", input)
}

// M44 returning attribute 'm44' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) M44() float64 {
	var ret float64
	value := _this.Value_JS.Get("m44")
	ret = (value).Float()
	return ret
}

// SetM44 setting attribute 'm44' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrix) SetM44(value float64) {
	input := value
	_this.Value_JS.Set("m44", input)
}

func (_this *DOMMatrix) MultiplySelf(other *DOMMatrixInit) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("multiplySelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) PreMultiplySelf(other *DOMMatrixInit) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("preMultiplySelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) TranslateSelf(tx *float64, ty *float64, tz *float64) (_result *DOMMatrix) {
	var (
		_args [3]interface{}
		_end  int
	)
	if tx != nil {
		_p0 := tx
		_args[0] = _p0
		_end++
	}
	if ty != nil {
		_p1 := ty
		_args[1] = _p1
		_end++
	}
	if tz != nil {
		_p2 := tz
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("translateSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) ScaleSelf(scaleX *float64, scaleY *float64, scaleZ *float64, originX *float64, originY *float64, originZ *float64) (_result *DOMMatrix) {
	var (
		_args [6]interface{}
		_end  int
	)
	if scaleX != nil {
		_p0 := scaleX
		_args[0] = _p0
		_end++
	}
	if scaleY != nil {
		_p1 := scaleY
		_args[1] = _p1
		_end++
	}
	if scaleZ != nil {
		_p2 := scaleZ
		_args[2] = _p2
		_end++
	}
	if originX != nil {
		_p3 := originX
		_args[3] = _p3
		_end++
	}
	if originY != nil {
		_p4 := originY
		_args[4] = _p4
		_end++
	}
	if originZ != nil {
		_p5 := originZ
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("scaleSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) Scale3dSelf(scale *float64, originX *float64, originY *float64, originZ *float64) (_result *DOMMatrix) {
	var (
		_args [4]interface{}
		_end  int
	)
	if scale != nil {
		_p0 := scale
		_args[0] = _p0
		_end++
	}
	if originX != nil {
		_p1 := originX
		_args[1] = _p1
		_end++
	}
	if originY != nil {
		_p2 := originY
		_args[2] = _p2
		_end++
	}
	if originZ != nil {
		_p3 := originZ
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("scale3dSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) RotateSelf(rotX *float64, rotY *float64, rotZ *float64) (_result *DOMMatrix) {
	var (
		_args [3]interface{}
		_end  int
	)
	if rotX != nil {
		_p0 := rotX
		_args[0] = _p0
		_end++
	}
	if rotY != nil {
		_p1 := rotY
		_args[1] = _p1
		_end++
	}
	if rotZ != nil {
		_p2 := rotZ
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("rotateSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) RotateFromVectorSelf(x *float64, y *float64) (_result *DOMMatrix) {
	var (
		_args [2]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("rotateFromVectorSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) RotateAxisAngleSelf(x *float64, y *float64, z *float64, angle *float64) (_result *DOMMatrix) {
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if z != nil {
		_p2 := z
		_args[2] = _p2
		_end++
	}
	if angle != nil {
		_p3 := angle
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("rotateAxisAngleSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) SkewXSelf(sx *float64) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if sx != nil {
		_p0 := sx
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("skewXSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) SkewYSelf(sy *float64) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if sy != nil {
		_p0 := sy
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("skewYSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) InvertSelf() (_result *DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("invertSelf", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrix) SetMatrixValue(transformList string) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := transformList
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setMatrixValue", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

// interface: DOMMatrixReadOnly
type DOMMatrixReadOnly struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMMatrixReadOnly) JSValue() js.Value {
	return _this.Value_JS
}

// DOMMatrixReadOnlyFromJS is casting a js.Wrapper into DOMMatrixReadOnly.
func DOMMatrixReadOnlyFromJS(value js.Wrapper) *DOMMatrixReadOnly {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMMatrixReadOnly{}
	ret.Value_JS = input
	return ret
}

func FromMatrix2(other *DOMMatrixInit) (_result *DOMMatrixReadOnly) {
	_klass := js.Global().Get("DOMMatrixReadOnly")
	_method := _klass.Get("fromMatrix")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrixReadOnly // javascript: DOMMatrixReadOnly _what_return_name
	)
	_converted = DOMMatrixReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func FromFloat32Array2(array32 *javascript.Float32Array) (_result *DOMMatrixReadOnly) {
	_klass := js.Global().Get("DOMMatrixReadOnly")
	_method := _klass.Get("fromFloat32Array")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array32.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrixReadOnly // javascript: DOMMatrixReadOnly _what_return_name
	)
	_converted = DOMMatrixReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func FromFloat64Array2(array64 *javascript.Float64Array) (_result *DOMMatrixReadOnly) {
	_klass := js.Global().Get("DOMMatrixReadOnly")
	_method := _klass.Get("fromFloat64Array")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array64.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMMatrixReadOnly // javascript: DOMMatrixReadOnly _what_return_name
	)
	_converted = DOMMatrixReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func NewDOMMatrixReadOnly(init *Union) (_result *DOMMatrixReadOnly) {
	_klass := js.Global().Get("DOMMatrixReadOnly")
	var (
		_args [1]interface{}
		_end  int
	)
	if init != nil {
		_p0 := init.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMMatrixReadOnly // javascript: DOMMatrixReadOnly _what_return_name
	)
	_converted = DOMMatrixReadOnlyFromJS(_returned)
	_result = _converted
	return
}

// A returning attribute 'a' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) A() float64 {
	var ret float64
	value := _this.Value_JS.Get("a")
	ret = (value).Float()
	return ret
}

// B returning attribute 'b' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) B() float64 {
	var ret float64
	value := _this.Value_JS.Get("b")
	ret = (value).Float()
	return ret
}

// C returning attribute 'c' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) C() float64 {
	var ret float64
	value := _this.Value_JS.Get("c")
	ret = (value).Float()
	return ret
}

// D returning attribute 'd' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) D() float64 {
	var ret float64
	value := _this.Value_JS.Get("d")
	ret = (value).Float()
	return ret
}

// E returning attribute 'e' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) E() float64 {
	var ret float64
	value := _this.Value_JS.Get("e")
	ret = (value).Float()
	return ret
}

// F returning attribute 'f' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) F() float64 {
	var ret float64
	value := _this.Value_JS.Get("f")
	ret = (value).Float()
	return ret
}

// M11 returning attribute 'm11' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M11() float64 {
	var ret float64
	value := _this.Value_JS.Get("m11")
	ret = (value).Float()
	return ret
}

// M12 returning attribute 'm12' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M12() float64 {
	var ret float64
	value := _this.Value_JS.Get("m12")
	ret = (value).Float()
	return ret
}

// M13 returning attribute 'm13' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M13() float64 {
	var ret float64
	value := _this.Value_JS.Get("m13")
	ret = (value).Float()
	return ret
}

// M14 returning attribute 'm14' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M14() float64 {
	var ret float64
	value := _this.Value_JS.Get("m14")
	ret = (value).Float()
	return ret
}

// M21 returning attribute 'm21' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M21() float64 {
	var ret float64
	value := _this.Value_JS.Get("m21")
	ret = (value).Float()
	return ret
}

// M22 returning attribute 'm22' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M22() float64 {
	var ret float64
	value := _this.Value_JS.Get("m22")
	ret = (value).Float()
	return ret
}

// M23 returning attribute 'm23' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M23() float64 {
	var ret float64
	value := _this.Value_JS.Get("m23")
	ret = (value).Float()
	return ret
}

// M24 returning attribute 'm24' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M24() float64 {
	var ret float64
	value := _this.Value_JS.Get("m24")
	ret = (value).Float()
	return ret
}

// M31 returning attribute 'm31' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M31() float64 {
	var ret float64
	value := _this.Value_JS.Get("m31")
	ret = (value).Float()
	return ret
}

// M32 returning attribute 'm32' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M32() float64 {
	var ret float64
	value := _this.Value_JS.Get("m32")
	ret = (value).Float()
	return ret
}

// M33 returning attribute 'm33' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M33() float64 {
	var ret float64
	value := _this.Value_JS.Get("m33")
	ret = (value).Float()
	return ret
}

// M34 returning attribute 'm34' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M34() float64 {
	var ret float64
	value := _this.Value_JS.Get("m34")
	ret = (value).Float()
	return ret
}

// M41 returning attribute 'm41' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M41() float64 {
	var ret float64
	value := _this.Value_JS.Get("m41")
	ret = (value).Float()
	return ret
}

// M42 returning attribute 'm42' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M42() float64 {
	var ret float64
	value := _this.Value_JS.Get("m42")
	ret = (value).Float()
	return ret
}

// M43 returning attribute 'm43' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M43() float64 {
	var ret float64
	value := _this.Value_JS.Get("m43")
	ret = (value).Float()
	return ret
}

// M44 returning attribute 'm44' with
// type float64 (idl: unrestricted double).
func (_this *DOMMatrixReadOnly) M44() float64 {
	var ret float64
	value := _this.Value_JS.Get("m44")
	ret = (value).Float()
	return ret
}

// Is2D returning attribute 'is2D' with
// type bool (idl: boolean).
func (_this *DOMMatrixReadOnly) Is2D() bool {
	var ret bool
	value := _this.Value_JS.Get("is2D")
	ret = (value).Bool()
	return ret
}

// IsIdentity returning attribute 'isIdentity' with
// type bool (idl: boolean).
func (_this *DOMMatrixReadOnly) IsIdentity() bool {
	var ret bool
	value := _this.Value_JS.Get("isIdentity")
	ret = (value).Bool()
	return ret
}

func (_this *DOMMatrixReadOnly) Translate(tx *float64, ty *float64, tz *float64) (_result *DOMMatrix) {
	var (
		_args [3]interface{}
		_end  int
	)
	if tx != nil {
		_p0 := tx
		_args[0] = _p0
		_end++
	}
	if ty != nil {
		_p1 := ty
		_args[1] = _p1
		_end++
	}
	if tz != nil {
		_p2 := tz
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("translate", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) Scale(scaleX *float64, scaleY *float64, scaleZ *float64, originX *float64, originY *float64, originZ *float64) (_result *DOMMatrix) {
	var (
		_args [6]interface{}
		_end  int
	)
	if scaleX != nil {
		_p0 := scaleX
		_args[0] = _p0
		_end++
	}
	if scaleY != nil {
		_p1 := scaleY
		_args[1] = _p1
		_end++
	}
	if scaleZ != nil {
		_p2 := scaleZ
		_args[2] = _p2
		_end++
	}
	if originX != nil {
		_p3 := originX
		_args[3] = _p3
		_end++
	}
	if originY != nil {
		_p4 := originY
		_args[4] = _p4
		_end++
	}
	if originZ != nil {
		_p5 := originZ
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("scale", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) ScaleNonUniform(scaleX *float64, scaleY *float64) (_result *DOMMatrix) {
	var (
		_args [2]interface{}
		_end  int
	)
	if scaleX != nil {
		_p0 := scaleX
		_args[0] = _p0
		_end++
	}
	if scaleY != nil {
		_p1 := scaleY
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("scaleNonUniform", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) Scale3d(scale *float64, originX *float64, originY *float64, originZ *float64) (_result *DOMMatrix) {
	var (
		_args [4]interface{}
		_end  int
	)
	if scale != nil {
		_p0 := scale
		_args[0] = _p0
		_end++
	}
	if originX != nil {
		_p1 := originX
		_args[1] = _p1
		_end++
	}
	if originY != nil {
		_p2 := originY
		_args[2] = _p2
		_end++
	}
	if originZ != nil {
		_p3 := originZ
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("scale3d", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) Rotate(rotX *float64, rotY *float64, rotZ *float64) (_result *DOMMatrix) {
	var (
		_args [3]interface{}
		_end  int
	)
	if rotX != nil {
		_p0 := rotX
		_args[0] = _p0
		_end++
	}
	if rotY != nil {
		_p1 := rotY
		_args[1] = _p1
		_end++
	}
	if rotZ != nil {
		_p2 := rotZ
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("rotate", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) RotateFromVector(x *float64, y *float64) (_result *DOMMatrix) {
	var (
		_args [2]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("rotateFromVector", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) RotateAxisAngle(x *float64, y *float64, z *float64, angle *float64) (_result *DOMMatrix) {
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if z != nil {
		_p2 := z
		_args[2] = _p2
		_end++
	}
	if angle != nil {
		_p3 := angle
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("rotateAxisAngle", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) SkewX(sx *float64) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if sx != nil {
		_p0 := sx
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("skewX", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) SkewY(sy *float64) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if sy != nil {
		_p0 := sy
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("skewY", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) Multiply(other *DOMMatrixInit) (_result *DOMMatrix) {
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("multiply", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) FlipX() (_result *DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("flipX", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) FlipY() (_result *DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("flipY", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) Inverse() (_result *DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("inverse", _args[0:_end]...)
	var (
		_converted *DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) TransformPoint(point *DOMPointInit) (_result *DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("transformPoint", _args[0:_end]...)
	var (
		_converted *DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) ToFloat32Array() (_result *javascript.Float32Array) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toFloat32Array", _args[0:_end]...)
	var (
		_converted *javascript.Float32Array // javascript: Float32Array _what_return_name
	)
	_converted = javascript.Float32ArrayFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) ToFloat64Array() (_result *javascript.Float64Array) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toFloat64Array", _args[0:_end]...)
	var (
		_converted *javascript.Float64Array // javascript: Float64Array _what_return_name
	)
	_converted = javascript.Float64ArrayFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMMatrixReadOnly) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

// interface: DOMPoint
type DOMPoint struct {
	DOMPointReadOnly
}

// DOMPointFromJS is casting a js.Wrapper into DOMPoint.
func DOMPointFromJS(value js.Wrapper) *DOMPoint {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMPoint{}
	ret.Value_JS = input
	return ret
}

func FromPoint(other *DOMPointInit) (_result *DOMPoint) {
	_klass := js.Global().Get("DOMPoint")
	_method := _klass.Get("fromPoint")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = DOMPointFromJS(_returned)
	_result = _converted
	return
}

func NewDOMPoint(x *float64, y *float64, z *float64, w *float64) (_result *DOMPoint) {
	_klass := js.Global().Get("DOMPoint")
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if z != nil {
		_p2 := z
		_args[2] = _p2
		_end++
	}
	if w != nil {
		_p3 := w
		_args[3] = _p3
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = DOMPointFromJS(_returned)
	_result = _converted
	return
}

// X returning attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) X() float64 {
	var ret float64
	value := _this.Value_JS.Get("x")
	ret = (value).Float()
	return ret
}

// SetX setting attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) SetX(value float64) {
	input := value
	_this.Value_JS.Set("x", input)
}

// Y returning attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) Y() float64 {
	var ret float64
	value := _this.Value_JS.Get("y")
	ret = (value).Float()
	return ret
}

// SetY setting attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) SetY(value float64) {
	input := value
	_this.Value_JS.Set("y", input)
}

// Z returning attribute 'z' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) Z() float64 {
	var ret float64
	value := _this.Value_JS.Get("z")
	ret = (value).Float()
	return ret
}

// SetZ setting attribute 'z' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) SetZ(value float64) {
	input := value
	_this.Value_JS.Set("z", input)
}

// W returning attribute 'w' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) W() float64 {
	var ret float64
	value := _this.Value_JS.Get("w")
	ret = (value).Float()
	return ret
}

// SetW setting attribute 'w' with
// type float64 (idl: unrestricted double).
func (_this *DOMPoint) SetW(value float64) {
	input := value
	_this.Value_JS.Set("w", input)
}

// interface: DOMPointReadOnly
type DOMPointReadOnly struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMPointReadOnly) JSValue() js.Value {
	return _this.Value_JS
}

// DOMPointReadOnlyFromJS is casting a js.Wrapper into DOMPointReadOnly.
func DOMPointReadOnlyFromJS(value js.Wrapper) *DOMPointReadOnly {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMPointReadOnly{}
	ret.Value_JS = input
	return ret
}

func FromPoint2(other *DOMPointInit) (_result *DOMPointReadOnly) {
	_klass := js.Global().Get("DOMPointReadOnly")
	_method := _klass.Get("fromPoint")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMPointReadOnly // javascript: DOMPointReadOnly _what_return_name
	)
	_converted = DOMPointReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func NewDOMPointReadOnly(x *float64, y *float64, z *float64, w *float64) (_result *DOMPointReadOnly) {
	_klass := js.Global().Get("DOMPointReadOnly")
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if z != nil {
		_p2 := z
		_args[2] = _p2
		_end++
	}
	if w != nil {
		_p3 := w
		_args[3] = _p3
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMPointReadOnly // javascript: DOMPointReadOnly _what_return_name
	)
	_converted = DOMPointReadOnlyFromJS(_returned)
	_result = _converted
	return
}

// X returning attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMPointReadOnly) X() float64 {
	var ret float64
	value := _this.Value_JS.Get("x")
	ret = (value).Float()
	return ret
}

// Y returning attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMPointReadOnly) Y() float64 {
	var ret float64
	value := _this.Value_JS.Get("y")
	ret = (value).Float()
	return ret
}

// Z returning attribute 'z' with
// type float64 (idl: unrestricted double).
func (_this *DOMPointReadOnly) Z() float64 {
	var ret float64
	value := _this.Value_JS.Get("z")
	ret = (value).Float()
	return ret
}

// W returning attribute 'w' with
// type float64 (idl: unrestricted double).
func (_this *DOMPointReadOnly) W() float64 {
	var ret float64
	value := _this.Value_JS.Get("w")
	ret = (value).Float()
	return ret
}

func (_this *DOMPointReadOnly) MatrixTransform(matrix *DOMMatrixInit) (_result *DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("matrixTransform", _args[0:_end]...)
	var (
		_converted *DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMPointReadOnly) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

// interface: DOMQuad
type DOMQuad struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMQuad) JSValue() js.Value {
	return _this.Value_JS
}

// DOMQuadFromJS is casting a js.Wrapper into DOMQuad.
func DOMQuadFromJS(value js.Wrapper) *DOMQuad {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMQuad{}
	ret.Value_JS = input
	return ret
}

func FromRect(other *DOMRectInit) (_result *DOMQuad) {
	_klass := js.Global().Get("DOMQuad")
	_method := _klass.Get("fromRect")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func FromQuad(other *DOMQuadInit) (_result *DOMQuad) {
	_klass := js.Global().Get("DOMQuad")
	_method := _klass.Get("fromQuad")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func NewDOMQuad(p1 *DOMPointInit, p2 *DOMPointInit, p3 *DOMPointInit, p4 *DOMPointInit) (_result *DOMQuad) {
	_klass := js.Global().Get("DOMQuad")
	var (
		_args [4]interface{}
		_end  int
	)
	if p1 != nil {
		_p0 := p1.JSValue()
		_args[0] = _p0
		_end++
	}
	if p2 != nil {
		_p1 := p2.JSValue()
		_args[1] = _p1
		_end++
	}
	if p3 != nil {
		_p2 := p3.JSValue()
		_args[2] = _p2
		_end++
	}
	if p4 != nil {
		_p3 := p4.JSValue()
		_args[3] = _p3
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = DOMQuadFromJS(_returned)
	_result = _converted
	return
}

// P1 returning attribute 'p1' with
// type DOMPoint (idl: DOMPoint).
func (_this *DOMQuad) P1() *DOMPoint {
	var ret *DOMPoint
	value := _this.Value_JS.Get("p1")
	ret = DOMPointFromJS(value)
	return ret
}

// P2 returning attribute 'p2' with
// type DOMPoint (idl: DOMPoint).
func (_this *DOMQuad) P2() *DOMPoint {
	var ret *DOMPoint
	value := _this.Value_JS.Get("p2")
	ret = DOMPointFromJS(value)
	return ret
}

// P3 returning attribute 'p3' with
// type DOMPoint (idl: DOMPoint).
func (_this *DOMQuad) P3() *DOMPoint {
	var ret *DOMPoint
	value := _this.Value_JS.Get("p3")
	ret = DOMPointFromJS(value)
	return ret
}

// P4 returning attribute 'p4' with
// type DOMPoint (idl: DOMPoint).
func (_this *DOMQuad) P4() *DOMPoint {
	var ret *DOMPoint
	value := _this.Value_JS.Get("p4")
	ret = DOMPointFromJS(value)
	return ret
}

func (_this *DOMQuad) GetBounds() (_result *DOMRect) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getBounds", _args[0:_end]...)
	var (
		_converted *DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMQuad) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

// interface: DOMRect
type DOMRect struct {
	DOMRectReadOnly
}

// DOMRectFromJS is casting a js.Wrapper into DOMRect.
func DOMRectFromJS(value js.Wrapper) *DOMRect {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMRect{}
	ret.Value_JS = input
	return ret
}

func FromRect2(other *DOMRectInit) (_result *DOMRect) {
	_klass := js.Global().Get("DOMRect")
	_method := _klass.Get("fromRect")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = DOMRectFromJS(_returned)
	_result = _converted
	return
}

func NewDOMRect(x *float64, y *float64, width *float64, height *float64) (_result *DOMRect) {
	_klass := js.Global().Get("DOMRect")
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if width != nil {
		_p2 := width
		_args[2] = _p2
		_end++
	}
	if height != nil {
		_p3 := height
		_args[3] = _p3
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = DOMRectFromJS(_returned)
	_result = _converted
	return
}

// X returning attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) X() float64 {
	var ret float64
	value := _this.Value_JS.Get("x")
	ret = (value).Float()
	return ret
}

// SetX setting attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) SetX(value float64) {
	input := value
	_this.Value_JS.Set("x", input)
}

// Y returning attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) Y() float64 {
	var ret float64
	value := _this.Value_JS.Get("y")
	ret = (value).Float()
	return ret
}

// SetY setting attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) SetY(value float64) {
	input := value
	_this.Value_JS.Set("y", input)
}

// Width returning attribute 'width' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) Width() float64 {
	var ret float64
	value := _this.Value_JS.Get("width")
	ret = (value).Float()
	return ret
}

// SetWidth setting attribute 'width' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) SetWidth(value float64) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) Height() float64 {
	var ret float64
	value := _this.Value_JS.Get("height")
	ret = (value).Float()
	return ret
}

// SetHeight setting attribute 'height' with
// type float64 (idl: unrestricted double).
func (_this *DOMRect) SetHeight(value float64) {
	input := value
	_this.Value_JS.Set("height", input)
}

// interface: DOMRectList
type DOMRectList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMRectList) JSValue() js.Value {
	return _this.Value_JS
}

// DOMRectListFromJS is casting a js.Wrapper into DOMRectList.
func DOMRectListFromJS(value js.Wrapper) *DOMRectList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMRectList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *DOMRectList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *DOMRectList) Item(index uint) (_result *DOMRect) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *DOMRect // javascript: DOMRect _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = DOMRectFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: DOMRectReadOnly
type DOMRectReadOnly struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *DOMRectReadOnly) JSValue() js.Value {
	return _this.Value_JS
}

// DOMRectReadOnlyFromJS is casting a js.Wrapper into DOMRectReadOnly.
func DOMRectReadOnlyFromJS(value js.Wrapper) *DOMRectReadOnly {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DOMRectReadOnly{}
	ret.Value_JS = input
	return ret
}

func FromRect3(other *DOMRectInit) (_result *DOMRectReadOnly) {
	_klass := js.Global().Get("DOMRectReadOnly")
	_method := _klass.Get("fromRect")
	var (
		_args [1]interface{}
		_end  int
	)
	if other != nil {
		_p0 := other.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted *DOMRectReadOnly // javascript: DOMRectReadOnly _what_return_name
	)
	_converted = DOMRectReadOnlyFromJS(_returned)
	_result = _converted
	return
}

func NewDOMRectReadOnly(x *float64, y *float64, width *float64, height *float64) (_result *DOMRectReadOnly) {
	_klass := js.Global().Get("DOMRectReadOnly")
	var (
		_args [4]interface{}
		_end  int
	)
	if x != nil {
		_p0 := x
		_args[0] = _p0
		_end++
	}
	if y != nil {
		_p1 := y
		_args[1] = _p1
		_end++
	}
	if width != nil {
		_p2 := width
		_args[2] = _p2
		_end++
	}
	if height != nil {
		_p3 := height
		_args[3] = _p3
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DOMRectReadOnly // javascript: DOMRectReadOnly _what_return_name
	)
	_converted = DOMRectReadOnlyFromJS(_returned)
	_result = _converted
	return
}

// X returning attribute 'x' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) X() float64 {
	var ret float64
	value := _this.Value_JS.Get("x")
	ret = (value).Float()
	return ret
}

// Y returning attribute 'y' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Y() float64 {
	var ret float64
	value := _this.Value_JS.Get("y")
	ret = (value).Float()
	return ret
}

// Width returning attribute 'width' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Width() float64 {
	var ret float64
	value := _this.Value_JS.Get("width")
	ret = (value).Float()
	return ret
}

// Height returning attribute 'height' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Height() float64 {
	var ret float64
	value := _this.Value_JS.Get("height")
	ret = (value).Float()
	return ret
}

// Top returning attribute 'top' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Top() float64 {
	var ret float64
	value := _this.Value_JS.Get("top")
	ret = (value).Float()
	return ret
}

// Right returning attribute 'right' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Right() float64 {
	var ret float64
	value := _this.Value_JS.Get("right")
	ret = (value).Float()
	return ret
}

// Bottom returning attribute 'bottom' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Bottom() float64 {
	var ret float64
	value := _this.Value_JS.Get("bottom")
	ret = (value).Float()
	return ret
}

// Left returning attribute 'left' with
// type float64 (idl: unrestricted double).
func (_this *DOMRectReadOnly) Left() float64 {
	var ret float64
	value := _this.Value_JS.Get("left")
	ret = (value).Float()
	return ret
}

func (_this *DOMRectReadOnly) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}
