// Code generated by webidl-bind. DO NOT EDIT.

package request

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.FrozenArray
// javascript.Object
// javascript.Promise

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: PaymentComplete
type PaymentComplete int

const (
	FailPaymentComplete PaymentComplete = iota
	SuccessPaymentComplete
	UnknownPaymentComplete
)

var paymentCompleteToWasmTable = []string{
	"fail", "success", "unknown",
}

var paymentCompleteFromWasmTable = map[string]PaymentComplete{
	"fail": FailPaymentComplete, "success": SuccessPaymentComplete, "unknown": UnknownPaymentComplete,
}

// JSValue is converting this enum into a java object
func (this *PaymentComplete) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PaymentComplete) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(paymentCompleteToWasmTable) {
		return paymentCompleteToWasmTable[idx]
	}
	panic("unknown input value")
}

// PaymentCompleteFromJS is converting a javascript value into
// a PaymentComplete enum value.
func PaymentCompleteFromJS(value js.Value) PaymentComplete {
	key := value.String()
	conv, ok := paymentCompleteFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: PaymentShippingType
type PaymentShippingType int

const (
	ShippingPaymentShippingType PaymentShippingType = iota
	DeliveryPaymentShippingType
	PickupPaymentShippingType
)

var paymentShippingTypeToWasmTable = []string{
	"shipping", "delivery", "pickup",
}

var paymentShippingTypeFromWasmTable = map[string]PaymentShippingType{
	"shipping": ShippingPaymentShippingType, "delivery": DeliveryPaymentShippingType, "pickup": PickupPaymentShippingType,
}

// JSValue is converting this enum into a java object
func (this *PaymentShippingType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PaymentShippingType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(paymentShippingTypeToWasmTable) {
		return paymentShippingTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// PaymentShippingTypeFromJS is converting a javascript value into
// a PaymentShippingType enum value.
func PaymentShippingTypeFromJS(value js.Value) PaymentShippingType {
	key := value.String()
	conv, ok := paymentShippingTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: AddressErrors
type AddressErrors struct {
	AddressLine       string
	City              string
	Country           string
	DependentLocality string
	Organization      string
	Phone             string
	PostalCode        string
	Recipient         string
	Region            string
	SortingCode       string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *AddressErrors) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.AddressLine
	out.Set("addressLine", value0)
	value1 := _this.City
	out.Set("city", value1)
	value2 := _this.Country
	out.Set("country", value2)
	value3 := _this.DependentLocality
	out.Set("dependentLocality", value3)
	value4 := _this.Organization
	out.Set("organization", value4)
	value5 := _this.Phone
	out.Set("phone", value5)
	value6 := _this.PostalCode
	out.Set("postalCode", value6)
	value7 := _this.Recipient
	out.Set("recipient", value7)
	value8 := _this.Region
	out.Set("region", value8)
	value9 := _this.SortingCode
	out.Set("sortingCode", value9)
	return out
}

// AddressErrorsFromJS is allocating a new
// AddressErrors object and copy all values from
// input javascript object
func AddressErrorsFromJS(value js.Wrapper) *AddressErrors {
	input := value.JSValue()
	var out AddressErrors
	var (
		value0 string // javascript: DOMString {addressLine AddressLine addressLine}
		value1 string // javascript: DOMString {city City city}
		value2 string // javascript: DOMString {country Country country}
		value3 string // javascript: DOMString {dependentLocality DependentLocality dependentLocality}
		value4 string // javascript: DOMString {organization Organization organization}
		value5 string // javascript: DOMString {phone Phone phone}
		value6 string // javascript: DOMString {postalCode PostalCode postalCode}
		value7 string // javascript: DOMString {recipient Recipient recipient}
		value8 string // javascript: DOMString {region Region region}
		value9 string // javascript: DOMString {sortingCode SortingCode sortingCode}
	)
	value0 = (input.Get("addressLine")).String()
	out.AddressLine = value0
	value1 = (input.Get("city")).String()
	out.City = value1
	value2 = (input.Get("country")).String()
	out.Country = value2
	value3 = (input.Get("dependentLocality")).String()
	out.DependentLocality = value3
	value4 = (input.Get("organization")).String()
	out.Organization = value4
	value5 = (input.Get("phone")).String()
	out.Phone = value5
	value6 = (input.Get("postalCode")).String()
	out.PostalCode = value6
	value7 = (input.Get("recipient")).String()
	out.Recipient = value7
	value8 = (input.Get("region")).String()
	out.Region = value8
	value9 = (input.Get("sortingCode")).String()
	out.SortingCode = value9
	return &out
}

// dictionary: MerchantValidationEventInit
type MerchantValidationEventInit struct {
	Bubbles       bool
	Cancelable    bool
	Composed      bool
	MethodName    string
	ValidationURL string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MerchantValidationEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.MethodName
	out.Set("methodName", value3)
	value4 := _this.ValidationURL
	out.Set("validationURL", value4)
	return out
}

// MerchantValidationEventInitFromJS is allocating a new
// MerchantValidationEventInit object and copy all values from
// input javascript object
func MerchantValidationEventInitFromJS(value js.Wrapper) *MerchantValidationEventInit {
	input := value.JSValue()
	var out MerchantValidationEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 string // javascript: DOMString {methodName MethodName methodName}
		value4 string // javascript: USVString {validationURL ValidationURL validationURL}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("methodName")).String()
	out.MethodName = value3
	value4 = (input.Get("validationURL")).String()
	out.ValidationURL = value4
	return &out
}

// dictionary: PayerErrors
type PayerErrors struct {
	Email string
	Name  string
	Phone string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PayerErrors) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Email
	out.Set("email", value0)
	value1 := _this.Name
	out.Set("name", value1)
	value2 := _this.Phone
	out.Set("phone", value2)
	return out
}

// PayerErrorsFromJS is allocating a new
// PayerErrors object and copy all values from
// input javascript object
func PayerErrorsFromJS(value js.Wrapper) *PayerErrors {
	input := value.JSValue()
	var out PayerErrors
	var (
		value0 string // javascript: DOMString {email Email email}
		value1 string // javascript: DOMString {name Name name}
		value2 string // javascript: DOMString {phone Phone phone}
	)
	value0 = (input.Get("email")).String()
	out.Email = value0
	value1 = (input.Get("name")).String()
	out.Name = value1
	value2 = (input.Get("phone")).String()
	out.Phone = value2
	return &out
}

// dictionary: PaymentCurrencyAmount
type PaymentCurrencyAmount struct {
	Currency string
	Value    string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentCurrencyAmount) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Currency
	out.Set("currency", value0)
	value1 := _this.Value
	out.Set("value", value1)
	return out
}

// PaymentCurrencyAmountFromJS is allocating a new
// PaymentCurrencyAmount object and copy all values from
// input javascript object
func PaymentCurrencyAmountFromJS(value js.Wrapper) *PaymentCurrencyAmount {
	input := value.JSValue()
	var out PaymentCurrencyAmount
	var (
		value0 string // javascript: DOMString {currency Currency currency}
		value1 string // javascript: DOMString {value Value value}
	)
	value0 = (input.Get("currency")).String()
	out.Currency = value0
	value1 = (input.Get("value")).String()
	out.Value = value1
	return &out
}

// dictionary: PaymentDetailsBase
type PaymentDetailsBase struct {
	DisplayItems    []*PaymentItem
	ShippingOptions []*PaymentShippingOption
	Modifiers       []*PaymentDetailsModifier
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentDetailsBase) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.DisplayItems))
	for __idx0, __seq_in0 := range _this.DisplayItems {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("displayItems", value0)
	value1 := js.Global().Get("Array").New(len(_this.ShippingOptions))
	for __idx1, __seq_in1 := range _this.ShippingOptions {
		__seq_out1 := __seq_in1.JSValue()
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("shippingOptions", value1)
	value2 := js.Global().Get("Array").New(len(_this.Modifiers))
	for __idx2, __seq_in2 := range _this.Modifiers {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("modifiers", value2)
	return out
}

// PaymentDetailsBaseFromJS is allocating a new
// PaymentDetailsBase object and copy all values from
// input javascript object
func PaymentDetailsBaseFromJS(value js.Wrapper) *PaymentDetailsBase {
	input := value.JSValue()
	var out PaymentDetailsBase
	var (
		value0 []*PaymentItem            // javascript: sequence<PaymentItem> {displayItems DisplayItems displayItems}
		value1 []*PaymentShippingOption  // javascript: sequence<PaymentShippingOption> {shippingOptions ShippingOptions shippingOptions}
		value2 []*PaymentDetailsModifier // javascript: sequence<PaymentDetailsModifier> {modifiers Modifiers modifiers}
	)
	__length0 := input.Get("displayItems").Length()
	__array0 := make([]*PaymentItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *PaymentItem
		__seq_in0 := input.Get("displayItems").Index(__idx0)
		__seq_out0 = PaymentItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.DisplayItems = value0
	__length1 := input.Get("shippingOptions").Length()
	__array1 := make([]*PaymentShippingOption, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 *PaymentShippingOption
		__seq_in1 := input.Get("shippingOptions").Index(__idx1)
		__seq_out1 = PaymentShippingOptionFromJS(__seq_in1)
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.ShippingOptions = value1
	__length2 := input.Get("modifiers").Length()
	__array2 := make([]*PaymentDetailsModifier, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *PaymentDetailsModifier
		__seq_in2 := input.Get("modifiers").Index(__idx2)
		__seq_out2 = PaymentDetailsModifierFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.Modifiers = value2
	return &out
}

// dictionary: PaymentDetailsInit
type PaymentDetailsInit struct {
	DisplayItems    []*PaymentItem
	ShippingOptions []*PaymentShippingOption
	Modifiers       []*PaymentDetailsModifier
	Id              string
	Total           *PaymentItem
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentDetailsInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.DisplayItems))
	for __idx0, __seq_in0 := range _this.DisplayItems {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("displayItems", value0)
	value1 := js.Global().Get("Array").New(len(_this.ShippingOptions))
	for __idx1, __seq_in1 := range _this.ShippingOptions {
		__seq_out1 := __seq_in1.JSValue()
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("shippingOptions", value1)
	value2 := js.Global().Get("Array").New(len(_this.Modifiers))
	for __idx2, __seq_in2 := range _this.Modifiers {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("modifiers", value2)
	value3 := _this.Id
	out.Set("id", value3)
	value4 := _this.Total.JSValue()
	out.Set("total", value4)
	return out
}

// PaymentDetailsInitFromJS is allocating a new
// PaymentDetailsInit object and copy all values from
// input javascript object
func PaymentDetailsInitFromJS(value js.Wrapper) *PaymentDetailsInit {
	input := value.JSValue()
	var out PaymentDetailsInit
	var (
		value0 []*PaymentItem            // javascript: sequence<PaymentItem> {displayItems DisplayItems displayItems}
		value1 []*PaymentShippingOption  // javascript: sequence<PaymentShippingOption> {shippingOptions ShippingOptions shippingOptions}
		value2 []*PaymentDetailsModifier // javascript: sequence<PaymentDetailsModifier> {modifiers Modifiers modifiers}
		value3 string                    // javascript: DOMString {id Id id}
		value4 *PaymentItem              // javascript: PaymentItem {total Total total}
	)
	__length0 := input.Get("displayItems").Length()
	__array0 := make([]*PaymentItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *PaymentItem
		__seq_in0 := input.Get("displayItems").Index(__idx0)
		__seq_out0 = PaymentItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.DisplayItems = value0
	__length1 := input.Get("shippingOptions").Length()
	__array1 := make([]*PaymentShippingOption, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 *PaymentShippingOption
		__seq_in1 := input.Get("shippingOptions").Index(__idx1)
		__seq_out1 = PaymentShippingOptionFromJS(__seq_in1)
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.ShippingOptions = value1
	__length2 := input.Get("modifiers").Length()
	__array2 := make([]*PaymentDetailsModifier, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *PaymentDetailsModifier
		__seq_in2 := input.Get("modifiers").Index(__idx2)
		__seq_out2 = PaymentDetailsModifierFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.Modifiers = value2
	value3 = (input.Get("id")).String()
	out.Id = value3
	value4 = PaymentItemFromJS(input.Get("total"))
	out.Total = value4
	return &out
}

// dictionary: PaymentDetailsModifier
type PaymentDetailsModifier struct {
	SupportedMethods       string
	Total                  *PaymentItem
	AdditionalDisplayItems []*PaymentItem
	Data                   *javascript.Object
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentDetailsModifier) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.SupportedMethods
	out.Set("supportedMethods", value0)
	value1 := _this.Total.JSValue()
	out.Set("total", value1)
	value2 := js.Global().Get("Array").New(len(_this.AdditionalDisplayItems))
	for __idx2, __seq_in2 := range _this.AdditionalDisplayItems {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("additionalDisplayItems", value2)
	value3 := _this.Data.JSValue()
	out.Set("data", value3)
	return out
}

// PaymentDetailsModifierFromJS is allocating a new
// PaymentDetailsModifier object and copy all values from
// input javascript object
func PaymentDetailsModifierFromJS(value js.Wrapper) *PaymentDetailsModifier {
	input := value.JSValue()
	var out PaymentDetailsModifier
	var (
		value0 string             // javascript: DOMString {supportedMethods SupportedMethods supportedMethods}
		value1 *PaymentItem       // javascript: PaymentItem {total Total total}
		value2 []*PaymentItem     // javascript: sequence<PaymentItem> {additionalDisplayItems AdditionalDisplayItems additionalDisplayItems}
		value3 *javascript.Object // javascript: object {data Data data}
	)
	value0 = (input.Get("supportedMethods")).String()
	out.SupportedMethods = value0
	value1 = PaymentItemFromJS(input.Get("total"))
	out.Total = value1
	__length2 := input.Get("additionalDisplayItems").Length()
	__array2 := make([]*PaymentItem, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *PaymentItem
		__seq_in2 := input.Get("additionalDisplayItems").Index(__idx2)
		__seq_out2 = PaymentItemFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.AdditionalDisplayItems = value2
	value3 = javascript.ObjectFromJS(input.Get("data"))
	out.Data = value3
	return &out
}

// dictionary: PaymentDetailsUpdate
type PaymentDetailsUpdate struct {
	DisplayItems          []*PaymentItem
	ShippingOptions       []*PaymentShippingOption
	Modifiers             []*PaymentDetailsModifier
	Error                 string
	Total                 *PaymentItem
	ShippingAddressErrors *AddressErrors
	PayerErrors           *PayerErrors
	PaymentMethodErrors   *javascript.Object
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentDetailsUpdate) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.DisplayItems))
	for __idx0, __seq_in0 := range _this.DisplayItems {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("displayItems", value0)
	value1 := js.Global().Get("Array").New(len(_this.ShippingOptions))
	for __idx1, __seq_in1 := range _this.ShippingOptions {
		__seq_out1 := __seq_in1.JSValue()
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("shippingOptions", value1)
	value2 := js.Global().Get("Array").New(len(_this.Modifiers))
	for __idx2, __seq_in2 := range _this.Modifiers {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("modifiers", value2)
	value3 := _this.Error
	out.Set("error", value3)
	value4 := _this.Total.JSValue()
	out.Set("total", value4)
	value5 := _this.ShippingAddressErrors.JSValue()
	out.Set("shippingAddressErrors", value5)
	value6 := _this.PayerErrors.JSValue()
	out.Set("payerErrors", value6)
	value7 := _this.PaymentMethodErrors.JSValue()
	out.Set("paymentMethodErrors", value7)
	return out
}

// PaymentDetailsUpdateFromJS is allocating a new
// PaymentDetailsUpdate object and copy all values from
// input javascript object
func PaymentDetailsUpdateFromJS(value js.Wrapper) *PaymentDetailsUpdate {
	input := value.JSValue()
	var out PaymentDetailsUpdate
	var (
		value0 []*PaymentItem            // javascript: sequence<PaymentItem> {displayItems DisplayItems displayItems}
		value1 []*PaymentShippingOption  // javascript: sequence<PaymentShippingOption> {shippingOptions ShippingOptions shippingOptions}
		value2 []*PaymentDetailsModifier // javascript: sequence<PaymentDetailsModifier> {modifiers Modifiers modifiers}
		value3 string                    // javascript: DOMString {error Error _error}
		value4 *PaymentItem              // javascript: PaymentItem {total Total total}
		value5 *AddressErrors            // javascript: AddressErrors {shippingAddressErrors ShippingAddressErrors shippingAddressErrors}
		value6 *PayerErrors              // javascript: PayerErrors {payerErrors PayerErrors payerErrors}
		value7 *javascript.Object        // javascript: object {paymentMethodErrors PaymentMethodErrors paymentMethodErrors}
	)
	__length0 := input.Get("displayItems").Length()
	__array0 := make([]*PaymentItem, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *PaymentItem
		__seq_in0 := input.Get("displayItems").Index(__idx0)
		__seq_out0 = PaymentItemFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.DisplayItems = value0
	__length1 := input.Get("shippingOptions").Length()
	__array1 := make([]*PaymentShippingOption, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 *PaymentShippingOption
		__seq_in1 := input.Get("shippingOptions").Index(__idx1)
		__seq_out1 = PaymentShippingOptionFromJS(__seq_in1)
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.ShippingOptions = value1
	__length2 := input.Get("modifiers").Length()
	__array2 := make([]*PaymentDetailsModifier, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *PaymentDetailsModifier
		__seq_in2 := input.Get("modifiers").Index(__idx2)
		__seq_out2 = PaymentDetailsModifierFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.Modifiers = value2
	value3 = (input.Get("error")).String()
	out.Error = value3
	value4 = PaymentItemFromJS(input.Get("total"))
	out.Total = value4
	value5 = AddressErrorsFromJS(input.Get("shippingAddressErrors"))
	out.ShippingAddressErrors = value5
	value6 = PayerErrorsFromJS(input.Get("payerErrors"))
	out.PayerErrors = value6
	value7 = javascript.ObjectFromJS(input.Get("paymentMethodErrors"))
	out.PaymentMethodErrors = value7
	return &out
}

// dictionary: PaymentItem
type PaymentItem struct {
	Label   string
	Amount  *PaymentCurrencyAmount
	Pending bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentItem) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Label
	out.Set("label", value0)
	value1 := _this.Amount.JSValue()
	out.Set("amount", value1)
	value2 := _this.Pending
	out.Set("pending", value2)
	return out
}

// PaymentItemFromJS is allocating a new
// PaymentItem object and copy all values from
// input javascript object
func PaymentItemFromJS(value js.Wrapper) *PaymentItem {
	input := value.JSValue()
	var out PaymentItem
	var (
		value0 string                 // javascript: DOMString {label Label label}
		value1 *PaymentCurrencyAmount // javascript: PaymentCurrencyAmount {amount Amount amount}
		value2 bool                   // javascript: boolean {pending Pending pending}
	)
	value0 = (input.Get("label")).String()
	out.Label = value0
	value1 = PaymentCurrencyAmountFromJS(input.Get("amount"))
	out.Amount = value1
	value2 = (input.Get("pending")).Bool()
	out.Pending = value2
	return &out
}

// dictionary: PaymentMethodChangeEventInit
type PaymentMethodChangeEventInit struct {
	Bubbles       bool
	Cancelable    bool
	Composed      bool
	MethodName    string
	MethodDetails *javascript.Object
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentMethodChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.MethodName
	out.Set("methodName", value3)
	value4 := _this.MethodDetails.JSValue()
	out.Set("methodDetails", value4)
	return out
}

// PaymentMethodChangeEventInitFromJS is allocating a new
// PaymentMethodChangeEventInit object and copy all values from
// input javascript object
func PaymentMethodChangeEventInitFromJS(value js.Wrapper) *PaymentMethodChangeEventInit {
	input := value.JSValue()
	var out PaymentMethodChangeEventInit
	var (
		value0 bool               // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool               // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool               // javascript: boolean {composed Composed composed}
		value3 string             // javascript: DOMString {methodName MethodName methodName}
		value4 *javascript.Object // javascript: object {methodDetails MethodDetails methodDetails}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("methodName")).String()
	out.MethodName = value3
	if input.Get("methodDetails").Type() != js.TypeNull {
		value4 = javascript.ObjectFromJS(input.Get("methodDetails"))
	}
	out.MethodDetails = value4
	return &out
}

// dictionary: PaymentMethodData
type PaymentMethodData struct {
	SupportedMethods string
	Data             *javascript.Object
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentMethodData) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.SupportedMethods
	out.Set("supportedMethods", value0)
	value1 := _this.Data.JSValue()
	out.Set("data", value1)
	return out
}

// PaymentMethodDataFromJS is allocating a new
// PaymentMethodData object and copy all values from
// input javascript object
func PaymentMethodDataFromJS(value js.Wrapper) *PaymentMethodData {
	input := value.JSValue()
	var out PaymentMethodData
	var (
		value0 string             // javascript: DOMString {supportedMethods SupportedMethods supportedMethods}
		value1 *javascript.Object // javascript: object {data Data data}
	)
	value0 = (input.Get("supportedMethods")).String()
	out.SupportedMethods = value0
	value1 = javascript.ObjectFromJS(input.Get("data"))
	out.Data = value1
	return &out
}

// dictionary: PaymentOptions
type PaymentOptions struct {
	RequestPayerName      bool
	RequestBillingAddress bool
	RequestPayerEmail     bool
	RequestPayerPhone     bool
	RequestShipping       bool
	ShippingType          PaymentShippingType
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.RequestPayerName
	out.Set("requestPayerName", value0)
	value1 := _this.RequestBillingAddress
	out.Set("requestBillingAddress", value1)
	value2 := _this.RequestPayerEmail
	out.Set("requestPayerEmail", value2)
	value3 := _this.RequestPayerPhone
	out.Set("requestPayerPhone", value3)
	value4 := _this.RequestShipping
	out.Set("requestShipping", value4)
	value5 := _this.ShippingType.JSValue()
	out.Set("shippingType", value5)
	return out
}

// PaymentOptionsFromJS is allocating a new
// PaymentOptions object and copy all values from
// input javascript object
func PaymentOptionsFromJS(value js.Wrapper) *PaymentOptions {
	input := value.JSValue()
	var out PaymentOptions
	var (
		value0 bool                // javascript: boolean {requestPayerName RequestPayerName requestPayerName}
		value1 bool                // javascript: boolean {requestBillingAddress RequestBillingAddress requestBillingAddress}
		value2 bool                // javascript: boolean {requestPayerEmail RequestPayerEmail requestPayerEmail}
		value3 bool                // javascript: boolean {requestPayerPhone RequestPayerPhone requestPayerPhone}
		value4 bool                // javascript: boolean {requestShipping RequestShipping requestShipping}
		value5 PaymentShippingType // javascript: PaymentShippingType {shippingType ShippingType shippingType}
	)
	value0 = (input.Get("requestPayerName")).Bool()
	out.RequestPayerName = value0
	value1 = (input.Get("requestBillingAddress")).Bool()
	out.RequestBillingAddress = value1
	value2 = (input.Get("requestPayerEmail")).Bool()
	out.RequestPayerEmail = value2
	value3 = (input.Get("requestPayerPhone")).Bool()
	out.RequestPayerPhone = value3
	value4 = (input.Get("requestShipping")).Bool()
	out.RequestShipping = value4
	value5 = PaymentShippingTypeFromJS(input.Get("shippingType"))
	out.ShippingType = value5
	return &out
}

// dictionary: PaymentRequestUpdateEventInit
type PaymentRequestUpdateEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentRequestUpdateEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	return out
}

// PaymentRequestUpdateEventInitFromJS is allocating a new
// PaymentRequestUpdateEventInit object and copy all values from
// input javascript object
func PaymentRequestUpdateEventInitFromJS(value js.Wrapper) *PaymentRequestUpdateEventInit {
	input := value.JSValue()
	var out PaymentRequestUpdateEventInit
	var (
		value0 bool // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool // javascript: boolean {composed Composed composed}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	return &out
}

// dictionary: PaymentShippingOption
type PaymentShippingOption struct {
	Id       string
	Label    string
	Amount   *PaymentCurrencyAmount
	Selected bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentShippingOption) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Id
	out.Set("id", value0)
	value1 := _this.Label
	out.Set("label", value1)
	value2 := _this.Amount.JSValue()
	out.Set("amount", value2)
	value3 := _this.Selected
	out.Set("selected", value3)
	return out
}

// PaymentShippingOptionFromJS is allocating a new
// PaymentShippingOption object and copy all values from
// input javascript object
func PaymentShippingOptionFromJS(value js.Wrapper) *PaymentShippingOption {
	input := value.JSValue()
	var out PaymentShippingOption
	var (
		value0 string                 // javascript: DOMString {id Id id}
		value1 string                 // javascript: DOMString {label Label label}
		value2 *PaymentCurrencyAmount // javascript: PaymentCurrencyAmount {amount Amount amount}
		value3 bool                   // javascript: boolean {selected Selected selected}
	)
	value0 = (input.Get("id")).String()
	out.Id = value0
	value1 = (input.Get("label")).String()
	out.Label = value1
	value2 = PaymentCurrencyAmountFromJS(input.Get("amount"))
	out.Amount = value2
	value3 = (input.Get("selected")).Bool()
	out.Selected = value3
	return &out
}

// dictionary: PaymentValidationErrors
type PaymentValidationErrors struct {
	Payer           *PayerErrors
	ShippingAddress *AddressErrors
	Error           string
	PaymentMethod   *javascript.Object
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *PaymentValidationErrors) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Payer.JSValue()
	out.Set("payer", value0)
	value1 := _this.ShippingAddress.JSValue()
	out.Set("shippingAddress", value1)
	value2 := _this.Error
	out.Set("error", value2)
	value3 := _this.PaymentMethod.JSValue()
	out.Set("paymentMethod", value3)
	return out
}

// PaymentValidationErrorsFromJS is allocating a new
// PaymentValidationErrors object and copy all values from
// input javascript object
func PaymentValidationErrorsFromJS(value js.Wrapper) *PaymentValidationErrors {
	input := value.JSValue()
	var out PaymentValidationErrors
	var (
		value0 *PayerErrors       // javascript: PayerErrors {payer Payer payer}
		value1 *AddressErrors     // javascript: AddressErrors {shippingAddress ShippingAddress shippingAddress}
		value2 string             // javascript: DOMString {error Error _error}
		value3 *javascript.Object // javascript: object {paymentMethod PaymentMethod paymentMethod}
	)
	value0 = PayerErrorsFromJS(input.Get("payer"))
	out.Payer = value0
	value1 = AddressErrorsFromJS(input.Get("shippingAddress"))
	out.ShippingAddress = value1
	value2 = (input.Get("error")).String()
	out.Error = value2
	value3 = javascript.ObjectFromJS(input.Get("paymentMethod"))
	out.PaymentMethod = value3
	return &out
}

// interface: MerchantValidationEvent
type MerchantValidationEvent struct {
	domcore.Event
}

// MerchantValidationEventFromJS is casting a js.Wrapper into MerchantValidationEvent.
func MerchantValidationEventFromJS(value js.Wrapper) *MerchantValidationEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MerchantValidationEvent{}
	ret.Value_JS = input
	return ret
}

func NewMerchantValidationEvent(_type string, eventInitDict *MerchantValidationEventInit) (_result *MerchantValidationEvent) {
	_klass := js.Global().Get("MerchantValidationEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MerchantValidationEvent // javascript: MerchantValidationEvent _what_return_name
	)
	_converted = MerchantValidationEventFromJS(_returned)
	_result = _converted
	return
}

// MethodName returning attribute 'methodName' with
// type string (idl: DOMString).
func (_this *MerchantValidationEvent) MethodName() string {
	var ret string
	value := _this.Value_JS.Get("methodName")
	ret = (value).String()
	return ret
}

// ValidationURL returning attribute 'validationURL' with
// type string (idl: USVString).
func (_this *MerchantValidationEvent) ValidationURL() string {
	var ret string
	value := _this.Value_JS.Get("validationURL")
	ret = (value).String()
	return ret
}

func (_this *MerchantValidationEvent) Complete(merchantSessionPromise *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := merchantSessionPromise.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("complete", _args[0:_end]...)
	return
}

// interface: PaymentAddress
type PaymentAddress struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *PaymentAddress) JSValue() js.Value {
	return _this.Value_JS
}

// PaymentAddressFromJS is casting a js.Wrapper into PaymentAddress.
func PaymentAddressFromJS(value js.Wrapper) *PaymentAddress {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PaymentAddress{}
	ret.Value_JS = input
	return ret
}

// City returning attribute 'city' with
// type string (idl: DOMString).
func (_this *PaymentAddress) City() string {
	var ret string
	value := _this.Value_JS.Get("city")
	ret = (value).String()
	return ret
}

// Country returning attribute 'country' with
// type string (idl: DOMString).
func (_this *PaymentAddress) Country() string {
	var ret string
	value := _this.Value_JS.Get("country")
	ret = (value).String()
	return ret
}

// DependentLocality returning attribute 'dependentLocality' with
// type string (idl: DOMString).
func (_this *PaymentAddress) DependentLocality() string {
	var ret string
	value := _this.Value_JS.Get("dependentLocality")
	ret = (value).String()
	return ret
}

// Organization returning attribute 'organization' with
// type string (idl: DOMString).
func (_this *PaymentAddress) Organization() string {
	var ret string
	value := _this.Value_JS.Get("organization")
	ret = (value).String()
	return ret
}

// Phone returning attribute 'phone' with
// type string (idl: DOMString).
func (_this *PaymentAddress) Phone() string {
	var ret string
	value := _this.Value_JS.Get("phone")
	ret = (value).String()
	return ret
}

// PostalCode returning attribute 'postalCode' with
// type string (idl: DOMString).
func (_this *PaymentAddress) PostalCode() string {
	var ret string
	value := _this.Value_JS.Get("postalCode")
	ret = (value).String()
	return ret
}

// Recipient returning attribute 'recipient' with
// type string (idl: DOMString).
func (_this *PaymentAddress) Recipient() string {
	var ret string
	value := _this.Value_JS.Get("recipient")
	ret = (value).String()
	return ret
}

// Region returning attribute 'region' with
// type string (idl: DOMString).
func (_this *PaymentAddress) Region() string {
	var ret string
	value := _this.Value_JS.Get("region")
	ret = (value).String()
	return ret
}

// SortingCode returning attribute 'sortingCode' with
// type string (idl: DOMString).
func (_this *PaymentAddress) SortingCode() string {
	var ret string
	value := _this.Value_JS.Get("sortingCode")
	ret = (value).String()
	return ret
}

// AddressLine returning attribute 'addressLine' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *PaymentAddress) AddressLine() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("addressLine")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

func (_this *PaymentAddress) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

// interface: PaymentMethodChangeEvent
type PaymentMethodChangeEvent struct {
	PaymentRequestUpdateEvent
}

// PaymentMethodChangeEventFromJS is casting a js.Wrapper into PaymentMethodChangeEvent.
func PaymentMethodChangeEventFromJS(value js.Wrapper) *PaymentMethodChangeEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PaymentMethodChangeEvent{}
	ret.Value_JS = input
	return ret
}

func NewPaymentMethodChangeEvent(_type string, eventInitDict *PaymentMethodChangeEventInit) (_result *PaymentMethodChangeEvent) {
	_klass := js.Global().Get("PaymentMethodChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PaymentMethodChangeEvent // javascript: PaymentMethodChangeEvent _what_return_name
	)
	_converted = PaymentMethodChangeEventFromJS(_returned)
	_result = _converted
	return
}

// MethodName returning attribute 'methodName' with
// type string (idl: DOMString).
func (_this *PaymentMethodChangeEvent) MethodName() string {
	var ret string
	value := _this.Value_JS.Get("methodName")
	ret = (value).String()
	return ret
}

// MethodDetails returning attribute 'methodDetails' with
// type javascript.Object (idl: object).
func (_this *PaymentMethodChangeEvent) MethodDetails() *javascript.Object {
	var ret *javascript.Object
	value := _this.Value_JS.Get("methodDetails")
	if value.Type() != js.TypeNull {
		ret = javascript.ObjectFromJS(value)
	}
	return ret
}

// interface: PaymentRequest
type PaymentRequest struct {
	domcore.EventTarget
}

// PaymentRequestFromJS is casting a js.Wrapper into PaymentRequest.
func PaymentRequestFromJS(value js.Wrapper) *PaymentRequest {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PaymentRequest{}
	ret.Value_JS = input
	return ret
}

func NewPaymentRequest(methodData []*PaymentMethodData, details *PaymentDetailsInit, options *PaymentOptions) (_result *PaymentRequest) {
	_klass := js.Global().Get("PaymentRequest")
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(methodData))
	for __idx0, __seq_in0 := range methodData {
		__seq_out0 := __seq_in0.JSValue()
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_p1 := details.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PaymentRequest // javascript: PaymentRequest _what_return_name
	)
	_converted = PaymentRequestFromJS(_returned)
	_result = _converted
	return
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *PaymentRequest) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// ShippingAddress returning attribute 'shippingAddress' with
// type PaymentAddress (idl: PaymentAddress).
func (_this *PaymentRequest) ShippingAddress() *PaymentAddress {
	var ret *PaymentAddress
	value := _this.Value_JS.Get("shippingAddress")
	if value.Type() != js.TypeNull {
		ret = PaymentAddressFromJS(value)
	}
	return ret
}

// ShippingOption returning attribute 'shippingOption' with
// type string (idl: DOMString).
func (_this *PaymentRequest) ShippingOption() *string {
	var ret *string
	value := _this.Value_JS.Get("shippingOption")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// ShippingType returning attribute 'shippingType' with
// type PaymentShippingType (idl: PaymentShippingType).
func (_this *PaymentRequest) ShippingType() *PaymentShippingType {
	var ret *PaymentShippingType
	value := _this.Value_JS.Get("shippingType")
	if value.Type() != js.TypeNull {
		__tmp := PaymentShippingTypeFromJS(value)
		ret = &__tmp
	}
	return ret
}

// Onmerchantvalidation returning attribute 'onmerchantvalidation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) Onmerchantvalidation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmerchantvalidation")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmerchantvalidation setting attribute 'onmerchantvalidation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) SetOnmerchantvalidation(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmerchantvalidation", input)
}

// Onshippingaddresschange returning attribute 'onshippingaddresschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) Onshippingaddresschange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onshippingaddresschange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnshippingaddresschange setting attribute 'onshippingaddresschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) SetOnshippingaddresschange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onshippingaddresschange", input)
}

// Onshippingoptionchange returning attribute 'onshippingoptionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) Onshippingoptionchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onshippingoptionchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnshippingoptionchange setting attribute 'onshippingoptionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) SetOnshippingoptionchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onshippingoptionchange", input)
}

// Onpaymentmethodchange returning attribute 'onpaymentmethodchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) Onpaymentmethodchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaymentmethodchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpaymentmethodchange setting attribute 'onpaymentmethodchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentRequest) SetOnpaymentmethodchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpaymentmethodchange", input)
}

func (_this *PaymentRequest) Show(detailsPromise *javascript.Promise) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if detailsPromise != nil {
		_p0 := detailsPromise.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("show", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *PaymentRequest) Abort() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("abort", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *PaymentRequest) CanMakePayment() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("canMakePayment", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: PaymentRequestUpdateEvent
type PaymentRequestUpdateEvent struct {
	domcore.Event
}

// PaymentRequestUpdateEventFromJS is casting a js.Wrapper into PaymentRequestUpdateEvent.
func PaymentRequestUpdateEventFromJS(value js.Wrapper) *PaymentRequestUpdateEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PaymentRequestUpdateEvent{}
	ret.Value_JS = input
	return ret
}

func NewPaymentRequestUpdateEvent(_type string, eventInitDict *PaymentRequestUpdateEventInit) (_result *PaymentRequestUpdateEvent) {
	_klass := js.Global().Get("PaymentRequestUpdateEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PaymentRequestUpdateEvent // javascript: PaymentRequestUpdateEvent _what_return_name
	)
	_converted = PaymentRequestUpdateEventFromJS(_returned)
	_result = _converted
	return
}

func (_this *PaymentRequestUpdateEvent) UpdateWith(detailsPromise *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := detailsPromise.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("updateWith", _args[0:_end]...)
	return
}

// interface: PaymentResponse
type PaymentResponse struct {
	domcore.EventTarget
}

// PaymentResponseFromJS is casting a js.Wrapper into PaymentResponse.
func PaymentResponseFromJS(value js.Wrapper) *PaymentResponse {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &PaymentResponse{}
	ret.Value_JS = input
	return ret
}

// RequestId returning attribute 'requestId' with
// type string (idl: DOMString).
func (_this *PaymentResponse) RequestId() string {
	var ret string
	value := _this.Value_JS.Get("requestId")
	ret = (value).String()
	return ret
}

// MethodName returning attribute 'methodName' with
// type string (idl: DOMString).
func (_this *PaymentResponse) MethodName() string {
	var ret string
	value := _this.Value_JS.Get("methodName")
	ret = (value).String()
	return ret
}

// Details returning attribute 'details' with
// type javascript.Object (idl: object).
func (_this *PaymentResponse) Details() *javascript.Object {
	var ret *javascript.Object
	value := _this.Value_JS.Get("details")
	ret = javascript.ObjectFromJS(value)
	return ret
}

// ShippingAddress returning attribute 'shippingAddress' with
// type PaymentAddress (idl: PaymentAddress).
func (_this *PaymentResponse) ShippingAddress() *PaymentAddress {
	var ret *PaymentAddress
	value := _this.Value_JS.Get("shippingAddress")
	if value.Type() != js.TypeNull {
		ret = PaymentAddressFromJS(value)
	}
	return ret
}

// ShippingOption returning attribute 'shippingOption' with
// type string (idl: DOMString).
func (_this *PaymentResponse) ShippingOption() *string {
	var ret *string
	value := _this.Value_JS.Get("shippingOption")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// PayerName returning attribute 'payerName' with
// type string (idl: DOMString).
func (_this *PaymentResponse) PayerName() *string {
	var ret *string
	value := _this.Value_JS.Get("payerName")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// PayerEmail returning attribute 'payerEmail' with
// type string (idl: DOMString).
func (_this *PaymentResponse) PayerEmail() *string {
	var ret *string
	value := _this.Value_JS.Get("payerEmail")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// PayerPhone returning attribute 'payerPhone' with
// type string (idl: DOMString).
func (_this *PaymentResponse) PayerPhone() *string {
	var ret *string
	value := _this.Value_JS.Get("payerPhone")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Onpayerdetailchange returning attribute 'onpayerdetailchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentResponse) Onpayerdetailchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpayerdetailchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpayerdetailchange setting attribute 'onpayerdetailchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *PaymentResponse) SetOnpayerdetailchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpayerdetailchange", input)
}

func (_this *PaymentResponse) ToJSON() (_result *javascript.Object) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("toJSON", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

func (_this *PaymentResponse) Complete(result *PaymentComplete) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if result != nil {
		_p0 := result.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("complete", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *PaymentResponse) Retry(errorFields *PaymentValidationErrors) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if errorFields != nil {
		_p0 := errorFields.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("retry", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}
