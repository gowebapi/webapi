// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package webapi

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/appmanifest"
	"github.com/gowebapi/webapi/backgroundtask"
	"github.com/gowebapi/webapi/clipboard"
	"github.com/gowebapi/webapi/communication/xhr"
	"github.com/gowebapi/webapi/cookie"
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/crypto"
	"github.com/gowebapi/webapi/csp"
	"github.com/gowebapi/webapi/css/animations"
	"github.com/gowebapi/webapi/css/animations/webani"
	"github.com/gowebapi/webapi/css/cssom"
	"github.com/gowebapi/webapi/css/cssom/view"
	"github.com/gowebapi/webapi/css/pseudo"
	"github.com/gowebapi/webapi/css/regions"
	"github.com/gowebapi/webapi/css/transitions"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/device/sensor"
	"github.com/gowebapi/webapi/device/touchevents"
	"github.com/gowebapi/webapi/device/webvr"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/featurepolicy"
	"github.com/gowebapi/webapi/fetch"
	"github.com/gowebapi/webapi/fetch/corsrfc1918"
	"github.com/gowebapi/webapi/graphics/fontmetrics"
	"github.com/gowebapi/webapi/graphics/svg"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/html/canvas"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlcommon"
	"github.com/gowebapi/webapi/html/htmlevent"
	"github.com/gowebapi/webapi/html/htmlmisc"
	"github.com/gowebapi/webapi/html/selection"
	"github.com/gowebapi/webapi/indexeddb"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/speech"
	"github.com/gowebapi/webapi/patch"
	"github.com/gowebapi/webapi/performance"
	"github.com/gowebapi/webapi/serviceworker"
	"github.com/gowebapi/webapi/webidl"
)

// using following types:
// animations.AnimationEvent
// appmanifest.BeforeInstallPromptEvent
// backgroundtask.IdleRequestCallback
// backgroundtask.IdleRequestOptions
// canvas.ImageBitmapOptions
// canvas.PromiseImageBitmap
// channel.MessageEvent
// clipboard.ClipboardEvent
// cookie.CookieStore
// corsrfc1918.AddressSpace
// crypto.Crypto
// csp.SecurityPolicyViolationEvent
// cssom.CSSStyleDeclaration
// cssom.StyleSheetList
// dom.Attr
// dom.CDATASection
// dom.Comment
// dom.DocumentFragment
// dom.DocumentType
// dom.Element
// dom.HTMLCollection
// dom.Node
// dom.NodeFilter
// dom.NodeIterator
// dom.NodeList
// dom.ProcessingInstruction
// dom.Range
// dom.Text
// dom.TreeWalker
// domcore.DOMTokenList
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// domcore.VisibilityState
// featurepolicy.FeaturePolicy
// fetch.PromiseResponse
// fetch.RequestInit
// fontmetrics.FontMetrics
// geometry.DOMPoint
// geometry.DOMPointInit
// geometry.DOMQuad
// geometry.DOMQuadInit
// geometry.DOMRectReadOnly
// html.FormDataEvent
// html.HTMLAllCollection
// html.HTMLElement
// html.HTMLFormElement
// html.HTMLHeadElement
// html.ValidityState
// htmlcommon.BeforeUnloadEvent
// htmlcommon.FrameRequestCallback
// htmlcommon.OnBeforeUnloadEventHandler
// htmlcommon.OnErrorEventHandler
// htmlevent.DragEvent
// htmlevent.FocusEvent
// htmlevent.HashChangeEvent
// htmlevent.InputEvent
// htmlevent.KeyboardEvent
// htmlevent.MouseEvent
// htmlevent.PageTransitionEvent
// htmlevent.PointerEvent
// htmlevent.PopStateEvent
// htmlevent.PromiseRejectionEvent
// htmlevent.Storage
// htmlevent.StorageEvent
// htmlevent.UIEvent
// htmlevent.WheelEvent
// htmlmisc.ApplicationCache
// htmlmisc.BarProp
// htmlmisc.CustomElementRegistry
// htmlmisc.External
// htmlmisc.History
// htmlmisc.Location
// htmlmisc.Navigator
// indexeddb.IDBFactory
// javascript.Object
// javascript.PromiseVoid
// patch.ByteString
// performance.Performance
// pseudo.CSSPseudoElementList
// regions.NamedFlowMap
// selection.Selection
// sensor.DeviceMotionEvent
// sensor.DeviceOrientationEvent
// serviceworker.CacheStorage
// speech.SpeechSynthesis
// svg.SVGSVGElement
// touchevents.TouchEvent
// transitions.TransitionEvent
// typedom.StylePropertyMapReadOnly
// view.BoxQuadOptions
// view.CaretPosition
// view.ConvertCoordinateOptions
// view.MediaQueryList
// view.Screen
// view.ScrollToOptions
// webani.Animation
// webani.DocumentTimeline
// webidl.VoidFunction
// webvr.DisplayEvent
// xhr.ProgressEvent

// source idl files:
// dom.addition.idl
// dom.idl
// html.idl

// transform files:
// dom.go.md
// dom.go.md
// html.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: DocumentReadyState
type DocumentReadyState int

const (
	LoadingDocumentReadyState DocumentReadyState = iota
	InteractiveDocumentReadyState
	CompleteDocumentReadyState
)

var documentReadyStateToWasmTable = []string{
	"loading", "interactive", "complete",
}

var documentReadyStateFromWasmTable = map[string]DocumentReadyState{
	"loading": LoadingDocumentReadyState, "interactive": InteractiveDocumentReadyState, "complete": CompleteDocumentReadyState,
}

// JSValue is converting this enum into a javascript object
func (this *DocumentReadyState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this DocumentReadyState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(documentReadyStateToWasmTable) {
		return documentReadyStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// DocumentReadyStateFromJS is converting a javascript value into
// a DocumentReadyState enum value.
func DocumentReadyStateFromJS(value js.Value) DocumentReadyState {
	key := value.String()
	conv, ok := documentReadyStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: ElementCreationOptions
type ElementCreationOptions struct {
	Is string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ElementCreationOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Is
	out.Set("is", value0)
	return out
}

// ElementCreationOptionsFromJS is allocating a new
// ElementCreationOptions object and copy all values in the value javascript object.
func ElementCreationOptionsFromJS(value js.Value) *ElementCreationOptions {
	var out ElementCreationOptions
	var (
		value0 string // javascript: DOMString {is Is is}
	)
	value0 = (value.Get("is")).String()
	out.Is = value0
	return &out
}

// dictionary: WindowPostMessageOptions
type WindowPostMessageOptions struct {
	Transfer     []*javascript.Object
	TargetOrigin string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *WindowPostMessageOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Transfer))
	for __idx0, __seq_in0 := range _this.Transfer {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("transfer", value0)
	value1 := _this.TargetOrigin
	out.Set("targetOrigin", value1)
	return out
}

// WindowPostMessageOptionsFromJS is allocating a new
// WindowPostMessageOptions object and copy all values in the value javascript object.
func WindowPostMessageOptionsFromJS(value js.Value) *WindowPostMessageOptions {
	var out WindowPostMessageOptions
	var (
		value0 []*javascript.Object // javascript: sequence<object> {transfer Transfer transfer}
		value1 string               // javascript: USVString {targetOrigin TargetOrigin targetOrigin}
	)
	__length0 := value.Get("transfer").Length()
	__array0 := make([]*javascript.Object, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *javascript.Object
		__seq_in0 := value.Get("transfer").Index(__idx0)
		__seq_out0 = javascript.ObjectFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Transfer = value0
	value1 = (value.Get("targetOrigin")).String()
	out.TargetOrigin = value1
	return &out
}

// class: DOMImplementation
type DOMImplementation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *DOMImplementation) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// DOMImplementationFromJS is casting a js.Value into DOMImplementation.
func DOMImplementationFromJS(value js.Value) *DOMImplementation {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DOMImplementation{}
	ret.Value_JS = value
	return ret
}

// DOMImplementationFromJS is casting from something that holds a js.Value into DOMImplementation.
func DOMImplementationFromWrapper(input core.Wrapper) *DOMImplementation {
	return DOMImplementationFromJS(input.JSValue())
}

func (_this *DOMImplementation) CreateDocumentType(qualifiedName string, publicId string, systemId string) (_result *dom.DocumentType) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_p1 := publicId
	_args[1] = _p1
	_end++
	_p2 := systemId
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("createDocumentType", _args[0:_end]...)
	var (
		_converted *dom.DocumentType // javascript: DocumentType _what_return_name
	)
	_converted = dom.DocumentTypeFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) CreateDocument(namespace *string, qualifiedName string, doctype *dom.DocumentType) (_result *XMLDocument) {
	var (
		_args [3]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	if doctype != nil {
		_p2 := doctype.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createDocument", _args[0:_end]...)
	var (
		_converted *XMLDocument // javascript: XMLDocument _what_return_name
	)
	_converted = XMLDocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) CreateHTMLDocument(title *string) (_result *Document) {
	var (
		_args [1]interface{}
		_end  int
	)
	if title != nil {

		var _p0 interface{}
		if title != nil {
			_p0 = *(title)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createHTMLDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *DOMImplementation) HasFeature() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasFeature", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: Document
type Document struct {
	dom.Node
}

// DocumentFromJS is casting a js.Value into Document.
func DocumentFromJS(value js.Value) *Document {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Document{}
	ret.Value_JS = value
	return ret
}

// DocumentFromJS is casting from something that holds a js.Value into Document.
func DocumentFromWrapper(input core.Wrapper) *Document {
	return DocumentFromJS(input.JSValue())
}

func NewDocument() (_result *Document) {
	_klass := js.Global().Get("Document")
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

// Implementation returning attribute 'implementation' with
// type DOMImplementation (idl: DOMImplementation).
func (_this *Document) Implementation() *DOMImplementation {
	var ret *DOMImplementation
	value := _this.Value_JS.Get("implementation")
	ret = DOMImplementationFromJS(value)
	return ret
}

// URL returning attribute 'URL' with
// type string (idl: USVString).
func (_this *Document) URL() string {
	var ret string
	value := _this.Value_JS.Get("URL")
	ret = (value).String()
	return ret
}

// DocumentURI returning attribute 'documentURI' with
// type string (idl: USVString).
func (_this *Document) DocumentURI() string {
	var ret string
	value := _this.Value_JS.Get("documentURI")
	ret = (value).String()
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *Document) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// CompatMode returning attribute 'compatMode' with
// type string (idl: DOMString).
func (_this *Document) CompatMode() string {
	var ret string
	value := _this.Value_JS.Get("compatMode")
	ret = (value).String()
	return ret
}

// CharacterSet returning attribute 'characterSet' with
// type string (idl: DOMString).
func (_this *Document) CharacterSet() string {
	var ret string
	value := _this.Value_JS.Get("characterSet")
	ret = (value).String()
	return ret
}

// Charset returning attribute 'charset' with
// type string (idl: DOMString).
func (_this *Document) Charset() string {
	var ret string
	value := _this.Value_JS.Get("charset")
	ret = (value).String()
	return ret
}

// InputEncoding returning attribute 'inputEncoding' with
// type string (idl: DOMString).
func (_this *Document) InputEncoding() string {
	var ret string
	value := _this.Value_JS.Get("inputEncoding")
	ret = (value).String()
	return ret
}

// ContentType returning attribute 'contentType' with
// type string (idl: DOMString).
func (_this *Document) ContentType() string {
	var ret string
	value := _this.Value_JS.Get("contentType")
	ret = (value).String()
	return ret
}

// Doctype returning attribute 'doctype' with
// type dom.DocumentType (idl: DocumentType).
func (_this *Document) Doctype() *dom.DocumentType {
	var ret *dom.DocumentType
	value := _this.Value_JS.Get("doctype")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.DocumentTypeFromJS(value)
	}
	return ret
}

// DocumentElement returning attribute 'documentElement' with
// type dom.Element (idl: Element).
func (_this *Document) DocumentElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("documentElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// RootElement returning attribute 'rootElement' with
// type svg.SVGSVGElement (idl: SVGSVGElement).
func (_this *Document) RootElement() *svg.SVGSVGElement {
	var ret *svg.SVGSVGElement
	value := _this.Value_JS.Get("rootElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = svg.SVGSVGElementFromJS(value)
	}
	return ret
}

// AddressSpace returning attribute 'addressSpace' with
// type corsrfc1918.AddressSpace (idl: AddressSpace).
func (_this *Document) AddressSpace() corsrfc1918.AddressSpace {
	var ret corsrfc1918.AddressSpace
	value := _this.Value_JS.Get("addressSpace")
	ret = corsrfc1918.AddressSpaceFromJS(value)
	return ret
}

// NamedFlows returning attribute 'namedFlows' with
// type regions.NamedFlowMap (idl: NamedFlowMap).
func (_this *Document) NamedFlows() *regions.NamedFlowMap {
	var ret *regions.NamedFlowMap
	value := _this.Value_JS.Get("namedFlows")
	ret = regions.NamedFlowMapFromJS(value)
	return ret
}

// ScrollingElement returning attribute 'scrollingElement' with
// type dom.Element (idl: Element).
func (_this *Document) ScrollingElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("scrollingElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// FullscreenEnabled returning attribute 'fullscreenEnabled' with
// type bool (idl: boolean).
func (_this *Document) FullscreenEnabled() bool {
	var ret bool
	value := _this.Value_JS.Get("fullscreenEnabled")
	ret = (value).Bool()
	return ret
}

// Fullscreen returning attribute 'fullscreen' with
// type bool (idl: boolean).
func (_this *Document) Fullscreen() bool {
	var ret bool
	value := _this.Value_JS.Get("fullscreen")
	ret = (value).Bool()
	return ret
}

// OnFullscreenChange returning attribute 'onfullscreenchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnFullscreenChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfullscreenchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFullscreenError returning attribute 'onfullscreenerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnFullscreenError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfullscreenerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Location returning attribute 'location' with
// type htmlmisc.Location (idl: Location).
func (_this *Document) Location() *htmlmisc.Location {
	var ret *htmlmisc.Location
	value := _this.Value_JS.Get("location")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlmisc.LocationFromJS(value)
	}
	return ret
}

// Domain returning attribute 'domain' with
// type string (idl: USVString).
func (_this *Document) Domain() string {
	var ret string
	value := _this.Value_JS.Get("domain")
	ret = (value).String()
	return ret
}

// SetDomain setting attribute 'domain' with
// type string (idl: USVString).
func (_this *Document) SetDomain(value string) {
	input := value
	_this.Value_JS.Set("domain", input)
}

// Referrer returning attribute 'referrer' with
// type string (idl: USVString).
func (_this *Document) Referrer() string {
	var ret string
	value := _this.Value_JS.Get("referrer")
	ret = (value).String()
	return ret
}

// Cookie returning attribute 'cookie' with
// type string (idl: USVString).
func (_this *Document) Cookie() string {
	var ret string
	value := _this.Value_JS.Get("cookie")
	ret = (value).String()
	return ret
}

// SetCookie setting attribute 'cookie' with
// type string (idl: USVString).
func (_this *Document) SetCookie(value string) {
	input := value
	_this.Value_JS.Set("cookie", input)
}

// LastModified returning attribute 'lastModified' with
// type string (idl: DOMString).
func (_this *Document) LastModified() string {
	var ret string
	value := _this.Value_JS.Get("lastModified")
	ret = (value).String()
	return ret
}

// ReadyState returning attribute 'readyState' with
// type DocumentReadyState (idl: DocumentReadyState).
func (_this *Document) ReadyState() DocumentReadyState {
	var ret DocumentReadyState
	value := _this.Value_JS.Get("readyState")
	ret = DocumentReadyStateFromJS(value)
	return ret
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *Document) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *Document) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Dir returning attribute 'dir' with
// type string (idl: DOMString).
func (_this *Document) Dir() string {
	var ret string
	value := _this.Value_JS.Get("dir")
	ret = (value).String()
	return ret
}

// SetDir setting attribute 'dir' with
// type string (idl: DOMString).
func (_this *Document) SetDir(value string) {
	input := value
	_this.Value_JS.Set("dir", input)
}

// Body returning attribute 'body' with
// type html.HTMLElement (idl: HTMLElement).
func (_this *Document) Body() *html.HTMLElement {
	var ret *html.HTMLElement
	value := _this.Value_JS.Get("body")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = html.HTMLElementFromJS(value)
	}
	return ret
}

// SetBody setting attribute 'body' with
// type html.HTMLElement (idl: HTMLElement).
func (_this *Document) SetBody(value *html.HTMLElement) {
	input := value.JSValue()
	_this.Value_JS.Set("body", input)
}

// Head returning attribute 'head' with
// type html.HTMLHeadElement (idl: HTMLHeadElement).
func (_this *Document) Head() *html.HTMLHeadElement {
	var ret *html.HTMLHeadElement
	value := _this.Value_JS.Get("head")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = html.HTMLHeadElementFromJS(value)
	}
	return ret
}

// Images returning attribute 'images' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Images() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("images")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Embeds returning attribute 'embeds' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Embeds() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("embeds")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Plugins returning attribute 'plugins' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Plugins() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("plugins")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Links returning attribute 'links' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Links() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("links")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Forms returning attribute 'forms' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Forms() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("forms")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Scripts returning attribute 'scripts' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Scripts() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("scripts")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// CurrentScript returning attribute 'currentScript' with
// type Union (idl: Union).
func (_this *Document) CurrentScript() *Union {
	var ret *Union
	value := _this.Value_JS.Get("currentScript")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = UnionFromJS(value)
	}
	return ret
}

// DefaultView returning attribute 'defaultView' with
// type Window (idl: Window).
func (_this *Document) DefaultView() *Window {
	var ret *Window
	value := _this.Value_JS.Get("defaultView")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// ActiveElement returning attribute 'activeElement' with
// type dom.Element (idl: Element).
func (_this *Document) ActiveElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("activeElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// DesignMode returning attribute 'designMode' with
// type string (idl: DOMString).
func (_this *Document) DesignMode() string {
	var ret string
	value := _this.Value_JS.Get("designMode")
	ret = (value).String()
	return ret
}

// SetDesignMode setting attribute 'designMode' with
// type string (idl: DOMString).
func (_this *Document) SetDesignMode(value string) {
	input := value
	_this.Value_JS.Set("designMode", input)
}

// OnReadyStateChange returning attribute 'onreadystatechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnReadyStateChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreadystatechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// FgColor returning attribute 'fgColor' with
// type string (idl: DOMString).
func (_this *Document) FgColor() string {
	var ret string
	value := _this.Value_JS.Get("fgColor")
	ret = (value).String()
	return ret
}

// SetFgColor setting attribute 'fgColor' with
// type string (idl: DOMString).
func (_this *Document) SetFgColor(value string) {
	input := value
	_this.Value_JS.Set("fgColor", input)
}

// LinkColor returning attribute 'linkColor' with
// type string (idl: DOMString).
func (_this *Document) LinkColor() string {
	var ret string
	value := _this.Value_JS.Get("linkColor")
	ret = (value).String()
	return ret
}

// SetLinkColor setting attribute 'linkColor' with
// type string (idl: DOMString).
func (_this *Document) SetLinkColor(value string) {
	input := value
	_this.Value_JS.Set("linkColor", input)
}

// VlinkColor returning attribute 'vlinkColor' with
// type string (idl: DOMString).
func (_this *Document) VlinkColor() string {
	var ret string
	value := _this.Value_JS.Get("vlinkColor")
	ret = (value).String()
	return ret
}

// SetVlinkColor setting attribute 'vlinkColor' with
// type string (idl: DOMString).
func (_this *Document) SetVlinkColor(value string) {
	input := value
	_this.Value_JS.Set("vlinkColor", input)
}

// AlinkColor returning attribute 'alinkColor' with
// type string (idl: DOMString).
func (_this *Document) AlinkColor() string {
	var ret string
	value := _this.Value_JS.Get("alinkColor")
	ret = (value).String()
	return ret
}

// SetAlinkColor setting attribute 'alinkColor' with
// type string (idl: DOMString).
func (_this *Document) SetAlinkColor(value string) {
	input := value
	_this.Value_JS.Set("alinkColor", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *Document) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *Document) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// Anchors returning attribute 'anchors' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Anchors() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("anchors")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Applets returning attribute 'applets' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Applets() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("applets")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// All returning attribute 'all' with
// type html.HTMLAllCollection (idl: HTMLAllCollection).
func (_this *Document) All() *html.HTMLAllCollection {
	var ret *html.HTMLAllCollection
	value := _this.Value_JS.Get("all")
	ret = html.HTMLAllCollectionFromJS(value)
	return ret
}

// Hidden returning attribute 'hidden' with
// type bool (idl: boolean).
func (_this *Document) Hidden() bool {
	var ret bool
	value := _this.Value_JS.Get("hidden")
	ret = (value).Bool()
	return ret
}

// VisibilityState returning attribute 'visibilityState' with
// type domcore.VisibilityState (idl: VisibilityState).
func (_this *Document) VisibilityState() domcore.VisibilityState {
	var ret domcore.VisibilityState
	value := _this.Value_JS.Get("visibilityState")
	ret = domcore.VisibilityStateFromJS(value)
	return ret
}

// OnVisibilityChange returning attribute 'onvisibilitychange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnVisibilityChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvisibilitychange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// PictureInPictureEnabled returning attribute 'pictureInPictureEnabled' with
// type bool (idl: boolean).
func (_this *Document) PictureInPictureEnabled() bool {
	var ret bool
	value := _this.Value_JS.Get("pictureInPictureEnabled")
	ret = (value).Bool()
	return ret
}

// OnPointerLockChange returning attribute 'onpointerlockchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerLockChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerlockchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerLockError returning attribute 'onpointerlockerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerLockError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerlockerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Timeline returning attribute 'timeline' with
// type webani.DocumentTimeline (idl: DocumentTimeline).
func (_this *Document) Timeline() *webani.DocumentTimeline {
	var ret *webani.DocumentTimeline
	value := _this.Value_JS.Get("timeline")
	ret = webani.DocumentTimelineFromJS(value)
	return ret
}

// FeaturePolicy returning attribute 'featurePolicy' with
// type featurepolicy.FeaturePolicy (idl: FeaturePolicy).
func (_this *Document) FeaturePolicy() *featurepolicy.FeaturePolicy {
	var ret *featurepolicy.FeaturePolicy
	value := _this.Value_JS.Get("featurePolicy")
	ret = featurepolicy.FeaturePolicyFromJS(value)
	return ret
}

// StyleSheets returning attribute 'styleSheets' with
// type cssom.StyleSheetList (idl: StyleSheetList).
func (_this *Document) StyleSheets() *cssom.StyleSheetList {
	var ret *cssom.StyleSheetList
	value := _this.Value_JS.Get("styleSheets")
	ret = cssom.StyleSheetListFromJS(value)
	return ret
}

// FullscreenElement returning attribute 'fullscreenElement' with
// type dom.Element (idl: Element).
func (_this *Document) FullscreenElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("fullscreenElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// PictureInPictureElement returning attribute 'pictureInPictureElement' with
// type dom.Element (idl: Element).
func (_this *Document) PictureInPictureElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("pictureInPictureElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// PointerLockElement returning attribute 'pointerLockElement' with
// type dom.Element (idl: Element).
func (_this *Document) PointerLockElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("pointerLockElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// Children returning attribute 'children' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *Document) Children() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("children")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// FirstElementChild returning attribute 'firstElementChild' with
// type dom.Element (idl: Element).
func (_this *Document) FirstElementChild() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("firstElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// LastElementChild returning attribute 'lastElementChild' with
// type dom.Element (idl: Element).
func (_this *Document) LastElementChild() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("lastElementChild")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// ChildElementCount returning attribute 'childElementCount' with
// type uint (idl: unsigned long).
func (_this *Document) ChildElementCount() uint {
	var ret uint
	value := _this.Value_JS.Get("childElementCount")
	ret = (uint)((value).Int())
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAuxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAuxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBlur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnBlur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCanPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlayThrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCanPlayThrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnClose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnContextMenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnContextMenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCueChange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCueChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDblClick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDblClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnd returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragExit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragExit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragLeave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragOver returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragStart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDragStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDurationChange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnDurationChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEmptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnEmptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEnded returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnEnded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Document) OnError() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// OnFocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnFocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFormData returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnFormData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnInput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnInvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyDown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnKeyDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyPress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnKeyPress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyUp returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnKeyUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoad returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLoad() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedData returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLoadedData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedMetaData returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLoadedMetaData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadEnd returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLoadEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadStart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLoadStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseDown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseEnter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseLeave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseMove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOut returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOver returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseUp returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnMouseUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnWheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPlaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnProgress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnProgress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRateChange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnRateChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnReset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnReset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnResize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnResize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnScroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnScroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSecurityPolicyViolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSecurityPolicyViolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSeeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSeeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSelect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnStalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTimeUpdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTimeUpdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnToggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnToggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVolumeChange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnVolumeChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnWaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGotPointerCapture returning attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnGotPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongotpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLostPointerCapture returning attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnLostPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlostpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerDown returning attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerdown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerMove returning attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointermove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerUp returning attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerCancel returning attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointercancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOver returning attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOut returning attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerEnter returning attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerLeave returning attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPointerLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchStart returning attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTouchStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchEnd returning attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTouchEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchMove returning attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTouchMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchmove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchCancel returning attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTouchCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationStart returning attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAnimationStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationIteration returning attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAnimationIteration() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationiteration")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationEnd returning attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAnimationEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationCancel returning attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnAnimationCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionRun returning attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTransitionRun() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionrun")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionStart returning attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTransitionStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionEnd returning attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTransitionEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionCancel returning attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnTransitionCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitioncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectStart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSelectStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectionChange returning attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnSelectionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCopy returning attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCopy() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncopy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCut returning attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnCut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncut")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPaste returning attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Document) OnPaste() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaste")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncDocument_domcore_Event(listener func(event *domcore.Event, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAbort(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAbort(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// event attribute: animations.AnimationEvent
func eventFuncDocument_animations_AnimationEvent(listener func(event *animations.AnimationEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *animations.AnimationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = animations.AnimationEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAnimationCancel is adding doing AddEventListener for 'AnimationCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationcancel", cb)
	return cb
}

// SetOnAnimationCancel is assigning a function to 'onanimationcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationcancel", cb)
	return cb
}

// AddAnimationEnd is adding doing AddEventListener for 'AnimationEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationend", cb)
	return cb
}

// SetOnAnimationEnd is assigning a function to 'onanimationend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationend", cb)
	return cb
}

// AddAnimationIteration is adding doing AddEventListener for 'AnimationIteration' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationiteration", cb)
	return cb
}

// SetOnAnimationIteration is assigning a function to 'onanimationiteration'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationiteration", cb)
	return cb
}

// AddAnimationStart is adding doing AddEventListener for 'AnimationStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationstart", cb)
	return cb
}

// SetOnAnimationStart is assigning a function to 'onanimationstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationstart", cb)
	return cb
}

// event attribute: htmlevent.MouseEvent
func eventFuncDocument_htmlevent_MouseEvent(listener func(event *htmlevent.MouseEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.MouseEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.MouseEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAuxclick is adding doing AddEventListener for 'Auxclick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "auxclick", cb)
	return cb
}

// SetOnAuxclick is assigning a function to 'onauxclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onauxclick", cb)
	return cb
}

// event attribute: htmlevent.FocusEvent
func eventFuncDocument_htmlevent_FocusEvent(listener func(event *htmlevent.FocusEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.FocusEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.FocusEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBlur is adding doing AddEventListener for 'Blur' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventBlur(listener func(event *htmlevent.FocusEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "blur", cb)
	return cb
}

// SetOnBlur is assigning a function to 'onblur'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnBlur(listener func(event *htmlevent.FocusEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onblur", cb)
	return cb
}

// AddCancel is adding doing AddEventListener for 'Cancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCancel(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cancel", cb)
	return cb
}

// SetOnCancel is assigning a function to 'oncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCancel(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("oncancel", cb)
	return cb
}

// AddCanPlay is adding doing AddEventListener for 'CanPlay' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCanPlay(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplay", cb)
	return cb
}

// SetOnCanPlay is assigning a function to 'oncanplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCanPlay(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("oncanplay", cb)
	return cb
}

// AddCanPlayThrough is adding doing AddEventListener for 'CanPlayThrough' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCanPlayThrough(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplaythrough", cb)
	return cb
}

// SetOnCanPlayThrough is assigning a function to 'oncanplaythrough'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCanPlayThrough(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("oncanplaythrough", cb)
	return cb
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

// AddClick is adding doing AddEventListener for 'Click' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventClick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "click", cb)
	return cb
}

// SetOnClick is assigning a function to 'onclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnClick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onclick", cb)
	return cb
}

// AddClose is adding doing AddEventListener for 'Close' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventClose(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "close", cb)
	return cb
}

// SetOnClose is assigning a function to 'onclose'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnClose(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onclose", cb)
	return cb
}

// AddContextMenu is adding doing AddEventListener for 'ContextMenu' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "contextmenu", cb)
	return cb
}

// SetOnContextMenu is assigning a function to 'oncontextmenu'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("oncontextmenu", cb)
	return cb
}

// event attribute: clipboard.ClipboardEvent
func eventFuncDocument_clipboard_ClipboardEvent(listener func(event *clipboard.ClipboardEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *clipboard.ClipboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = clipboard.ClipboardEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCopy is adding doing AddEventListener for 'Copy' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "copy", cb)
	return cb
}

// SetOnCopy is assigning a function to 'oncopy'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncopy", cb)
	return cb
}

// AddCueChange is adding doing AddEventListener for 'CueChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCueChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cuechange", cb)
	return cb
}

// SetOnCueChange is assigning a function to 'oncuechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCueChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("oncuechange", cb)
	return cb
}

// AddCut is adding doing AddEventListener for 'Cut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventCut(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "cut", cb)
	return cb
}

// SetOnCut is assigning a function to 'oncut'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnCut(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncut", cb)
	return cb
}

// AddDblClick is adding doing AddEventListener for 'DblClick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "dblclick", cb)
	return cb
}

// SetOnDblClick is assigning a function to 'ondblclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("ondblclick", cb)
	return cb
}

// event attribute: htmlevent.DragEvent
func eventFuncDocument_htmlevent_DragEvent(listener func(event *htmlevent.DragEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.DragEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.DragEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDrag is adding doing AddEventListener for 'Drag' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDrag(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drag", cb)
	return cb
}

// SetOnDrag is assigning a function to 'ondrag'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDrag(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrag", cb)
	return cb
}

// AddDragEnd is adding doing AddEventListener for 'DragEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragend", cb)
	return cb
}

// SetOnDragEnd is assigning a function to 'ondragend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragend", cb)
	return cb
}

// AddDragEnter is adding doing AddEventListener for 'DragEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragenter", cb)
	return cb
}

// SetOnDragEnter is assigning a function to 'ondragenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragenter", cb)
	return cb
}

// AddDragExit is adding doing AddEventListener for 'DragExit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragExit(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragexit", cb)
	return cb
}

// SetOnDragExit is assigning a function to 'ondragexit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragExit(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragexit", cb)
	return cb
}

// AddDragLeave is adding doing AddEventListener for 'DragLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragleave", cb)
	return cb
}

// SetOnDragLeave is assigning a function to 'ondragleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragleave", cb)
	return cb
}

// AddDragOver is adding doing AddEventListener for 'DragOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragOver(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragover", cb)
	return cb
}

// SetOnDragOver is assigning a function to 'ondragover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragOver(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragover", cb)
	return cb
}

// AddDragStart is adding doing AddEventListener for 'DragStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDragStart(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragstart", cb)
	return cb
}

// SetOnDragStart is assigning a function to 'ondragstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDragStart(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragstart", cb)
	return cb
}

// AddDrop is adding doing AddEventListener for 'Drop' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDrop(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drop", cb)
	return cb
}

// SetOnDrop is assigning a function to 'ondrop'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDrop(listener func(event *htmlevent.DragEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrop", cb)
	return cb
}

// AddDurationChange is adding doing AddEventListener for 'DurationChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventDurationChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "durationchange", cb)
	return cb
}

// SetOnDurationChange is assigning a function to 'ondurationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnDurationChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("ondurationchange", cb)
	return cb
}

// AddEmptied is adding doing AddEventListener for 'Emptied' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventEmptied(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "emptied", cb)
	return cb
}

// SetOnEmptied is assigning a function to 'onemptied'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnEmptied(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onemptied", cb)
	return cb
}

// AddEnded is adding doing AddEventListener for 'Ended' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventEnded(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ended", cb)
	return cb
}

// SetOnEnded is assigning a function to 'onended'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnEnded(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onended", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddFocus is adding doing AddEventListener for 'Focus' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventFocus(listener func(event *htmlevent.FocusEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "focus", cb)
	return cb
}

// SetOnFocus is assigning a function to 'onfocus'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnFocus(listener func(event *htmlevent.FocusEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onfocus", cb)
	return cb
}

// event attribute: html.FormDataEvent
func eventFuncDocument_html_FormDataEvent(listener func(event *html.FormDataEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *html.FormDataEvent
		value := args[0]
		incoming := value.Get("target")
		ret = html.FormDataEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFormData is adding doing AddEventListener for 'FormData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventFormData(listener func(event *html.FormDataEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_html_FormDataEvent(listener)
	_this.Value_JS.Call("addEventListener", "formdata", cb)
	return cb
}

// SetOnFormData is assigning a function to 'onformdata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnFormData(listener func(event *html.FormDataEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_html_FormDataEvent(listener)
	_this.Value_JS.Set("onformdata", cb)
	return cb
}

// AddFullscreenChange is adding doing AddEventListener for 'FullscreenChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventFullscreenChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "fullscreenchange", cb)
	return cb
}

// SetOnFullscreenChange is assigning a function to 'onfullscreenchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnFullscreenChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onfullscreenchange", cb)
	return cb
}

// AddFullscreenError is adding doing AddEventListener for 'FullscreenError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventFullscreenError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "fullscreenerror", cb)
	return cb
}

// SetOnFullscreenError is assigning a function to 'onfullscreenerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnFullscreenError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onfullscreenerror", cb)
	return cb
}

// event attribute: htmlevent.PointerEvent
func eventFuncDocument_htmlevent_PointerEvent(listener func(event *htmlevent.PointerEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PointerEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PointerEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddGotPointerCapture is adding doing AddEventListener for 'GotPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "gotpointercapture", cb)
	return cb
}

// SetOnGotPointerCapture is assigning a function to 'ongotpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("ongotpointercapture", cb)
	return cb
}

// event attribute: htmlevent.InputEvent
func eventFuncDocument_htmlevent_InputEvent(listener func(event *htmlevent.InputEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.InputEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.InputEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddInput is adding doing AddEventListener for 'Input' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventInput(listener func(event *htmlevent.InputEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_InputEvent(listener)
	_this.Value_JS.Call("addEventListener", "input", cb)
	return cb
}

// SetOnInput is assigning a function to 'oninput'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnInput(listener func(event *htmlevent.InputEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_InputEvent(listener)
	_this.Value_JS.Set("oninput", cb)
	return cb
}

// AddInvalid is adding doing AddEventListener for 'Invalid' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventInvalid(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "invalid", cb)
	return cb
}

// SetOnInvalid is assigning a function to 'oninvalid'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnInvalid(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("oninvalid", cb)
	return cb
}

// event attribute: htmlevent.KeyboardEvent
func eventFuncDocument_htmlevent_KeyboardEvent(listener func(event *htmlevent.KeyboardEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.KeyboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.KeyboardEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddKeyDown is adding doing AddEventListener for 'KeyDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keydown", cb)
	return cb
}

// SetOnKeyDown is assigning a function to 'onkeydown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeydown", cb)
	return cb
}

// AddKeyPress is adding doing AddEventListener for 'KeyPress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keypress", cb)
	return cb
}

// SetOnKeyPress is assigning a function to 'onkeypress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeypress", cb)
	return cb
}

// AddKeyUp is adding doing AddEventListener for 'KeyUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keyup", cb)
	return cb
}

// SetOnKeyUp is assigning a function to 'onkeyup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeyup", cb)
	return cb
}

// AddLoad is adding doing AddEventListener for 'Load' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLoad(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "load", cb)
	return cb
}

// SetOnLoad is assigning a function to 'onload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLoad(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onload", cb)
	return cb
}

// AddLoadedData is adding doing AddEventListener for 'LoadedData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLoadedData(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadeddata", cb)
	return cb
}

// SetOnLoadedData is assigning a function to 'onloadeddata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLoadedData(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onloadeddata", cb)
	return cb
}

// AddLoadedMetaData is adding doing AddEventListener for 'LoadedMetaData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLoadedMetaData(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadedmetadata", cb)
	return cb
}

// SetOnLoadedMetaData is assigning a function to 'onloadedmetadata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLoadedMetaData(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onloadedmetadata", cb)
	return cb
}

// event attribute: xhr.ProgressEvent
func eventFuncDocument_xhr_ProgressEvent(listener func(event *xhr.ProgressEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *xhr.ProgressEvent
		value := args[0]
		incoming := value.Get("target")
		ret = xhr.ProgressEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddLoadEnd is adding doing AddEventListener for 'LoadEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadend", cb)
	return cb
}

// SetOnLoadEnd is assigning a function to 'onloadend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onloadend", cb)
	return cb
}

// AddLoadStart is adding doing AddEventListener for 'LoadStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLoadStart(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadstart", cb)
	return cb
}

// SetOnLoadStart is assigning a function to 'onloadstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLoadStart(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onloadstart", cb)
	return cb
}

// AddLostPointerCapture is adding doing AddEventListener for 'LostPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "lostpointercapture", cb)
	return cb
}

// SetOnLostPointerCapture is assigning a function to 'onlostpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onlostpointercapture", cb)
	return cb
}

// AddMouseDown is adding doing AddEventListener for 'MouseDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousedown", cb)
	return cb
}

// SetOnMouseDown is assigning a function to 'onmousedown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousedown", cb)
	return cb
}

// AddMouseEnter is adding doing AddEventListener for 'MouseEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseenter", cb)
	return cb
}

// SetOnMouseEnter is assigning a function to 'onmouseenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseenter", cb)
	return cb
}

// AddMouseLeave is adding doing AddEventListener for 'MouseLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseleave", cb)
	return cb
}

// SetOnMouseLeave is assigning a function to 'onmouseleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseleave", cb)
	return cb
}

// AddMouseMove is adding doing AddEventListener for 'MouseMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousemove", cb)
	return cb
}

// SetOnMouseMove is assigning a function to 'onmousemove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousemove", cb)
	return cb
}

// AddMouseOut is adding doing AddEventListener for 'MouseOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseout", cb)
	return cb
}

// SetOnMouseOut is assigning a function to 'onmouseout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseout", cb)
	return cb
}

// AddMouseOver is adding doing AddEventListener for 'MouseOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseover", cb)
	return cb
}

// SetOnMouseOver is assigning a function to 'onmouseover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseover", cb)
	return cb
}

// AddMouseUp is adding doing AddEventListener for 'MouseUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseup", cb)
	return cb
}

// SetOnMouseUp is assigning a function to 'onmouseup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseup", cb)
	return cb
}

// AddPaste is adding doing AddEventListener for 'Paste' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "paste", cb)
	return cb
}

// SetOnPaste is assigning a function to 'onpaste'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("onpaste", cb)
	return cb
}

// AddPause is adding doing AddEventListener for 'Pause' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPause(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pause", cb)
	return cb
}

// SetOnPause is assigning a function to 'onpause'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPause(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onpause", cb)
	return cb
}

// AddPlay is adding doing AddEventListener for 'Play' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPlay(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "play", cb)
	return cb
}

// SetOnPlay is assigning a function to 'onplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPlay(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onplay", cb)
	return cb
}

// AddPlaying is adding doing AddEventListener for 'Playing' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPlaying(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "playing", cb)
	return cb
}

// SetOnPlaying is assigning a function to 'onplaying'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPlaying(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onplaying", cb)
	return cb
}

// AddPointerCancel is adding doing AddEventListener for 'PointerCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointercancel", cb)
	return cb
}

// SetOnPointerCancel is assigning a function to 'onpointercancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointercancel", cb)
	return cb
}

// AddPointerDown is adding doing AddEventListener for 'PointerDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerdown", cb)
	return cb
}

// SetOnPointerDown is assigning a function to 'onpointerdown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerdown", cb)
	return cb
}

// AddPointerEnter is adding doing AddEventListener for 'PointerEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerenter", cb)
	return cb
}

// SetOnPointerEnter is assigning a function to 'onpointerenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerenter", cb)
	return cb
}

// AddPointerLeave is adding doing AddEventListener for 'PointerLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerleave", cb)
	return cb
}

// SetOnPointerLeave is assigning a function to 'onpointerleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerleave", cb)
	return cb
}

// AddPointerLockChange is adding doing AddEventListener for 'PointerLockChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerLockChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pointerlockchange", cb)
	return cb
}

// SetOnPointerLockChange is assigning a function to 'onpointerlockchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerLockChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onpointerlockchange", cb)
	return cb
}

// AddPointerLockError is adding doing AddEventListener for 'PointerLockError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerLockError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pointerlockerror", cb)
	return cb
}

// SetOnPointerLockError is assigning a function to 'onpointerlockerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerLockError(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onpointerlockerror", cb)
	return cb
}

// AddPointerMove is adding doing AddEventListener for 'PointerMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointermove", cb)
	return cb
}

// SetOnPointerMove is assigning a function to 'onpointermove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointermove", cb)
	return cb
}

// AddPointerOut is adding doing AddEventListener for 'PointerOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerout", cb)
	return cb
}

// SetOnPointerOut is assigning a function to 'onpointerout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerout", cb)
	return cb
}

// AddPointerOver is adding doing AddEventListener for 'PointerOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerover", cb)
	return cb
}

// SetOnPointerOver is assigning a function to 'onpointerover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerover", cb)
	return cb
}

// AddPointerUp is adding doing AddEventListener for 'PointerUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerup", cb)
	return cb
}

// SetOnPointerUp is assigning a function to 'onpointerup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerup", cb)
	return cb
}

// AddProgress is adding doing AddEventListener for 'Progress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventProgress(listener func(event *xhr.ProgressEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "progress", cb)
	return cb
}

// SetOnProgress is assigning a function to 'onprogress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnProgress(listener func(event *xhr.ProgressEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onprogress", cb)
	return cb
}

// AddRateChange is adding doing AddEventListener for 'RateChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventRateChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ratechange", cb)
	return cb
}

// SetOnRateChange is assigning a function to 'onratechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnRateChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onratechange", cb)
	return cb
}

// AddReadyStateChange is adding doing AddEventListener for 'ReadyStateChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventReadyStateChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "readystatechange", cb)
	return cb
}

// SetOnReadyStateChange is assigning a function to 'onreadystatechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnReadyStateChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onreadystatechange", cb)
	return cb
}

// AddReset is adding doing AddEventListener for 'Reset' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventReset(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "reset", cb)
	return cb
}

// SetOnReset is assigning a function to 'onreset'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnReset(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onreset", cb)
	return cb
}

// event attribute: htmlevent.UIEvent
func eventFuncDocument_htmlevent_UIEvent(listener func(event *htmlevent.UIEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.UIEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.UIEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddResize is adding doing AddEventListener for 'Resize' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventResize(listener func(event *htmlevent.UIEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_UIEvent(listener)
	_this.Value_JS.Call("addEventListener", "resize", cb)
	return cb
}

// SetOnResize is assigning a function to 'onresize'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnResize(listener func(event *htmlevent.UIEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_UIEvent(listener)
	_this.Value_JS.Set("onresize", cb)
	return cb
}

// AddScroll is adding doing AddEventListener for 'Scroll' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventScroll(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "scroll", cb)
	return cb
}

// SetOnScroll is assigning a function to 'onscroll'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnScroll(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onscroll", cb)
	return cb
}

// event attribute: csp.SecurityPolicyViolationEvent
func eventFuncDocument_csp_SecurityPolicyViolationEvent(listener func(event *csp.SecurityPolicyViolationEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *csp.SecurityPolicyViolationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = csp.SecurityPolicyViolationEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddSecurityPolicyViolation is adding doing AddEventListener for 'SecurityPolicyViolation' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Call("addEventListener", "securitypolicyviolation", cb)
	return cb
}

// SetOnSecurityPolicyViolation is assigning a function to 'onsecuritypolicyviolation'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Set("onsecuritypolicyviolation", cb)
	return cb
}

// AddSeeked is adding doing AddEventListener for 'Seeked' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSeeked(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeked", cb)
	return cb
}

// SetOnSeeked is assigning a function to 'onseeked'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSeeked(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onseeked", cb)
	return cb
}

// AddSeeking is adding doing AddEventListener for 'Seeking' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSeeking(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeking", cb)
	return cb
}

// SetOnSeeking is assigning a function to 'onseeking'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSeeking(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onseeking", cb)
	return cb
}

// AddSelect is adding doing AddEventListener for 'Select' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSelect(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "select", cb)
	return cb
}

// SetOnSelect is assigning a function to 'onselect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSelect(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onselect", cb)
	return cb
}

// AddSelectionChange is adding doing AddEventListener for 'SelectionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSelectionChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectionchange", cb)
	return cb
}

// SetOnSelectionChange is assigning a function to 'onselectionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSelectionChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onselectionchange", cb)
	return cb
}

// AddSelectStart is adding doing AddEventListener for 'SelectStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSelectStart(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectstart", cb)
	return cb
}

// SetOnSelectStart is assigning a function to 'onselectstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSelectStart(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onselectstart", cb)
	return cb
}

// AddStalled is adding doing AddEventListener for 'Stalled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventStalled(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "stalled", cb)
	return cb
}

// SetOnStalled is assigning a function to 'onstalled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnStalled(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onstalled", cb)
	return cb
}

// AddSubmit is adding doing AddEventListener for 'Submit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSubmit(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "submit", cb)
	return cb
}

// SetOnSubmit is assigning a function to 'onsubmit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSubmit(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onsubmit", cb)
	return cb
}

// AddSuspend is adding doing AddEventListener for 'Suspend' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventSuspend(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "suspend", cb)
	return cb
}

// SetOnSuspend is assigning a function to 'onsuspend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnSuspend(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onsuspend", cb)
	return cb
}

// AddTimeUpdate is adding doing AddEventListener for 'TimeUpdate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTimeUpdate(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "timeupdate", cb)
	return cb
}

// SetOnTimeUpdate is assigning a function to 'ontimeupdate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTimeUpdate(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("ontimeupdate", cb)
	return cb
}

// AddToggle is adding doing AddEventListener for 'Toggle' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventToggle(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "toggle", cb)
	return cb
}

// SetOnToggle is assigning a function to 'ontoggle'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnToggle(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("ontoggle", cb)
	return cb
}

// event attribute: touchevents.TouchEvent
func eventFuncDocument_touchevents_TouchEvent(listener func(event *touchevents.TouchEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *touchevents.TouchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = touchevents.TouchEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTouchCancel is adding doing AddEventListener for 'TouchCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchcancel", cb)
	return cb
}

// SetOnTouchCancel is assigning a function to 'ontouchcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchcancel", cb)
	return cb
}

// AddTouchEnd is adding doing AddEventListener for 'TouchEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchend", cb)
	return cb
}

// SetOnTouchEnd is assigning a function to 'ontouchend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchend", cb)
	return cb
}

// AddTouchMove is adding doing AddEventListener for 'TouchMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchmove", cb)
	return cb
}

// SetOnTouchMove is assigning a function to 'ontouchmove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchmove", cb)
	return cb
}

// AddTouchStart is adding doing AddEventListener for 'TouchStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchstart", cb)
	return cb
}

// SetOnTouchStart is assigning a function to 'ontouchstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchstart", cb)
	return cb
}

// event attribute: transitions.TransitionEvent
func eventFuncDocument_transitions_TransitionEvent(listener func(event *transitions.TransitionEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *transitions.TransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = transitions.TransitionEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTransitionCancel is adding doing AddEventListener for 'TransitionCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitioncancel", cb)
	return cb
}

// SetOnTransitionCancel is assigning a function to 'ontransitioncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitioncancel", cb)
	return cb
}

// AddTransitionEnd is adding doing AddEventListener for 'TransitionEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionend", cb)
	return cb
}

// SetOnTransitionEnd is assigning a function to 'ontransitionend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionend", cb)
	return cb
}

// AddTransitionRun is adding doing AddEventListener for 'TransitionRun' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionrun", cb)
	return cb
}

// SetOnTransitionRun is assigning a function to 'ontransitionrun'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionrun", cb)
	return cb
}

// AddTransitionStart is adding doing AddEventListener for 'TransitionStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionstart", cb)
	return cb
}

// SetOnTransitionStart is assigning a function to 'ontransitionstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionstart", cb)
	return cb
}

// AddVisibilityChange is adding doing AddEventListener for 'VisibilityChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventVisibilityChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "visibilitychange", cb)
	return cb
}

// SetOnVisibilityChange is assigning a function to 'onvisibilitychange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnVisibilityChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onvisibilitychange", cb)
	return cb
}

// AddVolumeChange is adding doing AddEventListener for 'VolumeChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventVolumeChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "volumechange", cb)
	return cb
}

// SetOnVolumeChange is assigning a function to 'onvolumechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnVolumeChange(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onvolumechange", cb)
	return cb
}

// AddWaiting is adding doing AddEventListener for 'Waiting' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventWaiting(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "waiting", cb)
	return cb
}

// SetOnWaiting is assigning a function to 'onwaiting'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnWaiting(listener func(event *domcore.Event, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_domcore_Event(listener)
	_this.Value_JS.Set("onwaiting", cb)
	return cb
}

// event attribute: htmlevent.WheelEvent
func eventFuncDocument_htmlevent_WheelEvent(listener func(event *htmlevent.WheelEvent, target *Document)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.WheelEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.WheelEventFromJS(value)
		src := DocumentFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddWheel is adding doing AddEventListener for 'Wheel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Document) AddEventWheel(listener func(event *htmlevent.WheelEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_WheelEvent(listener)
	_this.Value_JS.Call("addEventListener", "wheel", cb)
	return cb
}

// SetOnWheel is assigning a function to 'onwheel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Document) SetOnWheel(listener func(event *htmlevent.WheelEvent, currentTarget *Document)) js.Func {
	cb := eventFuncDocument_htmlevent_WheelEvent(listener)
	_this.Value_JS.Set("onwheel", cb)
	return cb
}

func (_this *Document) Get(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByTagName(qualifiedName string) (_result *dom.HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := qualifiedName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagName", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByTagNameNS(namespace *string, localName string) (_result *dom.HTMLCollection) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := localName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getElementsByTagNameNS", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByClassName(classNames string) (_result *dom.HTMLCollection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := classNames
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByClassName", _args[0:_end]...)
	var (
		_converted *dom.HTMLCollection // javascript: HTMLCollection _what_return_name
	)
	_converted = dom.HTMLCollectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateElement(localName string, options *Union) (_result *dom.Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := localName
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createElement", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateElementNS(namespace *string, qualifiedName string, options *Union) (_result *dom.Element) {
	var (
		_args [3]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createElementNS", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateDocumentFragment() (_result *dom.DocumentFragment) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createDocumentFragment", _args[0:_end]...)
	var (
		_converted *dom.DocumentFragment // javascript: DocumentFragment _what_return_name
	)
	_converted = dom.DocumentFragmentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateTextNode(data string) (_result *dom.Text) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createTextNode", _args[0:_end]...)
	var (
		_converted *dom.Text // javascript: Text _what_return_name
	)
	_converted = dom.TextFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateCDATASection(data string) (_result *dom.CDATASection) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createCDATASection", _args[0:_end]...)
	var (
		_converted *dom.CDATASection // javascript: CDATASection _what_return_name
	)
	_converted = dom.CDATASectionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateComment(data string) (_result *dom.Comment) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createComment", _args[0:_end]...)
	var (
		_converted *dom.Comment // javascript: Comment _what_return_name
	)
	_converted = dom.CommentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateProcessingInstruction(target string, data string) (_result *dom.ProcessingInstruction) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createProcessingInstruction", _args[0:_end]...)
	var (
		_converted *dom.ProcessingInstruction // javascript: ProcessingInstruction _what_return_name
	)
	_converted = dom.ProcessingInstructionFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ImportNode(node *dom.Node, deep *bool) (_result *dom.Node) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	if deep != nil {

		var _p1 interface{}
		if deep != nil {
			_p1 = *(deep)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("importNode", _args[0:_end]...)
	var (
		_converted *dom.Node // javascript: Node _what_return_name
	)
	_converted = dom.NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) AdoptNode(node *dom.Node) (_result *dom.Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := node.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("adoptNode", _args[0:_end]...)
	var (
		_converted *dom.Node // javascript: Node _what_return_name
	)
	_converted = dom.NodeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateAttribute(localName string) (_result *dom.Attr) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := localName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createAttribute", _args[0:_end]...)
	var (
		_converted *dom.Attr // javascript: Attr _what_return_name
	)
	_converted = dom.AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateAttributeNS(namespace *string, qualifiedName string) (_result *dom.Attr) {
	var (
		_args [2]interface{}
		_end  int
	)

	var _p0 interface{}
	if namespace != nil {
		_p0 = *(namespace)
	} else {
		_p0 = nil
	}
	_args[0] = _p0
	_end++
	_p1 := qualifiedName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createAttributeNS", _args[0:_end]...)
	var (
		_converted *dom.Attr // javascript: Attr _what_return_name
	)
	_converted = dom.AttrFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateEvent(_interface string) (_result *domcore.Event) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _interface
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createEvent", _args[0:_end]...)
	var (
		_converted *domcore.Event // javascript: Event _what_return_name
	)
	_converted = domcore.EventFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateRange() (_result *dom.Range) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRange", _args[0:_end]...)
	var (
		_converted *dom.Range // javascript: Range _what_return_name
	)
	_converted = dom.RangeFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateNodeIterator(root *dom.Node, whatToShow *uint, filter *dom.NodeFilterValue) (_result *dom.NodeIterator) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := root.JSValue()
	_args[0] = _p0
	_end++
	if whatToShow != nil {

		var _p1 interface{}
		if whatToShow != nil {
			_p1 = *(whatToShow)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	if filter != nil {
		_p2 := filter.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createNodeIterator", _args[0:_end]...)
	var (
		_converted *dom.NodeIterator // javascript: NodeIterator _what_return_name
	)
	_converted = dom.NodeIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) CreateTreeWalker(root *dom.Node, whatToShow *uint, filter *dom.NodeFilterValue) (_result *dom.TreeWalker) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := root.JSValue()
	_args[0] = _p0
	_end++
	if whatToShow != nil {

		var _p1 interface{}
		if whatToShow != nil {
			_p1 = *(whatToShow)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	if filter != nil {
		_p2 := filter.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("createTreeWalker", _args[0:_end]...)
	var (
		_converted *dom.TreeWalker // javascript: TreeWalker _what_return_name
	)
	_converted = dom.TreeWalkerFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) LayoutNow() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("layoutNow", _args[0:_end]...)
	return
}

func (_this *Document) ElementFromPoint(x float64, y float64) (_result *dom.Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("elementFromPoint", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) ElementsFromPoint(x float64, y float64) (_result []*dom.Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("elementsFromPoint", _args[0:_end]...)
	var (
		_converted []*dom.Element // javascript: sequence<Element> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*dom.Element, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *dom.Element
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = dom.ElementFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Document) CaretPositionFromPoint(x float64, y float64) (_result *view.CaretPosition) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("caretPositionFromPoint", _args[0:_end]...)
	var (
		_converted *view.CaretPosition // javascript: CaretPosition _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = view.CaretPositionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) MeasureElement(element *dom.Element) (_result *fontmetrics.FontMetrics) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("measureElement", _args[0:_end]...)
	var (
		_converted *fontmetrics.FontMetrics // javascript: FontMetrics _what_return_name
	)
	_converted = fontmetrics.FontMetricsFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) MeasureText(text string, styleMap *typedom.StylePropertyMapReadOnly) (_result *fontmetrics.FontMetrics) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_p1 := styleMap.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("measureText", _args[0:_end]...)
	var (
		_converted *fontmetrics.FontMetrics // javascript: FontMetrics _what_return_name
	)
	_converted = fontmetrics.FontMetricsFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ExitFullscreen() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("exitFullscreen", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementsByName(elementName string) (_result *dom.NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementName
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementsByName", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) Open(unused1 *string, unused2 *string) (_result *Document) {
	var (
		_args [2]interface{}
		_end  int
	)
	if unused1 != nil {

		var _p0 interface{}
		if unused1 != nil {
			_p0 = *(unused1)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	if unused2 != nil {

		var _p1 interface{}
		if unused2 != nil {
			_p1 = *(unused2)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	_converted = DocumentFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) Open2(url string, name string, features string) (_result *Window) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_p2 := features
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Window // javascript: Window _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = WindowFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *Document) Write(text ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(text))
		_end  int
	)
	for _, __in := range text {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("write", _args[0:_end]...)
	return
}

func (_this *Document) Writeln(text ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(text))
		_end  int
	)
	for _, __in := range text {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("writeln", _args[0:_end]...)
	return
}

func (_this *Document) HasFocus() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("hasFocus", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) ExecCommand(commandId string, showUI *bool, value *string) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	if showUI != nil {

		var _p1 interface{}
		if showUI != nil {
			_p1 = *(showUI)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	if value != nil {

		var _p2 interface{}
		if value != nil {
			_p2 = *(value)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("execCommand", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandEnabled(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandIndeterm(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandIndeterm", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandState(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandSupported(commandId string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandSupported", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Document) QueryCommandValue(commandId string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := commandId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("queryCommandValue", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *Document) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *Document) CaptureEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("captureEvents", _args[0:_end]...)
	return
}

func (_this *Document) ReleaseEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("releaseEvents", _args[0:_end]...)
	return
}

func (_this *Document) ExitPictureInPicture() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("exitPictureInPicture", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ExitPointerLock() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("exitPointerLock", _args[0:_end]...)
	return
}

func (_this *Document) GetSelection() (_result *selection.Selection) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSelection", _args[0:_end]...)
	var (
		_converted *selection.Selection // javascript: Selection _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = selection.SelectionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) GetAnimations() (_result []*webani.Animation) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getAnimations", _args[0:_end]...)
	var (
		_converted []*webani.Animation // javascript: sequence<Animation> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*webani.Animation, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *webani.Animation
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = webani.AnimationFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Document) GetBoxQuads(options *view.BoxQuadOptions) (_result []*geometry.DOMQuad) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getBoxQuads", _args[0:_end]...)
	var (
		_converted []*geometry.DOMQuad // javascript: sequence<DOMQuad> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*geometry.DOMQuad, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *geometry.DOMQuad
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = geometry.DOMQuadFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Document) ConvertQuadFromNode(quad *geometry.DOMQuadInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := quad.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertQuadFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ConvertRectFromNode(rect *geometry.DOMRectReadOnly, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMQuad) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertRectFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMQuad // javascript: DOMQuad _what_return_name
	)
	_converted = geometry.DOMQuadFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) ConvertPointFromNode(point *geometry.DOMPointInit, from *Union, options *view.ConvertCoordinateOptions) (_result *geometry.DOMPoint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := point.JSValue()
	_args[0] = _p0
	_end++
	_p1 := from.JSValue()
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("convertPointFromNode", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *Document) GetElementById(elementId string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementById", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) Prepend(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("prepend", _args[0:_end]...)
	return
}

func (_this *Document) Append(nodes ...*Union) {
	var (
		_args []interface{} = make([]interface{}, 0+len(nodes))
		_end  int
	)
	for _, __in := range nodes {
		__out := __in.JSValue()
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *Document) QuerySelector(selectors string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelector", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Document) QuerySelectorAll(selectors string) (_result *dom.NodeList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := selectors
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("querySelectorAll", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

// GetDocument returning attribute 'document' with
// type Document (idl: Document).
func GetDocument() *Document {
	var ret *Document
	_klass := js.Global()
	value := _klass.Get("document")
	ret = DocumentFromJS(value)
	return ret
}

// GetWindow returning attribute 'window' with
// type Window (idl: Window).
func GetWindow() *Window {
	var ret *Window
	_klass := js.Global()
	value := _klass.Get("window")
	ret = WindowFromJS(value)
	return ret
}

// class: HTMLEmbedElement
type HTMLEmbedElement struct {
	html.HTMLElement
}

// HTMLEmbedElementFromJS is casting a js.Value into HTMLEmbedElement.
func HTMLEmbedElementFromJS(value js.Value) *HTMLEmbedElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLEmbedElement{}
	ret.Value_JS = value
	return ret
}

// HTMLEmbedElementFromJS is casting from something that holds a js.Value into HTMLEmbedElement.
func HTMLEmbedElementFromWrapper(input core.Wrapper) *HTMLEmbedElement {
	return HTMLEmbedElementFromJS(input.JSValue())
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLEmbedElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLEmbedElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLEmbedElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

func (_this *HTMLEmbedElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

// class: HTMLFrameElement
type HTMLFrameElement struct {
	html.HTMLElement
}

// HTMLFrameElementFromJS is casting a js.Value into HTMLFrameElement.
func HTMLFrameElementFromJS(value js.Value) *HTMLFrameElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFrameElement{}
	ret.Value_JS = value
	return ret
}

// HTMLFrameElementFromJS is casting from something that holds a js.Value into HTMLFrameElement.
func HTMLFrameElementFromWrapper(input core.Wrapper) *HTMLFrameElement {
	return HTMLFrameElementFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Scrolling returning attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) Scrolling() string {
	var ret string
	value := _this.Value_JS.Get("scrolling")
	ret = (value).String()
	return ret
}

// SetScrolling setting attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetScrolling(value string) {
	input := value
	_this.Value_JS.Set("scrolling", input)
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// FrameBorder returning attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) FrameBorder() string {
	var ret string
	value := _this.Value_JS.Get("frameBorder")
	ret = (value).String()
	return ret
}

// SetFrameBorder setting attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetFrameBorder(value string) {
	input := value
	_this.Value_JS.Set("frameBorder", input)
}

// LongDesc returning attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) LongDesc() string {
	var ret string
	value := _this.Value_JS.Get("longDesc")
	ret = (value).String()
	return ret
}

// SetLongDesc setting attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLFrameElement) SetLongDesc(value string) {
	input := value
	_this.Value_JS.Set("longDesc", input)
}

// NoResize returning attribute 'noResize' with
// type bool (idl: boolean).
func (_this *HTMLFrameElement) NoResize() bool {
	var ret bool
	value := _this.Value_JS.Get("noResize")
	ret = (value).Bool()
	return ret
}

// SetNoResize setting attribute 'noResize' with
// type bool (idl: boolean).
func (_this *HTMLFrameElement) SetNoResize(value bool) {
	input := value
	_this.Value_JS.Set("noResize", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLFrameElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLFrameElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// MarginHeight returning attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) MarginHeight() string {
	var ret string
	value := _this.Value_JS.Get("marginHeight")
	ret = (value).String()
	return ret
}

// SetMarginHeight setting attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetMarginHeight(value string) {
	input := value
	_this.Value_JS.Set("marginHeight", input)
}

// MarginWidth returning attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) MarginWidth() string {
	var ret string
	value := _this.Value_JS.Get("marginWidth")
	ret = (value).String()
	return ret
}

// SetMarginWidth setting attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLFrameElement) SetMarginWidth(value string) {
	input := value
	_this.Value_JS.Set("marginWidth", input)
}

// class: HTMLIFrameElement
type HTMLIFrameElement struct {
	html.HTMLElement
}

// HTMLIFrameElementFromJS is casting a js.Value into HTMLIFrameElement.
func HTMLIFrameElementFromJS(value js.Value) *HTMLIFrameElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLIFrameElement{}
	ret.Value_JS = value
	return ret
}

// HTMLIFrameElementFromJS is casting from something that holds a js.Value into HTMLIFrameElement.
func HTMLIFrameElementFromWrapper(input core.Wrapper) *HTMLIFrameElement {
	return HTMLIFrameElementFromJS(input.JSValue())
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Srcdoc returning attribute 'srcdoc' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Srcdoc() string {
	var ret string
	value := _this.Value_JS.Get("srcdoc")
	ret = (value).String()
	return ret
}

// SetSrcdoc setting attribute 'srcdoc' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetSrcdoc(value string) {
	input := value
	_this.Value_JS.Set("srcdoc", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Sandbox returning attribute 'sandbox' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLIFrameElement) Sandbox() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("sandbox")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Allow returning attribute 'allow' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Allow() string {
	var ret string
	value := _this.Value_JS.Get("allow")
	ret = (value).String()
	return ret
}

// SetAllow setting attribute 'allow' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetAllow(value string) {
	input := value
	_this.Value_JS.Set("allow", input)
}

// AllowFullscreen returning attribute 'allowFullscreen' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) AllowFullscreen() bool {
	var ret bool
	value := _this.Value_JS.Get("allowFullscreen")
	ret = (value).Bool()
	return ret
}

// SetAllowFullscreen setting attribute 'allowFullscreen' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) SetAllowFullscreen(value bool) {
	input := value
	_this.Value_JS.Set("allowFullscreen", input)
}

// AllowPaymentRequest returning attribute 'allowPaymentRequest' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) AllowPaymentRequest() bool {
	var ret bool
	value := _this.Value_JS.Get("allowPaymentRequest")
	ret = (value).Bool()
	return ret
}

// SetAllowPaymentRequest setting attribute 'allowPaymentRequest' with
// type bool (idl: boolean).
func (_this *HTMLIFrameElement) SetAllowPaymentRequest(value bool) {
	input := value
	_this.Value_JS.Set("allowPaymentRequest", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLIFrameElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLIFrameElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// Csp returning attribute 'csp' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Csp() string {
	var ret string
	value := _this.Value_JS.Get("csp")
	ret = (value).String()
	return ret
}

// SetCsp setting attribute 'csp' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetCsp(value string) {
	input := value
	_this.Value_JS.Set("csp", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Scrolling returning attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) Scrolling() string {
	var ret string
	value := _this.Value_JS.Get("scrolling")
	ret = (value).String()
	return ret
}

// SetScrolling setting attribute 'scrolling' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetScrolling(value string) {
	input := value
	_this.Value_JS.Set("scrolling", input)
}

// FrameBorder returning attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) FrameBorder() string {
	var ret string
	value := _this.Value_JS.Get("frameBorder")
	ret = (value).String()
	return ret
}

// SetFrameBorder setting attribute 'frameBorder' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetFrameBorder(value string) {
	input := value
	_this.Value_JS.Set("frameBorder", input)
}

// LongDesc returning attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) LongDesc() string {
	var ret string
	value := _this.Value_JS.Get("longDesc")
	ret = (value).String()
	return ret
}

// SetLongDesc setting attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLIFrameElement) SetLongDesc(value string) {
	input := value
	_this.Value_JS.Set("longDesc", input)
}

// MarginHeight returning attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) MarginHeight() string {
	var ret string
	value := _this.Value_JS.Get("marginHeight")
	ret = (value).String()
	return ret
}

// SetMarginHeight setting attribute 'marginHeight' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetMarginHeight(value string) {
	input := value
	_this.Value_JS.Set("marginHeight", input)
}

// MarginWidth returning attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) MarginWidth() string {
	var ret string
	value := _this.Value_JS.Get("marginWidth")
	ret = (value).String()
	return ret
}

// SetMarginWidth setting attribute 'marginWidth' with
// type string (idl: DOMString).
func (_this *HTMLIFrameElement) SetMarginWidth(value string) {
	input := value
	_this.Value_JS.Set("marginWidth", input)
}

// FeaturePolicy returning attribute 'featurePolicy' with
// type featurepolicy.FeaturePolicy (idl: FeaturePolicy).
func (_this *HTMLIFrameElement) FeaturePolicy() *featurepolicy.FeaturePolicy {
	var ret *featurepolicy.FeaturePolicy
	value := _this.Value_JS.Get("featurePolicy")
	ret = featurepolicy.FeaturePolicyFromJS(value)
	return ret
}

func (_this *HTMLIFrameElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

// class: HTMLObjectElement
type HTMLObjectElement struct {
	html.HTMLElement
}

// HTMLObjectElementFromJS is casting a js.Value into HTMLObjectElement.
func HTMLObjectElementFromJS(value js.Value) *HTMLObjectElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLObjectElement{}
	ret.Value_JS = value
	return ret
}

// HTMLObjectElementFromJS is casting from something that holds a js.Value into HTMLObjectElement.
func HTMLObjectElementFromWrapper(input core.Wrapper) *HTMLObjectElement {
	return HTMLObjectElementFromJS(input.JSValue())
}

// Data returning attribute 'data' with
// type string (idl: USVString).
func (_this *HTMLObjectElement) Data() string {
	var ret string
	value := _this.Value_JS.Get("data")
	ret = (value).String()
	return ret
}

// SetData setting attribute 'data' with
// type string (idl: USVString).
func (_this *HTMLObjectElement) SetData(value string) {
	input := value
	_this.Value_JS.Set("data", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// TypeMustMatch returning attribute 'typeMustMatch' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) TypeMustMatch() bool {
	var ret bool
	value := _this.Value_JS.Get("typeMustMatch")
	ret = (value).Bool()
	return ret
}

// SetTypeMustMatch setting attribute 'typeMustMatch' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) SetTypeMustMatch(value bool) {
	input := value
	_this.Value_JS.Set("typeMustMatch", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// UseMap returning attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) UseMap() string {
	var ret string
	value := _this.Value_JS.Get("useMap")
	ret = (value).String()
	return ret
}

// SetUseMap setting attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetUseMap(value string) {
	input := value
	_this.Value_JS.Set("useMap", input)
}

// Form returning attribute 'form' with
// type html.HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLObjectElement) Form() *html.HTMLFormElement {
	var ret *html.HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = html.HTMLFormElementFromJS(value)
	}
	return ret
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// ContentDocument returning attribute 'contentDocument' with
// type Document (idl: Document).
func (_this *HTMLObjectElement) ContentDocument() *Document {
	var ret *Document
	value := _this.Value_JS.Get("contentDocument")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DocumentFromJS(value)
	}
	return ret
}

// ContentWindow returning attribute 'contentWindow' with
// type Window (idl: Window).
func (_this *HTMLObjectElement) ContentWindow() *Window {
	var ret *Window
	value := _this.Value_JS.Get("contentWindow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type html.ValidityState (idl: ValidityState).
func (_this *HTMLObjectElement) Validity() *html.ValidityState {
	var ret *html.ValidityState
	value := _this.Value_JS.Get("validity")
	ret = html.ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Archive returning attribute 'archive' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Archive() string {
	var ret string
	value := _this.Value_JS.Get("archive")
	ret = (value).String()
	return ret
}

// SetArchive setting attribute 'archive' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetArchive(value string) {
	input := value
	_this.Value_JS.Set("archive", input)
}

// Code returning attribute 'code' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Code() string {
	var ret string
	value := _this.Value_JS.Get("code")
	ret = (value).String()
	return ret
}

// SetCode setting attribute 'code' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCode(value string) {
	input := value
	_this.Value_JS.Set("code", input)
}

// Declare returning attribute 'declare' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) Declare() bool {
	var ret bool
	value := _this.Value_JS.Get("declare")
	ret = (value).Bool()
	return ret
}

// SetDeclare setting attribute 'declare' with
// type bool (idl: boolean).
func (_this *HTMLObjectElement) SetDeclare(value bool) {
	input := value
	_this.Value_JS.Set("declare", input)
}

// Hspace returning attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) Hspace() uint {
	var ret uint
	value := _this.Value_JS.Get("hspace")
	ret = (uint)((value).Int())
	return ret
}

// SetHspace setting attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) SetHspace(value uint) {
	input := value
	_this.Value_JS.Set("hspace", input)
}

// Standby returning attribute 'standby' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Standby() string {
	var ret string
	value := _this.Value_JS.Get("standby")
	ret = (value).String()
	return ret
}

// SetStandby setting attribute 'standby' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetStandby(value string) {
	input := value
	_this.Value_JS.Set("standby", input)
}

// Vspace returning attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) Vspace() uint {
	var ret uint
	value := _this.Value_JS.Get("vspace")
	ret = (uint)((value).Int())
	return ret
}

// SetVspace setting attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLObjectElement) SetVspace(value uint) {
	input := value
	_this.Value_JS.Set("vspace", input)
}

// CodeBase returning attribute 'codeBase' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) CodeBase() string {
	var ret string
	value := _this.Value_JS.Get("codeBase")
	ret = (value).String()
	return ret
}

// SetCodeBase setting attribute 'codeBase' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCodeBase(value string) {
	input := value
	_this.Value_JS.Set("codeBase", input)
}

// CodeType returning attribute 'codeType' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) CodeType() string {
	var ret string
	value := _this.Value_JS.Get("codeType")
	ret = (value).String()
	return ret
}

// SetCodeType setting attribute 'codeType' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetCodeType(value string) {
	input := value
	_this.Value_JS.Set("codeType", input)
}

// Border returning attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) Border() string {
	var ret string
	value := _this.Value_JS.Get("border")
	ret = (value).String()
	return ret
}

// SetBorder setting attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLObjectElement) SetBorder(value string) {
	input := value
	_this.Value_JS.Set("border", input)
}

func (_this *HTMLObjectElement) GetSVGDocument() (_result *Document) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSVGDocument", _args[0:_end]...)
	var (
		_converted *Document // javascript: Document _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = DocumentFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLObjectElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLObjectElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLObjectElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// class: Window
type Window struct {
	domcore.EventTarget
}

// WindowFromJS is casting a js.Value into Window.
func WindowFromJS(value js.Value) *Window {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Window{}
	ret.Value_JS = value
	return ret
}

// WindowFromJS is casting from something that holds a js.Value into Window.
func WindowFromWrapper(input core.Wrapper) *Window {
	return WindowFromJS(input.JSValue())
}

// Window returning attribute 'window' with
// type Window (idl: Window).
func (_this *Window) Window() *Window {
	var ret *Window
	value := _this.Value_JS.Get("window")
	ret = WindowFromJS(value)
	return ret
}

// Self returning attribute 'self' with
// type Window (idl: Window).
func (_this *Window) Self() *Window {
	var ret *Window
	value := _this.Value_JS.Get("self")
	ret = WindowFromJS(value)
	return ret
}

// Document returning attribute 'document' with
// type Document (idl: Document).
func (_this *Window) Document() *Document {
	var ret *Document
	value := _this.Value_JS.Get("document")
	ret = DocumentFromJS(value)
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *Window) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *Window) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Location returning attribute 'location' with
// type htmlmisc.Location (idl: Location).
func (_this *Window) Location() *htmlmisc.Location {
	var ret *htmlmisc.Location
	value := _this.Value_JS.Get("location")
	ret = htmlmisc.LocationFromJS(value)
	return ret
}

// History returning attribute 'history' with
// type htmlmisc.History (idl: History).
func (_this *Window) History() *htmlmisc.History {
	var ret *htmlmisc.History
	value := _this.Value_JS.Get("history")
	ret = htmlmisc.HistoryFromJS(value)
	return ret
}

// CustomElements returning attribute 'customElements' with
// type htmlmisc.CustomElementRegistry (idl: CustomElementRegistry).
func (_this *Window) CustomElements() *htmlmisc.CustomElementRegistry {
	var ret *htmlmisc.CustomElementRegistry
	value := _this.Value_JS.Get("customElements")
	ret = htmlmisc.CustomElementRegistryFromJS(value)
	return ret
}

// Locationbar returning attribute 'locationbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Locationbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("locationbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Menubar returning attribute 'menubar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Menubar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("menubar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Personalbar returning attribute 'personalbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Personalbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("personalbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Scrollbars returning attribute 'scrollbars' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Scrollbars() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("scrollbars")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Statusbar returning attribute 'statusbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Statusbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("statusbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Toolbar returning attribute 'toolbar' with
// type htmlmisc.BarProp (idl: BarProp).
func (_this *Window) Toolbar() *htmlmisc.BarProp {
	var ret *htmlmisc.BarProp
	value := _this.Value_JS.Get("toolbar")
	ret = htmlmisc.BarPropFromJS(value)
	return ret
}

// Status returning attribute 'status' with
// type string (idl: DOMString).
func (_this *Window) Status() string {
	var ret string
	value := _this.Value_JS.Get("status")
	ret = (value).String()
	return ret
}

// SetStatus setting attribute 'status' with
// type string (idl: DOMString).
func (_this *Window) SetStatus(value string) {
	input := value
	_this.Value_JS.Set("status", input)
}

// Closed returning attribute 'closed' with
// type bool (idl: boolean).
func (_this *Window) Closed() bool {
	var ret bool
	value := _this.Value_JS.Get("closed")
	ret = (value).Bool()
	return ret
}

// Frames returning attribute 'frames' with
// type Window (idl: Window).
func (_this *Window) Frames() *Window {
	var ret *Window
	value := _this.Value_JS.Get("frames")
	ret = WindowFromJS(value)
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *Window) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// Top returning attribute 'top' with
// type Window (idl: Window).
func (_this *Window) Top() *Window {
	var ret *Window
	value := _this.Value_JS.Get("top")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// Opener returning attribute 'opener' with
// type Any (idl: any).
func (_this *Window) Opener() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("opener")
	ret = value
	return ret
}

// SetOpener setting attribute 'opener' with
// type Any (idl: any).
func (_this *Window) SetOpener(value interface{}) {
	input := value
	_this.Value_JS.Set("opener", input)
}

// Parent returning attribute 'parent' with
// type Window (idl: Window).
func (_this *Window) Parent() *Window {
	var ret *Window
	value := _this.Value_JS.Get("parent")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = WindowFromJS(value)
	}
	return ret
}

// FrameElement returning attribute 'frameElement' with
// type dom.Element (idl: Element).
func (_this *Window) FrameElement() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("frameElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// Navigator returning attribute 'navigator' with
// type htmlmisc.Navigator (idl: Navigator).
func (_this *Window) Navigator() *htmlmisc.Navigator {
	var ret *htmlmisc.Navigator
	value := _this.Value_JS.Get("navigator")
	ret = htmlmisc.NavigatorFromJS(value)
	return ret
}

// ApplicationCache returning attribute 'applicationCache' with
// type htmlmisc.ApplicationCache (idl: ApplicationCache).
func (_this *Window) ApplicationCache() *htmlmisc.ApplicationCache {
	var ret *htmlmisc.ApplicationCache
	value := _this.Value_JS.Get("applicationCache")
	ret = htmlmisc.ApplicationCacheFromJS(value)
	return ret
}

// OnAppInstalled returning attribute 'onappinstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAppInstalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onappinstalled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforeInstallPrompt returning attribute 'onbeforeinstallprompt' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnBeforeInstallPrompt() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeinstallprompt")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Orientation returning attribute 'orientation' with
// type int (idl: short).
func (_this *Window) Orientation() int {
	var ret int
	value := _this.Value_JS.Get("orientation")
	ret = (value).Int()
	return ret
}

// OnOrientationchange returning attribute 'onorientationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnOrientationchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onorientationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// CookieStore returning attribute 'cookieStore' with
// type cookie.CookieStore (idl: CookieStore).
func (_this *Window) CookieStore() *cookie.CookieStore {
	var ret *cookie.CookieStore
	value := _this.Value_JS.Get("cookieStore")
	ret = cookie.CookieStoreFromJS(value)
	return ret
}

// Screen returning attribute 'screen' with
// type view.Screen (idl: Screen).
func (_this *Window) Screen() *view.Screen {
	var ret *view.Screen
	value := _this.Value_JS.Get("screen")
	ret = view.ScreenFromJS(value)
	return ret
}

// InnerWidth returning attribute 'innerWidth' with
// type int (idl: long).
func (_this *Window) InnerWidth() int {
	var ret int
	value := _this.Value_JS.Get("innerWidth")
	ret = (value).Int()
	return ret
}

// InnerHeight returning attribute 'innerHeight' with
// type int (idl: long).
func (_this *Window) InnerHeight() int {
	var ret int
	value := _this.Value_JS.Get("innerHeight")
	ret = (value).Int()
	return ret
}

// ScrollX returning attribute 'scrollX' with
// type float64 (idl: double).
func (_this *Window) ScrollX() float64 {
	var ret float64
	value := _this.Value_JS.Get("scrollX")
	ret = (value).Float()
	return ret
}

// PageXOffset returning attribute 'pageXOffset' with
// type float64 (idl: double).
func (_this *Window) PageXOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("pageXOffset")
	ret = (value).Float()
	return ret
}

// ScrollY returning attribute 'scrollY' with
// type float64 (idl: double).
func (_this *Window) ScrollY() float64 {
	var ret float64
	value := _this.Value_JS.Get("scrollY")
	ret = (value).Float()
	return ret
}

// PageYOffset returning attribute 'pageYOffset' with
// type float64 (idl: double).
func (_this *Window) PageYOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("pageYOffset")
	ret = (value).Float()
	return ret
}

// ScreenX returning attribute 'screenX' with
// type int (idl: long).
func (_this *Window) ScreenX() int {
	var ret int
	value := _this.Value_JS.Get("screenX")
	ret = (value).Int()
	return ret
}

// ScreenLeft returning attribute 'screenLeft' with
// type int (idl: long).
func (_this *Window) ScreenLeft() int {
	var ret int
	value := _this.Value_JS.Get("screenLeft")
	ret = (value).Int()
	return ret
}

// ScreenY returning attribute 'screenY' with
// type int (idl: long).
func (_this *Window) ScreenY() int {
	var ret int
	value := _this.Value_JS.Get("screenY")
	ret = (value).Int()
	return ret
}

// ScreenTop returning attribute 'screenTop' with
// type int (idl: long).
func (_this *Window) ScreenTop() int {
	var ret int
	value := _this.Value_JS.Get("screenTop")
	ret = (value).Int()
	return ret
}

// OuterWidth returning attribute 'outerWidth' with
// type int (idl: long).
func (_this *Window) OuterWidth() int {
	var ret int
	value := _this.Value_JS.Get("outerWidth")
	ret = (value).Int()
	return ret
}

// OuterHeight returning attribute 'outerHeight' with
// type int (idl: long).
func (_this *Window) OuterHeight() int {
	var ret int
	value := _this.Value_JS.Get("outerHeight")
	ret = (value).Int()
	return ret
}

// DevicePixelRatio returning attribute 'devicePixelRatio' with
// type float64 (idl: double).
func (_this *Window) DevicePixelRatio() float64 {
	var ret float64
	value := _this.Value_JS.Get("devicePixelRatio")
	ret = (value).Float()
	return ret
}

// Event returning attribute 'event' with
// type Any (idl: any).
func (_this *Window) Event() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("event")
	ret = value
	return ret
}

// External returning attribute 'external' with
// type htmlmisc.External (idl: External).
func (_this *Window) External() *htmlmisc.External {
	var ret *htmlmisc.External
	value := _this.Value_JS.Get("external")
	ret = htmlmisc.ExternalFromJS(value)
	return ret
}

// OnDeviceOrientation returning attribute 'ondeviceorientation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDeviceOrientation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondeviceorientation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDeviceMotion returning attribute 'ondevicemotion' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDeviceMotion() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondevicemotion")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SpeechSynthesis returning attribute 'speechSynthesis' with
// type speech.SpeechSynthesis (idl: SpeechSynthesis).
func (_this *Window) SpeechSynthesis() *speech.SpeechSynthesis {
	var ret *speech.SpeechSynthesis
	value := _this.Value_JS.Get("speechSynthesis")
	ret = speech.SpeechSynthesisFromJS(value)
	return ret
}

// OnVRDisplayConnect returning attribute 'onvrdisplayconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayConnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplayconnect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayDisconnect returning attribute 'onvrdisplaydisconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayDisconnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplaydisconnect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayActivate returning attribute 'onvrdisplayactivate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayActivate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplayactivate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayDeactivate returning attribute 'onvrdisplaydeactivate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayDeactivate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplaydeactivate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayBlur returning attribute 'onvrdisplayblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayBlur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplayblur")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayFocus returning attribute 'onvrdisplayfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayFocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplayfocus")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayPresentChange returning attribute 'onvrdisplaypresentchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayPresentChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplaypresentchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayPointerRestricted returning attribute 'onvrdisplaypointerrestricted' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayPointerRestricted() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplaypointerrestricted")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVRDisplayPointeRunRestricted returning attribute 'onvrdisplaypointerunrestricted' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVRDisplayPointeRunRestricted() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvrdisplaypointerunrestricted")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAuxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAuxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBlur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnBlur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnCanPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlayThrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnCanPlayThrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnClose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnContextMenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnContextMenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCueChange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnCueChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDblClick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDblClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnd returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragExit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragExit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragLeave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragOver returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragStart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDragStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDurationChange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnDurationChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEmptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnEmptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEnded returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnEnded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *Window) OnError() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// OnFocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnFocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFormData returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnFormData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnInput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnInvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyDown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnKeyDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyPress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnKeyPress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyUp returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnKeyUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoad returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLoad() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedData returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLoadedData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedMetaData returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLoadedMetaData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadEnd returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLoadEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadStart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLoadStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseDown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseEnter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseLeave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseMove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOut returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOver returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseUp returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMouseUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnWheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPlaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnProgress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnProgress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRateChange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnRateChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnReset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnReset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnResize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnResize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnScroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnScroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSecurityPolicyViolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSecurityPolicyViolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSeeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSeeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSelect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnStalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTimeUpdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTimeUpdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnToggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnToggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVolumeChange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnVolumeChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnWaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGotPointerCapture returning attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnGotPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongotpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLostPointerCapture returning attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLostPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlostpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerDown returning attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerdown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerMove returning attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointermove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerUp returning attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerCancel returning attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointercancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOver returning attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOut returning attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerEnter returning attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerLeave returning attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPointerLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchStart returning attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTouchStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchEnd returning attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTouchEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchMove returning attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTouchMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchmove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchCancel returning attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTouchCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationStart returning attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAnimationStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationIteration returning attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAnimationIteration() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationiteration")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationEnd returning attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAnimationEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationCancel returning attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAnimationCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionRun returning attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTransitionRun() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionrun")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionStart returning attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTransitionStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionEnd returning attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTransitionEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionCancel returning attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnTransitionCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitioncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectStart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSelectStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectionChange returning attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnSelectionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAfterPrint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnAfterPrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforePrint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnBeforePrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforeUnload returning attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *Window) OnBeforeUnload() htmlcommon.OnBeforeUnloadEventHandlerFunc {
	var ret htmlcommon.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// OnHashChange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnHashChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLanguageChange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnLanguageChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnOffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOnline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnOnline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageHide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPageHide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageShow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPageShow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPopState returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnPopState() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRejectionHandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnRejectionHandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnStorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnhandledRejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnUnhandledRejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Window) OnUnload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *Window) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// IsSecureContext returning attribute 'isSecureContext' with
// type bool (idl: boolean).
func (_this *Window) IsSecureContext() bool {
	var ret bool
	value := _this.Value_JS.Get("isSecureContext")
	ret = (value).Bool()
	return ret
}

// Caches returning attribute 'caches' with
// type serviceworker.CacheStorage (idl: CacheStorage).
func (_this *Window) Caches() *serviceworker.CacheStorage {
	var ret *serviceworker.CacheStorage
	value := _this.Value_JS.Get("caches")
	ret = serviceworker.CacheStorageFromJS(value)
	return ret
}

// IndexedDB returning attribute 'indexedDB' with
// type indexeddb.IDBFactory (idl: IDBFactory).
func (_this *Window) IndexedDB() *indexeddb.IDBFactory {
	var ret *indexeddb.IDBFactory
	value := _this.Value_JS.Get("indexedDB")
	ret = indexeddb.IDBFactoryFromJS(value)
	return ret
}

// Crypto returning attribute 'crypto' with
// type crypto.Crypto (idl: Crypto).
func (_this *Window) Crypto() *crypto.Crypto {
	var ret *crypto.Crypto
	value := _this.Value_JS.Get("crypto")
	ret = crypto.CryptoFromJS(value)
	return ret
}

// Performance returning attribute 'performance' with
// type performance.Performance (idl: Performance).
func (_this *Window) Performance() *performance.Performance {
	var ret *performance.Performance
	value := _this.Value_JS.Get("performance")
	ret = performance.PerformanceFromJS(value)
	return ret
}

// SessionStorage returning attribute 'sessionStorage' with
// type htmlevent.Storage (idl: Storage).
func (_this *Window) SessionStorage() *htmlevent.Storage {
	var ret *htmlevent.Storage
	value := _this.Value_JS.Get("sessionStorage")
	ret = htmlevent.StorageFromJS(value)
	return ret
}

// LocalStorage returning attribute 'localStorage' with
// type htmlevent.Storage (idl: Storage).
func (_this *Window) LocalStorage() *htmlevent.Storage {
	var ret *htmlevent.Storage
	value := _this.Value_JS.Get("localStorage")
	ret = htmlevent.StorageFromJS(value)
	return ret
}

// event attribute: domcore.Event
func eventFuncWindow_domcore_Event(listener func(event *domcore.Event, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAbort(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAbort(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// AddAfterPrint is adding doing AddEventListener for 'AfterPrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAfterPrint(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "afterprint", cb)
	return cb
}

// SetOnAfterPrint is assigning a function to 'onafterprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAfterPrint(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onafterprint", cb)
	return cb
}

// event attribute: animations.AnimationEvent
func eventFuncWindow_animations_AnimationEvent(listener func(event *animations.AnimationEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *animations.AnimationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = animations.AnimationEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAnimationCancel is adding doing AddEventListener for 'AnimationCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationcancel", cb)
	return cb
}

// SetOnAnimationCancel is assigning a function to 'onanimationcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationcancel", cb)
	return cb
}

// AddAnimationEnd is adding doing AddEventListener for 'AnimationEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationend", cb)
	return cb
}

// SetOnAnimationEnd is assigning a function to 'onanimationend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationend", cb)
	return cb
}

// AddAnimationIteration is adding doing AddEventListener for 'AnimationIteration' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationiteration", cb)
	return cb
}

// SetOnAnimationIteration is assigning a function to 'onanimationiteration'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationiteration", cb)
	return cb
}

// AddAnimationStart is adding doing AddEventListener for 'AnimationStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationstart", cb)
	return cb
}

// SetOnAnimationStart is assigning a function to 'onanimationstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationstart", cb)
	return cb
}

// AddAppInstalled is adding doing AddEventListener for 'AppInstalled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAppInstalled(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "appinstalled", cb)
	return cb
}

// SetOnAppInstalled is assigning a function to 'onappinstalled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAppInstalled(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onappinstalled", cb)
	return cb
}

// event attribute: htmlevent.MouseEvent
func eventFuncWindow_htmlevent_MouseEvent(listener func(event *htmlevent.MouseEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.MouseEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.MouseEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAuxclick is adding doing AddEventListener for 'Auxclick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "auxclick", cb)
	return cb
}

// SetOnAuxclick is assigning a function to 'onauxclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onauxclick", cb)
	return cb
}

// event attribute: appmanifest.BeforeInstallPromptEvent
func eventFuncWindow_appmanifest_BeforeInstallPromptEvent(listener func(event *appmanifest.BeforeInstallPromptEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *appmanifest.BeforeInstallPromptEvent
		value := args[0]
		incoming := value.Get("target")
		ret = appmanifest.BeforeInstallPromptEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBeforeInstallPrompt is adding doing AddEventListener for 'BeforeInstallPrompt' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventBeforeInstallPrompt(listener func(event *appmanifest.BeforeInstallPromptEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_appmanifest_BeforeInstallPromptEvent(listener)
	_this.Value_JS.Call("addEventListener", "beforeinstallprompt", cb)
	return cb
}

// SetOnBeforeInstallPrompt is assigning a function to 'onbeforeinstallprompt'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnBeforeInstallPrompt(listener func(event *appmanifest.BeforeInstallPromptEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_appmanifest_BeforeInstallPromptEvent(listener)
	_this.Value_JS.Set("onbeforeinstallprompt", cb)
	return cb
}

// AddBeforePrint is adding doing AddEventListener for 'BeforePrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventBeforePrint(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "beforeprint", cb)
	return cb
}

// SetOnBeforePrint is assigning a function to 'onbeforeprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnBeforePrint(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onbeforeprint", cb)
	return cb
}

// event attribute: htmlcommon.BeforeUnloadEvent
func eventFuncWindow_htmlcommon_BeforeUnloadEvent(listener func(event *htmlcommon.BeforeUnloadEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlcommon.BeforeUnloadEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlcommon.BeforeUnloadEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBeforeUnload is adding doing AddEventListener for 'BeforeUnload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Call("addEventListener", "beforeunload", cb)
	return cb
}

// SetOnBeforeUnload is assigning a function to 'onbeforeunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Set("onbeforeunload", cb)
	return cb
}

// event attribute: htmlevent.FocusEvent
func eventFuncWindow_htmlevent_FocusEvent(listener func(event *htmlevent.FocusEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.FocusEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.FocusEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBlur is adding doing AddEventListener for 'Blur' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventBlur(listener func(event *htmlevent.FocusEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "blur", cb)
	return cb
}

// SetOnBlur is assigning a function to 'onblur'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnBlur(listener func(event *htmlevent.FocusEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onblur", cb)
	return cb
}

// AddCancel is adding doing AddEventListener for 'Cancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventCancel(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cancel", cb)
	return cb
}

// SetOnCancel is assigning a function to 'oncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnCancel(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("oncancel", cb)
	return cb
}

// AddCanPlay is adding doing AddEventListener for 'CanPlay' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventCanPlay(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplay", cb)
	return cb
}

// SetOnCanPlay is assigning a function to 'oncanplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnCanPlay(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("oncanplay", cb)
	return cb
}

// AddCanPlayThrough is adding doing AddEventListener for 'CanPlayThrough' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventCanPlayThrough(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplaythrough", cb)
	return cb
}

// SetOnCanPlayThrough is assigning a function to 'oncanplaythrough'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnCanPlayThrough(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("oncanplaythrough", cb)
	return cb
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

// AddClick is adding doing AddEventListener for 'Click' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventClick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "click", cb)
	return cb
}

// SetOnClick is assigning a function to 'onclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnClick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onclick", cb)
	return cb
}

// AddClose is adding doing AddEventListener for 'Close' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventClose(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "close", cb)
	return cb
}

// SetOnClose is assigning a function to 'onclose'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnClose(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onclose", cb)
	return cb
}

// AddContextMenu is adding doing AddEventListener for 'ContextMenu' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "contextmenu", cb)
	return cb
}

// SetOnContextMenu is assigning a function to 'oncontextmenu'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("oncontextmenu", cb)
	return cb
}

// AddCueChange is adding doing AddEventListener for 'CueChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventCueChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cuechange", cb)
	return cb
}

// SetOnCueChange is assigning a function to 'oncuechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnCueChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("oncuechange", cb)
	return cb
}

// AddDblClick is adding doing AddEventListener for 'DblClick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "dblclick", cb)
	return cb
}

// SetOnDblClick is assigning a function to 'ondblclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("ondblclick", cb)
	return cb
}

// event attribute: sensor.DeviceMotionEvent
func eventFuncWindow_sensor_DeviceMotionEvent(listener func(event *sensor.DeviceMotionEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *sensor.DeviceMotionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = sensor.DeviceMotionEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDeviceMotion is adding doing AddEventListener for 'DeviceMotion' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDeviceMotion(listener func(event *sensor.DeviceMotionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_sensor_DeviceMotionEvent(listener)
	_this.Value_JS.Call("addEventListener", "devicemotion", cb)
	return cb
}

// SetOnDeviceMotion is assigning a function to 'ondevicemotion'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDeviceMotion(listener func(event *sensor.DeviceMotionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_sensor_DeviceMotionEvent(listener)
	_this.Value_JS.Set("ondevicemotion", cb)
	return cb
}

// event attribute: sensor.DeviceOrientationEvent
func eventFuncWindow_sensor_DeviceOrientationEvent(listener func(event *sensor.DeviceOrientationEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *sensor.DeviceOrientationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = sensor.DeviceOrientationEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDeviceOrientation is adding doing AddEventListener for 'DeviceOrientation' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDeviceOrientation(listener func(event *sensor.DeviceOrientationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_sensor_DeviceOrientationEvent(listener)
	_this.Value_JS.Call("addEventListener", "deviceorientation", cb)
	return cb
}

// SetOnDeviceOrientation is assigning a function to 'ondeviceorientation'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDeviceOrientation(listener func(event *sensor.DeviceOrientationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_sensor_DeviceOrientationEvent(listener)
	_this.Value_JS.Set("ondeviceorientation", cb)
	return cb
}

// event attribute: htmlevent.DragEvent
func eventFuncWindow_htmlevent_DragEvent(listener func(event *htmlevent.DragEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.DragEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.DragEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDrag is adding doing AddEventListener for 'Drag' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDrag(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drag", cb)
	return cb
}

// SetOnDrag is assigning a function to 'ondrag'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDrag(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrag", cb)
	return cb
}

// AddDragEnd is adding doing AddEventListener for 'DragEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragend", cb)
	return cb
}

// SetOnDragEnd is assigning a function to 'ondragend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragend", cb)
	return cb
}

// AddDragEnter is adding doing AddEventListener for 'DragEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragenter", cb)
	return cb
}

// SetOnDragEnter is assigning a function to 'ondragenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragenter", cb)
	return cb
}

// AddDragExit is adding doing AddEventListener for 'DragExit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragExit(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragexit", cb)
	return cb
}

// SetOnDragExit is assigning a function to 'ondragexit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragExit(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragexit", cb)
	return cb
}

// AddDragLeave is adding doing AddEventListener for 'DragLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragleave", cb)
	return cb
}

// SetOnDragLeave is assigning a function to 'ondragleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragleave", cb)
	return cb
}

// AddDragOver is adding doing AddEventListener for 'DragOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragOver(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragover", cb)
	return cb
}

// SetOnDragOver is assigning a function to 'ondragover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragOver(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragover", cb)
	return cb
}

// AddDragStart is adding doing AddEventListener for 'DragStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDragStart(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragstart", cb)
	return cb
}

// SetOnDragStart is assigning a function to 'ondragstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDragStart(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragstart", cb)
	return cb
}

// AddDrop is adding doing AddEventListener for 'Drop' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDrop(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drop", cb)
	return cb
}

// SetOnDrop is assigning a function to 'ondrop'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDrop(listener func(event *htmlevent.DragEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrop", cb)
	return cb
}

// AddDurationChange is adding doing AddEventListener for 'DurationChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventDurationChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "durationchange", cb)
	return cb
}

// SetOnDurationChange is assigning a function to 'ondurationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnDurationChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("ondurationchange", cb)
	return cb
}

// AddEmptied is adding doing AddEventListener for 'Emptied' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventEmptied(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "emptied", cb)
	return cb
}

// SetOnEmptied is assigning a function to 'onemptied'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnEmptied(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onemptied", cb)
	return cb
}

// AddEnded is adding doing AddEventListener for 'Ended' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventEnded(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ended", cb)
	return cb
}

// SetOnEnded is assigning a function to 'onended'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnEnded(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onended", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventError(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnError(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddFocus is adding doing AddEventListener for 'Focus' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventFocus(listener func(event *htmlevent.FocusEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "focus", cb)
	return cb
}

// SetOnFocus is assigning a function to 'onfocus'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnFocus(listener func(event *htmlevent.FocusEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onfocus", cb)
	return cb
}

// event attribute: html.FormDataEvent
func eventFuncWindow_html_FormDataEvent(listener func(event *html.FormDataEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *html.FormDataEvent
		value := args[0]
		incoming := value.Get("target")
		ret = html.FormDataEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFormData is adding doing AddEventListener for 'FormData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventFormData(listener func(event *html.FormDataEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_html_FormDataEvent(listener)
	_this.Value_JS.Call("addEventListener", "formdata", cb)
	return cb
}

// SetOnFormData is assigning a function to 'onformdata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnFormData(listener func(event *html.FormDataEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_html_FormDataEvent(listener)
	_this.Value_JS.Set("onformdata", cb)
	return cb
}

// event attribute: htmlevent.PointerEvent
func eventFuncWindow_htmlevent_PointerEvent(listener func(event *htmlevent.PointerEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PointerEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PointerEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddGotPointerCapture is adding doing AddEventListener for 'GotPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "gotpointercapture", cb)
	return cb
}

// SetOnGotPointerCapture is assigning a function to 'ongotpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("ongotpointercapture", cb)
	return cb
}

// event attribute: htmlevent.HashChangeEvent
func eventFuncWindow_htmlevent_HashChangeEvent(listener func(event *htmlevent.HashChangeEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.HashChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.HashChangeEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddHashChange is adding doing AddEventListener for 'HashChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "hashchange", cb)
	return cb
}

// SetOnHashChange is assigning a function to 'onhashchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Set("onhashchange", cb)
	return cb
}

// event attribute: htmlevent.InputEvent
func eventFuncWindow_htmlevent_InputEvent(listener func(event *htmlevent.InputEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.InputEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.InputEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddInput is adding doing AddEventListener for 'Input' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventInput(listener func(event *htmlevent.InputEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_InputEvent(listener)
	_this.Value_JS.Call("addEventListener", "input", cb)
	return cb
}

// SetOnInput is assigning a function to 'oninput'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnInput(listener func(event *htmlevent.InputEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_InputEvent(listener)
	_this.Value_JS.Set("oninput", cb)
	return cb
}

// AddInvalid is adding doing AddEventListener for 'Invalid' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventInvalid(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "invalid", cb)
	return cb
}

// SetOnInvalid is assigning a function to 'oninvalid'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnInvalid(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("oninvalid", cb)
	return cb
}

// event attribute: htmlevent.KeyboardEvent
func eventFuncWindow_htmlevent_KeyboardEvent(listener func(event *htmlevent.KeyboardEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.KeyboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.KeyboardEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddKeyDown is adding doing AddEventListener for 'KeyDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keydown", cb)
	return cb
}

// SetOnKeyDown is assigning a function to 'onkeydown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeydown", cb)
	return cb
}

// AddKeyPress is adding doing AddEventListener for 'KeyPress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keypress", cb)
	return cb
}

// SetOnKeyPress is assigning a function to 'onkeypress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeypress", cb)
	return cb
}

// AddKeyUp is adding doing AddEventListener for 'KeyUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keyup", cb)
	return cb
}

// SetOnKeyUp is assigning a function to 'onkeyup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeyup", cb)
	return cb
}

// AddLanguageChange is adding doing AddEventListener for 'LanguageChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLanguageChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "languagechange", cb)
	return cb
}

// SetOnLanguageChange is assigning a function to 'onlanguagechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLanguageChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onlanguagechange", cb)
	return cb
}

// AddLoad is adding doing AddEventListener for 'Load' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLoad(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "load", cb)
	return cb
}

// SetOnLoad is assigning a function to 'onload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLoad(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onload", cb)
	return cb
}

// AddLoadedData is adding doing AddEventListener for 'LoadedData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLoadedData(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadeddata", cb)
	return cb
}

// SetOnLoadedData is assigning a function to 'onloadeddata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLoadedData(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onloadeddata", cb)
	return cb
}

// AddLoadedMetaData is adding doing AddEventListener for 'LoadedMetaData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLoadedMetaData(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadedmetadata", cb)
	return cb
}

// SetOnLoadedMetaData is assigning a function to 'onloadedmetadata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLoadedMetaData(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onloadedmetadata", cb)
	return cb
}

// event attribute: xhr.ProgressEvent
func eventFuncWindow_xhr_ProgressEvent(listener func(event *xhr.ProgressEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *xhr.ProgressEvent
		value := args[0]
		incoming := value.Get("target")
		ret = xhr.ProgressEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddLoadEnd is adding doing AddEventListener for 'LoadEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadend", cb)
	return cb
}

// SetOnLoadEnd is assigning a function to 'onloadend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onloadend", cb)
	return cb
}

// AddLoadStart is adding doing AddEventListener for 'LoadStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLoadStart(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadstart", cb)
	return cb
}

// SetOnLoadStart is assigning a function to 'onloadstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLoadStart(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onloadstart", cb)
	return cb
}

// AddLostPointerCapture is adding doing AddEventListener for 'LostPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "lostpointercapture", cb)
	return cb
}

// SetOnLostPointerCapture is assigning a function to 'onlostpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onlostpointercapture", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncWindow_channel_MessageEvent(listener func(event *channel.MessageEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

// AddMouseDown is adding doing AddEventListener for 'MouseDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousedown", cb)
	return cb
}

// SetOnMouseDown is assigning a function to 'onmousedown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousedown", cb)
	return cb
}

// AddMouseEnter is adding doing AddEventListener for 'MouseEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseenter", cb)
	return cb
}

// SetOnMouseEnter is assigning a function to 'onmouseenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseenter", cb)
	return cb
}

// AddMouseLeave is adding doing AddEventListener for 'MouseLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseleave", cb)
	return cb
}

// SetOnMouseLeave is assigning a function to 'onmouseleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseleave", cb)
	return cb
}

// AddMouseMove is adding doing AddEventListener for 'MouseMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousemove", cb)
	return cb
}

// SetOnMouseMove is assigning a function to 'onmousemove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousemove", cb)
	return cb
}

// AddMouseOut is adding doing AddEventListener for 'MouseOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseout", cb)
	return cb
}

// SetOnMouseOut is assigning a function to 'onmouseout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseout", cb)
	return cb
}

// AddMouseOver is adding doing AddEventListener for 'MouseOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseover", cb)
	return cb
}

// SetOnMouseOver is assigning a function to 'onmouseover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseover", cb)
	return cb
}

// AddMouseUp is adding doing AddEventListener for 'MouseUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseup", cb)
	return cb
}

// SetOnMouseUp is assigning a function to 'onmouseup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseup", cb)
	return cb
}

// AddOffline is adding doing AddEventListener for 'Offline' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventOffline(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "offline", cb)
	return cb
}

// SetOnOffline is assigning a function to 'onoffline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnOffline(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onoffline", cb)
	return cb
}

// AddOnline is adding doing AddEventListener for 'Online' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventOnline(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "online", cb)
	return cb
}

// SetOnOnline is assigning a function to 'ononline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnOnline(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("ononline", cb)
	return cb
}

// AddOrientationchange is adding doing AddEventListener for 'Orientationchange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventOrientationchange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "orientationchange", cb)
	return cb
}

// SetOnOrientationchange is assigning a function to 'onorientationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnOrientationchange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onorientationchange", cb)
	return cb
}

// event attribute: htmlevent.PageTransitionEvent
func eventFuncWindow_htmlevent_PageTransitionEvent(listener func(event *htmlevent.PageTransitionEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PageTransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PageTransitionEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPageHide is adding doing AddEventListener for 'PageHide' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pagehide", cb)
	return cb
}

// SetOnPageHide is assigning a function to 'onpagehide'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpagehide", cb)
	return cb
}

// AddPageShow is adding doing AddEventListener for 'PageShow' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pageshow", cb)
	return cb
}

// SetOnPageShow is assigning a function to 'onpageshow'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpageshow", cb)
	return cb
}

// AddPause is adding doing AddEventListener for 'Pause' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPause(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pause", cb)
	return cb
}

// SetOnPause is assigning a function to 'onpause'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPause(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onpause", cb)
	return cb
}

// AddPlay is adding doing AddEventListener for 'Play' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPlay(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "play", cb)
	return cb
}

// SetOnPlay is assigning a function to 'onplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPlay(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onplay", cb)
	return cb
}

// AddPlaying is adding doing AddEventListener for 'Playing' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPlaying(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "playing", cb)
	return cb
}

// SetOnPlaying is assigning a function to 'onplaying'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPlaying(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onplaying", cb)
	return cb
}

// AddPointerCancel is adding doing AddEventListener for 'PointerCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointercancel", cb)
	return cb
}

// SetOnPointerCancel is assigning a function to 'onpointercancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointercancel", cb)
	return cb
}

// AddPointerDown is adding doing AddEventListener for 'PointerDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerdown", cb)
	return cb
}

// SetOnPointerDown is assigning a function to 'onpointerdown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerdown", cb)
	return cb
}

// AddPointerEnter is adding doing AddEventListener for 'PointerEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerenter", cb)
	return cb
}

// SetOnPointerEnter is assigning a function to 'onpointerenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerenter", cb)
	return cb
}

// AddPointerLeave is adding doing AddEventListener for 'PointerLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerleave", cb)
	return cb
}

// SetOnPointerLeave is assigning a function to 'onpointerleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerleave", cb)
	return cb
}

// AddPointerMove is adding doing AddEventListener for 'PointerMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointermove", cb)
	return cb
}

// SetOnPointerMove is assigning a function to 'onpointermove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointermove", cb)
	return cb
}

// AddPointerOut is adding doing AddEventListener for 'PointerOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerout", cb)
	return cb
}

// SetOnPointerOut is assigning a function to 'onpointerout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerout", cb)
	return cb
}

// AddPointerOver is adding doing AddEventListener for 'PointerOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerover", cb)
	return cb
}

// SetOnPointerOver is assigning a function to 'onpointerover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerover", cb)
	return cb
}

// AddPointerUp is adding doing AddEventListener for 'PointerUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerup", cb)
	return cb
}

// SetOnPointerUp is assigning a function to 'onpointerup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerup", cb)
	return cb
}

// event attribute: htmlevent.PopStateEvent
func eventFuncWindow_htmlevent_PopStateEvent(listener func(event *htmlevent.PopStateEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PopStateEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PopStateEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPopState is adding doing AddEventListener for 'PopState' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Call("addEventListener", "popstate", cb)
	return cb
}

// SetOnPopState is assigning a function to 'onpopstate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Set("onpopstate", cb)
	return cb
}

// AddProgress is adding doing AddEventListener for 'Progress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventProgress(listener func(event *xhr.ProgressEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "progress", cb)
	return cb
}

// SetOnProgress is assigning a function to 'onprogress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnProgress(listener func(event *xhr.ProgressEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onprogress", cb)
	return cb
}

// AddRateChange is adding doing AddEventListener for 'RateChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventRateChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ratechange", cb)
	return cb
}

// SetOnRateChange is assigning a function to 'onratechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnRateChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onratechange", cb)
	return cb
}

// event attribute: htmlevent.PromiseRejectionEvent
func eventFuncWindow_htmlevent_PromiseRejectionEvent(listener func(event *htmlevent.PromiseRejectionEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PromiseRejectionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PromiseRejectionEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddRejectionHandled is adding doing AddEventListener for 'RejectionHandled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "rejectionhandled", cb)
	return cb
}

// SetOnRejectionHandled is assigning a function to 'onrejectionhandled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onrejectionhandled", cb)
	return cb
}

// AddReset is adding doing AddEventListener for 'Reset' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventReset(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "reset", cb)
	return cb
}

// SetOnReset is assigning a function to 'onreset'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnReset(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onreset", cb)
	return cb
}

// event attribute: htmlevent.UIEvent
func eventFuncWindow_htmlevent_UIEvent(listener func(event *htmlevent.UIEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.UIEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.UIEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddResize is adding doing AddEventListener for 'Resize' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventResize(listener func(event *htmlevent.UIEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_UIEvent(listener)
	_this.Value_JS.Call("addEventListener", "resize", cb)
	return cb
}

// SetOnResize is assigning a function to 'onresize'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnResize(listener func(event *htmlevent.UIEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_UIEvent(listener)
	_this.Value_JS.Set("onresize", cb)
	return cb
}

// AddScroll is adding doing AddEventListener for 'Scroll' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventScroll(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "scroll", cb)
	return cb
}

// SetOnScroll is assigning a function to 'onscroll'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnScroll(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onscroll", cb)
	return cb
}

// event attribute: csp.SecurityPolicyViolationEvent
func eventFuncWindow_csp_SecurityPolicyViolationEvent(listener func(event *csp.SecurityPolicyViolationEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *csp.SecurityPolicyViolationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = csp.SecurityPolicyViolationEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddSecurityPolicyViolation is adding doing AddEventListener for 'SecurityPolicyViolation' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Call("addEventListener", "securitypolicyviolation", cb)
	return cb
}

// SetOnSecurityPolicyViolation is assigning a function to 'onsecuritypolicyviolation'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Set("onsecuritypolicyviolation", cb)
	return cb
}

// AddSeeked is adding doing AddEventListener for 'Seeked' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSeeked(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeked", cb)
	return cb
}

// SetOnSeeked is assigning a function to 'onseeked'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSeeked(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onseeked", cb)
	return cb
}

// AddSeeking is adding doing AddEventListener for 'Seeking' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSeeking(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeking", cb)
	return cb
}

// SetOnSeeking is assigning a function to 'onseeking'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSeeking(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onseeking", cb)
	return cb
}

// AddSelect is adding doing AddEventListener for 'Select' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSelect(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "select", cb)
	return cb
}

// SetOnSelect is assigning a function to 'onselect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSelect(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onselect", cb)
	return cb
}

// AddSelectionChange is adding doing AddEventListener for 'SelectionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSelectionChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectionchange", cb)
	return cb
}

// SetOnSelectionChange is assigning a function to 'onselectionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSelectionChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onselectionchange", cb)
	return cb
}

// AddSelectStart is adding doing AddEventListener for 'SelectStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSelectStart(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectstart", cb)
	return cb
}

// SetOnSelectStart is assigning a function to 'onselectstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSelectStart(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onselectstart", cb)
	return cb
}

// AddStalled is adding doing AddEventListener for 'Stalled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventStalled(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "stalled", cb)
	return cb
}

// SetOnStalled is assigning a function to 'onstalled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnStalled(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onstalled", cb)
	return cb
}

// event attribute: htmlevent.StorageEvent
func eventFuncWindow_htmlevent_StorageEvent(listener func(event *htmlevent.StorageEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.StorageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.StorageEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddStorage is adding doing AddEventListener for 'Storage' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventStorage(listener func(event *htmlevent.StorageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_StorageEvent(listener)
	_this.Value_JS.Call("addEventListener", "storage", cb)
	return cb
}

// SetOnStorage is assigning a function to 'onstorage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnStorage(listener func(event *htmlevent.StorageEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_StorageEvent(listener)
	_this.Value_JS.Set("onstorage", cb)
	return cb
}

// AddSubmit is adding doing AddEventListener for 'Submit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSubmit(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "submit", cb)
	return cb
}

// SetOnSubmit is assigning a function to 'onsubmit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSubmit(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onsubmit", cb)
	return cb
}

// AddSuspend is adding doing AddEventListener for 'Suspend' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventSuspend(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "suspend", cb)
	return cb
}

// SetOnSuspend is assigning a function to 'onsuspend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnSuspend(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onsuspend", cb)
	return cb
}

// AddTimeUpdate is adding doing AddEventListener for 'TimeUpdate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTimeUpdate(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "timeupdate", cb)
	return cb
}

// SetOnTimeUpdate is assigning a function to 'ontimeupdate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTimeUpdate(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("ontimeupdate", cb)
	return cb
}

// AddToggle is adding doing AddEventListener for 'Toggle' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventToggle(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "toggle", cb)
	return cb
}

// SetOnToggle is assigning a function to 'ontoggle'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnToggle(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("ontoggle", cb)
	return cb
}

// event attribute: touchevents.TouchEvent
func eventFuncWindow_touchevents_TouchEvent(listener func(event *touchevents.TouchEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *touchevents.TouchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = touchevents.TouchEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTouchCancel is adding doing AddEventListener for 'TouchCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchcancel", cb)
	return cb
}

// SetOnTouchCancel is assigning a function to 'ontouchcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchcancel", cb)
	return cb
}

// AddTouchEnd is adding doing AddEventListener for 'TouchEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchend", cb)
	return cb
}

// SetOnTouchEnd is assigning a function to 'ontouchend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchend", cb)
	return cb
}

// AddTouchMove is adding doing AddEventListener for 'TouchMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchmove", cb)
	return cb
}

// SetOnTouchMove is assigning a function to 'ontouchmove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchmove", cb)
	return cb
}

// AddTouchStart is adding doing AddEventListener for 'TouchStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchstart", cb)
	return cb
}

// SetOnTouchStart is assigning a function to 'ontouchstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchstart", cb)
	return cb
}

// event attribute: transitions.TransitionEvent
func eventFuncWindow_transitions_TransitionEvent(listener func(event *transitions.TransitionEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *transitions.TransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = transitions.TransitionEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTransitionCancel is adding doing AddEventListener for 'TransitionCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitioncancel", cb)
	return cb
}

// SetOnTransitionCancel is assigning a function to 'ontransitioncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitioncancel", cb)
	return cb
}

// AddTransitionEnd is adding doing AddEventListener for 'TransitionEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionend", cb)
	return cb
}

// SetOnTransitionEnd is assigning a function to 'ontransitionend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionend", cb)
	return cb
}

// AddTransitionRun is adding doing AddEventListener for 'TransitionRun' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionrun", cb)
	return cb
}

// SetOnTransitionRun is assigning a function to 'ontransitionrun'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionrun", cb)
	return cb
}

// AddTransitionStart is adding doing AddEventListener for 'TransitionStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionstart", cb)
	return cb
}

// SetOnTransitionStart is assigning a function to 'ontransitionstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionstart", cb)
	return cb
}

// AddUnhandledRejection is adding doing AddEventListener for 'UnhandledRejection' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "unhandledrejection", cb)
	return cb
}

// SetOnUnhandledRejection is assigning a function to 'onunhandledrejection'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onunhandledrejection", cb)
	return cb
}

// AddUnload is adding doing AddEventListener for 'Unload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventUnload(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "unload", cb)
	return cb
}

// SetOnUnload is assigning a function to 'onunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnUnload(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onunload", cb)
	return cb
}

// AddVolumeChange is adding doing AddEventListener for 'VolumeChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVolumeChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "volumechange", cb)
	return cb
}

// SetOnVolumeChange is assigning a function to 'onvolumechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVolumeChange(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onvolumechange", cb)
	return cb
}

// event attribute: webvr.DisplayEvent
func eventFuncWindow_webvr_DisplayEvent(listener func(event *webvr.DisplayEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *webvr.DisplayEvent
		value := args[0]
		incoming := value.Get("target")
		ret = webvr.DisplayEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddVRDisplayActivate is adding doing AddEventListener for 'VRDisplayActivate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayActivate(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplayactivate", cb)
	return cb
}

// SetOnVRDisplayActivate is assigning a function to 'onvrdisplayactivate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayActivate(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplayactivate", cb)
	return cb
}

// AddVRDisplayBlur is adding doing AddEventListener for 'VRDisplayBlur' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayBlur(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplayblur", cb)
	return cb
}

// SetOnVRDisplayBlur is assigning a function to 'onvrdisplayblur'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayBlur(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplayblur", cb)
	return cb
}

// AddVRDisplayConnect is adding doing AddEventListener for 'VRDisplayConnect' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayConnect(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplayconnect", cb)
	return cb
}

// SetOnVRDisplayConnect is assigning a function to 'onvrdisplayconnect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayConnect(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplayconnect", cb)
	return cb
}

// AddVRDisplayDeactivate is adding doing AddEventListener for 'VRDisplayDeactivate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayDeactivate(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplaydeactivate", cb)
	return cb
}

// SetOnVRDisplayDeactivate is assigning a function to 'onvrdisplaydeactivate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayDeactivate(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplaydeactivate", cb)
	return cb
}

// AddVRDisplayDisconnect is adding doing AddEventListener for 'VRDisplayDisconnect' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayDisconnect(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplaydisconnect", cb)
	return cb
}

// SetOnVRDisplayDisconnect is assigning a function to 'onvrdisplaydisconnect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayDisconnect(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplaydisconnect", cb)
	return cb
}

// AddVRDisplayFocus is adding doing AddEventListener for 'VRDisplayFocus' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayFocus(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplayfocus", cb)
	return cb
}

// SetOnVRDisplayFocus is assigning a function to 'onvrdisplayfocus'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayFocus(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplayfocus", cb)
	return cb
}

// AddVRDisplayPointerRestricted is adding doing AddEventListener for 'VRDisplayPointerRestricted' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayPointerRestricted(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplaypointerrestricted", cb)
	return cb
}

// SetOnVRDisplayPointerRestricted is assigning a function to 'onvrdisplaypointerrestricted'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayPointerRestricted(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplaypointerrestricted", cb)
	return cb
}

// AddVRDisplayPointeRunRestricted is adding doing AddEventListener for 'VRDisplayPointeRunRestricted' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayPointeRunRestricted(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplaypointerunrestricted", cb)
	return cb
}

// SetOnVRDisplayPointeRunRestricted is assigning a function to 'onvrdisplaypointerunrestricted'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayPointeRunRestricted(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplaypointerunrestricted", cb)
	return cb
}

// AddVRDisplayPresentChange is adding doing AddEventListener for 'VRDisplayPresentChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventVRDisplayPresentChange(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Call("addEventListener", "vrdisplaypresentchange", cb)
	return cb
}

// SetOnVRDisplayPresentChange is assigning a function to 'onvrdisplaypresentchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnVRDisplayPresentChange(listener func(event *webvr.DisplayEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_webvr_DisplayEvent(listener)
	_this.Value_JS.Set("onvrdisplaypresentchange", cb)
	return cb
}

// AddWaiting is adding doing AddEventListener for 'Waiting' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventWaiting(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "waiting", cb)
	return cb
}

// SetOnWaiting is assigning a function to 'onwaiting'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnWaiting(listener func(event *domcore.Event, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_domcore_Event(listener)
	_this.Value_JS.Set("onwaiting", cb)
	return cb
}

// event attribute: htmlevent.WheelEvent
func eventFuncWindow_htmlevent_WheelEvent(listener func(event *htmlevent.WheelEvent, target *Window)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.WheelEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.WheelEventFromJS(value)
		src := WindowFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddWheel is adding doing AddEventListener for 'Wheel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Window) AddEventWheel(listener func(event *htmlevent.WheelEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_WheelEvent(listener)
	_this.Value_JS.Call("addEventListener", "wheel", cb)
	return cb
}

// SetOnWheel is assigning a function to 'onwheel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Window) SetOnWheel(listener func(event *htmlevent.WheelEvent, currentTarget *Window)) js.Func {
	cb := eventFuncWindow_htmlevent_WheelEvent(listener)
	_this.Value_JS.Set("onwheel", cb)
	return cb
}

func (_this *Window) Get(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	_converted = javascript.ObjectFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *Window) Stop() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stop", _args[0:_end]...)
	return
}

func (_this *Window) Focus() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("focus", _args[0:_end]...)
	return
}

func (_this *Window) Blur() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("blur", _args[0:_end]...)
	return
}

func (_this *Window) Open(url *string, target *string, features *string) (_result *Window) {
	var (
		_args [3]interface{}
		_end  int
	)
	if url != nil {

		var _p0 interface{}
		if url != nil {
			_p0 = *(url)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	if target != nil {

		var _p1 interface{}
		if target != nil {
			_p1 = *(target)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	if features != nil {

		var _p2 interface{}
		if features != nil {
			_p2 = *(features)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("open", _args[0:_end]...)
	var (
		_converted *Window // javascript: Window _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = WindowFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Window) Alert() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("alert", _args[0:_end]...)
	return
}

func (_this *Window) Alert2(message string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("alert", _args[0:_end]...)
	return
}

func (_this *Window) Confirm(message *string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if message != nil {

		var _p0 interface{}
		if message != nil {
			_p0 = *(message)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("confirm", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Window) Prompt(message *string, _default *string) (_result *string) {
	var (
		_args [2]interface{}
		_end  int
	)
	if message != nil {

		var _p0 interface{}
		if message != nil {
			_p0 = *(message)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	if _default != nil {

		var _p1 interface{}
		if _default != nil {
			_p1 = *(_default)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("prompt", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Window) Print() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("print", _args[0:_end]...)
	return
}

func (_this *Window) PostMessage(message interface{}, targetOrigin string, transfer []*javascript.Object) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := targetOrigin
	_args[1] = _p1
	_end++
	if transfer != nil {
		_p2 := js.Global().Get("Array").New(len(transfer))
		for __idx2, __seq_in2 := range transfer {
			__seq_out2 := __seq_in2.JSValue()
			_p2.SetIndex(__idx2, __seq_out2)
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Window) PostMessage2(message interface{}, options *WindowPostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Window) GetPseudoElements(elt *dom.Element, _type string) (_result *pseudo.CSSPseudoElementList) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := elt.JSValue()
	_args[0] = _p0
	_end++
	_p1 := _type
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getPseudoElements", _args[0:_end]...)
	var (
		_converted *pseudo.CSSPseudoElementList // javascript: CSSPseudoElementList _what_return_name
	)
	_converted = pseudo.CSSPseudoElementListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) MatchMedia(query string) (_result *view.MediaQueryList) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("matchMedia", _args[0:_end]...)
	var (
		_converted *view.MediaQueryList // javascript: MediaQueryList _what_return_name
	)
	_converted = view.MediaQueryListFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) MoveTo(x int, y int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("moveTo", _args[0:_end]...)
	return
}

func (_this *Window) MoveBy(x int, y int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("moveBy", _args[0:_end]...)
	return
}

func (_this *Window) ResizeTo(x int, y int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("resizeTo", _args[0:_end]...)
	return
}

func (_this *Window) ResizeBy(x int, y int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("resizeBy", _args[0:_end]...)
	return
}

func (_this *Window) Scroll(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scroll", _args[0:_end]...)
	return
}

func (_this *Window) Scroll2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scroll", _args[0:_end]...)
	return
}

func (_this *Window) ScrollTo(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scrollTo", _args[0:_end]...)
	return
}

func (_this *Window) ScrollTo2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scrollTo", _args[0:_end]...)
	return
}

func (_this *Window) ScrollBy(options *view.ScrollToOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("scrollBy", _args[0:_end]...)
	return
}

func (_this *Window) ScrollBy2(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scrollBy", _args[0:_end]...)
	return
}

func (_this *Window) GetComputedStyle(elt *dom.Element, pseudoElt *string) (_result *cssom.CSSStyleDeclaration) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := elt.JSValue()
	_args[0] = _p0
	_end++
	if pseudoElt != nil {

		var _p1 interface{}
		if pseudoElt != nil {
			_p1 = *(pseudoElt)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getComputedStyle", _args[0:_end]...)
	var (
		_converted *cssom.CSSStyleDeclaration // javascript: CSSStyleDeclaration _what_return_name
	)
	_converted = cssom.CSSStyleDeclarationFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) CaptureEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("captureEvents", _args[0:_end]...)
	return
}

func (_this *Window) ReleaseEvents() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("releaseEvents", _args[0:_end]...)
	return
}

func (_this *Window) RequestIdleCallback(callback *backgroundtask.IdleRequestCallback, options *backgroundtask.IdleRequestOptions) (_result uint) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("requestIdleCallback", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *Window) CancelIdleCallback(handle uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelIdleCallback", _args[0:_end]...)
	return
}

func (_this *Window) GetSelection() (_result *selection.Selection) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSelection", _args[0:_end]...)
	var (
		_converted *selection.Selection // javascript: Selection _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = selection.SelectionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Window) Btoa(data string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("btoa", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *Window) Atob(data string) (_result *patch.ByteString) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("atob", _args[0:_end]...)
	var (
		_converted *patch.ByteString // javascript: ByteString _what_return_name
	)
	_converted = patch.ByteStringFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) SetTimeout(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {

		var _p1 interface{}
		if timeout != nil {
			_p1 = *(timeout)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setTimeout", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Window) ClearTimeout(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {

		var _p0 interface{}
		if handle != nil {
			_p0 = *(handle)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearTimeout", _args[0:_end]...)
	return
}

func (_this *Window) SetInterval(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {

		var _p1 interface{}
		if timeout != nil {
			_p1 = *(timeout)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setInterval", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *Window) ClearInterval(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {

		var _p0 interface{}
		if handle != nil {
			_p0 = *(handle)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearInterval", _args[0:_end]...)
	return
}

func (_this *Window) QueueMicrotask(callback *webidl.VoidFunction) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("queueMicrotask", _args[0:_end]...)
	return
}

func (_this *Window) CreateImageBitmap(image *Union, options *canvas.ImageBitmapOptions) (_result *canvas.PromiseImageBitmap) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *canvas.PromiseImageBitmap // javascript: Promise _what_return_name
	)
	_converted = canvas.PromiseImageBitmapFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) CreateImageBitmap2(image *Union, sx int, sy int, sw int, sh int, options *canvas.ImageBitmapOptions) (_result *canvas.PromiseImageBitmap) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	if options != nil {
		_p5 := options.JSValue()
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *canvas.PromiseImageBitmap // javascript: Promise _what_return_name
	)
	_converted = canvas.PromiseImageBitmapFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) Fetch(input *Union, init *fetch.RequestInit) (_result *fetch.PromiseResponse) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := input.JSValue()
	_args[0] = _p0
	_end++
	if init != nil {
		_p1 := init.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("fetch", _args[0:_end]...)
	var (
		_converted *fetch.PromiseResponse // javascript: Promise _what_return_name
	)
	_converted = fetch.PromiseResponseFromJS(_returned)
	_result = _converted
	return
}

func (_this *Window) RequestAnimationFrame(callback *htmlcommon.FrameRequestCallback) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestAnimationFrame", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *Window) CancelAnimationFrame(handle uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelAnimationFrame", _args[0:_end]...)
	return
}

// class: XMLDocument
type XMLDocument struct {
	Document
}

// XMLDocumentFromJS is casting a js.Value into XMLDocument.
func XMLDocumentFromJS(value js.Value) *XMLDocument {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &XMLDocument{}
	ret.Value_JS = value
	return ret
}

// XMLDocumentFromJS is casting from something that holds a js.Value into XMLDocument.
func XMLDocumentFromWrapper(input core.Wrapper) *XMLDocument {
	return XMLDocumentFromJS(input.JSValue())
}
