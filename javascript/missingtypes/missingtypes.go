// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package missingtypes

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
)

// using following types:

// source idl files:
// missingtypes.idl

// transform files:
// missingtypes.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// class: Date
type Date struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Date) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// DateFromJS is casting a js.Value into Date.
func DateFromJS(value js.Value) *Date {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Date{}
	ret.Value_JS = value
	return ret
}

// DateFromJS is casting from something that holds a js.Value into Date.
func DateFromWrapper(input core.Wrapper) *Date {
	return DateFromJS(input.JSValue())
}

// class: Dictionary
type Dictionary struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Dictionary) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// DictionaryFromJS is casting a js.Value into Dictionary.
func DictionaryFromJS(value js.Value) *Dictionary {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Dictionary{}
	ret.Value_JS = value
	return ret
}

// DictionaryFromJS is casting from something that holds a js.Value into Dictionary.
func DictionaryFromWrapper(input core.Wrapper) *Dictionary {
	return DictionaryFromJS(input.JSValue())
}

// class: WritableStream
type WritableStream struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *WritableStream) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// WritableStreamFromJS is casting a js.Value into WritableStream.
func WritableStreamFromJS(value js.Value) *WritableStream {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WritableStream{}
	ret.Value_JS = value
	return ret
}

// WritableStreamFromJS is casting from something that holds a js.Value into WritableStream.
func WritableStreamFromWrapper(input core.Wrapper) *WritableStream {
	return WritableStreamFromJS(input.JSValue())
}
