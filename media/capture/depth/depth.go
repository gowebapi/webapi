// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package depth

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// javascript.Float32Array

// source idl files:
// mediacapture-depth.idl

// transform files:
// mediacapture-depth.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: DistortionCoefficients
type DistortionCoefficients struct {
	K1 float64
	K2 float64
	P1 float64
	P2 float64
	K3 float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *DistortionCoefficients) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.K1
	out.Set("k1", value0)
	value1 := _this.K2
	out.Set("k2", value1)
	value2 := _this.P1
	out.Set("p1", value2)
	value3 := _this.P2
	out.Set("p2", value3)
	value4 := _this.K3
	out.Set("k3", value4)
	return out
}

// DistortionCoefficientsFromJS is allocating a new
// DistortionCoefficients object and copy all values in the value javascript object.
func DistortionCoefficientsFromJS(value js.Value) *DistortionCoefficients {
	var out DistortionCoefficients
	var (
		value0 float64 // javascript: double {k1 K1 k1}
		value1 float64 // javascript: double {k2 K2 k2}
		value2 float64 // javascript: double {p1 P1 p1}
		value3 float64 // javascript: double {p2 P2 p2}
		value4 float64 // javascript: double {k3 K3 k3}
	)
	value0 = (value.Get("k1")).Float()
	out.K1 = value0
	value1 = (value.Get("k2")).Float()
	out.K2 = value1
	value2 = (value.Get("p1")).Float()
	out.P1 = value2
	value3 = (value.Get("p2")).Float()
	out.P2 = value3
	value4 = (value.Get("k3")).Float()
	out.K3 = value4
	return &out
}

// dictionary: Transformation
type Transformation struct {
	TransformationMatrix *javascript.Float32Array
	VideoDeviceId        string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *Transformation) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.TransformationMatrix.JSValue()
	out.Set("transformationMatrix", value0)
	value1 := _this.VideoDeviceId
	out.Set("videoDeviceId", value1)
	return out
}

// TransformationFromJS is allocating a new
// Transformation object and copy all values in the value javascript object.
func TransformationFromJS(value js.Value) *Transformation {
	var out Transformation
	var (
		value0 *javascript.Float32Array // javascript: Float32Array {transformationMatrix TransformationMatrix transformationMatrix}
		value1 string                   // javascript: DOMString {videoDeviceId VideoDeviceId videoDeviceId}
	)
	value0 = javascript.Float32ArrayFromJS(value.Get("transformationMatrix"))
	out.TransformationMatrix = value0
	value1 = (value.Get("videoDeviceId")).String()
	out.VideoDeviceId = value1
	return &out
}
