// Code generated by webidl-bind. DO NOT EDIT.

package stats

import "syscall/js"

import (
	"github.com/gowebapi/webapi/media/webrtc"
)

// using following types:
// webrtc.DataChannelState
// webrtc.DtlsTransportState
// webrtc.IceCandidateType
// webrtc.IceRole
// webrtc.PriorityType
// webrtc.StatsType

// source idl files:
// webrtc-stats.idl

// transform files:
// webrtc-stats.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: RTCCodecType
type CodecType int

const (
	EncodeRTCCodecType CodecType = iota
	DecodeRTCCodecType
)

var rTCCodecTypeToWasmTable = []string{
	"encode", "decode",
}

var rTCCodecTypeFromWasmTable = map[string]CodecType{
	"encode": EncodeRTCCodecType, "decode": DecodeRTCCodecType,
}

// JSValue is converting this enum into a javascript object
func (this *CodecType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CodecType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(rTCCodecTypeToWasmTable) {
		return rTCCodecTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// CodecTypeFromJS is converting a javascript value into
// a CodecType enum value.
func CodecTypeFromJS(value js.Value) CodecType {
	key := value.String()
	conv, ok := rTCCodecTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: RTCNetworkType
type NetworkType int

const (
	BluetoothRTCNetworkType NetworkType = iota
	CellularRTCNetworkType
	EthernetRTCNetworkType
	WifiRTCNetworkType
	WimaxRTCNetworkType
	VpnRTCNetworkType
	UnknownRTCNetworkType
)

var rTCNetworkTypeToWasmTable = []string{
	"bluetooth", "cellular", "ethernet", "wifi", "wimax", "vpn", "unknown",
}

var rTCNetworkTypeFromWasmTable = map[string]NetworkType{
	"bluetooth": BluetoothRTCNetworkType, "cellular": CellularRTCNetworkType, "ethernet": EthernetRTCNetworkType, "wifi": WifiRTCNetworkType, "wimax": WimaxRTCNetworkType, "vpn": VpnRTCNetworkType, "unknown": UnknownRTCNetworkType,
}

// JSValue is converting this enum into a javascript object
func (this *NetworkType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this NetworkType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(rTCNetworkTypeToWasmTable) {
		return rTCNetworkTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// NetworkTypeFromJS is converting a javascript value into
// a NetworkType enum value.
func NetworkTypeFromJS(value js.Value) NetworkType {
	key := value.String()
	conv, ok := rTCNetworkTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: RTCQualityLimitationReason
type QualityLimitationReason int

const (
	NoneRTCQualityLimitationReason QualityLimitationReason = iota
	CpuRTCQualityLimitationReason
	BandwidthRTCQualityLimitationReason
	OtherRTCQualityLimitationReason
)

var rTCQualityLimitationReasonToWasmTable = []string{
	"none", "cpu", "bandwidth", "other",
}

var rTCQualityLimitationReasonFromWasmTable = map[string]QualityLimitationReason{
	"none": NoneRTCQualityLimitationReason, "cpu": CpuRTCQualityLimitationReason, "bandwidth": BandwidthRTCQualityLimitationReason, "other": OtherRTCQualityLimitationReason,
}

// JSValue is converting this enum into a javascript object
func (this *QualityLimitationReason) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this QualityLimitationReason) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(rTCQualityLimitationReasonToWasmTable) {
		return rTCQualityLimitationReasonToWasmTable[idx]
	}
	panic("unknown input value")
}

// QualityLimitationReasonFromJS is converting a javascript value into
// a QualityLimitationReason enum value.
func QualityLimitationReasonFromJS(value js.Value) QualityLimitationReason {
	key := value.String()
	conv, ok := rTCQualityLimitationReasonFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: RTCStatsIceCandidatePairState
type StatsIceCandidatePairState int

const (
	FrozenRTCStatsIceCandidatePairState StatsIceCandidatePairState = iota
	WaitingRTCStatsIceCandidatePairState
	InProgressRTCStatsIceCandidatePairState
	FailedRTCStatsIceCandidatePairState
	SucceededRTCStatsIceCandidatePairState
)

var rTCStatsIceCandidatePairStateToWasmTable = []string{
	"frozen", "waiting", "in-progress", "failed", "succeeded",
}

var rTCStatsIceCandidatePairStateFromWasmTable = map[string]StatsIceCandidatePairState{
	"frozen": FrozenRTCStatsIceCandidatePairState, "waiting": WaitingRTCStatsIceCandidatePairState, "in-progress": InProgressRTCStatsIceCandidatePairState, "failed": FailedRTCStatsIceCandidatePairState, "succeeded": SucceededRTCStatsIceCandidatePairState,
}

// JSValue is converting this enum into a javascript object
func (this *StatsIceCandidatePairState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this StatsIceCandidatePairState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(rTCStatsIceCandidatePairStateToWasmTable) {
		return rTCStatsIceCandidatePairStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// StatsIceCandidatePairStateFromJS is converting a javascript value into
// a StatsIceCandidatePairState enum value.
func StatsIceCandidatePairStateFromJS(value js.Value) StatsIceCandidatePairState {
	key := value.String()
	conv, ok := rTCStatsIceCandidatePairStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: RTCAudioHandlerStats
type AudioHandlerStats struct {
	Timestamp            float64
	Type                 webrtc.StatsType
	Id                   string
	TrackIdentifier      string
	RemoteSource         bool
	Ended                bool
	Kind                 string
	Priority             webrtc.PriorityType
	AudioLevel           float64
	TotalAudioEnergy     float64
	VoiceActivityFlag    bool
	TotalSamplesDuration float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AudioHandlerStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.AudioLevel
	out.Set("audioLevel", value8)
	value9 := _this.TotalAudioEnergy
	out.Set("totalAudioEnergy", value9)
	value10 := _this.VoiceActivityFlag
	out.Set("voiceActivityFlag", value10)
	value11 := _this.TotalSamplesDuration
	out.Set("totalSamplesDuration", value11)
	return out
}

// AudioHandlerStatsFromJS is allocating a new
// AudioHandlerStats object and copy all values in the value javascript object.
func AudioHandlerStatsFromJS(value js.Value) *AudioHandlerStats {
	var out AudioHandlerStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  float64             // javascript: double {audioLevel AudioLevel audioLevel}
		value9  float64             // javascript: double {totalAudioEnergy TotalAudioEnergy totalAudioEnergy}
		value10 bool                // javascript: boolean {voiceActivityFlag VoiceActivityFlag voiceActivityFlag}
		value11 float64             // javascript: double {totalSamplesDuration TotalSamplesDuration totalSamplesDuration}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (value.Get("audioLevel")).Float()
	out.AudioLevel = value8
	value9 = (value.Get("totalAudioEnergy")).Float()
	out.TotalAudioEnergy = value9
	value10 = (value.Get("voiceActivityFlag")).Bool()
	out.VoiceActivityFlag = value10
	value11 = (value.Get("totalSamplesDuration")).Float()
	out.TotalSamplesDuration = value11
	return &out
}

// dictionary: RTCAudioReceiverStats
type AudioReceiverStats struct {
	Timestamp                 float64
	Type                      webrtc.StatsType
	Id                        string
	TrackIdentifier           string
	RemoteSource              bool
	Ended                     bool
	Kind                      string
	Priority                  webrtc.PriorityType
	AudioLevel                float64
	TotalAudioEnergy          float64
	VoiceActivityFlag         bool
	TotalSamplesDuration      float64
	EstimatedPlayoutTimestamp float64
	JitterBufferDelay         float64
	JitterBufferEmittedCount  int
	TotalSamplesReceived      int
	ConcealedSamples          int
	ConcealmentEvents         int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AudioReceiverStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.AudioLevel
	out.Set("audioLevel", value8)
	value9 := _this.TotalAudioEnergy
	out.Set("totalAudioEnergy", value9)
	value10 := _this.VoiceActivityFlag
	out.Set("voiceActivityFlag", value10)
	value11 := _this.TotalSamplesDuration
	out.Set("totalSamplesDuration", value11)
	value12 := _this.EstimatedPlayoutTimestamp
	out.Set("estimatedPlayoutTimestamp", value12)
	value13 := _this.JitterBufferDelay
	out.Set("jitterBufferDelay", value13)
	value14 := _this.JitterBufferEmittedCount
	out.Set("jitterBufferEmittedCount", value14)
	value15 := _this.TotalSamplesReceived
	out.Set("totalSamplesReceived", value15)
	value16 := _this.ConcealedSamples
	out.Set("concealedSamples", value16)
	value17 := _this.ConcealmentEvents
	out.Set("concealmentEvents", value17)
	return out
}

// AudioReceiverStatsFromJS is allocating a new
// AudioReceiverStats object and copy all values in the value javascript object.
func AudioReceiverStatsFromJS(value js.Value) *AudioReceiverStats {
	var out AudioReceiverStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  float64             // javascript: double {audioLevel AudioLevel audioLevel}
		value9  float64             // javascript: double {totalAudioEnergy TotalAudioEnergy totalAudioEnergy}
		value10 bool                // javascript: boolean {voiceActivityFlag VoiceActivityFlag voiceActivityFlag}
		value11 float64             // javascript: double {totalSamplesDuration TotalSamplesDuration totalSamplesDuration}
		value12 float64             // javascript: double {estimatedPlayoutTimestamp EstimatedPlayoutTimestamp estimatedPlayoutTimestamp}
		value13 float64             // javascript: double {jitterBufferDelay JitterBufferDelay jitterBufferDelay}
		value14 int                 // javascript: unsigned long long {jitterBufferEmittedCount JitterBufferEmittedCount jitterBufferEmittedCount}
		value15 int                 // javascript: unsigned long long {totalSamplesReceived TotalSamplesReceived totalSamplesReceived}
		value16 int                 // javascript: unsigned long long {concealedSamples ConcealedSamples concealedSamples}
		value17 int                 // javascript: unsigned long long {concealmentEvents ConcealmentEvents concealmentEvents}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (value.Get("audioLevel")).Float()
	out.AudioLevel = value8
	value9 = (value.Get("totalAudioEnergy")).Float()
	out.TotalAudioEnergy = value9
	value10 = (value.Get("voiceActivityFlag")).Bool()
	out.VoiceActivityFlag = value10
	value11 = (value.Get("totalSamplesDuration")).Float()
	out.TotalSamplesDuration = value11
	value12 = (value.Get("estimatedPlayoutTimestamp")).Float()
	out.EstimatedPlayoutTimestamp = value12
	value13 = (value.Get("jitterBufferDelay")).Float()
	out.JitterBufferDelay = value13
	value14 = (value.Get("jitterBufferEmittedCount")).Int()
	out.JitterBufferEmittedCount = value14
	value15 = (value.Get("totalSamplesReceived")).Int()
	out.TotalSamplesReceived = value15
	value16 = (value.Get("concealedSamples")).Int()
	out.ConcealedSamples = value16
	value17 = (value.Get("concealmentEvents")).Int()
	out.ConcealmentEvents = value17
	return &out
}

// dictionary: RTCAudioSenderStats
type AudioSenderStats struct {
	Timestamp                 float64
	Type                      webrtc.StatsType
	Id                        string
	TrackIdentifier           string
	RemoteSource              bool
	Ended                     bool
	Kind                      string
	Priority                  webrtc.PriorityType
	AudioLevel                float64
	TotalAudioEnergy          float64
	VoiceActivityFlag         bool
	TotalSamplesDuration      float64
	EchoReturnLoss            float64
	EchoReturnLossEnhancement float64
	TotalSamplesSent          int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AudioSenderStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.AudioLevel
	out.Set("audioLevel", value8)
	value9 := _this.TotalAudioEnergy
	out.Set("totalAudioEnergy", value9)
	value10 := _this.VoiceActivityFlag
	out.Set("voiceActivityFlag", value10)
	value11 := _this.TotalSamplesDuration
	out.Set("totalSamplesDuration", value11)
	value12 := _this.EchoReturnLoss
	out.Set("echoReturnLoss", value12)
	value13 := _this.EchoReturnLossEnhancement
	out.Set("echoReturnLossEnhancement", value13)
	value14 := _this.TotalSamplesSent
	out.Set("totalSamplesSent", value14)
	return out
}

// AudioSenderStatsFromJS is allocating a new
// AudioSenderStats object and copy all values in the value javascript object.
func AudioSenderStatsFromJS(value js.Value) *AudioSenderStats {
	var out AudioSenderStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  float64             // javascript: double {audioLevel AudioLevel audioLevel}
		value9  float64             // javascript: double {totalAudioEnergy TotalAudioEnergy totalAudioEnergy}
		value10 bool                // javascript: boolean {voiceActivityFlag VoiceActivityFlag voiceActivityFlag}
		value11 float64             // javascript: double {totalSamplesDuration TotalSamplesDuration totalSamplesDuration}
		value12 float64             // javascript: double {echoReturnLoss EchoReturnLoss echoReturnLoss}
		value13 float64             // javascript: double {echoReturnLossEnhancement EchoReturnLossEnhancement echoReturnLossEnhancement}
		value14 int                 // javascript: unsigned long long {totalSamplesSent TotalSamplesSent totalSamplesSent}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (value.Get("audioLevel")).Float()
	out.AudioLevel = value8
	value9 = (value.Get("totalAudioEnergy")).Float()
	out.TotalAudioEnergy = value9
	value10 = (value.Get("voiceActivityFlag")).Bool()
	out.VoiceActivityFlag = value10
	value11 = (value.Get("totalSamplesDuration")).Float()
	out.TotalSamplesDuration = value11
	value12 = (value.Get("echoReturnLoss")).Float()
	out.EchoReturnLoss = value12
	value13 = (value.Get("echoReturnLossEnhancement")).Float()
	out.EchoReturnLossEnhancement = value13
	value14 = (value.Get("totalSamplesSent")).Int()
	out.TotalSamplesSent = value14
	return &out
}

// dictionary: RTCCertificateStats
type CertificateStats struct {
	Timestamp            float64
	Type                 webrtc.StatsType
	Id                   string
	Fingerprint          string
	FingerprintAlgorithm string
	Base64Certificate    string
	IssuerCertificateId  string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CertificateStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Fingerprint
	out.Set("fingerprint", value3)
	value4 := _this.FingerprintAlgorithm
	out.Set("fingerprintAlgorithm", value4)
	value5 := _this.Base64Certificate
	out.Set("base64Certificate", value5)
	value6 := _this.IssuerCertificateId
	out.Set("issuerCertificateId", value6)
	return out
}

// CertificateStatsFromJS is allocating a new
// CertificateStats object and copy all values in the value javascript object.
func CertificateStatsFromJS(value js.Value) *CertificateStats {
	var out CertificateStats
	var (
		value0 float64          // javascript: double {timestamp Timestamp timestamp}
		value1 webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2 string           // javascript: DOMString {id Id id}
		value3 string           // javascript: DOMString {fingerprint Fingerprint fingerprint}
		value4 string           // javascript: DOMString {fingerprintAlgorithm FingerprintAlgorithm fingerprintAlgorithm}
		value5 string           // javascript: DOMString {base64Certificate Base64Certificate base64Certificate}
		value6 string           // javascript: DOMString {issuerCertificateId IssuerCertificateId issuerCertificateId}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("fingerprint")).String()
	out.Fingerprint = value3
	value4 = (value.Get("fingerprintAlgorithm")).String()
	out.FingerprintAlgorithm = value4
	value5 = (value.Get("base64Certificate")).String()
	out.Base64Certificate = value5
	value6 = (value.Get("issuerCertificateId")).String()
	out.IssuerCertificateId = value6
	return &out
}

// dictionary: RTCCodecStats
type CodecStats struct {
	Timestamp      float64
	Type           webrtc.StatsType
	Id             string
	PayloadType    uint
	CodecType      CodecType
	TransportId    string
	MimeType       string
	ClockRate      uint
	Channels       uint
	SdpFmtpLine    string
	Implementation string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CodecStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.PayloadType
	out.Set("payloadType", value3)
	value4 := _this.CodecType.JSValue()
	out.Set("codecType", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.MimeType
	out.Set("mimeType", value6)
	value7 := _this.ClockRate
	out.Set("clockRate", value7)
	value8 := _this.Channels
	out.Set("channels", value8)
	value9 := _this.SdpFmtpLine
	out.Set("sdpFmtpLine", value9)
	value10 := _this.Implementation
	out.Set("implementation", value10)
	return out
}

// CodecStatsFromJS is allocating a new
// CodecStats object and copy all values in the value javascript object.
func CodecStatsFromJS(value js.Value) *CodecStats {
	var out CodecStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {payloadType PayloadType payloadType}
		value4  CodecType        // javascript: RTCCodecType {codecType CodecType codecType}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {mimeType MimeType mimeType}
		value7  uint             // javascript: unsigned long {clockRate ClockRate clockRate}
		value8  uint             // javascript: unsigned long {channels Channels channels}
		value9  string           // javascript: DOMString {sdpFmtpLine SdpFmtpLine sdpFmtpLine}
		value10 string           // javascript: DOMString {implementation Implementation implementation}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("payloadType")).Int())
	out.PayloadType = value3
	value4 = CodecTypeFromJS(value.Get("codecType"))
	out.CodecType = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("mimeType")).String()
	out.MimeType = value6
	value7 = (uint)((value.Get("clockRate")).Int())
	out.ClockRate = value7
	value8 = (uint)((value.Get("channels")).Int())
	out.Channels = value8
	value9 = (value.Get("sdpFmtpLine")).String()
	out.SdpFmtpLine = value9
	value10 = (value.Get("implementation")).String()
	out.Implementation = value10
	return &out
}

// dictionary: RTCDataChannelStats
type DataChannelStats struct {
	Timestamp             float64
	Type                  webrtc.StatsType
	Id                    string
	Label                 string
	Protocol              string
	DataChannelIdentifier int
	TransportId           string
	State                 webrtc.DataChannelState
	MessagesSent          uint
	BytesSent             int
	MessagesReceived      uint
	BytesReceived         int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *DataChannelStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Label
	out.Set("label", value3)
	value4 := _this.Protocol
	out.Set("protocol", value4)
	value5 := _this.DataChannelIdentifier
	out.Set("dataChannelIdentifier", value5)
	value6 := _this.TransportId
	out.Set("transportId", value6)
	value7 := _this.State.JSValue()
	out.Set("state", value7)
	value8 := _this.MessagesSent
	out.Set("messagesSent", value8)
	value9 := _this.BytesSent
	out.Set("bytesSent", value9)
	value10 := _this.MessagesReceived
	out.Set("messagesReceived", value10)
	value11 := _this.BytesReceived
	out.Set("bytesReceived", value11)
	return out
}

// DataChannelStatsFromJS is allocating a new
// DataChannelStats object and copy all values in the value javascript object.
func DataChannelStatsFromJS(value js.Value) *DataChannelStats {
	var out DataChannelStats
	var (
		value0  float64                 // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType        // javascript: RTCStatsType {type Type _type}
		value2  string                  // javascript: DOMString {id Id id}
		value3  string                  // javascript: DOMString {label Label label}
		value4  string                  // javascript: DOMString {protocol Protocol protocol}
		value5  int                     // javascript: long {dataChannelIdentifier DataChannelIdentifier dataChannelIdentifier}
		value6  string                  // javascript: DOMString {transportId TransportId transportId}
		value7  webrtc.DataChannelState // javascript: RTCDataChannelState {state State state}
		value8  uint                    // javascript: unsigned long {messagesSent MessagesSent messagesSent}
		value9  int                     // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value10 uint                    // javascript: unsigned long {messagesReceived MessagesReceived messagesReceived}
		value11 int                     // javascript: unsigned long long {bytesReceived BytesReceived bytesReceived}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("label")).String()
	out.Label = value3
	value4 = (value.Get("protocol")).String()
	out.Protocol = value4
	value5 = (value.Get("dataChannelIdentifier")).Int()
	out.DataChannelIdentifier = value5
	value6 = (value.Get("transportId")).String()
	out.TransportId = value6
	value7 = webrtc.DataChannelStateFromJS(value.Get("state"))
	out.State = value7
	value8 = (uint)((value.Get("messagesSent")).Int())
	out.MessagesSent = value8
	value9 = (value.Get("bytesSent")).Int()
	out.BytesSent = value9
	value10 = (uint)((value.Get("messagesReceived")).Int())
	out.MessagesReceived = value10
	value11 = (value.Get("bytesReceived")).Int()
	out.BytesReceived = value11
	return &out
}

// dictionary: RTCIceCandidatePairStats
type IceCandidatePairStats struct {
	Timestamp                   float64
	Type                        webrtc.StatsType
	Id                          string
	TransportId                 string
	LocalCandidateId            string
	RemoteCandidateId           string
	State                       StatsIceCandidatePairState
	Nominated                   bool
	PacketsSent                 uint
	PacketsReceived             uint
	BytesSent                   int
	BytesReceived               int
	LastPacketSentTimestamp     float64
	LastPacketReceivedTimestamp float64
	FirstRequestTimestamp       float64
	LastRequestTimestamp        float64
	LastResponseTimestamp       float64
	TotalRoundTripTime          float64
	CurrentRoundTripTime        float64
	AvailableOutgoingBitrate    float64
	AvailableIncomingBitrate    float64
	CircuitBreakerTriggerCount  uint
	RequestsReceived            int
	RequestsSent                int
	ResponsesReceived           int
	ResponsesSent               int
	RetransmissionsReceived     int
	RetransmissionsSent         int
	ConsentRequestsSent         int
	ConsentExpiredTimestamp     float64
	TotalRtt                    float64
	CurrentRtt                  float64
	Priority                    int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IceCandidatePairStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TransportId
	out.Set("transportId", value3)
	value4 := _this.LocalCandidateId
	out.Set("localCandidateId", value4)
	value5 := _this.RemoteCandidateId
	out.Set("remoteCandidateId", value5)
	value6 := _this.State.JSValue()
	out.Set("state", value6)
	value7 := _this.Nominated
	out.Set("nominated", value7)
	value8 := _this.PacketsSent
	out.Set("packetsSent", value8)
	value9 := _this.PacketsReceived
	out.Set("packetsReceived", value9)
	value10 := _this.BytesSent
	out.Set("bytesSent", value10)
	value11 := _this.BytesReceived
	out.Set("bytesReceived", value11)
	value12 := _this.LastPacketSentTimestamp
	out.Set("lastPacketSentTimestamp", value12)
	value13 := _this.LastPacketReceivedTimestamp
	out.Set("lastPacketReceivedTimestamp", value13)
	value14 := _this.FirstRequestTimestamp
	out.Set("firstRequestTimestamp", value14)
	value15 := _this.LastRequestTimestamp
	out.Set("lastRequestTimestamp", value15)
	value16 := _this.LastResponseTimestamp
	out.Set("lastResponseTimestamp", value16)
	value17 := _this.TotalRoundTripTime
	out.Set("totalRoundTripTime", value17)
	value18 := _this.CurrentRoundTripTime
	out.Set("currentRoundTripTime", value18)
	value19 := _this.AvailableOutgoingBitrate
	out.Set("availableOutgoingBitrate", value19)
	value20 := _this.AvailableIncomingBitrate
	out.Set("availableIncomingBitrate", value20)
	value21 := _this.CircuitBreakerTriggerCount
	out.Set("circuitBreakerTriggerCount", value21)
	value22 := _this.RequestsReceived
	out.Set("requestsReceived", value22)
	value23 := _this.RequestsSent
	out.Set("requestsSent", value23)
	value24 := _this.ResponsesReceived
	out.Set("responsesReceived", value24)
	value25 := _this.ResponsesSent
	out.Set("responsesSent", value25)
	value26 := _this.RetransmissionsReceived
	out.Set("retransmissionsReceived", value26)
	value27 := _this.RetransmissionsSent
	out.Set("retransmissionsSent", value27)
	value28 := _this.ConsentRequestsSent
	out.Set("consentRequestsSent", value28)
	value29 := _this.ConsentExpiredTimestamp
	out.Set("consentExpiredTimestamp", value29)
	value30 := _this.TotalRtt
	out.Set("totalRtt", value30)
	value31 := _this.CurrentRtt
	out.Set("currentRtt", value31)
	value32 := _this.Priority
	out.Set("priority", value32)
	return out
}

// IceCandidatePairStatsFromJS is allocating a new
// IceCandidatePairStats object and copy all values in the value javascript object.
func IceCandidatePairStatsFromJS(value js.Value) *IceCandidatePairStats {
	var out IceCandidatePairStats
	var (
		value0  float64                    // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType           // javascript: RTCStatsType {type Type _type}
		value2  string                     // javascript: DOMString {id Id id}
		value3  string                     // javascript: DOMString {transportId TransportId transportId}
		value4  string                     // javascript: DOMString {localCandidateId LocalCandidateId localCandidateId}
		value5  string                     // javascript: DOMString {remoteCandidateId RemoteCandidateId remoteCandidateId}
		value6  StatsIceCandidatePairState // javascript: RTCStatsIceCandidatePairState {state State state}
		value7  bool                       // javascript: boolean {nominated Nominated nominated}
		value8  uint                       // javascript: unsigned long {packetsSent PacketsSent packetsSent}
		value9  uint                       // javascript: unsigned long {packetsReceived PacketsReceived packetsReceived}
		value10 int                        // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value11 int                        // javascript: unsigned long long {bytesReceived BytesReceived bytesReceived}
		value12 float64                    // javascript: double {lastPacketSentTimestamp LastPacketSentTimestamp lastPacketSentTimestamp}
		value13 float64                    // javascript: double {lastPacketReceivedTimestamp LastPacketReceivedTimestamp lastPacketReceivedTimestamp}
		value14 float64                    // javascript: double {firstRequestTimestamp FirstRequestTimestamp firstRequestTimestamp}
		value15 float64                    // javascript: double {lastRequestTimestamp LastRequestTimestamp lastRequestTimestamp}
		value16 float64                    // javascript: double {lastResponseTimestamp LastResponseTimestamp lastResponseTimestamp}
		value17 float64                    // javascript: double {totalRoundTripTime TotalRoundTripTime totalRoundTripTime}
		value18 float64                    // javascript: double {currentRoundTripTime CurrentRoundTripTime currentRoundTripTime}
		value19 float64                    // javascript: double {availableOutgoingBitrate AvailableOutgoingBitrate availableOutgoingBitrate}
		value20 float64                    // javascript: double {availableIncomingBitrate AvailableIncomingBitrate availableIncomingBitrate}
		value21 uint                       // javascript: unsigned long {circuitBreakerTriggerCount CircuitBreakerTriggerCount circuitBreakerTriggerCount}
		value22 int                        // javascript: unsigned long long {requestsReceived RequestsReceived requestsReceived}
		value23 int                        // javascript: unsigned long long {requestsSent RequestsSent requestsSent}
		value24 int                        // javascript: unsigned long long {responsesReceived ResponsesReceived responsesReceived}
		value25 int                        // javascript: unsigned long long {responsesSent ResponsesSent responsesSent}
		value26 int                        // javascript: unsigned long long {retransmissionsReceived RetransmissionsReceived retransmissionsReceived}
		value27 int                        // javascript: unsigned long long {retransmissionsSent RetransmissionsSent retransmissionsSent}
		value28 int                        // javascript: unsigned long long {consentRequestsSent ConsentRequestsSent consentRequestsSent}
		value29 float64                    // javascript: double {consentExpiredTimestamp ConsentExpiredTimestamp consentExpiredTimestamp}
		value30 float64                    // javascript: double {totalRtt TotalRtt totalRtt}
		value31 float64                    // javascript: double {currentRtt CurrentRtt currentRtt}
		value32 int                        // javascript: unsigned long long {priority Priority priority}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("transportId")).String()
	out.TransportId = value3
	value4 = (value.Get("localCandidateId")).String()
	out.LocalCandidateId = value4
	value5 = (value.Get("remoteCandidateId")).String()
	out.RemoteCandidateId = value5
	value6 = StatsIceCandidatePairStateFromJS(value.Get("state"))
	out.State = value6
	value7 = (value.Get("nominated")).Bool()
	out.Nominated = value7
	value8 = (uint)((value.Get("packetsSent")).Int())
	out.PacketsSent = value8
	value9 = (uint)((value.Get("packetsReceived")).Int())
	out.PacketsReceived = value9
	value10 = (value.Get("bytesSent")).Int()
	out.BytesSent = value10
	value11 = (value.Get("bytesReceived")).Int()
	out.BytesReceived = value11
	value12 = (value.Get("lastPacketSentTimestamp")).Float()
	out.LastPacketSentTimestamp = value12
	value13 = (value.Get("lastPacketReceivedTimestamp")).Float()
	out.LastPacketReceivedTimestamp = value13
	value14 = (value.Get("firstRequestTimestamp")).Float()
	out.FirstRequestTimestamp = value14
	value15 = (value.Get("lastRequestTimestamp")).Float()
	out.LastRequestTimestamp = value15
	value16 = (value.Get("lastResponseTimestamp")).Float()
	out.LastResponseTimestamp = value16
	value17 = (value.Get("totalRoundTripTime")).Float()
	out.TotalRoundTripTime = value17
	value18 = (value.Get("currentRoundTripTime")).Float()
	out.CurrentRoundTripTime = value18
	value19 = (value.Get("availableOutgoingBitrate")).Float()
	out.AvailableOutgoingBitrate = value19
	value20 = (value.Get("availableIncomingBitrate")).Float()
	out.AvailableIncomingBitrate = value20
	value21 = (uint)((value.Get("circuitBreakerTriggerCount")).Int())
	out.CircuitBreakerTriggerCount = value21
	value22 = (value.Get("requestsReceived")).Int()
	out.RequestsReceived = value22
	value23 = (value.Get("requestsSent")).Int()
	out.RequestsSent = value23
	value24 = (value.Get("responsesReceived")).Int()
	out.ResponsesReceived = value24
	value25 = (value.Get("responsesSent")).Int()
	out.ResponsesSent = value25
	value26 = (value.Get("retransmissionsReceived")).Int()
	out.RetransmissionsReceived = value26
	value27 = (value.Get("retransmissionsSent")).Int()
	out.RetransmissionsSent = value27
	value28 = (value.Get("consentRequestsSent")).Int()
	out.ConsentRequestsSent = value28
	value29 = (value.Get("consentExpiredTimestamp")).Float()
	out.ConsentExpiredTimestamp = value29
	value30 = (value.Get("totalRtt")).Float()
	out.TotalRtt = value30
	value31 = (value.Get("currentRtt")).Float()
	out.CurrentRtt = value31
	value32 = (value.Get("priority")).Int()
	out.Priority = value32
	return &out
}

// dictionary: RTCIceCandidateStats
type IceCandidateStats struct {
	Timestamp     float64
	Type          webrtc.StatsType
	Id            string
	TransportId   string
	NetworkType   NetworkType
	Address       *string
	Port          int
	Protocol      string
	CandidateType webrtc.IceCandidateType
	Priority      int
	Url           string
	RelayProtocol string
	Deleted       bool
	IsRemote      bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *IceCandidateStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TransportId
	out.Set("transportId", value3)
	value4 := _this.NetworkType.JSValue()
	out.Set("networkType", value4)

	var value5 interface{}
	if _this.Address != nil {
		value5 = *(_this.Address)
	} else {
		value5 = nil
	}
	out.Set("address", value5)
	value6 := _this.Port
	out.Set("port", value6)
	value7 := _this.Protocol
	out.Set("protocol", value7)
	value8 := _this.CandidateType.JSValue()
	out.Set("candidateType", value8)
	value9 := _this.Priority
	out.Set("priority", value9)
	value10 := _this.Url
	out.Set("url", value10)
	value11 := _this.RelayProtocol
	out.Set("relayProtocol", value11)
	value12 := _this.Deleted
	out.Set("deleted", value12)
	value13 := _this.IsRemote
	out.Set("isRemote", value13)
	return out
}

// IceCandidateStatsFromJS is allocating a new
// IceCandidateStats object and copy all values in the value javascript object.
func IceCandidateStatsFromJS(value js.Value) *IceCandidateStats {
	var out IceCandidateStats
	var (
		value0  float64                 // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType        // javascript: RTCStatsType {type Type _type}
		value2  string                  // javascript: DOMString {id Id id}
		value3  string                  // javascript: DOMString {transportId TransportId transportId}
		value4  NetworkType             // javascript: RTCNetworkType {networkType NetworkType networkType}
		value5  *string                 // javascript: DOMString {address Address address}
		value6  int                     // javascript: long {port Port port}
		value7  string                  // javascript: DOMString {protocol Protocol protocol}
		value8  webrtc.IceCandidateType // javascript: RTCIceCandidateType {candidateType CandidateType candidateType}
		value9  int                     // javascript: long {priority Priority priority}
		value10 string                  // javascript: DOMString {url Url url}
		value11 string                  // javascript: DOMString {relayProtocol RelayProtocol relayProtocol}
		value12 bool                    // javascript: boolean {deleted Deleted deleted}
		value13 bool                    // javascript: boolean {isRemote IsRemote isRemote}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("transportId")).String()
	out.TransportId = value3
	value4 = NetworkTypeFromJS(value.Get("networkType"))
	out.NetworkType = value4
	if value.Get("address").Type() != js.TypeNull && value.Get("address").Type() != js.TypeUndefined {
		__tmp := (value.Get("address")).String()
		value5 = &__tmp
	}
	out.Address = value5
	value6 = (value.Get("port")).Int()
	out.Port = value6
	value7 = (value.Get("protocol")).String()
	out.Protocol = value7
	value8 = webrtc.IceCandidateTypeFromJS(value.Get("candidateType"))
	out.CandidateType = value8
	value9 = (value.Get("priority")).Int()
	out.Priority = value9
	value10 = (value.Get("url")).String()
	out.Url = value10
	value11 = (value.Get("relayProtocol")).String()
	out.RelayProtocol = value11
	value12 = (value.Get("deleted")).Bool()
	out.Deleted = value12
	value13 = (value.Get("isRemote")).Bool()
	out.IsRemote = value13
	return &out
}

// dictionary: RTCInboundRtpStreamStats
type InboundRtpStreamStats struct {
	Timestamp                   float64
	Type                        webrtc.StatsType
	Id                          string
	Ssrc                        uint
	Kind                        string
	TransportId                 string
	CodecId                     string
	FirCount                    uint
	PliCount                    uint
	NackCount                   uint
	SliCount                    uint
	QpSum                       int
	MediaType                   string
	AverageRTCPInterval         float64
	PacketsReceived             uint
	PacketsLost                 int
	Jitter                      float64
	PacketsDiscarded            uint
	PacketsRepaired             uint
	BurstPacketsLost            uint
	BurstPacketsDiscarded       uint
	BurstLossCount              uint
	BurstDiscardCount           uint
	BurstLossRate               float64
	BurstDiscardRate            float64
	GapLossRate                 float64
	GapDiscardRate              float64
	TrackId                     string
	ReceiverId                  string
	RemoteId                    string
	FramesDecoded               uint
	LastPacketReceivedTimestamp float64
	AverageRtcpInterval         float64
	FecPacketsReceived          uint
	BytesReceived               int
	PacketsFailedDecryption     uint
	PacketsDuplicated           uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *InboundRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsReceived
	out.Set("packetsReceived", value14)
	value15 := _this.PacketsLost
	out.Set("packetsLost", value15)
	value16 := _this.Jitter
	out.Set("jitter", value16)
	value17 := _this.PacketsDiscarded
	out.Set("packetsDiscarded", value17)
	value18 := _this.PacketsRepaired
	out.Set("packetsRepaired", value18)
	value19 := _this.BurstPacketsLost
	out.Set("burstPacketsLost", value19)
	value20 := _this.BurstPacketsDiscarded
	out.Set("burstPacketsDiscarded", value20)
	value21 := _this.BurstLossCount
	out.Set("burstLossCount", value21)
	value22 := _this.BurstDiscardCount
	out.Set("burstDiscardCount", value22)
	value23 := _this.BurstLossRate
	out.Set("burstLossRate", value23)
	value24 := _this.BurstDiscardRate
	out.Set("burstDiscardRate", value24)
	value25 := _this.GapLossRate
	out.Set("gapLossRate", value25)
	value26 := _this.GapDiscardRate
	out.Set("gapDiscardRate", value26)
	value27 := _this.TrackId
	out.Set("trackId", value27)
	value28 := _this.ReceiverId
	out.Set("receiverId", value28)
	value29 := _this.RemoteId
	out.Set("remoteId", value29)
	value30 := _this.FramesDecoded
	out.Set("framesDecoded", value30)
	value31 := _this.LastPacketReceivedTimestamp
	out.Set("lastPacketReceivedTimestamp", value31)
	value32 := _this.AverageRtcpInterval
	out.Set("averageRtcpInterval", value32)
	value33 := _this.FecPacketsReceived
	out.Set("fecPacketsReceived", value33)
	value34 := _this.BytesReceived
	out.Set("bytesReceived", value34)
	value35 := _this.PacketsFailedDecryption
	out.Set("packetsFailedDecryption", value35)
	value36 := _this.PacketsDuplicated
	out.Set("packetsDuplicated", value36)
	return out
}

// InboundRtpStreamStatsFromJS is allocating a new
// InboundRtpStreamStats object and copy all values in the value javascript object.
func InboundRtpStreamStatsFromJS(value js.Value) *InboundRtpStreamStats {
	var out InboundRtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint             // javascript: unsigned long {packetsReceived PacketsReceived packetsReceived}
		value15 int              // javascript: long {packetsLost PacketsLost packetsLost}
		value16 float64          // javascript: double {jitter Jitter jitter}
		value17 uint             // javascript: unsigned long {packetsDiscarded PacketsDiscarded packetsDiscarded}
		value18 uint             // javascript: unsigned long {packetsRepaired PacketsRepaired packetsRepaired}
		value19 uint             // javascript: unsigned long {burstPacketsLost BurstPacketsLost burstPacketsLost}
		value20 uint             // javascript: unsigned long {burstPacketsDiscarded BurstPacketsDiscarded burstPacketsDiscarded}
		value21 uint             // javascript: unsigned long {burstLossCount BurstLossCount burstLossCount}
		value22 uint             // javascript: unsigned long {burstDiscardCount BurstDiscardCount burstDiscardCount}
		value23 float64          // javascript: double {burstLossRate BurstLossRate burstLossRate}
		value24 float64          // javascript: double {burstDiscardRate BurstDiscardRate burstDiscardRate}
		value25 float64          // javascript: double {gapLossRate GapLossRate gapLossRate}
		value26 float64          // javascript: double {gapDiscardRate GapDiscardRate gapDiscardRate}
		value27 string           // javascript: DOMString {trackId TrackId trackId}
		value28 string           // javascript: DOMString {receiverId ReceiverId receiverId}
		value29 string           // javascript: DOMString {remoteId RemoteId remoteId}
		value30 uint             // javascript: unsigned long {framesDecoded FramesDecoded framesDecoded}
		value31 float64          // javascript: double {lastPacketReceivedTimestamp LastPacketReceivedTimestamp lastPacketReceivedTimestamp}
		value32 float64          // javascript: double {averageRtcpInterval AverageRtcpInterval averageRtcpInterval}
		value33 uint             // javascript: unsigned long {fecPacketsReceived FecPacketsReceived fecPacketsReceived}
		value34 int              // javascript: unsigned long long {bytesReceived BytesReceived bytesReceived}
		value35 uint             // javascript: unsigned long {packetsFailedDecryption PacketsFailedDecryption packetsFailedDecryption}
		value36 uint             // javascript: unsigned long {packetsDuplicated PacketsDuplicated packetsDuplicated}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsReceived")).Int())
	out.PacketsReceived = value14
	value15 = (value.Get("packetsLost")).Int()
	out.PacketsLost = value15
	value16 = (value.Get("jitter")).Float()
	out.Jitter = value16
	value17 = (uint)((value.Get("packetsDiscarded")).Int())
	out.PacketsDiscarded = value17
	value18 = (uint)((value.Get("packetsRepaired")).Int())
	out.PacketsRepaired = value18
	value19 = (uint)((value.Get("burstPacketsLost")).Int())
	out.BurstPacketsLost = value19
	value20 = (uint)((value.Get("burstPacketsDiscarded")).Int())
	out.BurstPacketsDiscarded = value20
	value21 = (uint)((value.Get("burstLossCount")).Int())
	out.BurstLossCount = value21
	value22 = (uint)((value.Get("burstDiscardCount")).Int())
	out.BurstDiscardCount = value22
	value23 = (value.Get("burstLossRate")).Float()
	out.BurstLossRate = value23
	value24 = (value.Get("burstDiscardRate")).Float()
	out.BurstDiscardRate = value24
	value25 = (value.Get("gapLossRate")).Float()
	out.GapLossRate = value25
	value26 = (value.Get("gapDiscardRate")).Float()
	out.GapDiscardRate = value26
	value27 = (value.Get("trackId")).String()
	out.TrackId = value27
	value28 = (value.Get("receiverId")).String()
	out.ReceiverId = value28
	value29 = (value.Get("remoteId")).String()
	out.RemoteId = value29
	value30 = (uint)((value.Get("framesDecoded")).Int())
	out.FramesDecoded = value30
	value31 = (value.Get("lastPacketReceivedTimestamp")).Float()
	out.LastPacketReceivedTimestamp = value31
	value32 = (value.Get("averageRtcpInterval")).Float()
	out.AverageRtcpInterval = value32
	value33 = (uint)((value.Get("fecPacketsReceived")).Int())
	out.FecPacketsReceived = value33
	value34 = (value.Get("bytesReceived")).Int()
	out.BytesReceived = value34
	value35 = (uint)((value.Get("packetsFailedDecryption")).Int())
	out.PacketsFailedDecryption = value35
	value36 = (uint)((value.Get("packetsDuplicated")).Int())
	out.PacketsDuplicated = value36
	return &out
}

// dictionary: RTCMediaHandlerStats
type MediaHandlerStats struct {
	Timestamp       float64
	Type            webrtc.StatsType
	Id              string
	TrackIdentifier string
	RemoteSource    bool
	Ended           bool
	Kind            string
	Priority        webrtc.PriorityType
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *MediaHandlerStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	return out
}

// MediaHandlerStatsFromJS is allocating a new
// MediaHandlerStats object and copy all values in the value javascript object.
func MediaHandlerStatsFromJS(value js.Value) *MediaHandlerStats {
	var out MediaHandlerStats
	var (
		value0 float64             // javascript: double {timestamp Timestamp timestamp}
		value1 webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2 string              // javascript: DOMString {id Id id}
		value3 string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4 bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5 bool                // javascript: boolean {ended Ended ended}
		value6 string              // javascript: DOMString {kind Kind kind}
		value7 webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	return &out
}

// dictionary: RTCMediaStreamStats
type MediaStreamStats struct {
	Timestamp        float64
	Type             webrtc.StatsType
	Id               string
	StreamIdentifier string
	TrackIds         []string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *MediaStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.StreamIdentifier
	out.Set("streamIdentifier", value3)
	value4 := js.Global().Get("Array").New(len(_this.TrackIds))
	for __idx4, __seq_in4 := range _this.TrackIds {
		__seq_out4 := __seq_in4
		value4.SetIndex(__idx4, __seq_out4)
	}
	out.Set("trackIds", value4)
	return out
}

// MediaStreamStatsFromJS is allocating a new
// MediaStreamStats object and copy all values in the value javascript object.
func MediaStreamStatsFromJS(value js.Value) *MediaStreamStats {
	var out MediaStreamStats
	var (
		value0 float64          // javascript: double {timestamp Timestamp timestamp}
		value1 webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2 string           // javascript: DOMString {id Id id}
		value3 string           // javascript: DOMString {streamIdentifier StreamIdentifier streamIdentifier}
		value4 []string         // javascript: sequence<DOMString> {trackIds TrackIds trackIds}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("streamIdentifier")).String()
	out.StreamIdentifier = value3
	__length4 := value.Get("trackIds").Length()
	__array4 := make([]string, __length4, __length4)
	for __idx4 := 0; __idx4 < __length4; __idx4++ {
		var __seq_out4 string
		__seq_in4 := value.Get("trackIds").Index(__idx4)
		__seq_out4 = (__seq_in4).String()
		__array4[__idx4] = __seq_out4
	}
	value4 = __array4
	out.TrackIds = value4
	return &out
}

// dictionary: RTCOutboundRtpStreamStats
type OutboundRtpStreamStats struct {
	Timestamp               float64
	Type                    webrtc.StatsType
	Id                      string
	Ssrc                    uint
	Kind                    string
	TransportId             string
	CodecId                 string
	FirCount                uint
	PliCount                uint
	NackCount               uint
	SliCount                uint
	QpSum                   int
	MediaType               string
	AverageRTCPInterval     float64
	PacketsSent             uint
	PacketsDiscardedOnSend  uint
	FecPacketsSent          uint
	BytesSent               int
	BytesDiscardedOnSend    int
	TrackId                 string
	SenderId                string
	RemoteId                string
	LastPacketSentTimestamp float64
	TargetBitrate           float64
	FramesEncoded           uint
	TotalEncodeTime         float64
	AverageRtcpInterval     float64
	QualityLimitationReason QualityLimitationReason
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *OutboundRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsSent
	out.Set("packetsSent", value14)
	value15 := _this.PacketsDiscardedOnSend
	out.Set("packetsDiscardedOnSend", value15)
	value16 := _this.FecPacketsSent
	out.Set("fecPacketsSent", value16)
	value17 := _this.BytesSent
	out.Set("bytesSent", value17)
	value18 := _this.BytesDiscardedOnSend
	out.Set("bytesDiscardedOnSend", value18)
	value19 := _this.TrackId
	out.Set("trackId", value19)
	value20 := _this.SenderId
	out.Set("senderId", value20)
	value21 := _this.RemoteId
	out.Set("remoteId", value21)
	value22 := _this.LastPacketSentTimestamp
	out.Set("lastPacketSentTimestamp", value22)
	value23 := _this.TargetBitrate
	out.Set("targetBitrate", value23)
	value24 := _this.FramesEncoded
	out.Set("framesEncoded", value24)
	value25 := _this.TotalEncodeTime
	out.Set("totalEncodeTime", value25)
	value26 := _this.AverageRtcpInterval
	out.Set("averageRtcpInterval", value26)
	value27 := _this.QualityLimitationReason.JSValue()
	out.Set("qualityLimitationReason", value27)
	return out
}

// OutboundRtpStreamStatsFromJS is allocating a new
// OutboundRtpStreamStats object and copy all values in the value javascript object.
func OutboundRtpStreamStatsFromJS(value js.Value) *OutboundRtpStreamStats {
	var out OutboundRtpStreamStats
	var (
		value0  float64                 // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType        // javascript: RTCStatsType {type Type _type}
		value2  string                  // javascript: DOMString {id Id id}
		value3  uint                    // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string                  // javascript: DOMString {kind Kind kind}
		value5  string                  // javascript: DOMString {transportId TransportId transportId}
		value6  string                  // javascript: DOMString {codecId CodecId codecId}
		value7  uint                    // javascript: unsigned long {firCount FirCount firCount}
		value8  uint                    // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint                    // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint                    // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int                     // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string                  // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64                 // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint                    // javascript: unsigned long {packetsSent PacketsSent packetsSent}
		value15 uint                    // javascript: unsigned long {packetsDiscardedOnSend PacketsDiscardedOnSend packetsDiscardedOnSend}
		value16 uint                    // javascript: unsigned long {fecPacketsSent FecPacketsSent fecPacketsSent}
		value17 int                     // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value18 int                     // javascript: unsigned long long {bytesDiscardedOnSend BytesDiscardedOnSend bytesDiscardedOnSend}
		value19 string                  // javascript: DOMString {trackId TrackId trackId}
		value20 string                  // javascript: DOMString {senderId SenderId senderId}
		value21 string                  // javascript: DOMString {remoteId RemoteId remoteId}
		value22 float64                 // javascript: double {lastPacketSentTimestamp LastPacketSentTimestamp lastPacketSentTimestamp}
		value23 float64                 // javascript: double {targetBitrate TargetBitrate targetBitrate}
		value24 uint                    // javascript: unsigned long {framesEncoded FramesEncoded framesEncoded}
		value25 float64                 // javascript: double {totalEncodeTime TotalEncodeTime totalEncodeTime}
		value26 float64                 // javascript: double {averageRtcpInterval AverageRtcpInterval averageRtcpInterval}
		value27 QualityLimitationReason // javascript: RTCQualityLimitationReason {qualityLimitationReason QualityLimitationReason qualityLimitationReason}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsSent")).Int())
	out.PacketsSent = value14
	value15 = (uint)((value.Get("packetsDiscardedOnSend")).Int())
	out.PacketsDiscardedOnSend = value15
	value16 = (uint)((value.Get("fecPacketsSent")).Int())
	out.FecPacketsSent = value16
	value17 = (value.Get("bytesSent")).Int()
	out.BytesSent = value17
	value18 = (value.Get("bytesDiscardedOnSend")).Int()
	out.BytesDiscardedOnSend = value18
	value19 = (value.Get("trackId")).String()
	out.TrackId = value19
	value20 = (value.Get("senderId")).String()
	out.SenderId = value20
	value21 = (value.Get("remoteId")).String()
	out.RemoteId = value21
	value22 = (value.Get("lastPacketSentTimestamp")).Float()
	out.LastPacketSentTimestamp = value22
	value23 = (value.Get("targetBitrate")).Float()
	out.TargetBitrate = value23
	value24 = (uint)((value.Get("framesEncoded")).Int())
	out.FramesEncoded = value24
	value25 = (value.Get("totalEncodeTime")).Float()
	out.TotalEncodeTime = value25
	value26 = (value.Get("averageRtcpInterval")).Float()
	out.AverageRtcpInterval = value26
	value27 = QualityLimitationReasonFromJS(value.Get("qualityLimitationReason"))
	out.QualityLimitationReason = value27
	return &out
}

// dictionary: RTCPeerConnectionStats
type PeerConnectionStats struct {
	Timestamp             float64
	Type                  webrtc.StatsType
	Id                    string
	DataChannelsOpened    uint
	DataChannelsClosed    uint
	DataChannelsRequested uint
	DataChannelsAccepted  uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PeerConnectionStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.DataChannelsOpened
	out.Set("dataChannelsOpened", value3)
	value4 := _this.DataChannelsClosed
	out.Set("dataChannelsClosed", value4)
	value5 := _this.DataChannelsRequested
	out.Set("dataChannelsRequested", value5)
	value6 := _this.DataChannelsAccepted
	out.Set("dataChannelsAccepted", value6)
	return out
}

// PeerConnectionStatsFromJS is allocating a new
// PeerConnectionStats object and copy all values in the value javascript object.
func PeerConnectionStatsFromJS(value js.Value) *PeerConnectionStats {
	var out PeerConnectionStats
	var (
		value0 float64          // javascript: double {timestamp Timestamp timestamp}
		value1 webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2 string           // javascript: DOMString {id Id id}
		value3 uint             // javascript: unsigned long {dataChannelsOpened DataChannelsOpened dataChannelsOpened}
		value4 uint             // javascript: unsigned long {dataChannelsClosed DataChannelsClosed dataChannelsClosed}
		value5 uint             // javascript: unsigned long {dataChannelsRequested DataChannelsRequested dataChannelsRequested}
		value6 uint             // javascript: unsigned long {dataChannelsAccepted DataChannelsAccepted dataChannelsAccepted}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("dataChannelsOpened")).Int())
	out.DataChannelsOpened = value3
	value4 = (uint)((value.Get("dataChannelsClosed")).Int())
	out.DataChannelsClosed = value4
	value5 = (uint)((value.Get("dataChannelsRequested")).Int())
	out.DataChannelsRequested = value5
	value6 = (uint)((value.Get("dataChannelsAccepted")).Int())
	out.DataChannelsAccepted = value6
	return &out
}

// dictionary: RTCReceivedRtpStreamStats
type ReceivedRtpStreamStats struct {
	Timestamp             float64
	Type                  webrtc.StatsType
	Id                    string
	Ssrc                  uint
	Kind                  string
	TransportId           string
	CodecId               string
	FirCount              uint
	PliCount              uint
	NackCount             uint
	SliCount              uint
	QpSum                 int
	MediaType             string
	AverageRTCPInterval   float64
	PacketsReceived       uint
	PacketsLost           int
	Jitter                float64
	PacketsDiscarded      uint
	PacketsRepaired       uint
	BurstPacketsLost      uint
	BurstPacketsDiscarded uint
	BurstLossCount        uint
	BurstDiscardCount     uint
	BurstLossRate         float64
	BurstDiscardRate      float64
	GapLossRate           float64
	GapDiscardRate        float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ReceivedRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsReceived
	out.Set("packetsReceived", value14)
	value15 := _this.PacketsLost
	out.Set("packetsLost", value15)
	value16 := _this.Jitter
	out.Set("jitter", value16)
	value17 := _this.PacketsDiscarded
	out.Set("packetsDiscarded", value17)
	value18 := _this.PacketsRepaired
	out.Set("packetsRepaired", value18)
	value19 := _this.BurstPacketsLost
	out.Set("burstPacketsLost", value19)
	value20 := _this.BurstPacketsDiscarded
	out.Set("burstPacketsDiscarded", value20)
	value21 := _this.BurstLossCount
	out.Set("burstLossCount", value21)
	value22 := _this.BurstDiscardCount
	out.Set("burstDiscardCount", value22)
	value23 := _this.BurstLossRate
	out.Set("burstLossRate", value23)
	value24 := _this.BurstDiscardRate
	out.Set("burstDiscardRate", value24)
	value25 := _this.GapLossRate
	out.Set("gapLossRate", value25)
	value26 := _this.GapDiscardRate
	out.Set("gapDiscardRate", value26)
	return out
}

// ReceivedRtpStreamStatsFromJS is allocating a new
// ReceivedRtpStreamStats object and copy all values in the value javascript object.
func ReceivedRtpStreamStatsFromJS(value js.Value) *ReceivedRtpStreamStats {
	var out ReceivedRtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint             // javascript: unsigned long {packetsReceived PacketsReceived packetsReceived}
		value15 int              // javascript: long {packetsLost PacketsLost packetsLost}
		value16 float64          // javascript: double {jitter Jitter jitter}
		value17 uint             // javascript: unsigned long {packetsDiscarded PacketsDiscarded packetsDiscarded}
		value18 uint             // javascript: unsigned long {packetsRepaired PacketsRepaired packetsRepaired}
		value19 uint             // javascript: unsigned long {burstPacketsLost BurstPacketsLost burstPacketsLost}
		value20 uint             // javascript: unsigned long {burstPacketsDiscarded BurstPacketsDiscarded burstPacketsDiscarded}
		value21 uint             // javascript: unsigned long {burstLossCount BurstLossCount burstLossCount}
		value22 uint             // javascript: unsigned long {burstDiscardCount BurstDiscardCount burstDiscardCount}
		value23 float64          // javascript: double {burstLossRate BurstLossRate burstLossRate}
		value24 float64          // javascript: double {burstDiscardRate BurstDiscardRate burstDiscardRate}
		value25 float64          // javascript: double {gapLossRate GapLossRate gapLossRate}
		value26 float64          // javascript: double {gapDiscardRate GapDiscardRate gapDiscardRate}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsReceived")).Int())
	out.PacketsReceived = value14
	value15 = (value.Get("packetsLost")).Int()
	out.PacketsLost = value15
	value16 = (value.Get("jitter")).Float()
	out.Jitter = value16
	value17 = (uint)((value.Get("packetsDiscarded")).Int())
	out.PacketsDiscarded = value17
	value18 = (uint)((value.Get("packetsRepaired")).Int())
	out.PacketsRepaired = value18
	value19 = (uint)((value.Get("burstPacketsLost")).Int())
	out.BurstPacketsLost = value19
	value20 = (uint)((value.Get("burstPacketsDiscarded")).Int())
	out.BurstPacketsDiscarded = value20
	value21 = (uint)((value.Get("burstLossCount")).Int())
	out.BurstLossCount = value21
	value22 = (uint)((value.Get("burstDiscardCount")).Int())
	out.BurstDiscardCount = value22
	value23 = (value.Get("burstLossRate")).Float()
	out.BurstLossRate = value23
	value24 = (value.Get("burstDiscardRate")).Float()
	out.BurstDiscardRate = value24
	value25 = (value.Get("gapLossRate")).Float()
	out.GapLossRate = value25
	value26 = (value.Get("gapDiscardRate")).Float()
	out.GapDiscardRate = value26
	return &out
}

// dictionary: RTCRemoteInboundRtpStreamStats
type RemoteInboundRtpStreamStats struct {
	Timestamp             float64
	Type                  webrtc.StatsType
	Id                    string
	Ssrc                  uint
	Kind                  string
	TransportId           string
	CodecId               string
	FirCount              uint
	PliCount              uint
	NackCount             uint
	SliCount              uint
	QpSum                 int
	MediaType             string
	AverageRTCPInterval   float64
	PacketsReceived       uint
	PacketsLost           int
	Jitter                float64
	PacketsDiscarded      uint
	PacketsRepaired       uint
	BurstPacketsLost      uint
	BurstPacketsDiscarded uint
	BurstLossCount        uint
	BurstDiscardCount     uint
	BurstLossRate         float64
	BurstDiscardRate      float64
	GapLossRate           float64
	GapDiscardRate        float64
	LocalId               string
	RoundTripTime         float64
	FractionLost          float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *RemoteInboundRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsReceived
	out.Set("packetsReceived", value14)
	value15 := _this.PacketsLost
	out.Set("packetsLost", value15)
	value16 := _this.Jitter
	out.Set("jitter", value16)
	value17 := _this.PacketsDiscarded
	out.Set("packetsDiscarded", value17)
	value18 := _this.PacketsRepaired
	out.Set("packetsRepaired", value18)
	value19 := _this.BurstPacketsLost
	out.Set("burstPacketsLost", value19)
	value20 := _this.BurstPacketsDiscarded
	out.Set("burstPacketsDiscarded", value20)
	value21 := _this.BurstLossCount
	out.Set("burstLossCount", value21)
	value22 := _this.BurstDiscardCount
	out.Set("burstDiscardCount", value22)
	value23 := _this.BurstLossRate
	out.Set("burstLossRate", value23)
	value24 := _this.BurstDiscardRate
	out.Set("burstDiscardRate", value24)
	value25 := _this.GapLossRate
	out.Set("gapLossRate", value25)
	value26 := _this.GapDiscardRate
	out.Set("gapDiscardRate", value26)
	value27 := _this.LocalId
	out.Set("localId", value27)
	value28 := _this.RoundTripTime
	out.Set("roundTripTime", value28)
	value29 := _this.FractionLost
	out.Set("fractionLost", value29)
	return out
}

// RemoteInboundRtpStreamStatsFromJS is allocating a new
// RemoteInboundRtpStreamStats object and copy all values in the value javascript object.
func RemoteInboundRtpStreamStatsFromJS(value js.Value) *RemoteInboundRtpStreamStats {
	var out RemoteInboundRtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint             // javascript: unsigned long {packetsReceived PacketsReceived packetsReceived}
		value15 int              // javascript: long {packetsLost PacketsLost packetsLost}
		value16 float64          // javascript: double {jitter Jitter jitter}
		value17 uint             // javascript: unsigned long {packetsDiscarded PacketsDiscarded packetsDiscarded}
		value18 uint             // javascript: unsigned long {packetsRepaired PacketsRepaired packetsRepaired}
		value19 uint             // javascript: unsigned long {burstPacketsLost BurstPacketsLost burstPacketsLost}
		value20 uint             // javascript: unsigned long {burstPacketsDiscarded BurstPacketsDiscarded burstPacketsDiscarded}
		value21 uint             // javascript: unsigned long {burstLossCount BurstLossCount burstLossCount}
		value22 uint             // javascript: unsigned long {burstDiscardCount BurstDiscardCount burstDiscardCount}
		value23 float64          // javascript: double {burstLossRate BurstLossRate burstLossRate}
		value24 float64          // javascript: double {burstDiscardRate BurstDiscardRate burstDiscardRate}
		value25 float64          // javascript: double {gapLossRate GapLossRate gapLossRate}
		value26 float64          // javascript: double {gapDiscardRate GapDiscardRate gapDiscardRate}
		value27 string           // javascript: DOMString {localId LocalId localId}
		value28 float64          // javascript: double {roundTripTime RoundTripTime roundTripTime}
		value29 float64          // javascript: double {fractionLost FractionLost fractionLost}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsReceived")).Int())
	out.PacketsReceived = value14
	value15 = (value.Get("packetsLost")).Int()
	out.PacketsLost = value15
	value16 = (value.Get("jitter")).Float()
	out.Jitter = value16
	value17 = (uint)((value.Get("packetsDiscarded")).Int())
	out.PacketsDiscarded = value17
	value18 = (uint)((value.Get("packetsRepaired")).Int())
	out.PacketsRepaired = value18
	value19 = (uint)((value.Get("burstPacketsLost")).Int())
	out.BurstPacketsLost = value19
	value20 = (uint)((value.Get("burstPacketsDiscarded")).Int())
	out.BurstPacketsDiscarded = value20
	value21 = (uint)((value.Get("burstLossCount")).Int())
	out.BurstLossCount = value21
	value22 = (uint)((value.Get("burstDiscardCount")).Int())
	out.BurstDiscardCount = value22
	value23 = (value.Get("burstLossRate")).Float()
	out.BurstLossRate = value23
	value24 = (value.Get("burstDiscardRate")).Float()
	out.BurstDiscardRate = value24
	value25 = (value.Get("gapLossRate")).Float()
	out.GapLossRate = value25
	value26 = (value.Get("gapDiscardRate")).Float()
	out.GapDiscardRate = value26
	value27 = (value.Get("localId")).String()
	out.LocalId = value27
	value28 = (value.Get("roundTripTime")).Float()
	out.RoundTripTime = value28
	value29 = (value.Get("fractionLost")).Float()
	out.FractionLost = value29
	return &out
}

// dictionary: RTCRemoteOutboundRtpStreamStats
type RemoteOutboundRtpStreamStats struct {
	Timestamp              float64
	Type                   webrtc.StatsType
	Id                     string
	Ssrc                   uint
	Kind                   string
	TransportId            string
	CodecId                string
	FirCount               uint
	PliCount               uint
	NackCount              uint
	SliCount               uint
	QpSum                  int
	MediaType              string
	AverageRTCPInterval    float64
	PacketsSent            uint
	PacketsDiscardedOnSend uint
	FecPacketsSent         uint
	BytesSent              int
	BytesDiscardedOnSend   int
	LocalId                string
	RemoteTimestamp        float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *RemoteOutboundRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsSent
	out.Set("packetsSent", value14)
	value15 := _this.PacketsDiscardedOnSend
	out.Set("packetsDiscardedOnSend", value15)
	value16 := _this.FecPacketsSent
	out.Set("fecPacketsSent", value16)
	value17 := _this.BytesSent
	out.Set("bytesSent", value17)
	value18 := _this.BytesDiscardedOnSend
	out.Set("bytesDiscardedOnSend", value18)
	value19 := _this.LocalId
	out.Set("localId", value19)
	value20 := _this.RemoteTimestamp
	out.Set("remoteTimestamp", value20)
	return out
}

// RemoteOutboundRtpStreamStatsFromJS is allocating a new
// RemoteOutboundRtpStreamStats object and copy all values in the value javascript object.
func RemoteOutboundRtpStreamStatsFromJS(value js.Value) *RemoteOutboundRtpStreamStats {
	var out RemoteOutboundRtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint             // javascript: unsigned long {packetsSent PacketsSent packetsSent}
		value15 uint             // javascript: unsigned long {packetsDiscardedOnSend PacketsDiscardedOnSend packetsDiscardedOnSend}
		value16 uint             // javascript: unsigned long {fecPacketsSent FecPacketsSent fecPacketsSent}
		value17 int              // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value18 int              // javascript: unsigned long long {bytesDiscardedOnSend BytesDiscardedOnSend bytesDiscardedOnSend}
		value19 string           // javascript: DOMString {localId LocalId localId}
		value20 float64          // javascript: double {remoteTimestamp RemoteTimestamp remoteTimestamp}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsSent")).Int())
	out.PacketsSent = value14
	value15 = (uint)((value.Get("packetsDiscardedOnSend")).Int())
	out.PacketsDiscardedOnSend = value15
	value16 = (uint)((value.Get("fecPacketsSent")).Int())
	out.FecPacketsSent = value16
	value17 = (value.Get("bytesSent")).Int()
	out.BytesSent = value17
	value18 = (value.Get("bytesDiscardedOnSend")).Int()
	out.BytesDiscardedOnSend = value18
	value19 = (value.Get("localId")).String()
	out.LocalId = value19
	value20 = (value.Get("remoteTimestamp")).Float()
	out.RemoteTimestamp = value20
	return &out
}

// dictionary: RTCRtpContributingSourceStats
type RtpContributingSourceStats struct {
	Timestamp            float64
	Type                 webrtc.StatsType
	Id                   string
	ContributorSsrc      uint
	InboundRtpStreamId   string
	PacketsContributedTo uint
	AudioLevel           float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *RtpContributingSourceStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.ContributorSsrc
	out.Set("contributorSsrc", value3)
	value4 := _this.InboundRtpStreamId
	out.Set("inboundRtpStreamId", value4)
	value5 := _this.PacketsContributedTo
	out.Set("packetsContributedTo", value5)
	value6 := _this.AudioLevel
	out.Set("audioLevel", value6)
	return out
}

// RtpContributingSourceStatsFromJS is allocating a new
// RtpContributingSourceStats object and copy all values in the value javascript object.
func RtpContributingSourceStatsFromJS(value js.Value) *RtpContributingSourceStats {
	var out RtpContributingSourceStats
	var (
		value0 float64          // javascript: double {timestamp Timestamp timestamp}
		value1 webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2 string           // javascript: DOMString {id Id id}
		value3 uint             // javascript: unsigned long {contributorSsrc ContributorSsrc contributorSsrc}
		value4 string           // javascript: DOMString {inboundRtpStreamId InboundRtpStreamId inboundRtpStreamId}
		value5 uint             // javascript: unsigned long {packetsContributedTo PacketsContributedTo packetsContributedTo}
		value6 float64          // javascript: double {audioLevel AudioLevel audioLevel}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("contributorSsrc")).Int())
	out.ContributorSsrc = value3
	value4 = (value.Get("inboundRtpStreamId")).String()
	out.InboundRtpStreamId = value4
	value5 = (uint)((value.Get("packetsContributedTo")).Int())
	out.PacketsContributedTo = value5
	value6 = (value.Get("audioLevel")).Float()
	out.AudioLevel = value6
	return &out
}

// dictionary: RTCRtpStreamStats
type RtpStreamStats struct {
	Timestamp           float64
	Type                webrtc.StatsType
	Id                  string
	Ssrc                uint
	Kind                string
	TransportId         string
	CodecId             string
	FirCount            uint
	PliCount            uint
	NackCount           uint
	SliCount            uint
	QpSum               int
	MediaType           string
	AverageRTCPInterval float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *RtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	return out
}

// RtpStreamStatsFromJS is allocating a new
// RtpStreamStats object and copy all values in the value javascript object.
func RtpStreamStatsFromJS(value js.Value) *RtpStreamStats {
	var out RtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	return &out
}

// dictionary: RTCSenderAudioTrackAttachmentStats
type SenderAudioTrackAttachmentStats struct {
	Timestamp                 float64
	Type                      webrtc.StatsType
	Id                        string
	TrackIdentifier           string
	RemoteSource              bool
	Ended                     bool
	Kind                      string
	Priority                  webrtc.PriorityType
	AudioLevel                float64
	TotalAudioEnergy          float64
	VoiceActivityFlag         bool
	TotalSamplesDuration      float64
	EchoReturnLoss            float64
	EchoReturnLossEnhancement float64
	TotalSamplesSent          int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *SenderAudioTrackAttachmentStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.AudioLevel
	out.Set("audioLevel", value8)
	value9 := _this.TotalAudioEnergy
	out.Set("totalAudioEnergy", value9)
	value10 := _this.VoiceActivityFlag
	out.Set("voiceActivityFlag", value10)
	value11 := _this.TotalSamplesDuration
	out.Set("totalSamplesDuration", value11)
	value12 := _this.EchoReturnLoss
	out.Set("echoReturnLoss", value12)
	value13 := _this.EchoReturnLossEnhancement
	out.Set("echoReturnLossEnhancement", value13)
	value14 := _this.TotalSamplesSent
	out.Set("totalSamplesSent", value14)
	return out
}

// SenderAudioTrackAttachmentStatsFromJS is allocating a new
// SenderAudioTrackAttachmentStats object and copy all values in the value javascript object.
func SenderAudioTrackAttachmentStatsFromJS(value js.Value) *SenderAudioTrackAttachmentStats {
	var out SenderAudioTrackAttachmentStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  float64             // javascript: double {audioLevel AudioLevel audioLevel}
		value9  float64             // javascript: double {totalAudioEnergy TotalAudioEnergy totalAudioEnergy}
		value10 bool                // javascript: boolean {voiceActivityFlag VoiceActivityFlag voiceActivityFlag}
		value11 float64             // javascript: double {totalSamplesDuration TotalSamplesDuration totalSamplesDuration}
		value12 float64             // javascript: double {echoReturnLoss EchoReturnLoss echoReturnLoss}
		value13 float64             // javascript: double {echoReturnLossEnhancement EchoReturnLossEnhancement echoReturnLossEnhancement}
		value14 int                 // javascript: unsigned long long {totalSamplesSent TotalSamplesSent totalSamplesSent}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (value.Get("audioLevel")).Float()
	out.AudioLevel = value8
	value9 = (value.Get("totalAudioEnergy")).Float()
	out.TotalAudioEnergy = value9
	value10 = (value.Get("voiceActivityFlag")).Bool()
	out.VoiceActivityFlag = value10
	value11 = (value.Get("totalSamplesDuration")).Float()
	out.TotalSamplesDuration = value11
	value12 = (value.Get("echoReturnLoss")).Float()
	out.EchoReturnLoss = value12
	value13 = (value.Get("echoReturnLossEnhancement")).Float()
	out.EchoReturnLossEnhancement = value13
	value14 = (value.Get("totalSamplesSent")).Int()
	out.TotalSamplesSent = value14
	return &out
}

// dictionary: RTCSenderVideoTrackAttachmentStats
type SenderVideoTrackAttachmentStats struct {
	Timestamp       float64
	Type            webrtc.StatsType
	Id              string
	TrackIdentifier string
	RemoteSource    bool
	Ended           bool
	Kind            string
	Priority        webrtc.PriorityType
	FrameWidth      uint
	FrameHeight     uint
	FramesPerSecond float64
	FramesCaptured  uint
	FramesSent      uint
	HugeFramesSent  uint
	KeyFramesSent   uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *SenderVideoTrackAttachmentStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.FrameWidth
	out.Set("frameWidth", value8)
	value9 := _this.FrameHeight
	out.Set("frameHeight", value9)
	value10 := _this.FramesPerSecond
	out.Set("framesPerSecond", value10)
	value11 := _this.FramesCaptured
	out.Set("framesCaptured", value11)
	value12 := _this.FramesSent
	out.Set("framesSent", value12)
	value13 := _this.HugeFramesSent
	out.Set("hugeFramesSent", value13)
	value14 := _this.KeyFramesSent
	out.Set("keyFramesSent", value14)
	return out
}

// SenderVideoTrackAttachmentStatsFromJS is allocating a new
// SenderVideoTrackAttachmentStats object and copy all values in the value javascript object.
func SenderVideoTrackAttachmentStatsFromJS(value js.Value) *SenderVideoTrackAttachmentStats {
	var out SenderVideoTrackAttachmentStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  uint                // javascript: unsigned long {frameWidth FrameWidth frameWidth}
		value9  uint                // javascript: unsigned long {frameHeight FrameHeight frameHeight}
		value10 float64             // javascript: double {framesPerSecond FramesPerSecond framesPerSecond}
		value11 uint                // javascript: unsigned long {framesCaptured FramesCaptured framesCaptured}
		value12 uint                // javascript: unsigned long {framesSent FramesSent framesSent}
		value13 uint                // javascript: unsigned long {hugeFramesSent HugeFramesSent hugeFramesSent}
		value14 uint                // javascript: unsigned long {keyFramesSent KeyFramesSent keyFramesSent}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (uint)((value.Get("frameWidth")).Int())
	out.FrameWidth = value8
	value9 = (uint)((value.Get("frameHeight")).Int())
	out.FrameHeight = value9
	value10 = (value.Get("framesPerSecond")).Float()
	out.FramesPerSecond = value10
	value11 = (uint)((value.Get("framesCaptured")).Int())
	out.FramesCaptured = value11
	value12 = (uint)((value.Get("framesSent")).Int())
	out.FramesSent = value12
	value13 = (uint)((value.Get("hugeFramesSent")).Int())
	out.HugeFramesSent = value13
	value14 = (uint)((value.Get("keyFramesSent")).Int())
	out.KeyFramesSent = value14
	return &out
}

// dictionary: RTCSentRtpStreamStats
type SentRtpStreamStats struct {
	Timestamp              float64
	Type                   webrtc.StatsType
	Id                     string
	Ssrc                   uint
	Kind                   string
	TransportId            string
	CodecId                string
	FirCount               uint
	PliCount               uint
	NackCount              uint
	SliCount               uint
	QpSum                  int
	MediaType              string
	AverageRTCPInterval    float64
	PacketsSent            uint
	PacketsDiscardedOnSend uint
	FecPacketsSent         uint
	BytesSent              int
	BytesDiscardedOnSend   int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *SentRtpStreamStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.Ssrc
	out.Set("ssrc", value3)
	value4 := _this.Kind
	out.Set("kind", value4)
	value5 := _this.TransportId
	out.Set("transportId", value5)
	value6 := _this.CodecId
	out.Set("codecId", value6)
	value7 := _this.FirCount
	out.Set("firCount", value7)
	value8 := _this.PliCount
	out.Set("pliCount", value8)
	value9 := _this.NackCount
	out.Set("nackCount", value9)
	value10 := _this.SliCount
	out.Set("sliCount", value10)
	value11 := _this.QpSum
	out.Set("qpSum", value11)
	value12 := _this.MediaType
	out.Set("mediaType", value12)
	value13 := _this.AverageRTCPInterval
	out.Set("averageRTCPInterval", value13)
	value14 := _this.PacketsSent
	out.Set("packetsSent", value14)
	value15 := _this.PacketsDiscardedOnSend
	out.Set("packetsDiscardedOnSend", value15)
	value16 := _this.FecPacketsSent
	out.Set("fecPacketsSent", value16)
	value17 := _this.BytesSent
	out.Set("bytesSent", value17)
	value18 := _this.BytesDiscardedOnSend
	out.Set("bytesDiscardedOnSend", value18)
	return out
}

// SentRtpStreamStatsFromJS is allocating a new
// SentRtpStreamStats object and copy all values in the value javascript object.
func SentRtpStreamStatsFromJS(value js.Value) *SentRtpStreamStats {
	var out SentRtpStreamStats
	var (
		value0  float64          // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType // javascript: RTCStatsType {type Type _type}
		value2  string           // javascript: DOMString {id Id id}
		value3  uint             // javascript: unsigned long {ssrc Ssrc ssrc}
		value4  string           // javascript: DOMString {kind Kind kind}
		value5  string           // javascript: DOMString {transportId TransportId transportId}
		value6  string           // javascript: DOMString {codecId CodecId codecId}
		value7  uint             // javascript: unsigned long {firCount FirCount firCount}
		value8  uint             // javascript: unsigned long {pliCount PliCount pliCount}
		value9  uint             // javascript: unsigned long {nackCount NackCount nackCount}
		value10 uint             // javascript: unsigned long {sliCount SliCount sliCount}
		value11 int              // javascript: unsigned long long {qpSum QpSum qpSum}
		value12 string           // javascript: DOMString {mediaType MediaType mediaType}
		value13 float64          // javascript: double {averageRTCPInterval AverageRTCPInterval averageRTCPInterval}
		value14 uint             // javascript: unsigned long {packetsSent PacketsSent packetsSent}
		value15 uint             // javascript: unsigned long {packetsDiscardedOnSend PacketsDiscardedOnSend packetsDiscardedOnSend}
		value16 uint             // javascript: unsigned long {fecPacketsSent FecPacketsSent fecPacketsSent}
		value17 int              // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value18 int              // javascript: unsigned long long {bytesDiscardedOnSend BytesDiscardedOnSend bytesDiscardedOnSend}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("ssrc")).Int())
	out.Ssrc = value3
	value4 = (value.Get("kind")).String()
	out.Kind = value4
	value5 = (value.Get("transportId")).String()
	out.TransportId = value5
	value6 = (value.Get("codecId")).String()
	out.CodecId = value6
	value7 = (uint)((value.Get("firCount")).Int())
	out.FirCount = value7
	value8 = (uint)((value.Get("pliCount")).Int())
	out.PliCount = value8
	value9 = (uint)((value.Get("nackCount")).Int())
	out.NackCount = value9
	value10 = (uint)((value.Get("sliCount")).Int())
	out.SliCount = value10
	value11 = (value.Get("qpSum")).Int()
	out.QpSum = value11
	value12 = (value.Get("mediaType")).String()
	out.MediaType = value12
	value13 = (value.Get("averageRTCPInterval")).Float()
	out.AverageRTCPInterval = value13
	value14 = (uint)((value.Get("packetsSent")).Int())
	out.PacketsSent = value14
	value15 = (uint)((value.Get("packetsDiscardedOnSend")).Int())
	out.PacketsDiscardedOnSend = value15
	value16 = (uint)((value.Get("fecPacketsSent")).Int())
	out.FecPacketsSent = value16
	value17 = (value.Get("bytesSent")).Int()
	out.BytesSent = value17
	value18 = (value.Get("bytesDiscardedOnSend")).Int()
	out.BytesDiscardedOnSend = value18
	return &out
}

// dictionary: RTCTransportStats
type TransportStats struct {
	Timestamp               float64
	Type                    webrtc.StatsType
	Id                      string
	PacketsSent             uint
	PacketsReceived         uint
	BytesSent               int
	BytesReceived           int
	RtcpTransportStatsId    string
	IceRole                 webrtc.IceRole
	DtlsState               webrtc.DtlsTransportState
	SelectedCandidatePairId string
	LocalCertificateId      string
	RemoteCertificateId     string
	TlsVersion              string
	DtlsCipher              string
	SrtpCipher              string
	TlsGroup                string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *TransportStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.PacketsSent
	out.Set("packetsSent", value3)
	value4 := _this.PacketsReceived
	out.Set("packetsReceived", value4)
	value5 := _this.BytesSent
	out.Set("bytesSent", value5)
	value6 := _this.BytesReceived
	out.Set("bytesReceived", value6)
	value7 := _this.RtcpTransportStatsId
	out.Set("rtcpTransportStatsId", value7)
	value8 := _this.IceRole.JSValue()
	out.Set("iceRole", value8)
	value9 := _this.DtlsState.JSValue()
	out.Set("dtlsState", value9)
	value10 := _this.SelectedCandidatePairId
	out.Set("selectedCandidatePairId", value10)
	value11 := _this.LocalCertificateId
	out.Set("localCertificateId", value11)
	value12 := _this.RemoteCertificateId
	out.Set("remoteCertificateId", value12)
	value13 := _this.TlsVersion
	out.Set("tlsVersion", value13)
	value14 := _this.DtlsCipher
	out.Set("dtlsCipher", value14)
	value15 := _this.SrtpCipher
	out.Set("srtpCipher", value15)
	value16 := _this.TlsGroup
	out.Set("tlsGroup", value16)
	return out
}

// TransportStatsFromJS is allocating a new
// TransportStats object and copy all values in the value javascript object.
func TransportStatsFromJS(value js.Value) *TransportStats {
	var out TransportStats
	var (
		value0  float64                   // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType          // javascript: RTCStatsType {type Type _type}
		value2  string                    // javascript: DOMString {id Id id}
		value3  uint                      // javascript: unsigned long {packetsSent PacketsSent packetsSent}
		value4  uint                      // javascript: unsigned long {packetsReceived PacketsReceived packetsReceived}
		value5  int                       // javascript: unsigned long long {bytesSent BytesSent bytesSent}
		value6  int                       // javascript: unsigned long long {bytesReceived BytesReceived bytesReceived}
		value7  string                    // javascript: DOMString {rtcpTransportStatsId RtcpTransportStatsId rtcpTransportStatsId}
		value8  webrtc.IceRole            // javascript: RTCIceRole {iceRole IceRole iceRole}
		value9  webrtc.DtlsTransportState // javascript: RTCDtlsTransportState {dtlsState DtlsState dtlsState}
		value10 string                    // javascript: DOMString {selectedCandidatePairId SelectedCandidatePairId selectedCandidatePairId}
		value11 string                    // javascript: DOMString {localCertificateId LocalCertificateId localCertificateId}
		value12 string                    // javascript: DOMString {remoteCertificateId RemoteCertificateId remoteCertificateId}
		value13 string                    // javascript: DOMString {tlsVersion TlsVersion tlsVersion}
		value14 string                    // javascript: DOMString {dtlsCipher DtlsCipher dtlsCipher}
		value15 string                    // javascript: DOMString {srtpCipher SrtpCipher srtpCipher}
		value16 string                    // javascript: DOMString {tlsGroup TlsGroup tlsGroup}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (uint)((value.Get("packetsSent")).Int())
	out.PacketsSent = value3
	value4 = (uint)((value.Get("packetsReceived")).Int())
	out.PacketsReceived = value4
	value5 = (value.Get("bytesSent")).Int()
	out.BytesSent = value5
	value6 = (value.Get("bytesReceived")).Int()
	out.BytesReceived = value6
	value7 = (value.Get("rtcpTransportStatsId")).String()
	out.RtcpTransportStatsId = value7
	value8 = webrtc.IceRoleFromJS(value.Get("iceRole"))
	out.IceRole = value8
	value9 = webrtc.DtlsTransportStateFromJS(value.Get("dtlsState"))
	out.DtlsState = value9
	value10 = (value.Get("selectedCandidatePairId")).String()
	out.SelectedCandidatePairId = value10
	value11 = (value.Get("localCertificateId")).String()
	out.LocalCertificateId = value11
	value12 = (value.Get("remoteCertificateId")).String()
	out.RemoteCertificateId = value12
	value13 = (value.Get("tlsVersion")).String()
	out.TlsVersion = value13
	value14 = (value.Get("dtlsCipher")).String()
	out.DtlsCipher = value14
	value15 = (value.Get("srtpCipher")).String()
	out.SrtpCipher = value15
	value16 = (value.Get("tlsGroup")).String()
	out.TlsGroup = value16
	return &out
}

// dictionary: RTCVideoHandlerStats
type VideoHandlerStats struct {
	Timestamp       float64
	Type            webrtc.StatsType
	Id              string
	TrackIdentifier string
	RemoteSource    bool
	Ended           bool
	Kind            string
	Priority        webrtc.PriorityType
	FrameWidth      uint
	FrameHeight     uint
	FramesPerSecond float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *VideoHandlerStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.FrameWidth
	out.Set("frameWidth", value8)
	value9 := _this.FrameHeight
	out.Set("frameHeight", value9)
	value10 := _this.FramesPerSecond
	out.Set("framesPerSecond", value10)
	return out
}

// VideoHandlerStatsFromJS is allocating a new
// VideoHandlerStats object and copy all values in the value javascript object.
func VideoHandlerStatsFromJS(value js.Value) *VideoHandlerStats {
	var out VideoHandlerStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  uint                // javascript: unsigned long {frameWidth FrameWidth frameWidth}
		value9  uint                // javascript: unsigned long {frameHeight FrameHeight frameHeight}
		value10 float64             // javascript: double {framesPerSecond FramesPerSecond framesPerSecond}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (uint)((value.Get("frameWidth")).Int())
	out.FrameWidth = value8
	value9 = (uint)((value.Get("frameHeight")).Int())
	out.FrameHeight = value9
	value10 = (value.Get("framesPerSecond")).Float()
	out.FramesPerSecond = value10
	return &out
}

// dictionary: RTCVideoReceiverStats
type VideoReceiverStats struct {
	Timestamp                 float64
	Type                      webrtc.StatsType
	Id                        string
	TrackIdentifier           string
	RemoteSource              bool
	Ended                     bool
	Kind                      string
	Priority                  webrtc.PriorityType
	FrameWidth                uint
	FrameHeight               uint
	FramesPerSecond           float64
	EstimatedPlayoutTimestamp float64
	JitterBufferDelay         float64
	JitterBufferEmittedCount  int
	FramesReceived            uint
	KeyFramesReceived         uint
	FramesDecoded             uint
	FramesDropped             uint
	PartialFramesLost         uint
	FullFramesLost            uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *VideoReceiverStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.FrameWidth
	out.Set("frameWidth", value8)
	value9 := _this.FrameHeight
	out.Set("frameHeight", value9)
	value10 := _this.FramesPerSecond
	out.Set("framesPerSecond", value10)
	value11 := _this.EstimatedPlayoutTimestamp
	out.Set("estimatedPlayoutTimestamp", value11)
	value12 := _this.JitterBufferDelay
	out.Set("jitterBufferDelay", value12)
	value13 := _this.JitterBufferEmittedCount
	out.Set("jitterBufferEmittedCount", value13)
	value14 := _this.FramesReceived
	out.Set("framesReceived", value14)
	value15 := _this.KeyFramesReceived
	out.Set("keyFramesReceived", value15)
	value16 := _this.FramesDecoded
	out.Set("framesDecoded", value16)
	value17 := _this.FramesDropped
	out.Set("framesDropped", value17)
	value18 := _this.PartialFramesLost
	out.Set("partialFramesLost", value18)
	value19 := _this.FullFramesLost
	out.Set("fullFramesLost", value19)
	return out
}

// VideoReceiverStatsFromJS is allocating a new
// VideoReceiverStats object and copy all values in the value javascript object.
func VideoReceiverStatsFromJS(value js.Value) *VideoReceiverStats {
	var out VideoReceiverStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  uint                // javascript: unsigned long {frameWidth FrameWidth frameWidth}
		value9  uint                // javascript: unsigned long {frameHeight FrameHeight frameHeight}
		value10 float64             // javascript: double {framesPerSecond FramesPerSecond framesPerSecond}
		value11 float64             // javascript: double {estimatedPlayoutTimestamp EstimatedPlayoutTimestamp estimatedPlayoutTimestamp}
		value12 float64             // javascript: double {jitterBufferDelay JitterBufferDelay jitterBufferDelay}
		value13 int                 // javascript: unsigned long long {jitterBufferEmittedCount JitterBufferEmittedCount jitterBufferEmittedCount}
		value14 uint                // javascript: unsigned long {framesReceived FramesReceived framesReceived}
		value15 uint                // javascript: unsigned long {keyFramesReceived KeyFramesReceived keyFramesReceived}
		value16 uint                // javascript: unsigned long {framesDecoded FramesDecoded framesDecoded}
		value17 uint                // javascript: unsigned long {framesDropped FramesDropped framesDropped}
		value18 uint                // javascript: unsigned long {partialFramesLost PartialFramesLost partialFramesLost}
		value19 uint                // javascript: unsigned long {fullFramesLost FullFramesLost fullFramesLost}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (uint)((value.Get("frameWidth")).Int())
	out.FrameWidth = value8
	value9 = (uint)((value.Get("frameHeight")).Int())
	out.FrameHeight = value9
	value10 = (value.Get("framesPerSecond")).Float()
	out.FramesPerSecond = value10
	value11 = (value.Get("estimatedPlayoutTimestamp")).Float()
	out.EstimatedPlayoutTimestamp = value11
	value12 = (value.Get("jitterBufferDelay")).Float()
	out.JitterBufferDelay = value12
	value13 = (value.Get("jitterBufferEmittedCount")).Int()
	out.JitterBufferEmittedCount = value13
	value14 = (uint)((value.Get("framesReceived")).Int())
	out.FramesReceived = value14
	value15 = (uint)((value.Get("keyFramesReceived")).Int())
	out.KeyFramesReceived = value15
	value16 = (uint)((value.Get("framesDecoded")).Int())
	out.FramesDecoded = value16
	value17 = (uint)((value.Get("framesDropped")).Int())
	out.FramesDropped = value17
	value18 = (uint)((value.Get("partialFramesLost")).Int())
	out.PartialFramesLost = value18
	value19 = (uint)((value.Get("fullFramesLost")).Int())
	out.FullFramesLost = value19
	return &out
}

// dictionary: RTCVideoSenderStats
type VideoSenderStats struct {
	Timestamp       float64
	Type            webrtc.StatsType
	Id              string
	TrackIdentifier string
	RemoteSource    bool
	Ended           bool
	Kind            string
	Priority        webrtc.PriorityType
	FrameWidth      uint
	FrameHeight     uint
	FramesPerSecond float64
	FramesCaptured  uint
	FramesSent      uint
	HugeFramesSent  uint
	KeyFramesSent   uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *VideoSenderStats) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Timestamp
	out.Set("timestamp", value0)
	value1 := _this.Type.JSValue()
	out.Set("type", value1)
	value2 := _this.Id
	out.Set("id", value2)
	value3 := _this.TrackIdentifier
	out.Set("trackIdentifier", value3)
	value4 := _this.RemoteSource
	out.Set("remoteSource", value4)
	value5 := _this.Ended
	out.Set("ended", value5)
	value6 := _this.Kind
	out.Set("kind", value6)
	value7 := _this.Priority.JSValue()
	out.Set("priority", value7)
	value8 := _this.FrameWidth
	out.Set("frameWidth", value8)
	value9 := _this.FrameHeight
	out.Set("frameHeight", value9)
	value10 := _this.FramesPerSecond
	out.Set("framesPerSecond", value10)
	value11 := _this.FramesCaptured
	out.Set("framesCaptured", value11)
	value12 := _this.FramesSent
	out.Set("framesSent", value12)
	value13 := _this.HugeFramesSent
	out.Set("hugeFramesSent", value13)
	value14 := _this.KeyFramesSent
	out.Set("keyFramesSent", value14)
	return out
}

// VideoSenderStatsFromJS is allocating a new
// VideoSenderStats object and copy all values in the value javascript object.
func VideoSenderStatsFromJS(value js.Value) *VideoSenderStats {
	var out VideoSenderStats
	var (
		value0  float64             // javascript: double {timestamp Timestamp timestamp}
		value1  webrtc.StatsType    // javascript: RTCStatsType {type Type _type}
		value2  string              // javascript: DOMString {id Id id}
		value3  string              // javascript: DOMString {trackIdentifier TrackIdentifier trackIdentifier}
		value4  bool                // javascript: boolean {remoteSource RemoteSource remoteSource}
		value5  bool                // javascript: boolean {ended Ended ended}
		value6  string              // javascript: DOMString {kind Kind kind}
		value7  webrtc.PriorityType // javascript: RTCPriorityType {priority Priority priority}
		value8  uint                // javascript: unsigned long {frameWidth FrameWidth frameWidth}
		value9  uint                // javascript: unsigned long {frameHeight FrameHeight frameHeight}
		value10 float64             // javascript: double {framesPerSecond FramesPerSecond framesPerSecond}
		value11 uint                // javascript: unsigned long {framesCaptured FramesCaptured framesCaptured}
		value12 uint                // javascript: unsigned long {framesSent FramesSent framesSent}
		value13 uint                // javascript: unsigned long {hugeFramesSent HugeFramesSent hugeFramesSent}
		value14 uint                // javascript: unsigned long {keyFramesSent KeyFramesSent keyFramesSent}
	)
	value0 = (value.Get("timestamp")).Float()
	out.Timestamp = value0
	value1 = webrtc.StatsTypeFromJS(value.Get("type"))
	out.Type = value1
	value2 = (value.Get("id")).String()
	out.Id = value2
	value3 = (value.Get("trackIdentifier")).String()
	out.TrackIdentifier = value3
	value4 = (value.Get("remoteSource")).Bool()
	out.RemoteSource = value4
	value5 = (value.Get("ended")).Bool()
	out.Ended = value5
	value6 = (value.Get("kind")).String()
	out.Kind = value6
	value7 = webrtc.PriorityTypeFromJS(value.Get("priority"))
	out.Priority = value7
	value8 = (uint)((value.Get("frameWidth")).Int())
	out.FrameWidth = value8
	value9 = (uint)((value.Get("frameHeight")).Int())
	out.FrameHeight = value9
	value10 = (value.Get("framesPerSecond")).Float()
	out.FramesPerSecond = value10
	value11 = (uint)((value.Get("framesCaptured")).Int())
	out.FramesCaptured = value11
	value12 = (uint)((value.Get("framesSent")).Int())
	out.FramesSent = value12
	value13 = (uint)((value.Get("hugeFramesSent")).Int())
	out.HugeFramesSent = value13
	value14 = (uint)((value.Get("keyFramesSent")).Int())
	out.KeyFramesSent = value14
	return &out
}
