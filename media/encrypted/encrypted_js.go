// Code generated by webidl-bind. DO NOT EDIT.

package encrypted

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.ArrayBuffer
// javascript.Promise

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: MediaKeyMessageType
type MediaKeyMessageType int

const (
	LicenseRequestMediaKeyMessageType MediaKeyMessageType = iota
	LicenseRenewalMediaKeyMessageType
	LicenseReleaseMediaKeyMessageType
	IndividualizationRequestMediaKeyMessageType
)

var mediaKeyMessageTypeToWasmTable = []string{
	"license-request", "license-renewal", "license-release", "individualization-request",
}

var mediaKeyMessageTypeFromWasmTable = map[string]MediaKeyMessageType{
	"license-request": LicenseRequestMediaKeyMessageType, "license-renewal": LicenseRenewalMediaKeyMessageType, "license-release": LicenseReleaseMediaKeyMessageType, "individualization-request": IndividualizationRequestMediaKeyMessageType,
}

// JSValue is converting this enum into a java object
func (this *MediaKeyMessageType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaKeyMessageType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaKeyMessageTypeToWasmTable) {
		return mediaKeyMessageTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaKeyMessageTypeFromJS is converting a javascript value into
// a MediaKeyMessageType enum value.
func MediaKeyMessageTypeFromJS(value js.Value) MediaKeyMessageType {
	key := value.String()
	conv, ok := mediaKeyMessageTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: MediaKeySessionType
type MediaKeySessionType int

const (
	TemporaryMediaKeySessionType MediaKeySessionType = iota
	PersistentLicenseMediaKeySessionType
)

var mediaKeySessionTypeToWasmTable = []string{
	"temporary", "persistent-license",
}

var mediaKeySessionTypeFromWasmTable = map[string]MediaKeySessionType{
	"temporary": TemporaryMediaKeySessionType, "persistent-license": PersistentLicenseMediaKeySessionType,
}

// JSValue is converting this enum into a java object
func (this *MediaKeySessionType) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaKeySessionType) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaKeySessionTypeToWasmTable) {
		return mediaKeySessionTypeToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaKeySessionTypeFromJS is converting a javascript value into
// a MediaKeySessionType enum value.
func MediaKeySessionTypeFromJS(value js.Value) MediaKeySessionType {
	key := value.String()
	conv, ok := mediaKeySessionTypeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: MediaKeysRequirement
type MediaKeysRequirement int

const (
	RequiredMediaKeysRequirement MediaKeysRequirement = iota
	OptionalMediaKeysRequirement
	NotAllowedMediaKeysRequirement
)

var mediaKeysRequirementToWasmTable = []string{
	"required", "optional", "not-allowed",
}

var mediaKeysRequirementFromWasmTable = map[string]MediaKeysRequirement{
	"required": RequiredMediaKeysRequirement, "optional": OptionalMediaKeysRequirement, "not-allowed": NotAllowedMediaKeysRequirement,
}

// JSValue is converting this enum into a java object
func (this *MediaKeysRequirement) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaKeysRequirement) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaKeysRequirementToWasmTable) {
		return mediaKeysRequirementToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaKeysRequirementFromJS is converting a javascript value into
// a MediaKeysRequirement enum value.
func MediaKeysRequirementFromJS(value js.Value) MediaKeysRequirement {
	key := value.String()
	conv, ok := mediaKeysRequirementFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: MediaEncryptedEventInit
type MediaEncryptedEventInit struct {
	Bubbles      bool
	Cancelable   bool
	Composed     bool
	InitDataType string
	InitData     *javascript.ArrayBuffer
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaEncryptedEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.InitDataType
	out.Set("initDataType", value3)
	value4 := _this.InitData.JSValue()
	out.Set("initData", value4)
	return out
}

// MediaEncryptedEventInitFromJS is allocating a new
// MediaEncryptedEventInit object and copy all values from
// input javascript object
func MediaEncryptedEventInitFromJS(value js.Wrapper) *MediaEncryptedEventInit {
	input := value.JSValue()
	var out MediaEncryptedEventInit
	var (
		value0 bool                    // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                    // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                    // javascript: boolean {composed Composed composed}
		value3 string                  // javascript: DOMString {initDataType InitDataType initDataType}
		value4 *javascript.ArrayBuffer // javascript: ArrayBuffer {initData InitData initData}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = (input.Get("initDataType")).String()
	out.InitDataType = value3
	if input.Get("initData").Type() != js.TypeNull {
		value4 = javascript.ArrayBufferFromJS(input.Get("initData"))
	}
	out.InitData = value4
	return &out
}

// dictionary: MediaKeyMessageEventInit
type MediaKeyMessageEventInit struct {
	Bubbles     bool
	Cancelable  bool
	Composed    bool
	MessageType MediaKeyMessageType
	Message     *javascript.ArrayBuffer
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaKeyMessageEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.MessageType.JSValue()
	out.Set("messageType", value3)
	value4 := _this.Message.JSValue()
	out.Set("message", value4)
	return out
}

// MediaKeyMessageEventInitFromJS is allocating a new
// MediaKeyMessageEventInit object and copy all values from
// input javascript object
func MediaKeyMessageEventInitFromJS(value js.Wrapper) *MediaKeyMessageEventInit {
	input := value.JSValue()
	var out MediaKeyMessageEventInit
	var (
		value0 bool                    // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                    // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                    // javascript: boolean {composed Composed composed}
		value3 MediaKeyMessageType     // javascript: MediaKeyMessageType {messageType MessageType messageType}
		value4 *javascript.ArrayBuffer // javascript: ArrayBuffer {message Message message}
	)
	value0 = (input.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (input.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (input.Get("composed")).Bool()
	out.Composed = value2
	value3 = MediaKeyMessageTypeFromJS(input.Get("messageType"))
	out.MessageType = value3
	value4 = javascript.ArrayBufferFromJS(input.Get("message"))
	out.Message = value4
	return &out
}

// dictionary: MediaKeySystemConfiguration
type MediaKeySystemConfiguration struct {
	Label                 string
	InitDataTypes         []string
	AudioCapabilities     []*MediaKeySystemMediaCapability
	VideoCapabilities     []*MediaKeySystemMediaCapability
	DistinctiveIdentifier MediaKeysRequirement
	PersistentState       MediaKeysRequirement
	SessionTypes          []string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaKeySystemConfiguration) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Label
	out.Set("label", value0)
	value1 := js.Global().Get("Array").New(len(_this.InitDataTypes))
	for __idx1, __seq_in1 := range _this.InitDataTypes {
		__seq_out1 := __seq_in1
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("initDataTypes", value1)
	value2 := js.Global().Get("Array").New(len(_this.AudioCapabilities))
	for __idx2, __seq_in2 := range _this.AudioCapabilities {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("audioCapabilities", value2)
	value3 := js.Global().Get("Array").New(len(_this.VideoCapabilities))
	for __idx3, __seq_in3 := range _this.VideoCapabilities {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("videoCapabilities", value3)
	value4 := _this.DistinctiveIdentifier.JSValue()
	out.Set("distinctiveIdentifier", value4)
	value5 := _this.PersistentState.JSValue()
	out.Set("persistentState", value5)
	value6 := js.Global().Get("Array").New(len(_this.SessionTypes))
	for __idx6, __seq_in6 := range _this.SessionTypes {
		__seq_out6 := __seq_in6
		value6.SetIndex(__idx6, __seq_out6)
	}
	out.Set("sessionTypes", value6)
	return out
}

// MediaKeySystemConfigurationFromJS is allocating a new
// MediaKeySystemConfiguration object and copy all values from
// input javascript object
func MediaKeySystemConfigurationFromJS(value js.Wrapper) *MediaKeySystemConfiguration {
	input := value.JSValue()
	var out MediaKeySystemConfiguration
	var (
		value0 string                           // javascript: DOMString {label Label label}
		value1 []string                         // javascript: sequence<DOMString> {initDataTypes InitDataTypes initDataTypes}
		value2 []*MediaKeySystemMediaCapability // javascript: sequence<MediaKeySystemMediaCapability> {audioCapabilities AudioCapabilities audioCapabilities}
		value3 []*MediaKeySystemMediaCapability // javascript: sequence<MediaKeySystemMediaCapability> {videoCapabilities VideoCapabilities videoCapabilities}
		value4 MediaKeysRequirement             // javascript: MediaKeysRequirement {distinctiveIdentifier DistinctiveIdentifier distinctiveIdentifier}
		value5 MediaKeysRequirement             // javascript: MediaKeysRequirement {persistentState PersistentState persistentState}
		value6 []string                         // javascript: sequence<DOMString> {sessionTypes SessionTypes sessionTypes}
	)
	value0 = (input.Get("label")).String()
	out.Label = value0
	__length1 := input.Get("initDataTypes").Length()
	__array1 := make([]string, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 string
		__seq_in1 := input.Get("initDataTypes").Index(__idx1)
		__seq_out1 = (__seq_in1).String()
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.InitDataTypes = value1
	__length2 := input.Get("audioCapabilities").Length()
	__array2 := make([]*MediaKeySystemMediaCapability, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *MediaKeySystemMediaCapability
		__seq_in2 := input.Get("audioCapabilities").Index(__idx2)
		__seq_out2 = MediaKeySystemMediaCapabilityFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.AudioCapabilities = value2
	__length3 := input.Get("videoCapabilities").Length()
	__array3 := make([]*MediaKeySystemMediaCapability, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *MediaKeySystemMediaCapability
		__seq_in3 := input.Get("videoCapabilities").Index(__idx3)
		__seq_out3 = MediaKeySystemMediaCapabilityFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.VideoCapabilities = value3
	value4 = MediaKeysRequirementFromJS(input.Get("distinctiveIdentifier"))
	out.DistinctiveIdentifier = value4
	value5 = MediaKeysRequirementFromJS(input.Get("persistentState"))
	out.PersistentState = value5
	__length6 := input.Get("sessionTypes").Length()
	__array6 := make([]string, __length6, __length6)
	for __idx6 := 0; __idx6 < __length6; __idx6++ {
		var __seq_out6 string
		__seq_in6 := input.Get("sessionTypes").Index(__idx6)
		__seq_out6 = (__seq_in6).String()
		__array6[__idx6] = __seq_out6
	}
	value6 = __array6
	out.SessionTypes = value6
	return &out
}

// dictionary: MediaKeySystemMediaCapability
type MediaKeySystemMediaCapability struct {
	ContentType string
	Robustness  string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaKeySystemMediaCapability) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.ContentType
	out.Set("contentType", value0)
	value1 := _this.Robustness
	out.Set("robustness", value1)
	return out
}

// MediaKeySystemMediaCapabilityFromJS is allocating a new
// MediaKeySystemMediaCapability object and copy all values from
// input javascript object
func MediaKeySystemMediaCapabilityFromJS(value js.Wrapper) *MediaKeySystemMediaCapability {
	input := value.JSValue()
	var out MediaKeySystemMediaCapability
	var (
		value0 string // javascript: DOMString {contentType ContentType contentType}
		value1 string // javascript: DOMString {robustness Robustness robustness}
	)
	value0 = (input.Get("contentType")).String()
	out.ContentType = value0
	value1 = (input.Get("robustness")).String()
	out.Robustness = value1
	return &out
}

// interface: MediaEncryptedEvent
type MediaEncryptedEvent struct {
	domcore.Event
}

// MediaEncryptedEventFromJS is casting a js.Wrapper into MediaEncryptedEvent.
func MediaEncryptedEventFromJS(value js.Wrapper) *MediaEncryptedEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaEncryptedEvent{}
	ret.Value_JS = input
	return ret
}

func NewMediaEncryptedEvent(_type string, eventInitDict *MediaEncryptedEventInit) (_result *MediaEncryptedEvent) {
	_klass := js.Global().Get("MediaEncryptedEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MediaEncryptedEvent // javascript: MediaEncryptedEvent _what_return_name
	)
	_converted = MediaEncryptedEventFromJS(_returned)
	_result = _converted
	return
}

// InitDataType returning attribute 'initDataType' with
// type string (idl: DOMString).
func (_this *MediaEncryptedEvent) InitDataType() string {
	var ret string
	value := _this.Value_JS.Get("initDataType")
	ret = (value).String()
	return ret
}

// InitData returning attribute 'initData' with
// type javascript.ArrayBuffer (idl: ArrayBuffer).
func (_this *MediaEncryptedEvent) InitData() *javascript.ArrayBuffer {
	var ret *javascript.ArrayBuffer
	value := _this.Value_JS.Get("initData")
	if value.Type() != js.TypeNull {
		ret = javascript.ArrayBufferFromJS(value)
	}
	return ret
}

// interface: MediaKeyMessageEvent
type MediaKeyMessageEvent struct {
	domcore.Event
}

// MediaKeyMessageEventFromJS is casting a js.Wrapper into MediaKeyMessageEvent.
func MediaKeyMessageEventFromJS(value js.Wrapper) *MediaKeyMessageEvent {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaKeyMessageEvent{}
	ret.Value_JS = input
	return ret
}

func NewMediaKeyMessageEvent(_type string, eventInitDict *MediaKeyMessageEventInit) (_result *MediaKeyMessageEvent) {
	_klass := js.Global().Get("MediaKeyMessageEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MediaKeyMessageEvent // javascript: MediaKeyMessageEvent _what_return_name
	)
	_converted = MediaKeyMessageEventFromJS(_returned)
	_result = _converted
	return
}

// MessageType returning attribute 'messageType' with
// type MediaKeyMessageType (idl: MediaKeyMessageType).
func (_this *MediaKeyMessageEvent) MessageType() MediaKeyMessageType {
	var ret MediaKeyMessageType
	value := _this.Value_JS.Get("messageType")
	ret = MediaKeyMessageTypeFromJS(value)
	return ret
}

// Message returning attribute 'message' with
// type javascript.ArrayBuffer (idl: ArrayBuffer).
func (_this *MediaKeyMessageEvent) Message() *javascript.ArrayBuffer {
	var ret *javascript.ArrayBuffer
	value := _this.Value_JS.Get("message")
	ret = javascript.ArrayBufferFromJS(value)
	return ret
}

// interface: MediaKeySession
type MediaKeySession struct {
	domcore.EventTarget
}

// MediaKeySessionFromJS is casting a js.Wrapper into MediaKeySession.
func MediaKeySessionFromJS(value js.Wrapper) *MediaKeySession {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaKeySession{}
	ret.Value_JS = input
	return ret
}

// SessionId returning attribute 'sessionId' with
// type string (idl: DOMString).
func (_this *MediaKeySession) SessionId() string {
	var ret string
	value := _this.Value_JS.Get("sessionId")
	ret = (value).String()
	return ret
}

// Expiration returning attribute 'expiration' with
// type float64 (idl: unrestricted double).
func (_this *MediaKeySession) Expiration() float64 {
	var ret float64
	value := _this.Value_JS.Get("expiration")
	ret = (value).Float()
	return ret
}

// Closed returning attribute 'closed' with
// type javascript.Promise (idl: Promise).
func (_this *MediaKeySession) Closed() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("closed")
	ret = javascript.PromiseFromJS(value)
	return ret
}

// KeyStatuses returning attribute 'keyStatuses' with
// type MediaKeyStatusMap (idl: MediaKeyStatusMap).
func (_this *MediaKeySession) KeyStatuses() *MediaKeyStatusMap {
	var ret *MediaKeyStatusMap
	value := _this.Value_JS.Get("keyStatuses")
	ret = MediaKeyStatusMapFromJS(value)
	return ret
}

// Onkeystatuseschange returning attribute 'onkeystatuseschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaKeySession) Onkeystatuseschange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeystatuseschange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeystatuseschange setting attribute 'onkeystatuseschange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaKeySession) SetOnkeystatuseschange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onkeystatuseschange", input)
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaKeySession) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *MediaKeySession) SetOnmessage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessage", input)
}

func (_this *MediaKeySession) GenerateRequest(initDataType string, initData *Union) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := initDataType
	_args[0] = _p0
	_end++
	_p1 := initData.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("generateRequest", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeySession) Load(sessionId string) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sessionId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("load", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeySession) Update(response *Union) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := response.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("update", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeySession) Close() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("close", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeySession) Remove() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("remove", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaKeyStatusMap
type MediaKeyStatusMap struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaKeyStatusMap) JSValue() js.Value {
	return _this.Value_JS
}

// MediaKeyStatusMapFromJS is casting a js.Wrapper into MediaKeyStatusMap.
func MediaKeyStatusMapFromJS(value js.Wrapper) *MediaKeyStatusMap {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaKeyStatusMap{}
	ret.Value_JS = input
	return ret
}

// Size returning attribute 'size' with
// type uint (idl: unsigned long).
func (_this *MediaKeyStatusMap) Size() uint {
	var ret uint
	value := _this.Value_JS.Get("size")
	ret = (uint)((value).Int())
	return ret
}

func (_this *MediaKeyStatusMap) Has(keyId *Union) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyId.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("has", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *MediaKeyStatusMap) Get(keyId *Union) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyId.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

// interface: MediaKeySystemAccess
type MediaKeySystemAccess struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaKeySystemAccess) JSValue() js.Value {
	return _this.Value_JS
}

// MediaKeySystemAccessFromJS is casting a js.Wrapper into MediaKeySystemAccess.
func MediaKeySystemAccessFromJS(value js.Wrapper) *MediaKeySystemAccess {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaKeySystemAccess{}
	ret.Value_JS = input
	return ret
}

// KeySystem returning attribute 'keySystem' with
// type string (idl: DOMString).
func (_this *MediaKeySystemAccess) KeySystem() string {
	var ret string
	value := _this.Value_JS.Get("keySystem")
	ret = (value).String()
	return ret
}

func (_this *MediaKeySystemAccess) GetConfiguration() (_result *MediaKeySystemConfiguration) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getConfiguration", _args[0:_end]...)
	var (
		_converted *MediaKeySystemConfiguration // javascript: MediaKeySystemConfiguration _what_return_name
	)
	_converted = MediaKeySystemConfigurationFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeySystemAccess) CreateMediaKeys() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createMediaKeys", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: MediaKeys
type MediaKeys struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaKeys) JSValue() js.Value {
	return _this.Value_JS
}

// MediaKeysFromJS is casting a js.Wrapper into MediaKeys.
func MediaKeysFromJS(value js.Wrapper) *MediaKeys {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaKeys{}
	ret.Value_JS = input
	return ret
}

func (_this *MediaKeys) CreateSession(sessionType *MediaKeySessionType) (_result *MediaKeySession) {
	var (
		_args [1]interface{}
		_end  int
	)
	if sessionType != nil {
		_p0 := sessionType.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createSession", _args[0:_end]...)
	var (
		_converted *MediaKeySession // javascript: MediaKeySession _what_return_name
	)
	_converted = MediaKeySessionFromJS(_returned)
	_result = _converted
	return
}

func (_this *MediaKeys) SetServerCertificate(serverCertificate *Union) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := serverCertificate.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("setServerCertificate", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}
