// Code generated by webidl-bind. DO NOT EDIT.

package session

import "syscall/js"

import (
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// javascript.FrozenArray

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: MediaSessionAction
type MediaSessionAction int

const (
	PlayMediaSessionAction MediaSessionAction = iota
	PauseMediaSessionAction
	SeekbackwardMediaSessionAction
	SeekforwardMediaSessionAction
	PrevioustrackMediaSessionAction
	NexttrackMediaSessionAction
	SkipadMediaSessionAction
)

var mediaSessionActionToWasmTable = []string{
	"play", "pause", "seekbackward", "seekforward", "previoustrack", "nexttrack", "skipad",
}

var mediaSessionActionFromWasmTable = map[string]MediaSessionAction{
	"play": PlayMediaSessionAction, "pause": PauseMediaSessionAction, "seekbackward": SeekbackwardMediaSessionAction, "seekforward": SeekforwardMediaSessionAction, "previoustrack": PrevioustrackMediaSessionAction, "nexttrack": NexttrackMediaSessionAction, "skipad": SkipadMediaSessionAction,
}

// JSValue is converting this enum into a java object
func (this *MediaSessionAction) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaSessionAction) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaSessionActionToWasmTable) {
		return mediaSessionActionToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaSessionActionFromJS is converting a javascript value into
// a MediaSessionAction enum value.
func MediaSessionActionFromJS(value js.Value) MediaSessionAction {
	key := value.String()
	conv, ok := mediaSessionActionFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: MediaSessionPlaybackState
type MediaSessionPlaybackState int

const (
	NoneMediaSessionPlaybackState MediaSessionPlaybackState = iota
	PausedMediaSessionPlaybackState
	PlayingMediaSessionPlaybackState
)

var mediaSessionPlaybackStateToWasmTable = []string{
	"none", "paused", "playing",
}

var mediaSessionPlaybackStateFromWasmTable = map[string]MediaSessionPlaybackState{
	"none": NoneMediaSessionPlaybackState, "paused": PausedMediaSessionPlaybackState, "playing": PlayingMediaSessionPlaybackState,
}

// JSValue is converting this enum into a java object
func (this *MediaSessionPlaybackState) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this MediaSessionPlaybackState) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(mediaSessionPlaybackStateToWasmTable) {
		return mediaSessionPlaybackStateToWasmTable[idx]
	}
	panic("unknown input value")
}

// MediaSessionPlaybackStateFromJS is converting a javascript value into
// a MediaSessionPlaybackState enum value.
func MediaSessionPlaybackStateFromJS(value js.Value) MediaSessionPlaybackState {
	key := value.String()
	conv, ok := mediaSessionPlaybackStateFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: MediaSessionActionHandler
type MediaSessionActionHandlerFunc func()

// MediaSessionActionHandler is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type MediaSessionActionHandler js.Func

func MediaSessionActionHandlerToJS(callback MediaSessionActionHandlerFunc) *MediaSessionActionHandler {
	if callback == nil {
		return nil
	}
	ret := MediaSessionActionHandler(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var ()
		callback()
		// returning no return value
		return nil
	}))
	return &ret
}

func MediaSessionActionHandlerFromJS(_value js.Value) MediaSessionActionHandlerFunc {
	return func() {
		var (
			_args [0]interface{}
			_end  int
		)
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: MediaImage
type MediaImage struct {
	Src   string
	Sizes string
	Type  string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaImage) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Src
	out.Set("src", value0)
	value1 := _this.Sizes
	out.Set("sizes", value1)
	value2 := _this.Type
	out.Set("type", value2)
	return out
}

// MediaImageFromJS is allocating a new
// MediaImage object and copy all values from
// input javascript object
func MediaImageFromJS(value js.Wrapper) *MediaImage {
	input := value.JSValue()
	var out MediaImage
	var (
		value0 string // javascript: USVString {src Src src}
		value1 string // javascript: DOMString {sizes Sizes sizes}
		value2 string // javascript: DOMString {type Type _type}
	)
	value0 = (input.Get("src")).String()
	out.Src = value0
	value1 = (input.Get("sizes")).String()
	out.Sizes = value1
	value2 = (input.Get("type")).String()
	out.Type = value2
	return &out
}

// dictionary: MediaMetadataInit
type MediaMetadataInit struct {
	Title   string
	Artist  string
	Album   string
	Artwork []*MediaImage
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *MediaMetadataInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Title
	out.Set("title", value0)
	value1 := _this.Artist
	out.Set("artist", value1)
	value2 := _this.Album
	out.Set("album", value2)
	value3 := js.Global().Get("Array").New(len(_this.Artwork))
	for __idx3, __seq_in3 := range _this.Artwork {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("artwork", value3)
	return out
}

// MediaMetadataInitFromJS is allocating a new
// MediaMetadataInit object and copy all values from
// input javascript object
func MediaMetadataInitFromJS(value js.Wrapper) *MediaMetadataInit {
	input := value.JSValue()
	var out MediaMetadataInit
	var (
		value0 string        // javascript: DOMString {title Title title}
		value1 string        // javascript: DOMString {artist Artist artist}
		value2 string        // javascript: DOMString {album Album album}
		value3 []*MediaImage // javascript: sequence<MediaImage> {artwork Artwork artwork}
	)
	value0 = (input.Get("title")).String()
	out.Title = value0
	value1 = (input.Get("artist")).String()
	out.Artist = value1
	value2 = (input.Get("album")).String()
	out.Album = value2
	__length3 := input.Get("artwork").Length()
	__array3 := make([]*MediaImage, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *MediaImage
		__seq_in3 := input.Get("artwork").Index(__idx3)
		__seq_out3 = MediaImageFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.Artwork = value3
	return &out
}

// interface: MediaMetadata
type MediaMetadata struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaMetadata) JSValue() js.Value {
	return _this.Value_JS
}

// MediaMetadataFromJS is casting a js.Wrapper into MediaMetadata.
func MediaMetadataFromJS(value js.Wrapper) *MediaMetadata {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaMetadata{}
	ret.Value_JS = input
	return ret
}

func NewMediaMetadata(init *MediaMetadataInit) (_result *MediaMetadata) {
	_klass := js.Global().Get("MediaMetadata")
	var (
		_args [1]interface{}
		_end  int
	)
	if init != nil {
		_p0 := init.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MediaMetadata // javascript: MediaMetadata _what_return_name
	)
	_converted = MediaMetadataFromJS(_returned)
	_result = _converted
	return
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *MediaMetadata) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *MediaMetadata) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Artist returning attribute 'artist' with
// type string (idl: DOMString).
func (_this *MediaMetadata) Artist() string {
	var ret string
	value := _this.Value_JS.Get("artist")
	ret = (value).String()
	return ret
}

// SetArtist setting attribute 'artist' with
// type string (idl: DOMString).
func (_this *MediaMetadata) SetArtist(value string) {
	input := value
	_this.Value_JS.Set("artist", input)
}

// Album returning attribute 'album' with
// type string (idl: DOMString).
func (_this *MediaMetadata) Album() string {
	var ret string
	value := _this.Value_JS.Get("album")
	ret = (value).String()
	return ret
}

// SetAlbum setting attribute 'album' with
// type string (idl: DOMString).
func (_this *MediaMetadata) SetAlbum(value string) {
	input := value
	_this.Value_JS.Set("album", input)
}

// Artwork returning attribute 'artwork' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *MediaMetadata) Artwork() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("artwork")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// SetArtwork setting attribute 'artwork' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *MediaMetadata) SetArtwork(value *javascript.FrozenArray) {
	input := value.JSValue()
	_this.Value_JS.Set("artwork", input)
}

// interface: MediaSession
type MediaSession struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *MediaSession) JSValue() js.Value {
	return _this.Value_JS
}

// MediaSessionFromJS is casting a js.Wrapper into MediaSession.
func MediaSessionFromJS(value js.Wrapper) *MediaSession {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &MediaSession{}
	ret.Value_JS = input
	return ret
}

// Metadata returning attribute 'metadata' with
// type MediaMetadata (idl: MediaMetadata).
func (_this *MediaSession) Metadata() *MediaMetadata {
	var ret *MediaMetadata
	value := _this.Value_JS.Get("metadata")
	if value.Type() != js.TypeNull {
		ret = MediaMetadataFromJS(value)
	}
	return ret
}

// SetMetadata setting attribute 'metadata' with
// type MediaMetadata (idl: MediaMetadata).
func (_this *MediaSession) SetMetadata(value *MediaMetadata) {
	input := value.JSValue()
	_this.Value_JS.Set("metadata", input)
}

// PlaybackState returning attribute 'playbackState' with
// type MediaSessionPlaybackState (idl: MediaSessionPlaybackState).
func (_this *MediaSession) PlaybackState() MediaSessionPlaybackState {
	var ret MediaSessionPlaybackState
	value := _this.Value_JS.Get("playbackState")
	ret = MediaSessionPlaybackStateFromJS(value)
	return ret
}

// SetPlaybackState setting attribute 'playbackState' with
// type MediaSessionPlaybackState (idl: MediaSessionPlaybackState).
func (_this *MediaSession) SetPlaybackState(value MediaSessionPlaybackState) {
	input := value.JSValue()
	_this.Value_JS.Set("playbackState", input)
}

func (_this *MediaSession) SetActionHandler(action MediaSessionAction, handler *MediaSessionActionHandler) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := action.JSValue()
	_args[0] = _p0
	_end++

	var __callback1 js.Value
	if handler != nil {
		__callback1 = (*handler).Value
	} else {
		__callback1 = js.Null()
	}
	_p1 := __callback1
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setActionHandler", _args[0:_end]...)
	return
}
