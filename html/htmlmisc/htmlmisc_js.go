// Code generated by webidl-bind. DO NOT EDIT.

package htmlmisc

import "syscall/js"

import (
	"github.com/gowebapi/webapi/clipboard"
	"github.com/gowebapi/webapi/communication/bluetooth"
	"github.com/gowebapi/webapi/communication/netinfo"
	"github.com/gowebapi/webapi/communication/xhr"
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/crypto/credential"
	"github.com/gowebapi/webapi/device/battery"
	"github.com/gowebapi/webapi/device/gamepad"
	"github.com/gowebapi/webapi/device/keyboard"
	"github.com/gowebapi/webapi/device/sensor"
	"github.com/gowebapi/webapi/device/usb"
	"github.com/gowebapi/webapi/device/wakelock"
	"github.com/gowebapi/webapi/device/webvr"
	"github.com/gowebapi/webapi/device/webxr"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/permissions"
	"github.com/gowebapi/webapi/graphics/presentation"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlevent"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/capabilities"
	"github.com/gowebapi/webapi/media/capture/local"
	"github.com/gowebapi/webapi/media/encrypted"
	"github.com/gowebapi/webapi/media/midi"
	"github.com/gowebapi/webapi/media/session"
	"github.com/gowebapi/webapi/serviceworker"
	"github.com/gowebapi/webapi/share"
	"github.com/gowebapi/webapi/storage"
)

// using following types:
// battery.PromiseBatteryManager
// bluetooth.Bluetooth
// capabilities.MediaCapabilities
// channel.MessageEvent
// clipboard.Clipboard
// credential.CredentialsContainer
// dom.Node
// dom.NodeList
// domcore.DOMStringList
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// encrypted.MediaKeySystemConfiguration
// encrypted.PromiseMediaKeySystemAccess
// gamepad.Gamepad
// htmlevent.ErrorEvent
// javascript.FrozenArray
// javascript.PromiseVoid
// keyboard.Keyboard
// local.MediaDevices
// local.MediaStreamConstraints
// local.NavigatorUserMediaErrorCallback
// local.NavigatorUserMediaSuccessCallback
// midi.Options
// midi.PromiseAccess
// netinfo.NetworkInformation
// permissions.Permissions
// presentation.Presentation
// sensor.Geolocation
// serviceworker.ServiceWorkerContainer
// session.MediaSession
// share.ShareData
// storage.StorageManager
// usb.USB
// wakelock.PromiseWakeLock
// wakelock.WakeLockType
// webvr.PromiseSequenceDisplay
// webxr.XR
// xhr.ProgressEvent

// source idl files:
// html.idl

// transform files:
// html.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: ScrollRestoration
type ScrollRestoration int

const (
	AutoScrollRestoration ScrollRestoration = iota
	ManualScrollRestoration
)

var scrollRestorationToWasmTable = []string{
	"auto", "manual",
}

var scrollRestorationFromWasmTable = map[string]ScrollRestoration{
	"auto": AutoScrollRestoration, "manual": ManualScrollRestoration,
}

// JSValue is converting this enum into a javascript object
func (this *ScrollRestoration) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ScrollRestoration) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(scrollRestorationToWasmTable) {
		return scrollRestorationToWasmTable[idx]
	}
	panic("unknown input value")
}

// ScrollRestorationFromJS is converting a javascript value into
// a ScrollRestoration enum value.
func ScrollRestorationFromJS(value js.Value) ScrollRestoration {
	key := value.String()
	conv, ok := scrollRestorationFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: CustomElementConstructor
type CustomElementConstructorFunc func() interface{}

// CustomElementConstructor is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type CustomElementConstructor js.Func

func CustomElementConstructorToJS(callback CustomElementConstructorFunc) *CustomElementConstructor {
	if callback == nil {
		return nil
	}
	ret := CustomElementConstructor(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var ()
		_returned := callback()
		_converted := _returned
		return _converted
	}))
	return &ret
}

func CustomElementConstructorFromJS(_value js.Value) CustomElementConstructorFunc {
	return func() (_result interface{}) {
		var (
			_args [0]interface{}
			_end  int
		)
		_returned := _value.Invoke(_args[0:_end]...)
		var (
			_converted js.Value // javascript: any
		)
		_converted = _returned
		_result = _converted
		return
	}
}

// dictionary: ElementDefinitionOptions
type ElementDefinitionOptions struct {
	Extends string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ElementDefinitionOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Extends
	out.Set("extends", value0)
	return out
}

// ElementDefinitionOptionsFromJS is allocating a new
// ElementDefinitionOptions object and copy all values in the value javascript object.
func ElementDefinitionOptionsFromJS(value js.Value) *ElementDefinitionOptions {
	var out ElementDefinitionOptions
	var (
		value0 string // javascript: DOMString {extends Extends extends}
	)
	value0 = (value.Get("extends")).String()
	out.Extends = value0
	return &out
}

// dictionary: EventSourceInit
type EventSourceInit struct {
	WithCredentials bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *EventSourceInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.WithCredentials
	out.Set("withCredentials", value0)
	return out
}

// EventSourceInitFromJS is allocating a new
// EventSourceInit object and copy all values in the value javascript object.
func EventSourceInitFromJS(value js.Value) *EventSourceInit {
	var out EventSourceInit
	var (
		value0 bool // javascript: boolean {withCredentials WithCredentials withCredentials}
	)
	value0 = (value.Get("withCredentials")).Bool()
	out.WithCredentials = value0
	return &out
}

// dictionary: ImageBitmapRenderingContextSettings
type ImageBitmapRenderingContextSettings struct {
	Alpha bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ImageBitmapRenderingContextSettings) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Alpha
	out.Set("alpha", value0)
	return out
}

// ImageBitmapRenderingContextSettingsFromJS is allocating a new
// ImageBitmapRenderingContextSettings object and copy all values in the value javascript object.
func ImageBitmapRenderingContextSettingsFromJS(value js.Value) *ImageBitmapRenderingContextSettings {
	var out ImageBitmapRenderingContextSettings
	var (
		value0 bool // javascript: boolean {alpha Alpha alpha}
	)
	value0 = (value.Get("alpha")).Bool()
	out.Alpha = value0
	return &out
}

// class: ApplicationCache
type ApplicationCache struct {
	domcore.EventTarget
}

// ApplicationCacheFromJS is casting a js.Value into ApplicationCache.
func ApplicationCacheFromJS(value js.Value) *ApplicationCache {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ApplicationCache{}
	ret.Value_JS = value
	return ret
}

// ApplicationCacheFromJS is casting from something that holds a js.Value into ApplicationCache.
func ApplicationCacheFromWrapper(input core.Wrapper) *ApplicationCache {
	return ApplicationCacheFromJS(input.JSValue())
}

const (
	UNCACHED    int = 0
	IDLE        int = 1
	CHECKING    int = 2
	DOWNLOADING int = 3
	UPDATEREADY int = 4
	OBSOLETE    int = 5
)

// Status returning attribute 'status' with
// type int (idl: unsigned short).
func (_this *ApplicationCache) Status() int {
	var ret int
	value := _this.Value_JS.Get("status")
	ret = (value).Int()
	return ret
}

// OnChecking returning attribute 'onchecking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnChecking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchecking")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnNoupdate returning attribute 'onnoupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnNoupdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onnoupdate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDownloading returning attribute 'ondownloading' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnDownloading() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondownloading")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnProgress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnProgress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUpdateready returning attribute 'onupdateready' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnUpdateready() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onupdateready")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCached returning attribute 'oncached' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnCached() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncached")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnObsolete returning attribute 'onobsolete' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ApplicationCache) OnObsolete() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onobsolete")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncApplicationCache_domcore_Event(listener func(event *domcore.Event, target *ApplicationCache)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := ApplicationCacheFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCached is adding doing AddEventListener for 'Cached' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventCached(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cached", cb)
	return cb
}

// SetOnCached is assigning a function to 'oncached'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnCached(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("oncached", cb)
	return cb
}

// AddChecking is adding doing AddEventListener for 'Checking' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventChecking(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "checking", cb)
	return cb
}

// SetOnChecking is assigning a function to 'onchecking'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnChecking(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("onchecking", cb)
	return cb
}

// AddDownloading is adding doing AddEventListener for 'Downloading' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventDownloading(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "downloading", cb)
	return cb
}

// SetOnDownloading is assigning a function to 'ondownloading'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnDownloading(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("ondownloading", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventError(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnError(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddNoupdate is adding doing AddEventListener for 'Noupdate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventNoupdate(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "noupdate", cb)
	return cb
}

// SetOnNoupdate is assigning a function to 'onnoupdate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnNoupdate(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("onnoupdate", cb)
	return cb
}

// AddObsolete is adding doing AddEventListener for 'Obsolete' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventObsolete(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "obsolete", cb)
	return cb
}

// SetOnObsolete is assigning a function to 'onobsolete'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnObsolete(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("onobsolete", cb)
	return cb
}

// event attribute: xhr.ProgressEvent
func eventFuncApplicationCache_xhr_ProgressEvent(listener func(event *xhr.ProgressEvent, target *ApplicationCache)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *xhr.ProgressEvent
		value := args[0]
		incoming := value.Get("target")
		ret = xhr.ProgressEventFromJS(value)
		src := ApplicationCacheFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddProgress is adding doing AddEventListener for 'Progress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventProgress(listener func(event *xhr.ProgressEvent, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "progress", cb)
	return cb
}

// SetOnProgress is assigning a function to 'onprogress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnProgress(listener func(event *xhr.ProgressEvent, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onprogress", cb)
	return cb
}

// AddUpdateready is adding doing AddEventListener for 'Updateready' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) AddEventUpdateready(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "updateready", cb)
	return cb
}

// SetOnUpdateready is assigning a function to 'onupdateready'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ApplicationCache) SetOnUpdateready(listener func(event *domcore.Event, currentTarget *ApplicationCache)) js.Func {
	cb := eventFuncApplicationCache_domcore_Event(listener)
	_this.Value_JS.Set("onupdateready", cb)
	return cb
}

func (_this *ApplicationCache) Update() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("update", _args[0:_end]...)
	return
}

func (_this *ApplicationCache) Abort() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("abort", _args[0:_end]...)
	return
}

func (_this *ApplicationCache) SwapCache() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("swapCache", _args[0:_end]...)
	return
}

// class: BarProp
type BarProp struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *BarProp) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// BarPropFromJS is casting a js.Value into BarProp.
func BarPropFromJS(value js.Value) *BarProp {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &BarProp{}
	ret.Value_JS = value
	return ret
}

// BarPropFromJS is casting from something that holds a js.Value into BarProp.
func BarPropFromWrapper(input core.Wrapper) *BarProp {
	return BarPropFromJS(input.JSValue())
}

// Visible returning attribute 'visible' with
// type bool (idl: boolean).
func (_this *BarProp) Visible() bool {
	var ret bool
	value := _this.Value_JS.Get("visible")
	ret = (value).Bool()
	return ret
}

// class: CustomElementRegistry
type CustomElementRegistry struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *CustomElementRegistry) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// CustomElementRegistryFromJS is casting a js.Value into CustomElementRegistry.
func CustomElementRegistryFromJS(value js.Value) *CustomElementRegistry {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CustomElementRegistry{}
	ret.Value_JS = value
	return ret
}

// CustomElementRegistryFromJS is casting from something that holds a js.Value into CustomElementRegistry.
func CustomElementRegistryFromWrapper(input core.Wrapper) *CustomElementRegistry {
	return CustomElementRegistryFromJS(input.JSValue())
}

func (_this *CustomElementRegistry) Define(name string, constructor *CustomElementConstructor, options *ElementDefinitionOptions) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++

	var __callback1 js.Value
	if constructor != nil {
		__callback1 = (*constructor).Value
	} else {
		__callback1 = js.Null()
	}
	_p1 := __callback1
	_args[1] = _p1
	_end++
	if options != nil {
		_p2 := options.JSValue()
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("define", _args[0:_end]...)
	return
}

func (_this *CustomElementRegistry) Get(name string) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *CustomElementRegistry) WhenDefined(name string) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("whenDefined", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *CustomElementRegistry) Upgrade(root *dom.Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := root.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("upgrade", _args[0:_end]...)
	return
}

// class: EventSource
type EventSource struct {
	domcore.EventTarget
}

// EventSourceFromJS is casting a js.Value into EventSource.
func EventSourceFromJS(value js.Value) *EventSource {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &EventSource{}
	ret.Value_JS = value
	return ret
}

// EventSourceFromJS is casting from something that holds a js.Value into EventSource.
func EventSourceFromWrapper(input core.Wrapper) *EventSource {
	return EventSourceFromJS(input.JSValue())
}

const (
	CONNECTING int = 0
	OPEN       int = 1
	CLOSED     int = 2
)

func NewEventSource(url string, eventSourceInitDict *EventSourceInit) (_result *EventSource) {
	_klass := js.Global().Get("EventSource")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	if eventSourceInitDict != nil {
		_p1 := eventSourceInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *EventSource // javascript: EventSource _what_return_name
	)
	_converted = EventSourceFromJS(_returned)
	_result = _converted
	return
}

// Url returning attribute 'url' with
// type string (idl: USVString).
func (_this *EventSource) Url() string {
	var ret string
	value := _this.Value_JS.Get("url")
	ret = (value).String()
	return ret
}

// WithCredentials returning attribute 'withCredentials' with
// type bool (idl: boolean).
func (_this *EventSource) WithCredentials() bool {
	var ret bool
	value := _this.Value_JS.Get("withCredentials")
	ret = (value).Bool()
	return ret
}

// ReadyState returning attribute 'readyState' with
// type int (idl: unsigned short).
func (_this *EventSource) ReadyState() int {
	var ret int
	value := _this.Value_JS.Get("readyState")
	ret = (value).Int()
	return ret
}

// OnOpen returning attribute 'onopen' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *EventSource) OnOpen() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onopen")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *EventSource) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *EventSource) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: htmlevent.ErrorEvent
func eventFuncEventSource_htmlevent_ErrorEvent(listener func(event *htmlevent.ErrorEvent, target *EventSource)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.ErrorEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.ErrorEventFromJS(value)
		src := EventSourceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) AddEventError(listener func(event *htmlevent.ErrorEvent, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_htmlevent_ErrorEvent(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) SetOnError(listener func(event *htmlevent.ErrorEvent, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_htmlevent_ErrorEvent(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncEventSource_channel_MessageEvent(listener func(event *channel.MessageEvent, target *EventSource)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := EventSourceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// event attribute: domcore.Event
func eventFuncEventSource_domcore_Event(listener func(event *domcore.Event, target *EventSource)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := EventSourceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddOpen is adding doing AddEventListener for 'Open' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) AddEventOpen(listener func(event *domcore.Event, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "open", cb)
	return cb
}

// SetOnOpen is assigning a function to 'onopen'. This
// This method is returning allocated javascript function that need to be released.
func (_this *EventSource) SetOnOpen(listener func(event *domcore.Event, currentTarget *EventSource)) js.Func {
	cb := eventFuncEventSource_domcore_Event(listener)
	_this.Value_JS.Set("onopen", cb)
	return cb
}

func (_this *EventSource) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

// class: External
type External struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *External) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ExternalFromJS is casting a js.Value into External.
func ExternalFromJS(value js.Value) *External {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &External{}
	ret.Value_JS = value
	return ret
}

// ExternalFromJS is casting from something that holds a js.Value into External.
func ExternalFromWrapper(input core.Wrapper) *External {
	return ExternalFromJS(input.JSValue())
}

func (_this *External) AddSearchProvider() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("AddSearchProvider", _args[0:_end]...)
	return
}

func (_this *External) IsSearchProviderInstalled() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("IsSearchProviderInstalled", _args[0:_end]...)
	return
}

// class: History
type History struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *History) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// HistoryFromJS is casting a js.Value into History.
func HistoryFromJS(value js.Value) *History {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &History{}
	ret.Value_JS = value
	return ret
}

// HistoryFromJS is casting from something that holds a js.Value into History.
func HistoryFromWrapper(input core.Wrapper) *History {
	return HistoryFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *History) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// ScrollRestoration returning attribute 'scrollRestoration' with
// type ScrollRestoration (idl: ScrollRestoration).
func (_this *History) ScrollRestoration() ScrollRestoration {
	var ret ScrollRestoration
	value := _this.Value_JS.Get("scrollRestoration")
	ret = ScrollRestorationFromJS(value)
	return ret
}

// SetScrollRestoration setting attribute 'scrollRestoration' with
// type ScrollRestoration (idl: ScrollRestoration).
func (_this *History) SetScrollRestoration(value ScrollRestoration) {
	input := value.JSValue()
	_this.Value_JS.Set("scrollRestoration", input)
}

// State returning attribute 'state' with
// type Any (idl: any).
func (_this *History) State() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("state")
	ret = value
	return ret
}

func (_this *History) Go(delta *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if delta != nil {

		var _p0 interface{}
		if delta != nil {
			_p0 = *(delta)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("go", _args[0:_end]...)
	return
}

func (_this *History) Back() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("back", _args[0:_end]...)
	return
}

func (_this *History) Forward() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("forward", _args[0:_end]...)
	return
}

func (_this *History) PushState(data interface{}, title string, url *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_p1 := title
	_args[1] = _p1
	_end++
	if url != nil {

		var _p2 interface{}
		if url != nil {
			_p2 = *(url)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("pushState", _args[0:_end]...)
	return
}

func (_this *History) ReplaceState(data interface{}, title string, url *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_p1 := title
	_args[1] = _p1
	_end++
	if url != nil {

		var _p2 interface{}
		if url != nil {
			_p2 = *(url)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("replaceState", _args[0:_end]...)
	return
}

// class: Location
type Location struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Location) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// LocationFromJS is casting a js.Value into Location.
func LocationFromJS(value js.Value) *Location {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Location{}
	ret.Value_JS = value
	return ret
}

// LocationFromJS is casting from something that holds a js.Value into Location.
func LocationFromWrapper(input core.Wrapper) *Location {
	return LocationFromJS(input.JSValue())
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *Location) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// ToString is an alias for Href.
func (_this *Location) ToString() string {
	return _this.Href()
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *Location) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *Location) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *Location) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// SetProtocol setting attribute 'protocol' with
// type string (idl: USVString).
func (_this *Location) SetProtocol(value string) {
	input := value
	_this.Value_JS.Set("protocol", input)
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *Location) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// SetHost setting attribute 'host' with
// type string (idl: USVString).
func (_this *Location) SetHost(value string) {
	input := value
	_this.Value_JS.Set("host", input)
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *Location) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// SetHostname setting attribute 'hostname' with
// type string (idl: USVString).
func (_this *Location) SetHostname(value string) {
	input := value
	_this.Value_JS.Set("hostname", input)
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *Location) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// SetPort setting attribute 'port' with
// type string (idl: USVString).
func (_this *Location) SetPort(value string) {
	input := value
	_this.Value_JS.Set("port", input)
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *Location) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// SetPathname setting attribute 'pathname' with
// type string (idl: USVString).
func (_this *Location) SetPathname(value string) {
	input := value
	_this.Value_JS.Set("pathname", input)
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *Location) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// SetSearch setting attribute 'search' with
// type string (idl: USVString).
func (_this *Location) SetSearch(value string) {
	input := value
	_this.Value_JS.Set("search", input)
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *Location) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// SetHash setting attribute 'hash' with
// type string (idl: USVString).
func (_this *Location) SetHash(value string) {
	input := value
	_this.Value_JS.Set("hash", input)
}

// AncestorOrigins returning attribute 'ancestorOrigins' with
// type domcore.DOMStringList (idl: DOMStringList).
func (_this *Location) AncestorOrigins() *domcore.DOMStringList {
	var ret *domcore.DOMStringList
	value := _this.Value_JS.Get("ancestorOrigins")
	ret = domcore.DOMStringListFromJS(value)
	return ret
}

func (_this *Location) Assign(url string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("assign", _args[0:_end]...)
	return
}

func (_this *Location) Replace(url string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("replace", _args[0:_end]...)
	return
}

func (_this *Location) Reload() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("reload", _args[0:_end]...)
	return
}

// class: MimeType
type MimeType struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *MimeType) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// MimeTypeFromJS is casting a js.Value into MimeType.
func MimeTypeFromJS(value js.Value) *MimeType {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &MimeType{}
	ret.Value_JS = value
	return ret
}

// MimeTypeFromJS is casting from something that holds a js.Value into MimeType.
func MimeTypeFromWrapper(input core.Wrapper) *MimeType {
	return MimeTypeFromJS(input.JSValue())
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *MimeType) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// Description returning attribute 'description' with
// type string (idl: DOMString).
func (_this *MimeType) Description() string {
	var ret string
	value := _this.Value_JS.Get("description")
	ret = (value).String()
	return ret
}

// Suffixes returning attribute 'suffixes' with
// type string (idl: DOMString).
func (_this *MimeType) Suffixes() string {
	var ret string
	value := _this.Value_JS.Get("suffixes")
	ret = (value).String()
	return ret
}

// EnabledPlugin returning attribute 'enabledPlugin' with
// type Plugin (idl: Plugin).
func (_this *MimeType) EnabledPlugin() *Plugin {
	var ret *Plugin
	value := _this.Value_JS.Get("enabledPlugin")
	ret = PluginFromJS(value)
	return ret
}

// class: MimeTypeArray
type MimeTypeArray struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *MimeTypeArray) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// MimeTypeArrayFromJS is casting a js.Value into MimeTypeArray.
func MimeTypeArrayFromJS(value js.Value) *MimeTypeArray {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &MimeTypeArray{}
	ret.Value_JS = value
	return ret
}

// MimeTypeArrayFromJS is casting from something that holds a js.Value into MimeTypeArray.
func MimeTypeArrayFromWrapper(input core.Wrapper) *MimeTypeArray {
	return MimeTypeArrayFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *MimeTypeArray) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *MimeTypeArray) Index(index uint) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *MimeTypeArray) Get(name string) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *MimeTypeArray) Item(index uint) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *MimeTypeArray) NamedItem(name string) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

// class: Navigator
type Navigator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Navigator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// NavigatorFromJS is casting a js.Value into Navigator.
func NavigatorFromJS(value js.Value) *Navigator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Navigator{}
	ret.Value_JS = value
	return ret
}

// NavigatorFromJS is casting from something that holds a js.Value into Navigator.
func NavigatorFromWrapper(input core.Wrapper) *Navigator {
	return NavigatorFromJS(input.JSValue())
}

// Clipboard returning attribute 'clipboard' with
// type clipboard.Clipboard (idl: Clipboard).
func (_this *Navigator) Clipboard() *clipboard.Clipboard {
	var ret *clipboard.Clipboard
	value := _this.Value_JS.Get("clipboard")
	ret = clipboard.ClipboardFromJS(value)
	return ret
}

// Credentials returning attribute 'credentials' with
// type credential.CredentialsContainer (idl: CredentialsContainer).
func (_this *Navigator) Credentials() *credential.CredentialsContainer {
	var ret *credential.CredentialsContainer
	value := _this.Value_JS.Get("credentials")
	ret = credential.CredentialsContainerFromJS(value)
	return ret
}

// Geolocation returning attribute 'geolocation' with
// type sensor.Geolocation (idl: Geolocation).
func (_this *Navigator) Geolocation() *sensor.Geolocation {
	var ret *sensor.Geolocation
	value := _this.Value_JS.Get("geolocation")
	ret = sensor.GeolocationFromJS(value)
	return ret
}

// Keyboard returning attribute 'keyboard' with
// type keyboard.Keyboard (idl: Keyboard).
func (_this *Navigator) Keyboard() *keyboard.Keyboard {
	var ret *keyboard.Keyboard
	value := _this.Value_JS.Get("keyboard")
	ret = keyboard.KeyboardFromJS(value)
	return ret
}

// MediaCapabilities returning attribute 'mediaCapabilities' with
// type capabilities.MediaCapabilities (idl: MediaCapabilities).
func (_this *Navigator) MediaCapabilities() *capabilities.MediaCapabilities {
	var ret *capabilities.MediaCapabilities
	value := _this.Value_JS.Get("mediaCapabilities")
	ret = capabilities.MediaCapabilitiesFromJS(value)
	return ret
}

// MediaDevices returning attribute 'mediaDevices' with
// type local.MediaDevices (idl: MediaDevices).
func (_this *Navigator) MediaDevices() *local.MediaDevices {
	var ret *local.MediaDevices
	value := _this.Value_JS.Get("mediaDevices")
	ret = local.MediaDevicesFromJS(value)
	return ret
}

// MediaSession returning attribute 'mediaSession' with
// type session.MediaSession (idl: MediaSession).
func (_this *Navigator) MediaSession() *session.MediaSession {
	var ret *session.MediaSession
	value := _this.Value_JS.Get("mediaSession")
	ret = session.MediaSessionFromJS(value)
	return ret
}

// Permissions returning attribute 'permissions' with
// type permissions.Permissions (idl: Permissions).
func (_this *Navigator) Permissions() *permissions.Permissions {
	var ret *permissions.Permissions
	value := _this.Value_JS.Get("permissions")
	ret = permissions.PermissionsFromJS(value)
	return ret
}

// MaxTouchPoints returning attribute 'maxTouchPoints' with
// type int (idl: long).
func (_this *Navigator) MaxTouchPoints() int {
	var ret int
	value := _this.Value_JS.Get("maxTouchPoints")
	ret = (value).Int()
	return ret
}

// Presentation returning attribute 'presentation' with
// type presentation.Presentation (idl: Presentation).
func (_this *Navigator) Presentation() *presentation.Presentation {
	var ret *presentation.Presentation
	value := _this.Value_JS.Get("presentation")
	ret = presentation.PresentationFromJS(value)
	return ret
}

// ServiceWorker returning attribute 'serviceWorker' with
// type serviceworker.ServiceWorkerContainer (idl: ServiceWorkerContainer).
func (_this *Navigator) ServiceWorker() *serviceworker.ServiceWorkerContainer {
	var ret *serviceworker.ServiceWorkerContainer
	value := _this.Value_JS.Get("serviceWorker")
	ret = serviceworker.ServiceWorkerContainerFromJS(value)
	return ret
}

// Bluetooth returning attribute 'bluetooth' with
// type bluetooth.Bluetooth (idl: Bluetooth).
func (_this *Navigator) Bluetooth() *bluetooth.Bluetooth {
	var ret *bluetooth.Bluetooth
	value := _this.Value_JS.Get("bluetooth")
	ret = bluetooth.BluetoothFromJS(value)
	return ret
}

// Usb returning attribute 'usb' with
// type usb.USB (idl: USB).
func (_this *Navigator) Usb() *usb.USB {
	var ret *usb.USB
	value := _this.Value_JS.Get("usb")
	ret = usb.USBFromJS(value)
	return ret
}

// ActiveVRDisplays returning attribute 'activeVRDisplays' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *Navigator) ActiveVRDisplays() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("activeVRDisplays")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Xr returning attribute 'xr' with
// type webxr.XR (idl: XR).
func (_this *Navigator) Xr() *webxr.XR {
	var ret *webxr.XR
	value := _this.Value_JS.Get("xr")
	ret = webxr.XRFromJS(value)
	return ret
}

// AppCodeName returning attribute 'appCodeName' with
// type string (idl: DOMString).
func (_this *Navigator) AppCodeName() string {
	var ret string
	value := _this.Value_JS.Get("appCodeName")
	ret = (value).String()
	return ret
}

// AppName returning attribute 'appName' with
// type string (idl: DOMString).
func (_this *Navigator) AppName() string {
	var ret string
	value := _this.Value_JS.Get("appName")
	ret = (value).String()
	return ret
}

// AppVersion returning attribute 'appVersion' with
// type string (idl: DOMString).
func (_this *Navigator) AppVersion() string {
	var ret string
	value := _this.Value_JS.Get("appVersion")
	ret = (value).String()
	return ret
}

// Platform returning attribute 'platform' with
// type string (idl: DOMString).
func (_this *Navigator) Platform() string {
	var ret string
	value := _this.Value_JS.Get("platform")
	ret = (value).String()
	return ret
}

// Product returning attribute 'product' with
// type string (idl: DOMString).
func (_this *Navigator) Product() string {
	var ret string
	value := _this.Value_JS.Get("product")
	ret = (value).String()
	return ret
}

// ProductSub returning attribute 'productSub' with
// type string (idl: DOMString).
func (_this *Navigator) ProductSub() string {
	var ret string
	value := _this.Value_JS.Get("productSub")
	ret = (value).String()
	return ret
}

// UserAgent returning attribute 'userAgent' with
// type string (idl: DOMString).
func (_this *Navigator) UserAgent() string {
	var ret string
	value := _this.Value_JS.Get("userAgent")
	ret = (value).String()
	return ret
}

// Vendor returning attribute 'vendor' with
// type string (idl: DOMString).
func (_this *Navigator) Vendor() string {
	var ret string
	value := _this.Value_JS.Get("vendor")
	ret = (value).String()
	return ret
}

// VendorSub returning attribute 'vendorSub' with
// type string (idl: DOMString).
func (_this *Navigator) VendorSub() string {
	var ret string
	value := _this.Value_JS.Get("vendorSub")
	ret = (value).String()
	return ret
}

// Oscpu returning attribute 'oscpu' with
// type string (idl: DOMString).
func (_this *Navigator) Oscpu() string {
	var ret string
	value := _this.Value_JS.Get("oscpu")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *Navigator) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Languages returning attribute 'languages' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *Navigator) Languages() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("languages")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// OnLine returning attribute 'onLine' with
// type bool (idl: boolean).
func (_this *Navigator) OnLine() bool {
	var ret bool
	value := _this.Value_JS.Get("onLine")
	ret = (value).Bool()
	return ret
}

// CookieEnabled returning attribute 'cookieEnabled' with
// type bool (idl: boolean).
func (_this *Navigator) CookieEnabled() bool {
	var ret bool
	value := _this.Value_JS.Get("cookieEnabled")
	ret = (value).Bool()
	return ret
}

// Plugins returning attribute 'plugins' with
// type PluginArray (idl: PluginArray).
func (_this *Navigator) Plugins() *PluginArray {
	var ret *PluginArray
	value := _this.Value_JS.Get("plugins")
	ret = PluginArrayFromJS(value)
	return ret
}

// MimeTypes returning attribute 'mimeTypes' with
// type MimeTypeArray (idl: MimeTypeArray).
func (_this *Navigator) MimeTypes() *MimeTypeArray {
	var ret *MimeTypeArray
	value := _this.Value_JS.Get("mimeTypes")
	ret = MimeTypeArrayFromJS(value)
	return ret
}

// HardwareConcurrency returning attribute 'hardwareConcurrency' with
// type int (idl: unsigned long long).
func (_this *Navigator) HardwareConcurrency() int {
	var ret int
	value := _this.Value_JS.Get("hardwareConcurrency")
	ret = (value).Int()
	return ret
}

// Connection returning attribute 'connection' with
// type netinfo.NetworkInformation (idl: NetworkInformation).
func (_this *Navigator) Connection() *netinfo.NetworkInformation {
	var ret *netinfo.NetworkInformation
	value := _this.Value_JS.Get("connection")
	ret = netinfo.NetworkInformationFromJS(value)
	return ret
}

// Storage returning attribute 'storage' with
// type storage.StorageManager (idl: StorageManager).
func (_this *Navigator) Storage() *storage.StorageManager {
	var ret *storage.StorageManager
	value := _this.Value_JS.Get("storage")
	ret = storage.StorageManagerFromJS(value)
	return ret
}

// Webdriver returning attribute 'webdriver' with
// type bool (idl: boolean).
func (_this *Navigator) Webdriver() bool {
	var ret bool
	value := _this.Value_JS.Get("webdriver")
	ret = (value).Bool()
	return ret
}

func (_this *Navigator) GetBattery() (_result *battery.PromiseBatteryManager) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getBattery", _args[0:_end]...)
	var (
		_converted *battery.PromiseBatteryManager // javascript: Promise _what_return_name
	)
	_converted = battery.PromiseBatteryManagerFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) SendBeacon(url string, data *Union) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := url
	_args[0] = _p0
	_end++
	if data != nil {
		_p1 := data.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("sendBeacon", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Navigator) RequestMediaKeySystemAccess(keySystem string, supportedConfigurations []*encrypted.MediaKeySystemConfiguration) (_result *encrypted.PromiseMediaKeySystemAccess) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := keySystem
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(supportedConfigurations))
	for __idx1, __seq_in1 := range supportedConfigurations {
		__seq_out1 := __seq_in1.JSValue()
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("requestMediaKeySystemAccess", _args[0:_end]...)
	var (
		_converted *encrypted.PromiseMediaKeySystemAccess // javascript: Promise _what_return_name
	)
	_converted = encrypted.PromiseMediaKeySystemAccessFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) GetGamepads() (_result []*gamepad.Gamepad) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getGamepads", _args[0:_end]...)
	var (
		_converted []*gamepad.Gamepad // javascript: sequence<Gamepad> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*gamepad.Gamepad, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *gamepad.Gamepad
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = gamepad.GamepadFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *Navigator) GetUserMedia(constraints *local.MediaStreamConstraints, successCallback *local.NavigatorUserMediaSuccessCallback, errorCallback *local.NavigatorUserMediaErrorCallback) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := constraints.JSValue()
	_args[0] = _p0
	_end++

	var __callback1 js.Value
	if successCallback != nil {
		__callback1 = (*successCallback).Value
	} else {
		__callback1 = js.Null()
	}
	_p1 := __callback1
	_args[1] = _p1
	_end++

	var __callback2 js.Value
	if errorCallback != nil {
		__callback2 = (*errorCallback).Value
	} else {
		__callback2 = js.Null()
	}
	_p2 := __callback2
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("getUserMedia", _args[0:_end]...)
	return
}

func (_this *Navigator) Vibrate(pattern *Union) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pattern.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("vibrate", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Navigator) GetWakeLock(_type wakelock.WakeLockType) (_result *wakelock.PromiseWakeLock) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getWakeLock", _args[0:_end]...)
	var (
		_converted *wakelock.PromiseWakeLock // javascript: Promise _what_return_name
	)
	_converted = wakelock.PromiseWakeLockFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) Share(data *share.ShareData) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	if data != nil {
		_p0 := data.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("share", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) RequestMIDIAccess(options *midi.Options) (_result *midi.PromiseAccess) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("requestMIDIAccess", _args[0:_end]...)
	var (
		_converted *midi.PromiseAccess // javascript: Promise _what_return_name
	)
	_converted = midi.PromiseAccessFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) GetVRDisplays() (_result *webvr.PromiseSequenceDisplay) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getVRDisplays", _args[0:_end]...)
	var (
		_converted *webvr.PromiseSequenceDisplay // javascript: Promise _what_return_name
	)
	_converted = webvr.PromiseSequenceDisplayFromJS(_returned)
	_result = _converted
	return
}

func (_this *Navigator) TaintEnabled() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("taintEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *Navigator) RegisterProtocolHandler(scheme string, url string, title string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := scheme
	_args[0] = _p0
	_end++
	_p1 := url
	_args[1] = _p1
	_end++
	_p2 := title
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("registerProtocolHandler", _args[0:_end]...)
	return
}

func (_this *Navigator) UnregisterProtocolHandler(scheme string, url string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := scheme
	_args[0] = _p0
	_end++
	_p1 := url
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("unregisterProtocolHandler", _args[0:_end]...)
	return
}

func (_this *Navigator) JavaEnabled() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("javaEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: Plugin
type Plugin struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Plugin) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PluginFromJS is casting a js.Value into Plugin.
func PluginFromJS(value js.Value) *Plugin {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Plugin{}
	ret.Value_JS = value
	return ret
}

// PluginFromJS is casting from something that holds a js.Value into Plugin.
func PluginFromWrapper(input core.Wrapper) *Plugin {
	return PluginFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *Plugin) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// Description returning attribute 'description' with
// type string (idl: DOMString).
func (_this *Plugin) Description() string {
	var ret string
	value := _this.Value_JS.Get("description")
	ret = (value).String()
	return ret
}

// Filename returning attribute 'filename' with
// type string (idl: DOMString).
func (_this *Plugin) Filename() string {
	var ret string
	value := _this.Value_JS.Get("filename")
	ret = (value).String()
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *Plugin) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *Plugin) Index(index uint) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Plugin) Get(name string) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Plugin) Item(index uint) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *Plugin) NamedItem(name string) (_result *MimeType) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *MimeType // javascript: MimeType _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = MimeTypeFromJS(_returned)
	}
	_result = _converted
	return
}

// class: PluginArray
type PluginArray struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PluginArray) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PluginArrayFromJS is casting a js.Value into PluginArray.
func PluginArrayFromJS(value js.Value) *PluginArray {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PluginArray{}
	ret.Value_JS = value
	return ret
}

// PluginArrayFromJS is casting from something that holds a js.Value into PluginArray.
func PluginArrayFromWrapper(input core.Wrapper) *PluginArray {
	return PluginArrayFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *PluginArray) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *PluginArray) Index(index uint) (_result *Plugin) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Plugin // javascript: Plugin _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = PluginFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *PluginArray) Get(name string) (_result *Plugin) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Plugin // javascript: Plugin _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = PluginFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *PluginArray) Refresh(reload *bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if reload != nil {

		var _p0 interface{}
		if reload != nil {
			_p0 = *(reload)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("refresh", _args[0:_end]...)
	return
}

func (_this *PluginArray) Item(index uint) (_result *Plugin) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Plugin // javascript: Plugin _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = PluginFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *PluginArray) NamedItem(name string) (_result *Plugin) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Plugin // javascript: Plugin _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = PluginFromJS(_returned)
	}
	_result = _converted
	return
}

// class: RadioNodeList
type RadioNodeList struct {
	dom.NodeList
}

// RadioNodeListFromJS is casting a js.Value into RadioNodeList.
func RadioNodeListFromJS(value js.Value) *RadioNodeList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &RadioNodeList{}
	ret.Value_JS = value
	return ret
}

// RadioNodeListFromJS is casting from something that holds a js.Value into RadioNodeList.
func RadioNodeListFromWrapper(input core.Wrapper) *RadioNodeList {
	return RadioNodeListFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *RadioNodeList) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *RadioNodeList) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}
