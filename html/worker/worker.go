// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package worker

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/communication/netinfo"
	"github.com/gowebapi/webapi/cookie"
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/crypto"
	"github.com/gowebapi/webapi/device/usb"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/permissions"
	"github.com/gowebapi/webapi/fetch"
	"github.com/gowebapi/webapi/fetch/corsrfc1918"
	"github.com/gowebapi/webapi/html/canvas"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlcommon"
	"github.com/gowebapi/webapi/html/htmlevent"
	"github.com/gowebapi/webapi/indexeddb"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/capabilities"
	"github.com/gowebapi/webapi/patch"
	"github.com/gowebapi/webapi/payment"
	"github.com/gowebapi/webapi/performance"
	"github.com/gowebapi/webapi/push"
	"github.com/gowebapi/webapi/serviceworker"
	"github.com/gowebapi/webapi/storage"
	"github.com/gowebapi/webapi/webidl"
)

// using following types:
// canvas.ImageBitmapOptions
// canvas.PromiseImageBitmap
// capabilities.MediaCapabilities
// channel.MessageEvent
// channel.MessagePort
// channel.PostMessageOptions
// cookie.CookieChangeEvent
// cookie.CookieStore
// corsrfc1918.AddressSpace
// crypto.Crypto
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// domcore.ExtendableEvent
// fetch.PromiseResponse
// fetch.RequestCredentials
// fetch.RequestInit
// htmlcommon.FrameRequestCallback
// htmlcommon.OnErrorEventHandler
// htmlcommon.WorkerType
// htmlevent.PromiseRejectionEvent
// indexeddb.IDBFactory
// javascript.FrozenArray
// javascript.Object
// javascript.PromiseVoid
// netinfo.NetworkInformation
// patch.ByteString
// payment.CanMakePaymentEvent
// payment.PaymentRequestEvent
// performance.Performance
// permissions.Permissions
// push.Event
// push.SubscriptionChangeEvent
// serviceworker.BackgroundFetchEvent
// serviceworker.BackgroundFetchUpdateUIEvent
// serviceworker.CacheStorage
// serviceworker.Clients
// serviceworker.ExtendableMessageEvent
// serviceworker.FetchEvent
// serviceworker.ServiceWorkerContainer
// serviceworker.ServiceWorkerRegistration
// serviceworker.SyncEvent
// storage.StorageManager
// usb.USB
// webidl.VoidFunction

// source idl files:
// html.idl
// service-workers.idl

// transform files:
// html.go.md
// service-workers.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: WorkerOptions
type WorkerOptions struct {
	Type        htmlcommon.WorkerType
	Credentials fetch.RequestCredentials
	Name        string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *WorkerOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type.JSValue()
	out.Set("type", value0)
	value1 := _this.Credentials.JSValue()
	out.Set("credentials", value1)
	value2 := _this.Name
	out.Set("name", value2)
	return out
}

// WorkerOptionsFromJS is allocating a new
// WorkerOptions object and copy all values in the value javascript object.
func WorkerOptionsFromJS(value js.Value) *WorkerOptions {
	var out WorkerOptions
	var (
		value0 htmlcommon.WorkerType    // javascript: WorkerType {type Type _type}
		value1 fetch.RequestCredentials // javascript: RequestCredentials {credentials Credentials credentials}
		value2 string                   // javascript: DOMString {name Name name}
	)
	value0 = htmlcommon.WorkerTypeFromJS(value.Get("type"))
	out.Type = value0
	value1 = fetch.RequestCredentialsFromJS(value.Get("credentials"))
	out.Credentials = value1
	value2 = (value.Get("name")).String()
	out.Name = value2
	return &out
}

// class: DedicatedWorkerGlobalScope
type DedicatedWorkerGlobalScope struct {
	WorkerGlobalScope
}

// DedicatedWorkerGlobalScopeFromJS is casting a js.Value into DedicatedWorkerGlobalScope.
func DedicatedWorkerGlobalScopeFromJS(value js.Value) *DedicatedWorkerGlobalScope {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DedicatedWorkerGlobalScope{}
	ret.Value_JS = value
	return ret
}

// DedicatedWorkerGlobalScopeFromJS is casting from something that holds a js.Value into DedicatedWorkerGlobalScope.
func DedicatedWorkerGlobalScopeFromWrapper(input core.Wrapper) *DedicatedWorkerGlobalScope {
	return DedicatedWorkerGlobalScopeFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *DedicatedWorkerGlobalScope) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: channel.MessageEvent
func eventFuncDedicatedWorkerGlobalScope_channel_MessageEvent(listener func(event *channel.MessageEvent, target *DedicatedWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := DedicatedWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *DedicatedWorkerGlobalScope) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *DedicatedWorkerGlobalScope)) js.Func {
	cb := eventFuncDedicatedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *DedicatedWorkerGlobalScope) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *DedicatedWorkerGlobalScope)) js.Func {
	cb := eventFuncDedicatedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *DedicatedWorkerGlobalScope) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *DedicatedWorkerGlobalScope)) js.Func {
	cb := eventFuncDedicatedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *DedicatedWorkerGlobalScope) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *DedicatedWorkerGlobalScope)) js.Func {
	cb := eventFuncDedicatedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

func (_this *DedicatedWorkerGlobalScope) PostMessage(message interface{}, transfer []*javascript.Object) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(transfer))
	for __idx1, __seq_in1 := range transfer {
		__seq_out1 := __seq_in1.JSValue()
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) PostMessage2(message interface{}, options *channel.PostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) RequestAnimationFrame(callback *htmlcommon.FrameRequestCallback) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestAnimationFrame", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *DedicatedWorkerGlobalScope) CancelAnimationFrame(handle uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelAnimationFrame", _args[0:_end]...)
	return
}

// class: ServiceWorkerGlobalScope
type ServiceWorkerGlobalScope struct {
	WorkerGlobalScope
}

// ServiceWorkerGlobalScopeFromJS is casting a js.Value into ServiceWorkerGlobalScope.
func ServiceWorkerGlobalScopeFromJS(value js.Value) *ServiceWorkerGlobalScope {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ServiceWorkerGlobalScope{}
	ret.Value_JS = value
	return ret
}

// ServiceWorkerGlobalScopeFromJS is casting from something that holds a js.Value into ServiceWorkerGlobalScope.
func ServiceWorkerGlobalScopeFromWrapper(input core.Wrapper) *ServiceWorkerGlobalScope {
	return ServiceWorkerGlobalScopeFromJS(input.JSValue())
}

// Clients returning attribute 'clients' with
// type serviceworker.Clients (idl: Clients).
func (_this *ServiceWorkerGlobalScope) Clients() *serviceworker.Clients {
	var ret *serviceworker.Clients
	value := _this.Value_JS.Get("clients")
	ret = serviceworker.ClientsFromJS(value)
	return ret
}

// Registration returning attribute 'registration' with
// type serviceworker.ServiceWorkerRegistration (idl: ServiceWorkerRegistration).
func (_this *ServiceWorkerGlobalScope) Registration() *serviceworker.ServiceWorkerRegistration {
	var ret *serviceworker.ServiceWorkerRegistration
	value := _this.Value_JS.Get("registration")
	ret = serviceworker.ServiceWorkerRegistrationFromJS(value)
	return ret
}

// OnInstall returning attribute 'oninstall' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnInstall() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninstall")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnActivate returning attribute 'onactivate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnActivate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onactivate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFetch returning attribute 'onfetch' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnFetch() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfetch")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSync returning attribute 'onsync' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnSync() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsync")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBackgroundFetchSuccess returning attribute 'onbackgroundfetchsuccess' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnBackgroundFetchSuccess() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchsuccess")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBackgroundFetchFail returning attribute 'onbackgroundfetchfail' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnBackgroundFetchFail() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchfail")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBackgroundFetchAbort returning attribute 'onbackgroundfetchabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnBackgroundFetchAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBackgroundFetchClick returning attribute 'onbackgroundfetchclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnBackgroundFetchClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// CookieStore returning attribute 'cookieStore' with
// type cookie.CookieStore (idl: CookieStore).
func (_this *ServiceWorkerGlobalScope) CookieStore() *cookie.CookieStore {
	var ret *cookie.CookieStore
	value := _this.Value_JS.Get("cookieStore")
	ret = cookie.CookieStoreFromJS(value)
	return ret
}

// OnCookieChange returning attribute 'oncookiechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnCookieChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncookiechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanMakePayment returning attribute 'oncanmakepayment' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnCanMakePayment() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanmakepayment")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPaymentRequest returning attribute 'onpaymentrequest' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnPaymentRequest() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaymentrequest")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPush returning attribute 'onpush' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnPush() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpush")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPushSubscriptionChange returning attribute 'onpushsubscriptionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) OnPushSubscriptionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpushsubscriptionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.ExtendableEvent
func eventFuncServiceWorkerGlobalScope_domcore_ExtendableEvent(listener func(event *domcore.ExtendableEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.ExtendableEvent
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.ExtendableEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddActivate is adding doing AddEventListener for 'Activate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventActivate(listener func(event *domcore.ExtendableEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_domcore_ExtendableEvent(listener)
	_this.Value_JS.Call("addEventListener", "activate", cb)
	return cb
}

// SetOnActivate is assigning a function to 'onactivate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnActivate(listener func(event *domcore.ExtendableEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_domcore_ExtendableEvent(listener)
	_this.Value_JS.Set("onactivate", cb)
	return cb
}

// event attribute: serviceworker.BackgroundFetchEvent
func eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchEvent(listener func(event *serviceworker.BackgroundFetchEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *serviceworker.BackgroundFetchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = serviceworker.BackgroundFetchEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBackgroundFetchAbort is adding doing AddEventListener for 'BackgroundFetchAbort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventBackgroundFetchAbort(listener func(event *serviceworker.BackgroundFetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchEvent(listener)
	_this.Value_JS.Call("addEventListener", "backgroundfetchabort", cb)
	return cb
}

// SetOnBackgroundFetchAbort is assigning a function to 'onbackgroundfetchabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnBackgroundFetchAbort(listener func(event *serviceworker.BackgroundFetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchEvent(listener)
	_this.Value_JS.Set("onbackgroundfetchabort", cb)
	return cb
}

// AddBackgroundFetchClick is adding doing AddEventListener for 'BackgroundFetchClick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventBackgroundFetchClick(listener func(event *serviceworker.BackgroundFetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchEvent(listener)
	_this.Value_JS.Call("addEventListener", "backgroundfetchclick", cb)
	return cb
}

// SetOnBackgroundFetchClick is assigning a function to 'onbackgroundfetchclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnBackgroundFetchClick(listener func(event *serviceworker.BackgroundFetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchEvent(listener)
	_this.Value_JS.Set("onbackgroundfetchclick", cb)
	return cb
}

// event attribute: serviceworker.BackgroundFetchUpdateUIEvent
func eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchUpdateUIEvent(listener func(event *serviceworker.BackgroundFetchUpdateUIEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *serviceworker.BackgroundFetchUpdateUIEvent
		value := args[0]
		incoming := value.Get("target")
		ret = serviceworker.BackgroundFetchUpdateUIEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBackgroundFetchFail is adding doing AddEventListener for 'BackgroundFetchFail' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventBackgroundFetchFail(listener func(event *serviceworker.BackgroundFetchUpdateUIEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchUpdateUIEvent(listener)
	_this.Value_JS.Call("addEventListener", "backgroundfetchfail", cb)
	return cb
}

// SetOnBackgroundFetchFail is assigning a function to 'onbackgroundfetchfail'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnBackgroundFetchFail(listener func(event *serviceworker.BackgroundFetchUpdateUIEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchUpdateUIEvent(listener)
	_this.Value_JS.Set("onbackgroundfetchfail", cb)
	return cb
}

// AddBackgroundFetchSuccess is adding doing AddEventListener for 'BackgroundFetchSuccess' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventBackgroundFetchSuccess(listener func(event *serviceworker.BackgroundFetchUpdateUIEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchUpdateUIEvent(listener)
	_this.Value_JS.Call("addEventListener", "backgroundfetchsuccess", cb)
	return cb
}

// SetOnBackgroundFetchSuccess is assigning a function to 'onbackgroundfetchsuccess'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnBackgroundFetchSuccess(listener func(event *serviceworker.BackgroundFetchUpdateUIEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_BackgroundFetchUpdateUIEvent(listener)
	_this.Value_JS.Set("onbackgroundfetchsuccess", cb)
	return cb
}

// event attribute: payment.CanMakePaymentEvent
func eventFuncServiceWorkerGlobalScope_payment_CanMakePaymentEvent(listener func(event *payment.CanMakePaymentEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *payment.CanMakePaymentEvent
		value := args[0]
		incoming := value.Get("target")
		ret = payment.CanMakePaymentEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCanMakePayment is adding doing AddEventListener for 'CanMakePayment' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventCanMakePayment(listener func(event *payment.CanMakePaymentEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_payment_CanMakePaymentEvent(listener)
	_this.Value_JS.Call("addEventListener", "canmakepayment", cb)
	return cb
}

// SetOnCanMakePayment is assigning a function to 'oncanmakepayment'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnCanMakePayment(listener func(event *payment.CanMakePaymentEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_payment_CanMakePaymentEvent(listener)
	_this.Value_JS.Set("oncanmakepayment", cb)
	return cb
}

// event attribute: cookie.CookieChangeEvent
func eventFuncServiceWorkerGlobalScope_cookie_CookieChangeEvent(listener func(event *cookie.CookieChangeEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *cookie.CookieChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = cookie.CookieChangeEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCookieChange is adding doing AddEventListener for 'CookieChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventCookieChange(listener func(event *cookie.CookieChangeEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_cookie_CookieChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "cookiechange", cb)
	return cb
}

// SetOnCookieChange is assigning a function to 'oncookiechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnCookieChange(listener func(event *cookie.CookieChangeEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_cookie_CookieChangeEvent(listener)
	_this.Value_JS.Set("oncookiechange", cb)
	return cb
}

// event attribute: serviceworker.FetchEvent
func eventFuncServiceWorkerGlobalScope_serviceworker_FetchEvent(listener func(event *serviceworker.FetchEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *serviceworker.FetchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = serviceworker.FetchEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFetch is adding doing AddEventListener for 'Fetch' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventFetch(listener func(event *serviceworker.FetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_FetchEvent(listener)
	_this.Value_JS.Call("addEventListener", "fetch", cb)
	return cb
}

// SetOnFetch is assigning a function to 'onfetch'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnFetch(listener func(event *serviceworker.FetchEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_FetchEvent(listener)
	_this.Value_JS.Set("onfetch", cb)
	return cb
}

// AddInstall is adding doing AddEventListener for 'Install' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventInstall(listener func(event *domcore.ExtendableEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_domcore_ExtendableEvent(listener)
	_this.Value_JS.Call("addEventListener", "install", cb)
	return cb
}

// SetOnInstall is assigning a function to 'oninstall'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnInstall(listener func(event *domcore.ExtendableEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_domcore_ExtendableEvent(listener)
	_this.Value_JS.Set("oninstall", cb)
	return cb
}

// event attribute: serviceworker.ExtendableMessageEvent
func eventFuncServiceWorkerGlobalScope_serviceworker_ExtendableMessageEvent(listener func(event *serviceworker.ExtendableMessageEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *serviceworker.ExtendableMessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = serviceworker.ExtendableMessageEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventMessage(listener func(event *serviceworker.ExtendableMessageEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_ExtendableMessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnMessage(listener func(event *serviceworker.ExtendableMessageEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_ExtendableMessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncServiceWorkerGlobalScope_channel_MessageEvent(listener func(event *channel.MessageEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

// event attribute: payment.PaymentRequestEvent
func eventFuncServiceWorkerGlobalScope_payment_PaymentRequestEvent(listener func(event *payment.PaymentRequestEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *payment.PaymentRequestEvent
		value := args[0]
		incoming := value.Get("target")
		ret = payment.PaymentRequestEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPaymentRequest is adding doing AddEventListener for 'PaymentRequest' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventPaymentRequest(listener func(event *payment.PaymentRequestEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_payment_PaymentRequestEvent(listener)
	_this.Value_JS.Call("addEventListener", "paymentrequest", cb)
	return cb
}

// SetOnPaymentRequest is assigning a function to 'onpaymentrequest'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnPaymentRequest(listener func(event *payment.PaymentRequestEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_payment_PaymentRequestEvent(listener)
	_this.Value_JS.Set("onpaymentrequest", cb)
	return cb
}

// event attribute: push.Event
func eventFuncServiceWorkerGlobalScope_push_Event(listener func(event *push.Event, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *push.Event
		value := args[0]
		incoming := value.Get("target")
		ret = push.EventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPush is adding doing AddEventListener for 'Push' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventPush(listener func(event *push.Event, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_push_Event(listener)
	_this.Value_JS.Call("addEventListener", "push", cb)
	return cb
}

// SetOnPush is assigning a function to 'onpush'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnPush(listener func(event *push.Event, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_push_Event(listener)
	_this.Value_JS.Set("onpush", cb)
	return cb
}

// event attribute: push.SubscriptionChangeEvent
func eventFuncServiceWorkerGlobalScope_push_SubscriptionChangeEvent(listener func(event *push.SubscriptionChangeEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *push.SubscriptionChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = push.SubscriptionChangeEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPushSubscriptionChange is adding doing AddEventListener for 'PushSubscriptionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventPushSubscriptionChange(listener func(event *push.SubscriptionChangeEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_push_SubscriptionChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "pushsubscriptionchange", cb)
	return cb
}

// SetOnPushSubscriptionChange is assigning a function to 'onpushsubscriptionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnPushSubscriptionChange(listener func(event *push.SubscriptionChangeEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_push_SubscriptionChangeEvent(listener)
	_this.Value_JS.Set("onpushsubscriptionchange", cb)
	return cb
}

// event attribute: serviceworker.SyncEvent
func eventFuncServiceWorkerGlobalScope_serviceworker_SyncEvent(listener func(event *serviceworker.SyncEvent, target *ServiceWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *serviceworker.SyncEvent
		value := args[0]
		incoming := value.Get("target")
		ret = serviceworker.SyncEventFromJS(value)
		src := ServiceWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddSync is adding doing AddEventListener for 'Sync' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) AddEventSync(listener func(event *serviceworker.SyncEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_SyncEvent(listener)
	_this.Value_JS.Call("addEventListener", "sync", cb)
	return cb
}

// SetOnSync is assigning a function to 'onsync'. This
// This method is returning allocated javascript function that need to be released.
func (_this *ServiceWorkerGlobalScope) SetOnSync(listener func(event *serviceworker.SyncEvent, currentTarget *ServiceWorkerGlobalScope)) js.Func {
	cb := eventFuncServiceWorkerGlobalScope_serviceworker_SyncEvent(listener)
	_this.Value_JS.Set("onsync", cb)
	return cb
}

func (_this *ServiceWorkerGlobalScope) SkipWaiting() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("skipWaiting", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

// class: SharedWorker
type SharedWorker struct {
	domcore.EventTarget
}

// SharedWorkerFromJS is casting a js.Value into SharedWorker.
func SharedWorkerFromJS(value js.Value) *SharedWorker {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SharedWorker{}
	ret.Value_JS = value
	return ret
}

// SharedWorkerFromJS is casting from something that holds a js.Value into SharedWorker.
func SharedWorkerFromWrapper(input core.Wrapper) *SharedWorker {
	return SharedWorkerFromJS(input.JSValue())
}

func NewSharedWorker(scriptURL string, options *Union) (_result *SharedWorker) {
	_klass := js.Global().Get("SharedWorker")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := scriptURL
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *SharedWorker // javascript: SharedWorker _what_return_name
	)
	_converted = SharedWorkerFromJS(_returned)
	_result = _converted
	return
}

// Port returning attribute 'port' with
// type channel.MessagePort (idl: MessagePort).
func (_this *SharedWorker) Port() *channel.MessagePort {
	var ret *channel.MessagePort
	value := _this.Value_JS.Get("port")
	ret = channel.MessagePortFromJS(value)
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorker) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncSharedWorker_domcore_Event(listener func(event *domcore.Event, target *SharedWorker)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := SharedWorkerFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SharedWorker) AddEventError(listener func(event *domcore.Event, currentTarget *SharedWorker)) js.Func {
	cb := eventFuncSharedWorker_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SharedWorker) SetOnError(listener func(event *domcore.Event, currentTarget *SharedWorker)) js.Func {
	cb := eventFuncSharedWorker_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// class: SharedWorkerGlobalScope
type SharedWorkerGlobalScope struct {
	WorkerGlobalScope
}

// SharedWorkerGlobalScopeFromJS is casting a js.Value into SharedWorkerGlobalScope.
func SharedWorkerGlobalScopeFromJS(value js.Value) *SharedWorkerGlobalScope {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SharedWorkerGlobalScope{}
	ret.Value_JS = value
	return ret
}

// SharedWorkerGlobalScopeFromJS is casting from something that holds a js.Value into SharedWorkerGlobalScope.
func SharedWorkerGlobalScopeFromWrapper(input core.Wrapper) *SharedWorkerGlobalScope {
	return SharedWorkerGlobalScopeFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *SharedWorkerGlobalScope) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// OnConnect returning attribute 'onconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorkerGlobalScope) OnConnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onconnect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: channel.MessageEvent
func eventFuncSharedWorkerGlobalScope_channel_MessageEvent(listener func(event *channel.MessageEvent, target *SharedWorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := SharedWorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddConnect is adding doing AddEventListener for 'Connect' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SharedWorkerGlobalScope) AddEventConnect(listener func(event *channel.MessageEvent, currentTarget *SharedWorkerGlobalScope)) js.Func {
	cb := eventFuncSharedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "connect", cb)
	return cb
}

// SetOnConnect is assigning a function to 'onconnect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SharedWorkerGlobalScope) SetOnConnect(listener func(event *channel.MessageEvent, currentTarget *SharedWorkerGlobalScope)) js.Func {
	cb := eventFuncSharedWorkerGlobalScope_channel_MessageEvent(listener)
	_this.Value_JS.Set("onconnect", cb)
	return cb
}

func (_this *SharedWorkerGlobalScope) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

// class: Worker
type Worker struct {
	domcore.EventTarget
}

// WorkerFromJS is casting a js.Value into Worker.
func WorkerFromJS(value js.Value) *Worker {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Worker{}
	ret.Value_JS = value
	return ret
}

// WorkerFromJS is casting from something that holds a js.Value into Worker.
func WorkerFromWrapper(input core.Wrapper) *Worker {
	return WorkerFromJS(input.JSValue())
}

func NewWorker(scriptURL string, options *WorkerOptions) (_result *Worker) {
	_klass := js.Global().Get("Worker")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := scriptURL
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Worker // javascript: Worker _what_return_name
	)
	_converted = WorkerFromJS(_returned)
	_result = _converted
	return
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) OnError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncWorker_domcore_Event(listener func(event *domcore.Event, target *Worker)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := WorkerFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) AddEventError(listener func(event *domcore.Event, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) SetOnError(listener func(event *domcore.Event, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncWorker_channel_MessageEvent(listener func(event *channel.MessageEvent, target *Worker)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := WorkerFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Worker) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *Worker)) js.Func {
	cb := eventFuncWorker_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

func (_this *Worker) Terminate() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("terminate", _args[0:_end]...)
	return
}

func (_this *Worker) PostMessage(message interface{}, transfer []*javascript.Object) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(transfer))
	for __idx1, __seq_in1 := range transfer {
		__seq_out1 := __seq_in1.JSValue()
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Worker) PostMessage2(message interface{}, options *channel.PostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

// class: WorkerGlobalScope
type WorkerGlobalScope struct {
	domcore.EventTarget
}

// WorkerGlobalScopeFromJS is casting a js.Value into WorkerGlobalScope.
func WorkerGlobalScopeFromJS(value js.Value) *WorkerGlobalScope {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WorkerGlobalScope{}
	ret.Value_JS = value
	return ret
}

// WorkerGlobalScopeFromJS is casting from something that holds a js.Value into WorkerGlobalScope.
func WorkerGlobalScopeFromWrapper(input core.Wrapper) *WorkerGlobalScope {
	return WorkerGlobalScopeFromJS(input.JSValue())
}

// Self returning attribute 'self' with
// type WorkerGlobalScope (idl: WorkerGlobalScope).
func (_this *WorkerGlobalScope) Self() *WorkerGlobalScope {
	var ret *WorkerGlobalScope
	value := _this.Value_JS.Get("self")
	ret = WorkerGlobalScopeFromJS(value)
	return ret
}

// Location returning attribute 'location' with
// type WorkerLocation (idl: WorkerLocation).
func (_this *WorkerGlobalScope) Location() *WorkerLocation {
	var ret *WorkerLocation
	value := _this.Value_JS.Get("location")
	ret = WorkerLocationFromJS(value)
	return ret
}

// Navigator returning attribute 'navigator' with
// type WorkerNavigator (idl: WorkerNavigator).
func (_this *WorkerGlobalScope) Navigator() *WorkerNavigator {
	var ret *WorkerNavigator
	value := _this.Value_JS.Get("navigator")
	ret = WorkerNavigatorFromJS(value)
	return ret
}

// OnError returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *WorkerGlobalScope) OnError() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// OnLanguageChange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) OnLanguageChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) OnOffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOnline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) OnOnline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRejectionHandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) OnRejectionHandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnhandledRejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) OnUnhandledRejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// AddressSpace returning attribute 'addressSpace' with
// type corsrfc1918.AddressSpace (idl: AddressSpace).
func (_this *WorkerGlobalScope) AddressSpace() corsrfc1918.AddressSpace {
	var ret corsrfc1918.AddressSpace
	value := _this.Value_JS.Get("addressSpace")
	ret = corsrfc1918.AddressSpaceFromJS(value)
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *WorkerGlobalScope) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// IsSecureContext returning attribute 'isSecureContext' with
// type bool (idl: boolean).
func (_this *WorkerGlobalScope) IsSecureContext() bool {
	var ret bool
	value := _this.Value_JS.Get("isSecureContext")
	ret = (value).Bool()
	return ret
}

// Caches returning attribute 'caches' with
// type serviceworker.CacheStorage (idl: CacheStorage).
func (_this *WorkerGlobalScope) Caches() *serviceworker.CacheStorage {
	var ret *serviceworker.CacheStorage
	value := _this.Value_JS.Get("caches")
	ret = serviceworker.CacheStorageFromJS(value)
	return ret
}

// IndexedDB returning attribute 'indexedDB' with
// type indexeddb.IDBFactory (idl: IDBFactory).
func (_this *WorkerGlobalScope) IndexedDB() *indexeddb.IDBFactory {
	var ret *indexeddb.IDBFactory
	value := _this.Value_JS.Get("indexedDB")
	ret = indexeddb.IDBFactoryFromJS(value)
	return ret
}

// Crypto returning attribute 'crypto' with
// type crypto.Crypto (idl: Crypto).
func (_this *WorkerGlobalScope) Crypto() *crypto.Crypto {
	var ret *crypto.Crypto
	value := _this.Value_JS.Get("crypto")
	ret = crypto.CryptoFromJS(value)
	return ret
}

// Performance returning attribute 'performance' with
// type performance.Performance (idl: Performance).
func (_this *WorkerGlobalScope) Performance() *performance.Performance {
	var ret *performance.Performance
	value := _this.Value_JS.Get("performance")
	ret = performance.PerformanceFromJS(value)
	return ret
}

// event attribute: domcore.Event
func eventFuncWorkerGlobalScope_domcore_Event(listener func(event *domcore.Event, target *WorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := WorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventError(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnError(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddLanguageChange is adding doing AddEventListener for 'LanguageChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventLanguageChange(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "languagechange", cb)
	return cb
}

// SetOnLanguageChange is assigning a function to 'onlanguagechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnLanguageChange(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Set("onlanguagechange", cb)
	return cb
}

// AddOffline is adding doing AddEventListener for 'Offline' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventOffline(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "offline", cb)
	return cb
}

// SetOnOffline is assigning a function to 'onoffline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnOffline(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Set("onoffline", cb)
	return cb
}

// AddOnline is adding doing AddEventListener for 'Online' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventOnline(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "online", cb)
	return cb
}

// SetOnOnline is assigning a function to 'ononline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnOnline(listener func(event *domcore.Event, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_domcore_Event(listener)
	_this.Value_JS.Set("ononline", cb)
	return cb
}

// event attribute: htmlevent.PromiseRejectionEvent
func eventFuncWorkerGlobalScope_htmlevent_PromiseRejectionEvent(listener func(event *htmlevent.PromiseRejectionEvent, target *WorkerGlobalScope)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PromiseRejectionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PromiseRejectionEventFromJS(value)
		src := WorkerGlobalScopeFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddRejectionHandled is adding doing AddEventListener for 'RejectionHandled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "rejectionhandled", cb)
	return cb
}

// SetOnRejectionHandled is assigning a function to 'onrejectionhandled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onrejectionhandled", cb)
	return cb
}

// AddUnhandledRejection is adding doing AddEventListener for 'UnhandledRejection' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) AddEventUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "unhandledrejection", cb)
	return cb
}

// SetOnUnhandledRejection is assigning a function to 'onunhandledrejection'. This
// This method is returning allocated javascript function that need to be released.
func (_this *WorkerGlobalScope) SetOnUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *WorkerGlobalScope)) js.Func {
	cb := eventFuncWorkerGlobalScope_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onunhandledrejection", cb)
	return cb
}

func (_this *WorkerGlobalScope) ImportScripts(urls ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(urls))
		_end  int
	)
	for _, __in := range urls {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("importScripts", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) Btoa(data string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("btoa", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) Atob(data string) (_result *patch.ByteString) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("atob", _args[0:_end]...)
	var (
		_converted *patch.ByteString // javascript: ByteString _what_return_name
	)
	_converted = patch.ByteStringFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) SetTimeout(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {

		var _p1 interface{}
		if timeout != nil {
			_p1 = *(timeout)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setTimeout", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) ClearTimeout(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {

		var _p0 interface{}
		if handle != nil {
			_p0 = *(handle)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearTimeout", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) SetInterval(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {

		var _p1 interface{}
		if timeout != nil {
			_p1 = *(timeout)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setInterval", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) ClearInterval(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {

		var _p0 interface{}
		if handle != nil {
			_p0 = *(handle)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearInterval", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) QueueMicrotask(callback *webidl.VoidFunction) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("queueMicrotask", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) CreateImageBitmap(image *Union, options *canvas.ImageBitmapOptions) (_result *canvas.PromiseImageBitmap) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *canvas.PromiseImageBitmap // javascript: Promise _what_return_name
	)
	_converted = canvas.PromiseImageBitmapFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) CreateImageBitmap2(image *Union, sx int, sy int, sw int, sh int, options *canvas.ImageBitmapOptions) (_result *canvas.PromiseImageBitmap) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	if options != nil {
		_p5 := options.JSValue()
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *canvas.PromiseImageBitmap // javascript: Promise _what_return_name
	)
	_converted = canvas.PromiseImageBitmapFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) Fetch(input *Union, init *fetch.RequestInit) (_result *fetch.PromiseResponse) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := input.JSValue()
	_args[0] = _p0
	_end++
	if init != nil {
		_p1 := init.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("fetch", _args[0:_end]...)
	var (
		_converted *fetch.PromiseResponse // javascript: Promise _what_return_name
	)
	_converted = fetch.PromiseResponseFromJS(_returned)
	_result = _converted
	return
}

// class: WorkerLocation
type WorkerLocation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WorkerLocation) JSValue() js.Value {
	return _this.Value_JS
}

// WorkerLocationFromJS is casting a js.Value into WorkerLocation.
func WorkerLocationFromJS(value js.Value) *WorkerLocation {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WorkerLocation{}
	ret.Value_JS = value
	return ret
}

// WorkerLocationFromJS is casting from something that holds a js.Value into WorkerLocation.
func WorkerLocationFromWrapper(input core.Wrapper) *WorkerLocation {
	return WorkerLocationFromJS(input.JSValue())
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *WorkerLocation) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// ToString is an alias for Href.
func (_this *WorkerLocation) ToString() string {
	return _this.Href()
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *WorkerLocation) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *WorkerLocation) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *WorkerLocation) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *WorkerLocation) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *WorkerLocation) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *WorkerLocation) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *WorkerLocation) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *WorkerLocation) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// class: WorkerNavigator
type WorkerNavigator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WorkerNavigator) JSValue() js.Value {
	return _this.Value_JS
}

// WorkerNavigatorFromJS is casting a js.Value into WorkerNavigator.
func WorkerNavigatorFromJS(value js.Value) *WorkerNavigator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WorkerNavigator{}
	ret.Value_JS = value
	return ret
}

// WorkerNavigatorFromJS is casting from something that holds a js.Value into WorkerNavigator.
func WorkerNavigatorFromWrapper(input core.Wrapper) *WorkerNavigator {
	return WorkerNavigatorFromJS(input.JSValue())
}

// MediaCapabilities returning attribute 'mediaCapabilities' with
// type capabilities.MediaCapabilities (idl: MediaCapabilities).
func (_this *WorkerNavigator) MediaCapabilities() *capabilities.MediaCapabilities {
	var ret *capabilities.MediaCapabilities
	value := _this.Value_JS.Get("mediaCapabilities")
	ret = capabilities.MediaCapabilitiesFromJS(value)
	return ret
}

// Permissions returning attribute 'permissions' with
// type permissions.Permissions (idl: Permissions).
func (_this *WorkerNavigator) Permissions() *permissions.Permissions {
	var ret *permissions.Permissions
	value := _this.Value_JS.Get("permissions")
	ret = permissions.PermissionsFromJS(value)
	return ret
}

// ServiceWorker returning attribute 'serviceWorker' with
// type serviceworker.ServiceWorkerContainer (idl: ServiceWorkerContainer).
func (_this *WorkerNavigator) ServiceWorker() *serviceworker.ServiceWorkerContainer {
	var ret *serviceworker.ServiceWorkerContainer
	value := _this.Value_JS.Get("serviceWorker")
	ret = serviceworker.ServiceWorkerContainerFromJS(value)
	return ret
}

// Usb returning attribute 'usb' with
// type usb.USB (idl: USB).
func (_this *WorkerNavigator) Usb() *usb.USB {
	var ret *usb.USB
	value := _this.Value_JS.Get("usb")
	ret = usb.USBFromJS(value)
	return ret
}

// AppCodeName returning attribute 'appCodeName' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppCodeName() string {
	var ret string
	value := _this.Value_JS.Get("appCodeName")
	ret = (value).String()
	return ret
}

// AppName returning attribute 'appName' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppName() string {
	var ret string
	value := _this.Value_JS.Get("appName")
	ret = (value).String()
	return ret
}

// AppVersion returning attribute 'appVersion' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppVersion() string {
	var ret string
	value := _this.Value_JS.Get("appVersion")
	ret = (value).String()
	return ret
}

// Platform returning attribute 'platform' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Platform() string {
	var ret string
	value := _this.Value_JS.Get("platform")
	ret = (value).String()
	return ret
}

// Product returning attribute 'product' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Product() string {
	var ret string
	value := _this.Value_JS.Get("product")
	ret = (value).String()
	return ret
}

// ProductSub returning attribute 'productSub' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) ProductSub() string {
	var ret string
	value := _this.Value_JS.Get("productSub")
	ret = (value).String()
	return ret
}

// UserAgent returning attribute 'userAgent' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) UserAgent() string {
	var ret string
	value := _this.Value_JS.Get("userAgent")
	ret = (value).String()
	return ret
}

// Vendor returning attribute 'vendor' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Vendor() string {
	var ret string
	value := _this.Value_JS.Get("vendor")
	ret = (value).String()
	return ret
}

// VendorSub returning attribute 'vendorSub' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) VendorSub() string {
	var ret string
	value := _this.Value_JS.Get("vendorSub")
	ret = (value).String()
	return ret
}

// Oscpu returning attribute 'oscpu' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Oscpu() string {
	var ret string
	value := _this.Value_JS.Get("oscpu")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Languages returning attribute 'languages' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *WorkerNavigator) Languages() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("languages")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// OnLine returning attribute 'onLine' with
// type bool (idl: boolean).
func (_this *WorkerNavigator) OnLine() bool {
	var ret bool
	value := _this.Value_JS.Get("onLine")
	ret = (value).Bool()
	return ret
}

// HardwareConcurrency returning attribute 'hardwareConcurrency' with
// type int (idl: unsigned long long).
func (_this *WorkerNavigator) HardwareConcurrency() int {
	var ret int
	value := _this.Value_JS.Get("hardwareConcurrency")
	ret = (value).Int()
	return ret
}

// Connection returning attribute 'connection' with
// type netinfo.NetworkInformation (idl: NetworkInformation).
func (_this *WorkerNavigator) Connection() *netinfo.NetworkInformation {
	var ret *netinfo.NetworkInformation
	value := _this.Value_JS.Get("connection")
	ret = netinfo.NetworkInformationFromJS(value)
	return ret
}

// Storage returning attribute 'storage' with
// type storage.StorageManager (idl: StorageManager).
func (_this *WorkerNavigator) Storage() *storage.StorageManager {
	var ret *storage.StorageManager
	value := _this.Value_JS.Get("storage")
	ret = storage.StorageManagerFromJS(value)
	return ret
}

func (_this *WorkerNavigator) TaintEnabled() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("taintEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}
