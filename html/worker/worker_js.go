// Code generated by webidl-bind. DO NOT EDIT.

package worker

import "syscall/js"

import (
	"github.com/gowebapi/webapi/communication/netinfo"
	"github.com/gowebapi/webapi/cookie"
	"github.com/gowebapi/webapi/crypto"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/permissions"
	"github.com/gowebapi/webapi/fetch"
	"github.com/gowebapi/webapi/fetch/corsrfc1918"
	"github.com/gowebapi/webapi/html/canvas"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlcommon"
	"github.com/gowebapi/webapi/indexeddb"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/capabilities"
	"github.com/gowebapi/webapi/patch"
	"github.com/gowebapi/webapi/serviceworker"
	"github.com/gowebapi/webapi/storage"
	"github.com/gowebapi/webapi/webidl"
)

// using following types:
// canvas.ImageBitmapOptions
// capabilities.MediaCapabilities
// channel.MessagePort
// channel.PostMessageOptions
// cookie.CookieStore
// corsrfc1918.AddressSpace
// crypto.Crypto
// domcore.EventHandler
// domcore.EventTarget
// fetch.RequestCredentials
// fetch.RequestInit
// htmlcommon.FrameRequestCallback
// htmlcommon.OnErrorEventHandler
// htmlcommon.WorkerType
// indexeddb.IDBFactory
// javascript.FrozenArray
// javascript.Object
// javascript.Promise
// netinfo.NetworkInformation
// patch.ByteString
// permissions.Permissions
// serviceworker.CacheStorage
// serviceworker.Clients
// serviceworker.ServiceWorkerContainer
// serviceworker.ServiceWorkerRegistration
// storage.StorageManager
// webidl.VoidFunction

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: WorkerOptions
type WorkerOptions struct {
	Type        htmlcommon.WorkerType
	Credentials fetch.RequestCredentials
	Name        string
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *WorkerOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type.JSValue()
	out.Set("type", value0)
	value1 := _this.Credentials.JSValue()
	out.Set("credentials", value1)
	value2 := _this.Name
	out.Set("name", value2)
	return out
}

// WorkerOptionsFromJS is allocating a new
// WorkerOptions object and copy all values from
// input javascript object
func WorkerOptionsFromJS(value js.Wrapper) *WorkerOptions {
	input := value.JSValue()
	var out WorkerOptions
	var (
		value0 htmlcommon.WorkerType    // javascript: WorkerType {type Type _type}
		value1 fetch.RequestCredentials // javascript: RequestCredentials {credentials Credentials credentials}
		value2 string                   // javascript: DOMString {name Name name}
	)
	value0 = htmlcommon.WorkerTypeFromJS(input.Get("type"))
	out.Type = value0
	value1 = fetch.RequestCredentialsFromJS(input.Get("credentials"))
	out.Credentials = value1
	value2 = (input.Get("name")).String()
	out.Name = value2
	return &out
}

// interface: DedicatedWorkerGlobalScope
type DedicatedWorkerGlobalScope struct {
	WorkerGlobalScope
}

// DedicatedWorkerGlobalScopeFromJS is casting a js.Wrapper into DedicatedWorkerGlobalScope.
func DedicatedWorkerGlobalScopeFromJS(value js.Wrapper) *DedicatedWorkerGlobalScope {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &DedicatedWorkerGlobalScope{}
	ret.Value_JS = input
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *DedicatedWorkerGlobalScope) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) SetOnmessage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessage", input)
}

// Onmessageerror returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) Onmessageerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessageerror setting attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *DedicatedWorkerGlobalScope) SetOnmessageerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessageerror", input)
}

func (_this *DedicatedWorkerGlobalScope) PostMessage(message interface{}, transfer []*javascript.Object) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(transfer))
	for __idx1, __seq_in1 := range transfer {
		__seq_out1 := __seq_in1.JSValue()
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) PostMessage2(message interface{}, options *channel.PostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

func (_this *DedicatedWorkerGlobalScope) RequestAnimationFrame(callback *htmlcommon.FrameRequestCallback) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("requestAnimationFrame", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *DedicatedWorkerGlobalScope) CancelAnimationFrame(handle uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := handle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cancelAnimationFrame", _args[0:_end]...)
	return
}

// interface: ServiceWorkerGlobalScope
type ServiceWorkerGlobalScope struct {
	WorkerGlobalScope
}

// ServiceWorkerGlobalScopeFromJS is casting a js.Wrapper into ServiceWorkerGlobalScope.
func ServiceWorkerGlobalScopeFromJS(value js.Wrapper) *ServiceWorkerGlobalScope {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ServiceWorkerGlobalScope{}
	ret.Value_JS = input
	return ret
}

// Clients returning attribute 'clients' with
// type serviceworker.Clients (idl: Clients).
func (_this *ServiceWorkerGlobalScope) Clients() *serviceworker.Clients {
	var ret *serviceworker.Clients
	value := _this.Value_JS.Get("clients")
	ret = serviceworker.ClientsFromJS(value)
	return ret
}

// Registration returning attribute 'registration' with
// type serviceworker.ServiceWorkerRegistration (idl: ServiceWorkerRegistration).
func (_this *ServiceWorkerGlobalScope) Registration() *serviceworker.ServiceWorkerRegistration {
	var ret *serviceworker.ServiceWorkerRegistration
	value := _this.Value_JS.Get("registration")
	ret = serviceworker.ServiceWorkerRegistrationFromJS(value)
	return ret
}

// Oninstall returning attribute 'oninstall' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Oninstall() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninstall")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninstall setting attribute 'oninstall' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOninstall(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oninstall", input)
}

// Onactivate returning attribute 'onactivate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onactivate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onactivate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnactivate setting attribute 'onactivate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnactivate(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onactivate", input)
}

// Onfetch returning attribute 'onfetch' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onfetch() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfetch")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnfetch setting attribute 'onfetch' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnfetch(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onfetch", input)
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnmessage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessage", input)
}

// Onmessageerror returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onmessageerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessageerror setting attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnmessageerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessageerror", input)
}

// Onsync returning attribute 'onsync' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onsync() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsync")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsync setting attribute 'onsync' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnsync(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onsync", input)
}

// Onbackgroundfetchsuccess returning attribute 'onbackgroundfetchsuccess' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onbackgroundfetchsuccess() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchsuccess")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbackgroundfetchsuccess setting attribute 'onbackgroundfetchsuccess' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnbackgroundfetchsuccess(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbackgroundfetchsuccess", input)
}

// Onbackgroundfetchfail returning attribute 'onbackgroundfetchfail' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onbackgroundfetchfail() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchfail")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbackgroundfetchfail setting attribute 'onbackgroundfetchfail' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnbackgroundfetchfail(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbackgroundfetchfail", input)
}

// Onbackgroundfetchabort returning attribute 'onbackgroundfetchabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onbackgroundfetchabort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchabort")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbackgroundfetchabort setting attribute 'onbackgroundfetchabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnbackgroundfetchabort(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbackgroundfetchabort", input)
}

// Onbackgroundfetchclick returning attribute 'onbackgroundfetchclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onbackgroundfetchclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbackgroundfetchclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbackgroundfetchclick setting attribute 'onbackgroundfetchclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnbackgroundfetchclick(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbackgroundfetchclick", input)
}

// CookieStore returning attribute 'cookieStore' with
// type cookie.CookieStore (idl: CookieStore).
func (_this *ServiceWorkerGlobalScope) CookieStore() *cookie.CookieStore {
	var ret *cookie.CookieStore
	value := _this.Value_JS.Get("cookieStore")
	ret = cookie.CookieStoreFromJS(value)
	return ret
}

// Oncookiechange returning attribute 'oncookiechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Oncookiechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncookiechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncookiechange setting attribute 'oncookiechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOncookiechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncookiechange", input)
}

// Oncanmakepayment returning attribute 'oncanmakepayment' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Oncanmakepayment() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanmakepayment")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanmakepayment setting attribute 'oncanmakepayment' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOncanmakepayment(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncanmakepayment", input)
}

// Onpaymentrequest returning attribute 'onpaymentrequest' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) Onpaymentrequest() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaymentrequest")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpaymentrequest setting attribute 'onpaymentrequest' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *ServiceWorkerGlobalScope) SetOnpaymentrequest(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpaymentrequest", input)
}

func (_this *ServiceWorkerGlobalScope) SkipWaiting() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("skipWaiting", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: SharedWorker
type SharedWorker struct {
	domcore.EventTarget
}

// SharedWorkerFromJS is casting a js.Wrapper into SharedWorker.
func SharedWorkerFromJS(value js.Wrapper) *SharedWorker {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SharedWorker{}
	ret.Value_JS = input
	return ret
}

func NewSharedWorker(scriptURL string, options *Union) (_result *SharedWorker) {
	_klass := js.Global().Get("SharedWorker")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := scriptURL
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *SharedWorker // javascript: SharedWorker _what_return_name
	)
	_converted = SharedWorkerFromJS(_returned)
	_result = _converted
	return
}

// Port returning attribute 'port' with
// type channel.MessagePort (idl: MessagePort).
func (_this *SharedWorker) Port() *channel.MessagePort {
	var ret *channel.MessagePort
	value := _this.Value_JS.Get("port")
	ret = channel.MessagePortFromJS(value)
	return ret
}

// Onerror returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorker) Onerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorker) SetOnerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onerror", input)
}

// interface: SharedWorkerGlobalScope
type SharedWorkerGlobalScope struct {
	WorkerGlobalScope
}

// SharedWorkerGlobalScopeFromJS is casting a js.Wrapper into SharedWorkerGlobalScope.
func SharedWorkerGlobalScopeFromJS(value js.Wrapper) *SharedWorkerGlobalScope {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SharedWorkerGlobalScope{}
	ret.Value_JS = input
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *SharedWorkerGlobalScope) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// Onconnect returning attribute 'onconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorkerGlobalScope) Onconnect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onconnect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnconnect setting attribute 'onconnect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SharedWorkerGlobalScope) SetOnconnect(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onconnect", input)
}

func (_this *SharedWorkerGlobalScope) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

// interface: Worker
type Worker struct {
	domcore.EventTarget
}

// WorkerFromJS is casting a js.Wrapper into Worker.
func WorkerFromJS(value js.Wrapper) *Worker {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Worker{}
	ret.Value_JS = input
	return ret
}

func NewWorker(scriptURL string, options *WorkerOptions) (_result *Worker) {
	_klass := js.Global().Get("Worker")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := scriptURL
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Worker // javascript: Worker _what_return_name
	)
	_converted = WorkerFromJS(_returned)
	_result = _converted
	return
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) SetOnmessage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessage", input)
}

// Onmessageerror returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) Onmessageerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessageerror setting attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) SetOnmessageerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessageerror", input)
}

// Onerror returning attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) Onerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Worker) SetOnerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onerror", input)
}

func (_this *Worker) Terminate() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("terminate", _args[0:_end]...)
	return
}

func (_this *Worker) PostMessage(message interface{}, transfer []*javascript.Object) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(transfer))
	for __idx1, __seq_in1 := range transfer {
		__seq_out1 := __seq_in1.JSValue()
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

func (_this *Worker) PostMessage2(message interface{}, options *channel.PostMessageOptions) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := message
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("postMessage", _args[0:_end]...)
	return
}

// interface: WorkerGlobalScope
type WorkerGlobalScope struct {
	domcore.EventTarget
}

// WorkerGlobalScopeFromJS is casting a js.Wrapper into WorkerGlobalScope.
func WorkerGlobalScopeFromJS(value js.Wrapper) *WorkerGlobalScope {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WorkerGlobalScope{}
	ret.Value_JS = input
	return ret
}

// Self returning attribute 'self' with
// type WorkerGlobalScope (idl: WorkerGlobalScope).
func (_this *WorkerGlobalScope) Self() *WorkerGlobalScope {
	var ret *WorkerGlobalScope
	value := _this.Value_JS.Get("self")
	ret = WorkerGlobalScopeFromJS(value)
	return ret
}

// Location returning attribute 'location' with
// type WorkerLocation (idl: WorkerLocation).
func (_this *WorkerGlobalScope) Location() *WorkerLocation {
	var ret *WorkerLocation
	value := _this.Value_JS.Get("location")
	ret = WorkerLocationFromJS(value)
	return ret
}

// Navigator returning attribute 'navigator' with
// type WorkerNavigator (idl: WorkerNavigator).
func (_this *WorkerGlobalScope) Navigator() *WorkerNavigator {
	var ret *WorkerNavigator
	value := _this.Value_JS.Get("navigator")
	ret = WorkerNavigatorFromJS(value)
	return ret
}

// Onerror returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *WorkerGlobalScope) Onerror() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnerror(value *htmlcommon.OnErrorEventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onerror", input)
}

// Onlanguagechange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) Onlanguagechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnlanguagechange setting attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnlanguagechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onlanguagechange", input)
}

// Onoffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) Onoffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnoffline setting attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnoffline(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onoffline", input)
}

// Ononline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) Ononline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnonline setting attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnonline(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ononline", input)
}

// Onrejectionhandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) Onrejectionhandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnrejectionhandled setting attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnrejectionhandled(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onrejectionhandled", input)
}

// Onunhandledrejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) Onunhandledrejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunhandledrejection setting attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *WorkerGlobalScope) SetOnunhandledrejection(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onunhandledrejection", input)
}

// AddressSpace returning attribute 'addressSpace' with
// type corsrfc1918.AddressSpace (idl: AddressSpace).
func (_this *WorkerGlobalScope) AddressSpace() corsrfc1918.AddressSpace {
	var ret corsrfc1918.AddressSpace
	value := _this.Value_JS.Get("addressSpace")
	ret = corsrfc1918.AddressSpaceFromJS(value)
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *WorkerGlobalScope) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// IsSecureContext returning attribute 'isSecureContext' with
// type bool (idl: boolean).
func (_this *WorkerGlobalScope) IsSecureContext() bool {
	var ret bool
	value := _this.Value_JS.Get("isSecureContext")
	ret = (value).Bool()
	return ret
}

// Caches returning attribute 'caches' with
// type serviceworker.CacheStorage (idl: CacheStorage).
func (_this *WorkerGlobalScope) Caches() *serviceworker.CacheStorage {
	var ret *serviceworker.CacheStorage
	value := _this.Value_JS.Get("caches")
	ret = serviceworker.CacheStorageFromJS(value)
	return ret
}

// IndexedDB returning attribute 'indexedDB' with
// type indexeddb.IDBFactory (idl: IDBFactory).
func (_this *WorkerGlobalScope) IndexedDB() *indexeddb.IDBFactory {
	var ret *indexeddb.IDBFactory
	value := _this.Value_JS.Get("indexedDB")
	ret = indexeddb.IDBFactoryFromJS(value)
	return ret
}

// Crypto returning attribute 'crypto' with
// type crypto.Crypto (idl: Crypto).
func (_this *WorkerGlobalScope) Crypto() *crypto.Crypto {
	var ret *crypto.Crypto
	value := _this.Value_JS.Get("crypto")
	ret = crypto.CryptoFromJS(value)
	return ret
}

func (_this *WorkerGlobalScope) ImportScripts(urls ...string) {
	var (
		_args []interface{} = make([]interface{}, 0+len(urls))
		_end  int
	)
	for _, __in := range urls {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_this.Value_JS.Call("importScripts", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) Btoa(data string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("btoa", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) Atob(data string) (_result *patch.ByteString) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := data
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("atob", _args[0:_end]...)
	var (
		_converted *patch.ByteString // javascript: ByteString _what_return_name
	)
	_converted = patch.ByteStringFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) SetTimeout(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {
		_p1 := timeout
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setTimeout", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) ClearTimeout(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {
		_p0 := handle
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearTimeout", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) SetInterval(handler *Union, timeout *int, arguments ...interface{}) (_result int) {
	var (
		_args []interface{} = make([]interface{}, 2+len(arguments))
		_end  int
	)
	_p0 := handler.JSValue()
	_args[0] = _p0
	_end++
	if timeout != nil {
		_p1 := timeout
		_args[1] = _p1
		_end++
	}
	for _, __in := range arguments {
		__out := __in
		_args[_end] = __out
		_end++
	}
	_returned := _this.Value_JS.Call("setInterval", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) ClearInterval(handle *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if handle != nil {
		_p0 := handle
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clearInterval", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) QueueMicrotask(callback *webidl.VoidFunction) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("queueMicrotask", _args[0:_end]...)
	return
}

func (_this *WorkerGlobalScope) CreateImageBitmap(image *Union, options *canvas.ImageBitmapOptions) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) CreateImageBitmap2(image *Union, sx int, sy int, sw int, sh int, options *canvas.ImageBitmapOptions) (_result *javascript.Promise) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	if options != nil {
		_p5 := options.JSValue()
		_args[5] = _p5
		_end++
	}
	_returned := _this.Value_JS.Call("createImageBitmap", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *WorkerGlobalScope) Fetch(input *Union, init *fetch.RequestInit) (_result *javascript.Promise) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := input.JSValue()
	_args[0] = _p0
	_end++
	if init != nil {
		_p1 := init.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("fetch", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: WorkerLocation
type WorkerLocation struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WorkerLocation) JSValue() js.Value {
	return _this.Value_JS
}

// WorkerLocationFromJS is casting a js.Wrapper into WorkerLocation.
func WorkerLocationFromJS(value js.Wrapper) *WorkerLocation {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WorkerLocation{}
	ret.Value_JS = input
	return ret
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *WorkerLocation) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *WorkerLocation) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *WorkerLocation) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *WorkerLocation) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *WorkerLocation) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *WorkerLocation) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *WorkerLocation) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *WorkerLocation) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *WorkerLocation) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// interface: WorkerNavigator
type WorkerNavigator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *WorkerNavigator) JSValue() js.Value {
	return _this.Value_JS
}

// WorkerNavigatorFromJS is casting a js.Wrapper into WorkerNavigator.
func WorkerNavigatorFromJS(value js.Wrapper) *WorkerNavigator {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &WorkerNavigator{}
	ret.Value_JS = input
	return ret
}

// MediaCapabilities returning attribute 'mediaCapabilities' with
// type capabilities.MediaCapabilities (idl: MediaCapabilities).
func (_this *WorkerNavigator) MediaCapabilities() *capabilities.MediaCapabilities {
	var ret *capabilities.MediaCapabilities
	value := _this.Value_JS.Get("mediaCapabilities")
	ret = capabilities.MediaCapabilitiesFromJS(value)
	return ret
}

// Permissions returning attribute 'permissions' with
// type permissions.Permissions (idl: Permissions).
func (_this *WorkerNavigator) Permissions() *permissions.Permissions {
	var ret *permissions.Permissions
	value := _this.Value_JS.Get("permissions")
	ret = permissions.PermissionsFromJS(value)
	return ret
}

// ServiceWorker returning attribute 'serviceWorker' with
// type serviceworker.ServiceWorkerContainer (idl: ServiceWorkerContainer).
func (_this *WorkerNavigator) ServiceWorker() *serviceworker.ServiceWorkerContainer {
	var ret *serviceworker.ServiceWorkerContainer
	value := _this.Value_JS.Get("serviceWorker")
	ret = serviceworker.ServiceWorkerContainerFromJS(value)
	return ret
}

// AppCodeName returning attribute 'appCodeName' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppCodeName() string {
	var ret string
	value := _this.Value_JS.Get("appCodeName")
	ret = (value).String()
	return ret
}

// AppName returning attribute 'appName' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppName() string {
	var ret string
	value := _this.Value_JS.Get("appName")
	ret = (value).String()
	return ret
}

// AppVersion returning attribute 'appVersion' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) AppVersion() string {
	var ret string
	value := _this.Value_JS.Get("appVersion")
	ret = (value).String()
	return ret
}

// Platform returning attribute 'platform' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Platform() string {
	var ret string
	value := _this.Value_JS.Get("platform")
	ret = (value).String()
	return ret
}

// Product returning attribute 'product' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Product() string {
	var ret string
	value := _this.Value_JS.Get("product")
	ret = (value).String()
	return ret
}

// ProductSub returning attribute 'productSub' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) ProductSub() string {
	var ret string
	value := _this.Value_JS.Get("productSub")
	ret = (value).String()
	return ret
}

// UserAgent returning attribute 'userAgent' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) UserAgent() string {
	var ret string
	value := _this.Value_JS.Get("userAgent")
	ret = (value).String()
	return ret
}

// Vendor returning attribute 'vendor' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Vendor() string {
	var ret string
	value := _this.Value_JS.Get("vendor")
	ret = (value).String()
	return ret
}

// VendorSub returning attribute 'vendorSub' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) VendorSub() string {
	var ret string
	value := _this.Value_JS.Get("vendorSub")
	ret = (value).String()
	return ret
}

// Oscpu returning attribute 'oscpu' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Oscpu() string {
	var ret string
	value := _this.Value_JS.Get("oscpu")
	ret = (value).String()
	return ret
}

// Language returning attribute 'language' with
// type string (idl: DOMString).
func (_this *WorkerNavigator) Language() string {
	var ret string
	value := _this.Value_JS.Get("language")
	ret = (value).String()
	return ret
}

// Languages returning attribute 'languages' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *WorkerNavigator) Languages() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("languages")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// OnLine returning attribute 'onLine' with
// type bool (idl: boolean).
func (_this *WorkerNavigator) OnLine() bool {
	var ret bool
	value := _this.Value_JS.Get("onLine")
	ret = (value).Bool()
	return ret
}

// HardwareConcurrency returning attribute 'hardwareConcurrency' with
// type int (idl: unsigned long long).
func (_this *WorkerNavigator) HardwareConcurrency() int {
	var ret int
	value := _this.Value_JS.Get("hardwareConcurrency")
	ret = (value).Int()
	return ret
}

// Connection returning attribute 'connection' with
// type netinfo.NetworkInformation (idl: NetworkInformation).
func (_this *WorkerNavigator) Connection() *netinfo.NetworkInformation {
	var ret *netinfo.NetworkInformation
	value := _this.Value_JS.Get("connection")
	ret = netinfo.NetworkInformationFromJS(value)
	return ret
}

// Storage returning attribute 'storage' with
// type storage.StorageManager (idl: StorageManager).
func (_this *WorkerNavigator) Storage() *storage.StorageManager {
	var ret *storage.StorageManager
	value := _this.Value_JS.Get("storage")
	ret = storage.StorageManagerFromJS(value)
	return ret
}

func (_this *WorkerNavigator) TaintEnabled() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("taintEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}
