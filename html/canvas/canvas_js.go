// Code generated by webidl-bind. DO NOT EDIT.

package canvas

import "syscall/js"

import (
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/file"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/javascript"
	"github.com/gowebapi/webapi/media/capture/local"
	"github.com/gowebapi/webapi/patch"
)

// using following types:
// dom.Element
// domcore.EventTarget
// file.BlobCallback
// geometry.DOMMatrix
// geometry.DOMMatrix2DInit
// html.HTMLElement
// html.ImageEncodeOptions
// html.OffscreenRenderingContextId
// javascript.Promise
// local.MediaStream
// patch.Uint8ClampedArray

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: CanvasDirection
type CanvasDirection int

const (
	LtrCanvasDirection CanvasDirection = iota
	RtlCanvasDirection
	InheritCanvasDirection
)

var canvasDirectionToWasmTable = []string{
	"ltr", "rtl", "inherit",
}

var canvasDirectionFromWasmTable = map[string]CanvasDirection{
	"ltr": LtrCanvasDirection, "rtl": RtlCanvasDirection, "inherit": InheritCanvasDirection,
}

// JSValue is converting this enum into a java object
func (this *CanvasDirection) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasDirection) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasDirectionToWasmTable) {
		return canvasDirectionToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasDirectionFromJS is converting a javascript value into
// a CanvasDirection enum value.
func CanvasDirectionFromJS(value js.Value) CanvasDirection {
	key := value.String()
	conv, ok := canvasDirectionFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CanvasFillRule
type CanvasFillRule int

const (
	NonzeroCanvasFillRule CanvasFillRule = iota
	EvenoddCanvasFillRule
)

var canvasFillRuleToWasmTable = []string{
	"nonzero", "evenodd",
}

var canvasFillRuleFromWasmTable = map[string]CanvasFillRule{
	"nonzero": NonzeroCanvasFillRule, "evenodd": EvenoddCanvasFillRule,
}

// JSValue is converting this enum into a java object
func (this *CanvasFillRule) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasFillRule) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasFillRuleToWasmTable) {
		return canvasFillRuleToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasFillRuleFromJS is converting a javascript value into
// a CanvasFillRule enum value.
func CanvasFillRuleFromJS(value js.Value) CanvasFillRule {
	key := value.String()
	conv, ok := canvasFillRuleFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CanvasLineCap
type CanvasLineCap int

const (
	ButtCanvasLineCap CanvasLineCap = iota
	RoundCanvasLineCap
	SquareCanvasLineCap
)

var canvasLineCapToWasmTable = []string{
	"butt", "round", "square",
}

var canvasLineCapFromWasmTable = map[string]CanvasLineCap{
	"butt": ButtCanvasLineCap, "round": RoundCanvasLineCap, "square": SquareCanvasLineCap,
}

// JSValue is converting this enum into a java object
func (this *CanvasLineCap) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasLineCap) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasLineCapToWasmTable) {
		return canvasLineCapToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasLineCapFromJS is converting a javascript value into
// a CanvasLineCap enum value.
func CanvasLineCapFromJS(value js.Value) CanvasLineCap {
	key := value.String()
	conv, ok := canvasLineCapFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CanvasLineJoin
type CanvasLineJoin int

const (
	RoundCanvasLineJoin CanvasLineJoin = iota
	BevelCanvasLineJoin
	MiterCanvasLineJoin
)

var canvasLineJoinToWasmTable = []string{
	"round", "bevel", "miter",
}

var canvasLineJoinFromWasmTable = map[string]CanvasLineJoin{
	"round": RoundCanvasLineJoin, "bevel": BevelCanvasLineJoin, "miter": MiterCanvasLineJoin,
}

// JSValue is converting this enum into a java object
func (this *CanvasLineJoin) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasLineJoin) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasLineJoinToWasmTable) {
		return canvasLineJoinToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasLineJoinFromJS is converting a javascript value into
// a CanvasLineJoin enum value.
func CanvasLineJoinFromJS(value js.Value) CanvasLineJoin {
	key := value.String()
	conv, ok := canvasLineJoinFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CanvasTextAlign
type CanvasTextAlign int

const (
	StartCanvasTextAlign CanvasTextAlign = iota
	EndCanvasTextAlign
	LeftCanvasTextAlign
	RightCanvasTextAlign
	CenterCanvasTextAlign
)

var canvasTextAlignToWasmTable = []string{
	"start", "end", "left", "right", "center",
}

var canvasTextAlignFromWasmTable = map[string]CanvasTextAlign{
	"start": StartCanvasTextAlign, "end": EndCanvasTextAlign, "left": LeftCanvasTextAlign, "right": RightCanvasTextAlign, "center": CenterCanvasTextAlign,
}

// JSValue is converting this enum into a java object
func (this *CanvasTextAlign) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasTextAlign) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasTextAlignToWasmTable) {
		return canvasTextAlignToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasTextAlignFromJS is converting a javascript value into
// a CanvasTextAlign enum value.
func CanvasTextAlignFromJS(value js.Value) CanvasTextAlign {
	key := value.String()
	conv, ok := canvasTextAlignFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: CanvasTextBaseline
type CanvasTextBaseline int

const (
	TopCanvasTextBaseline CanvasTextBaseline = iota
	HangingCanvasTextBaseline
	MiddleCanvasTextBaseline
	AlphabeticCanvasTextBaseline
	IdeographicCanvasTextBaseline
	BottomCanvasTextBaseline
)

var canvasTextBaselineToWasmTable = []string{
	"top", "hanging", "middle", "alphabetic", "ideographic", "bottom",
}

var canvasTextBaselineFromWasmTable = map[string]CanvasTextBaseline{
	"top": TopCanvasTextBaseline, "hanging": HangingCanvasTextBaseline, "middle": MiddleCanvasTextBaseline, "alphabetic": AlphabeticCanvasTextBaseline, "ideographic": IdeographicCanvasTextBaseline, "bottom": BottomCanvasTextBaseline,
}

// JSValue is converting this enum into a java object
func (this *CanvasTextBaseline) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this CanvasTextBaseline) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(canvasTextBaselineToWasmTable) {
		return canvasTextBaselineToWasmTable[idx]
	}
	panic("unknown input value")
}

// CanvasTextBaselineFromJS is converting a javascript value into
// a CanvasTextBaseline enum value.
func CanvasTextBaselineFromJS(value js.Value) CanvasTextBaseline {
	key := value.String()
	conv, ok := canvasTextBaselineFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ColorSpaceConversion
type ColorSpaceConversion int

const (
	NoneColorSpaceConversion ColorSpaceConversion = iota
	DefaultColorSpaceConversion
)

var colorSpaceConversionToWasmTable = []string{
	"none", "default",
}

var colorSpaceConversionFromWasmTable = map[string]ColorSpaceConversion{
	"none": NoneColorSpaceConversion, "default": DefaultColorSpaceConversion,
}

// JSValue is converting this enum into a java object
func (this *ColorSpaceConversion) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ColorSpaceConversion) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(colorSpaceConversionToWasmTable) {
		return colorSpaceConversionToWasmTable[idx]
	}
	panic("unknown input value")
}

// ColorSpaceConversionFromJS is converting a javascript value into
// a ColorSpaceConversion enum value.
func ColorSpaceConversionFromJS(value js.Value) ColorSpaceConversion {
	key := value.String()
	conv, ok := colorSpaceConversionFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ImageOrientation
type ImageOrientation int

const (
	NoneImageOrientation ImageOrientation = iota
	FlipYImageOrientation
)

var imageOrientationToWasmTable = []string{
	"none", "flipY",
}

var imageOrientationFromWasmTable = map[string]ImageOrientation{
	"none": NoneImageOrientation, "flipY": FlipYImageOrientation,
}

// JSValue is converting this enum into a java object
func (this *ImageOrientation) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ImageOrientation) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(imageOrientationToWasmTable) {
		return imageOrientationToWasmTable[idx]
	}
	panic("unknown input value")
}

// ImageOrientationFromJS is converting a javascript value into
// a ImageOrientation enum value.
func ImageOrientationFromJS(value js.Value) ImageOrientation {
	key := value.String()
	conv, ok := imageOrientationFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ImageSmoothingQuality
type ImageSmoothingQuality int

const (
	LowImageSmoothingQuality ImageSmoothingQuality = iota
	MediumImageSmoothingQuality
	HighImageSmoothingQuality
)

var imageSmoothingQualityToWasmTable = []string{
	"low", "medium", "high",
}

var imageSmoothingQualityFromWasmTable = map[string]ImageSmoothingQuality{
	"low": LowImageSmoothingQuality, "medium": MediumImageSmoothingQuality, "high": HighImageSmoothingQuality,
}

// JSValue is converting this enum into a java object
func (this *ImageSmoothingQuality) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ImageSmoothingQuality) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(imageSmoothingQualityToWasmTable) {
		return imageSmoothingQualityToWasmTable[idx]
	}
	panic("unknown input value")
}

// ImageSmoothingQualityFromJS is converting a javascript value into
// a ImageSmoothingQuality enum value.
func ImageSmoothingQualityFromJS(value js.Value) ImageSmoothingQuality {
	key := value.String()
	conv, ok := imageSmoothingQualityFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: PremultiplyAlpha
type PremultiplyAlpha int

const (
	NonePremultiplyAlpha PremultiplyAlpha = iota
	PremultiplyPremultiplyAlpha
	DefaultPremultiplyAlpha
)

var premultiplyAlphaToWasmTable = []string{
	"none", "premultiply", "default",
}

var premultiplyAlphaFromWasmTable = map[string]PremultiplyAlpha{
	"none": NonePremultiplyAlpha, "premultiply": PremultiplyPremultiplyAlpha, "default": DefaultPremultiplyAlpha,
}

// JSValue is converting this enum into a java object
func (this *PremultiplyAlpha) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this PremultiplyAlpha) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(premultiplyAlphaToWasmTable) {
		return premultiplyAlphaToWasmTable[idx]
	}
	panic("unknown input value")
}

// PremultiplyAlphaFromJS is converting a javascript value into
// a PremultiplyAlpha enum value.
func PremultiplyAlphaFromJS(value js.Value) PremultiplyAlpha {
	key := value.String()
	conv, ok := premultiplyAlphaFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: ResizeQuality
type ResizeQuality int

const (
	PixelatedResizeQuality ResizeQuality = iota
	LowResizeQuality
	MediumResizeQuality
	HighResizeQuality
)

var resizeQualityToWasmTable = []string{
	"pixelated", "low", "medium", "high",
}

var resizeQualityFromWasmTable = map[string]ResizeQuality{
	"pixelated": PixelatedResizeQuality, "low": LowResizeQuality, "medium": MediumResizeQuality, "high": HighResizeQuality,
}

// JSValue is converting this enum into a java object
func (this *ResizeQuality) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this ResizeQuality) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(resizeQualityToWasmTable) {
		return resizeQualityToWasmTable[idx]
	}
	panic("unknown input value")
}

// ResizeQualityFromJS is converting a javascript value into
// a ResizeQuality enum value.
func ResizeQualityFromJS(value js.Value) ResizeQuality {
	key := value.String()
	conv, ok := resizeQualityFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// dictionary: CanvasRenderingContext2DSettings
type CanvasRenderingContext2DSettings struct {
	Alpha bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *CanvasRenderingContext2DSettings) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Alpha
	out.Set("alpha", value0)
	return out
}

// CanvasRenderingContext2DSettingsFromJS is allocating a new
// CanvasRenderingContext2DSettings object and copy all values from
// input javascript object
func CanvasRenderingContext2DSettingsFromJS(value js.Wrapper) *CanvasRenderingContext2DSettings {
	input := value.JSValue()
	var out CanvasRenderingContext2DSettings
	var (
		value0 bool // javascript: boolean {alpha Alpha alpha}
	)
	value0 = (input.Get("alpha")).Bool()
	out.Alpha = value0
	return &out
}

// dictionary: ImageBitmapOptions
type ImageBitmapOptions struct {
	ImageOrientation     ImageOrientation
	PremultiplyAlpha     PremultiplyAlpha
	ColorSpaceConversion ColorSpaceConversion
	ResizeWidth          uint
	ResizeHeight         uint
	ResizeQuality        ResizeQuality
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *ImageBitmapOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.ImageOrientation.JSValue()
	out.Set("imageOrientation", value0)
	value1 := _this.PremultiplyAlpha.JSValue()
	out.Set("premultiplyAlpha", value1)
	value2 := _this.ColorSpaceConversion.JSValue()
	out.Set("colorSpaceConversion", value2)
	value3 := _this.ResizeWidth
	out.Set("resizeWidth", value3)
	value4 := _this.ResizeHeight
	out.Set("resizeHeight", value4)
	value5 := _this.ResizeQuality.JSValue()
	out.Set("resizeQuality", value5)
	return out
}

// ImageBitmapOptionsFromJS is allocating a new
// ImageBitmapOptions object and copy all values from
// input javascript object
func ImageBitmapOptionsFromJS(value js.Wrapper) *ImageBitmapOptions {
	input := value.JSValue()
	var out ImageBitmapOptions
	var (
		value0 ImageOrientation     // javascript: ImageOrientation {imageOrientation ImageOrientation imageOrientation}
		value1 PremultiplyAlpha     // javascript: PremultiplyAlpha {premultiplyAlpha PremultiplyAlpha premultiplyAlpha}
		value2 ColorSpaceConversion // javascript: ColorSpaceConversion {colorSpaceConversion ColorSpaceConversion colorSpaceConversion}
		value3 uint                 // javascript: unsigned long {resizeWidth ResizeWidth resizeWidth}
		value4 uint                 // javascript: unsigned long {resizeHeight ResizeHeight resizeHeight}
		value5 ResizeQuality        // javascript: ResizeQuality {resizeQuality ResizeQuality resizeQuality}
	)
	value0 = ImageOrientationFromJS(input.Get("imageOrientation"))
	out.ImageOrientation = value0
	value1 = PremultiplyAlphaFromJS(input.Get("premultiplyAlpha"))
	out.PremultiplyAlpha = value1
	value2 = ColorSpaceConversionFromJS(input.Get("colorSpaceConversion"))
	out.ColorSpaceConversion = value2
	value3 = (uint)((input.Get("resizeWidth")).Int())
	out.ResizeWidth = value3
	value4 = (uint)((input.Get("resizeHeight")).Int())
	out.ResizeHeight = value4
	value5 = ResizeQualityFromJS(input.Get("resizeQuality"))
	out.ResizeQuality = value5
	return &out
}

// interface: CanvasGradient
type CanvasGradient struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *CanvasGradient) JSValue() js.Value {
	return _this.Value_JS
}

// CanvasGradientFromJS is casting a js.Wrapper into CanvasGradient.
func CanvasGradientFromJS(value js.Wrapper) *CanvasGradient {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &CanvasGradient{}
	ret.Value_JS = input
	return ret
}

func (_this *CanvasGradient) AddColorStop(offset float64, color string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := offset
	_args[0] = _p0
	_end++
	_p1 := color
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("addColorStop", _args[0:_end]...)
	return
}

// interface: CanvasPattern
type CanvasPattern struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *CanvasPattern) JSValue() js.Value {
	return _this.Value_JS
}

// CanvasPatternFromJS is casting a js.Wrapper into CanvasPattern.
func CanvasPatternFromJS(value js.Wrapper) *CanvasPattern {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &CanvasPattern{}
	ret.Value_JS = input
	return ret
}

func (_this *CanvasPattern) SetTransform(transform *geometry.DOMMatrix2DInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if transform != nil {
		_p0 := transform.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("setTransform", _args[0:_end]...)
	return
}

// interface: CanvasRenderingContext2D
type CanvasRenderingContext2D struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *CanvasRenderingContext2D) JSValue() js.Value {
	return _this.Value_JS
}

// CanvasRenderingContext2DFromJS is casting a js.Wrapper into CanvasRenderingContext2D.
func CanvasRenderingContext2DFromJS(value js.Wrapper) *CanvasRenderingContext2D {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &CanvasRenderingContext2D{}
	ret.Value_JS = input
	return ret
}

// Canvas returning attribute 'canvas' with
// type HTMLCanvasElement (idl: HTMLCanvasElement).
func (_this *CanvasRenderingContext2D) Canvas() *HTMLCanvasElement {
	var ret *HTMLCanvasElement
	value := _this.Value_JS.Get("canvas")
	ret = HTMLCanvasElementFromJS(value)
	return ret
}

// LineWidth returning attribute 'lineWidth' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) LineWidth() float64 {
	var ret float64
	value := _this.Value_JS.Get("lineWidth")
	ret = (value).Float()
	return ret
}

// SetLineWidth setting attribute 'lineWidth' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetLineWidth(value float64) {
	input := value
	_this.Value_JS.Set("lineWidth", input)
}

// LineCap returning attribute 'lineCap' with
// type CanvasLineCap (idl: CanvasLineCap).
func (_this *CanvasRenderingContext2D) LineCap() CanvasLineCap {
	var ret CanvasLineCap
	value := _this.Value_JS.Get("lineCap")
	ret = CanvasLineCapFromJS(value)
	return ret
}

// SetLineCap setting attribute 'lineCap' with
// type CanvasLineCap (idl: CanvasLineCap).
func (_this *CanvasRenderingContext2D) SetLineCap(value CanvasLineCap) {
	input := value.JSValue()
	_this.Value_JS.Set("lineCap", input)
}

// LineJoin returning attribute 'lineJoin' with
// type CanvasLineJoin (idl: CanvasLineJoin).
func (_this *CanvasRenderingContext2D) LineJoin() CanvasLineJoin {
	var ret CanvasLineJoin
	value := _this.Value_JS.Get("lineJoin")
	ret = CanvasLineJoinFromJS(value)
	return ret
}

// SetLineJoin setting attribute 'lineJoin' with
// type CanvasLineJoin (idl: CanvasLineJoin).
func (_this *CanvasRenderingContext2D) SetLineJoin(value CanvasLineJoin) {
	input := value.JSValue()
	_this.Value_JS.Set("lineJoin", input)
}

// MiterLimit returning attribute 'miterLimit' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) MiterLimit() float64 {
	var ret float64
	value := _this.Value_JS.Get("miterLimit")
	ret = (value).Float()
	return ret
}

// SetMiterLimit setting attribute 'miterLimit' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetMiterLimit(value float64) {
	input := value
	_this.Value_JS.Set("miterLimit", input)
}

// LineDashOffset returning attribute 'lineDashOffset' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) LineDashOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("lineDashOffset")
	ret = (value).Float()
	return ret
}

// SetLineDashOffset setting attribute 'lineDashOffset' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetLineDashOffset(value float64) {
	input := value
	_this.Value_JS.Set("lineDashOffset", input)
}

// Font returning attribute 'font' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) Font() string {
	var ret string
	value := _this.Value_JS.Get("font")
	ret = (value).String()
	return ret
}

// SetFont setting attribute 'font' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) SetFont(value string) {
	input := value
	_this.Value_JS.Set("font", input)
}

// TextAlign returning attribute 'textAlign' with
// type CanvasTextAlign (idl: CanvasTextAlign).
func (_this *CanvasRenderingContext2D) TextAlign() CanvasTextAlign {
	var ret CanvasTextAlign
	value := _this.Value_JS.Get("textAlign")
	ret = CanvasTextAlignFromJS(value)
	return ret
}

// SetTextAlign setting attribute 'textAlign' with
// type CanvasTextAlign (idl: CanvasTextAlign).
func (_this *CanvasRenderingContext2D) SetTextAlign(value CanvasTextAlign) {
	input := value.JSValue()
	_this.Value_JS.Set("textAlign", input)
}

// TextBaseline returning attribute 'textBaseline' with
// type CanvasTextBaseline (idl: CanvasTextBaseline).
func (_this *CanvasRenderingContext2D) TextBaseline() CanvasTextBaseline {
	var ret CanvasTextBaseline
	value := _this.Value_JS.Get("textBaseline")
	ret = CanvasTextBaselineFromJS(value)
	return ret
}

// SetTextBaseline setting attribute 'textBaseline' with
// type CanvasTextBaseline (idl: CanvasTextBaseline).
func (_this *CanvasRenderingContext2D) SetTextBaseline(value CanvasTextBaseline) {
	input := value.JSValue()
	_this.Value_JS.Set("textBaseline", input)
}

// Direction returning attribute 'direction' with
// type CanvasDirection (idl: CanvasDirection).
func (_this *CanvasRenderingContext2D) Direction() CanvasDirection {
	var ret CanvasDirection
	value := _this.Value_JS.Get("direction")
	ret = CanvasDirectionFromJS(value)
	return ret
}

// SetDirection setting attribute 'direction' with
// type CanvasDirection (idl: CanvasDirection).
func (_this *CanvasRenderingContext2D) SetDirection(value CanvasDirection) {
	input := value.JSValue()
	_this.Value_JS.Set("direction", input)
}

// Filter returning attribute 'filter' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) Filter() string {
	var ret string
	value := _this.Value_JS.Get("filter")
	ret = (value).String()
	return ret
}

// SetFilter setting attribute 'filter' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) SetFilter(value string) {
	input := value
	_this.Value_JS.Set("filter", input)
}

// ShadowOffsetX returning attribute 'shadowOffsetX' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) ShadowOffsetX() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowOffsetX")
	ret = (value).Float()
	return ret
}

// SetShadowOffsetX setting attribute 'shadowOffsetX' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetShadowOffsetX(value float64) {
	input := value
	_this.Value_JS.Set("shadowOffsetX", input)
}

// ShadowOffsetY returning attribute 'shadowOffsetY' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) ShadowOffsetY() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowOffsetY")
	ret = (value).Float()
	return ret
}

// SetShadowOffsetY setting attribute 'shadowOffsetY' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetShadowOffsetY(value float64) {
	input := value
	_this.Value_JS.Set("shadowOffsetY", input)
}

// ShadowBlur returning attribute 'shadowBlur' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) ShadowBlur() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowBlur")
	ret = (value).Float()
	return ret
}

// SetShadowBlur setting attribute 'shadowBlur' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetShadowBlur(value float64) {
	input := value
	_this.Value_JS.Set("shadowBlur", input)
}

// ShadowColor returning attribute 'shadowColor' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) ShadowColor() string {
	var ret string
	value := _this.Value_JS.Get("shadowColor")
	ret = (value).String()
	return ret
}

// SetShadowColor setting attribute 'shadowColor' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) SetShadowColor(value string) {
	input := value
	_this.Value_JS.Set("shadowColor", input)
}

// ImageSmoothingEnabled returning attribute 'imageSmoothingEnabled' with
// type bool (idl: boolean).
func (_this *CanvasRenderingContext2D) ImageSmoothingEnabled() bool {
	var ret bool
	value := _this.Value_JS.Get("imageSmoothingEnabled")
	ret = (value).Bool()
	return ret
}

// SetImageSmoothingEnabled setting attribute 'imageSmoothingEnabled' with
// type bool (idl: boolean).
func (_this *CanvasRenderingContext2D) SetImageSmoothingEnabled(value bool) {
	input := value
	_this.Value_JS.Set("imageSmoothingEnabled", input)
}

// ImageSmoothingQuality returning attribute 'imageSmoothingQuality' with
// type ImageSmoothingQuality (idl: ImageSmoothingQuality).
func (_this *CanvasRenderingContext2D) ImageSmoothingQuality() ImageSmoothingQuality {
	var ret ImageSmoothingQuality
	value := _this.Value_JS.Get("imageSmoothingQuality")
	ret = ImageSmoothingQualityFromJS(value)
	return ret
}

// SetImageSmoothingQuality setting attribute 'imageSmoothingQuality' with
// type ImageSmoothingQuality (idl: ImageSmoothingQuality).
func (_this *CanvasRenderingContext2D) SetImageSmoothingQuality(value ImageSmoothingQuality) {
	input := value.JSValue()
	_this.Value_JS.Set("imageSmoothingQuality", input)
}

// GlobalAlpha returning attribute 'globalAlpha' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) GlobalAlpha() float64 {
	var ret float64
	value := _this.Value_JS.Get("globalAlpha")
	ret = (value).Float()
	return ret
}

// SetGlobalAlpha setting attribute 'globalAlpha' with
// type float64 (idl: unrestricted double).
func (_this *CanvasRenderingContext2D) SetGlobalAlpha(value float64) {
	input := value
	_this.Value_JS.Set("globalAlpha", input)
}

// GlobalCompositeOperation returning attribute 'globalCompositeOperation' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) GlobalCompositeOperation() string {
	var ret string
	value := _this.Value_JS.Get("globalCompositeOperation")
	ret = (value).String()
	return ret
}

// SetGlobalCompositeOperation setting attribute 'globalCompositeOperation' with
// type string (idl: DOMString).
func (_this *CanvasRenderingContext2D) SetGlobalCompositeOperation(value string) {
	input := value
	_this.Value_JS.Set("globalCompositeOperation", input)
}

// StrokeStyle returning attribute 'strokeStyle' with
// type Union (idl: Union).
func (_this *CanvasRenderingContext2D) StrokeStyle() *Union {
	var ret *Union
	value := _this.Value_JS.Get("strokeStyle")
	ret = UnionFromJS(value)
	return ret
}

// SetStrokeStyle setting attribute 'strokeStyle' with
// type Union (idl: Union).
func (_this *CanvasRenderingContext2D) SetStrokeStyle(value *Union) {
	input := value.JSValue()
	_this.Value_JS.Set("strokeStyle", input)
}

// FillStyle returning attribute 'fillStyle' with
// type Union (idl: Union).
func (_this *CanvasRenderingContext2D) FillStyle() *Union {
	var ret *Union
	value := _this.Value_JS.Get("fillStyle")
	ret = UnionFromJS(value)
	return ret
}

// SetFillStyle setting attribute 'fillStyle' with
// type Union (idl: Union).
func (_this *CanvasRenderingContext2D) SetFillStyle(value *Union) {
	input := value.JSValue()
	_this.Value_JS.Set("fillStyle", input)
}

func (_this *CanvasRenderingContext2D) GetContextAttributes() (_result *CanvasRenderingContext2DSettings) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getContextAttributes", _args[0:_end]...)
	var (
		_converted *CanvasRenderingContext2DSettings // javascript: CanvasRenderingContext2DSettings _what_return_name
	)
	_converted = CanvasRenderingContext2DSettingsFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) SetLineDash(segments js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := segments
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setLineDash", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) GetLineDash() (_result js.Value) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getLineDash", _args[0:_end]...)
	var (
		_converted js.Value // javascript: typed-array _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) ClosePath() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("closePath", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) MoveTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("moveTo", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) LineTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("lineTo", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) QuadraticCurveTo(cpx float64, cpy float64, x float64, y float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := cpx
	_args[0] = _p0
	_end++
	_p1 := cpy
	_args[1] = _p1
	_end++
	_p2 := x
	_args[2] = _p2
	_end++
	_p3 := y
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("quadraticCurveTo", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) BezierCurveTo(cp1x float64, cp1y float64, cp2x float64, cp2y float64, x float64, y float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := cp1x
	_args[0] = _p0
	_end++
	_p1 := cp1y
	_args[1] = _p1
	_end++
	_p2 := cp2x
	_args[2] = _p2
	_end++
	_p3 := cp2y
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("bezierCurveTo", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) ArcTo(x1 float64, y1 float64, x2 float64, y2 float64, radius float64) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := x1
	_args[0] = _p0
	_end++
	_p1 := y1
	_args[1] = _p1
	_end++
	_p2 := x2
	_args[2] = _p2
	_end++
	_p3 := y2
	_args[3] = _p3
	_end++
	_p4 := radius
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("arcTo", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Rect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("rect", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Arc(x float64, y float64, radius float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radius
	_args[2] = _p2
	_end++
	_p3 := startAngle
	_args[3] = _p3
	_end++
	_p4 := endAngle
	_args[4] = _p4
	_end++
	if anticlockwise != nil {
		_p5 := anticlockwise
		_args[5] = _p5
		_end++
	}
	_this.Value_JS.Call("arc", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Ellipse(x float64, y float64, radiusX float64, radiusY float64, rotation float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radiusX
	_args[2] = _p2
	_end++
	_p3 := radiusY
	_args[3] = _p3
	_end++
	_p4 := rotation
	_args[4] = _p4
	_end++
	_p5 := startAngle
	_args[5] = _p5
	_end++
	_p6 := endAngle
	_args[6] = _p6
	_end++
	if anticlockwise != nil {
		_p7 := anticlockwise
		_args[7] = _p7
		_end++
	}
	_this.Value_JS.Call("ellipse", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) DrawImage(image *Union, dx float64, dy float64) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) DrawImage2(image *Union, dx float64, dy float64, dw float64, dh float64) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_p3 := dw
	_args[3] = _p3
	_end++
	_p4 := dh
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) DrawImage3(image *Union, sx float64, sy float64, sw float64, sh float64, dx float64, dy float64, dw float64, dh float64) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	_p5 := dx
	_args[5] = _p5
	_end++
	_p6 := dy
	_args[6] = _p6
	_end++
	_p7 := dw
	_args[7] = _p7
	_end++
	_p8 := dh
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) FillText(text string, x float64, y float64, maxWidth *float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if maxWidth != nil {
		_p3 := maxWidth
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("fillText", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) StrokeText(text string, x float64, y float64, maxWidth *float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if maxWidth != nil {
		_p3 := maxWidth
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("strokeText", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) MeasureText(text string) (_result *TextMetrics) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("measureText", _args[0:_end]...)
	var (
		_converted *TextMetrics // javascript: TextMetrics _what_return_name
	)
	_converted = TextMetricsFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) DrawFocusIfNeeded(element *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("drawFocusIfNeeded", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) DrawFocusIfNeeded2(path *Path2D, element *dom.Element) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_p1 := element.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("drawFocusIfNeeded", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) ScrollPathIntoView() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("scrollPathIntoView", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) ScrollPathIntoView2(path *Path2D) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("scrollPathIntoView", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) BeginPath() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("beginPath", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Fill(fillRule *CanvasFillRule) {
	var (
		_args [1]interface{}
		_end  int
	)
	if fillRule != nil {
		_p0 := fillRule.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("fill", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Fill2(path *Path2D, fillRule *CanvasFillRule) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	if fillRule != nil {
		_p1 := fillRule.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("fill", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Stroke() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stroke", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Stroke2(path *Path2D) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stroke", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Clip(fillRule *CanvasFillRule) {
	var (
		_args [1]interface{}
		_end  int
	)
	if fillRule != nil {
		_p0 := fillRule.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clip", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Clip2(path *Path2D, fillRule *CanvasFillRule) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	if fillRule != nil {
		_p1 := fillRule.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("clip", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) IsPointInPath(x float64, y float64, fillRule *CanvasFillRule) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	if fillRule != nil {
		_p2 := fillRule.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInPath", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) IsPointInPath2(path *Path2D, x float64, y float64, fillRule *CanvasFillRule) (_result bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if fillRule != nil {
		_p3 := fillRule.JSValue()
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInPath", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) IsPointInStroke(x float64, y float64) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) IsPointInStroke2(path *Path2D, x float64, y float64) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) ClearRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearRect", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) FillRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("fillRect", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) StrokeRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("strokeRect", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Scale(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scale", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Rotate(angle float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("rotate", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Translate(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("translate", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Transform(a float64, b float64, c float64, d float64, e float64, f float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	_p1 := b
	_args[1] = _p1
	_end++
	_p2 := c
	_args[2] = _p2
	_end++
	_p3 := d
	_args[3] = _p3
	_end++
	_p4 := e
	_args[4] = _p4
	_end++
	_p5 := f
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("transform", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) GetTransform() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTransform", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = geometry.DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) SetTransform(a float64, b float64, c float64, d float64, e float64, f float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	_p1 := b
	_args[1] = _p1
	_end++
	_p2 := c
	_args[2] = _p2
	_end++
	_p3 := d
	_args[3] = _p3
	_end++
	_p4 := e
	_args[4] = _p4
	_end++
	_p5 := f
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("setTransform", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) SetTransform2(transform *geometry.DOMMatrix2DInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if transform != nil {
		_p0 := transform.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("setTransform", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) ResetTransform() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("resetTransform", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Save() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("save", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) Restore() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("restore", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) CreateLinearGradient(x0 float64, y0 float64, x1 float64, y1 float64) (_result *CanvasGradient) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x0
	_args[0] = _p0
	_end++
	_p1 := y0
	_args[1] = _p1
	_end++
	_p2 := x1
	_args[2] = _p2
	_end++
	_p3 := y1
	_args[3] = _p3
	_end++
	_returned := _this.Value_JS.Call("createLinearGradient", _args[0:_end]...)
	var (
		_converted *CanvasGradient // javascript: CanvasGradient _what_return_name
	)
	_converted = CanvasGradientFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) CreateRadialGradient(x0 float64, y0 float64, r0 float64, x1 float64, y1 float64, r1 float64) (_result *CanvasGradient) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := x0
	_args[0] = _p0
	_end++
	_p1 := y0
	_args[1] = _p1
	_end++
	_p2 := r0
	_args[2] = _p2
	_end++
	_p3 := x1
	_args[3] = _p3
	_end++
	_p4 := y1
	_args[4] = _p4
	_end++
	_p5 := r1
	_args[5] = _p5
	_end++
	_returned := _this.Value_JS.Call("createRadialGradient", _args[0:_end]...)
	var (
		_converted *CanvasGradient // javascript: CanvasGradient _what_return_name
	)
	_converted = CanvasGradientFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) CreatePattern(image *Union, repetition string) (_result *CanvasPattern) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := repetition
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createPattern", _args[0:_end]...)
	var (
		_converted *CanvasPattern // javascript: CanvasPattern _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = CanvasPatternFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) CreateImageData(sw int, sh int) (_result *ImageData) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sw
	_args[0] = _p0
	_end++
	_p1 := sh
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) CreateImageData2(imagedata *ImageData) (_result *ImageData) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) GetImageData(sx int, sy int, sw int, sh int) (_result *ImageData) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := sx
	_args[0] = _p0
	_end++
	_p1 := sy
	_args[1] = _p1
	_end++
	_p2 := sw
	_args[2] = _p2
	_end++
	_p3 := sh
	_args[3] = _p3
	_end++
	_returned := _this.Value_JS.Call("getImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *CanvasRenderingContext2D) PutImageData(imagedata *ImageData, dx int, dy int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("putImageData", _args[0:_end]...)
	return
}

func (_this *CanvasRenderingContext2D) PutImageData2(imagedata *ImageData, dx int, dy int, dirtyX int, dirtyY int, dirtyWidth int, dirtyHeight int) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_p3 := dirtyX
	_args[3] = _p3
	_end++
	_p4 := dirtyY
	_args[4] = _p4
	_end++
	_p5 := dirtyWidth
	_args[5] = _p5
	_end++
	_p6 := dirtyHeight
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("putImageData", _args[0:_end]...)
	return
}

// interface: HTMLCanvasElement
type HTMLCanvasElement struct {
	html.HTMLElement
}

// HTMLCanvasElementFromJS is casting a js.Wrapper into HTMLCanvasElement.
func HTMLCanvasElementFromJS(value js.Wrapper) *HTMLCanvasElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &HTMLCanvasElement{}
	ret.Value_JS = input
	return ret
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLCanvasElement) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// SetWidth setting attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLCanvasElement) SetWidth(value uint) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLCanvasElement) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

// SetHeight setting attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLCanvasElement) SetHeight(value uint) {
	input := value
	_this.Value_JS.Set("height", input)
}

func (_this *HTMLCanvasElement) GetContext(contextId string, options interface{}) (_result *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := contextId
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getContext", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLCanvasElement) ToDataURL(_type *string, quality interface{}) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	if _type != nil {
		_p0 := _type
		_args[0] = _p0
		_end++
	}
	if quality != nil {
		_p1 := quality
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("toDataURL", _args[0:_end]...)
	var (
		_converted string // javascript: USVString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *HTMLCanvasElement) ToBlob(callback *file.BlobCallback, _type *string, quality interface{}) {
	var (
		_args [3]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if _type != nil {
		_p1 := _type
		_args[1] = _p1
		_end++
	}
	if quality != nil {
		_p2 := quality
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("toBlob", _args[0:_end]...)
	return
}

func (_this *HTMLCanvasElement) TransferControlToOffscreen() (_result *OffscreenCanvas) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("transferControlToOffscreen", _args[0:_end]...)
	var (
		_converted *OffscreenCanvas // javascript: OffscreenCanvas _what_return_name
	)
	_converted = OffscreenCanvasFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLCanvasElement) CaptureStream(frameRequestRate *float64) (_result *local.MediaStream) {
	var (
		_args [1]interface{}
		_end  int
	)
	if frameRequestRate != nil {
		_p0 := frameRequestRate
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("captureStream", _args[0:_end]...)
	var (
		_converted *local.MediaStream // javascript: MediaStream _what_return_name
	)
	_converted = local.MediaStreamFromJS(_returned)
	_result = _converted
	return
}

// interface: ImageBitmap
type ImageBitmap struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ImageBitmap) JSValue() js.Value {
	return _this.Value_JS
}

// ImageBitmapFromJS is casting a js.Wrapper into ImageBitmap.
func ImageBitmapFromJS(value js.Wrapper) *ImageBitmap {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ImageBitmap{}
	ret.Value_JS = input
	return ret
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *ImageBitmap) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *ImageBitmap) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

func (_this *ImageBitmap) Close() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

// interface: ImageBitmapRenderingContext
type ImageBitmapRenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ImageBitmapRenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// ImageBitmapRenderingContextFromJS is casting a js.Wrapper into ImageBitmapRenderingContext.
func ImageBitmapRenderingContextFromJS(value js.Wrapper) *ImageBitmapRenderingContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ImageBitmapRenderingContext{}
	ret.Value_JS = input
	return ret
}

// Canvas returning attribute 'canvas' with
// type HTMLCanvasElement (idl: HTMLCanvasElement).
func (_this *ImageBitmapRenderingContext) Canvas() *HTMLCanvasElement {
	var ret *HTMLCanvasElement
	value := _this.Value_JS.Get("canvas")
	ret = HTMLCanvasElementFromJS(value)
	return ret
}

func (_this *ImageBitmapRenderingContext) TransferFromImageBitmap(bitmap *ImageBitmap) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := bitmap.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("transferFromImageBitmap", _args[0:_end]...)
	return
}

// interface: ImageData
type ImageData struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *ImageData) JSValue() js.Value {
	return _this.Value_JS
}

// ImageDataFromJS is casting a js.Wrapper into ImageData.
func ImageDataFromJS(value js.Wrapper) *ImageData {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ImageData{}
	ret.Value_JS = input
	return ret
}

func NewImageData(data *patch.Uint8ClampedArray, sw uint, sh *uint) (_result *ImageData) {
	_klass := js.Global().Get("ImageData")
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := data.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sw
	_args[1] = _p1
	_end++
	if sh != nil {
		_p2 := sh
		_args[2] = _p2
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *ImageData) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *ImageData) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

// Data returning attribute 'data' with
// type patch.Uint8ClampedArray (idl: Uint8ClampedArray).
func (_this *ImageData) Data() *patch.Uint8ClampedArray {
	var ret *patch.Uint8ClampedArray
	value := _this.Value_JS.Get("data")
	ret = patch.Uint8ClampedArrayFromJS(value)
	return ret
}

// interface: OffscreenCanvas
type OffscreenCanvas struct {
	domcore.EventTarget
}

// OffscreenCanvasFromJS is casting a js.Wrapper into OffscreenCanvas.
func OffscreenCanvasFromJS(value js.Wrapper) *OffscreenCanvas {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &OffscreenCanvas{}
	ret.Value_JS = input
	return ret
}

func NewOffscreenCanvas(width int, height int) (_result *OffscreenCanvas) {
	_klass := js.Global().Get("OffscreenCanvas")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := width
	_args[0] = _p0
	_end++
	_p1 := height
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *OffscreenCanvas // javascript: OffscreenCanvas _what_return_name
	)
	_converted = OffscreenCanvasFromJS(_returned)
	_result = _converted
	return
}

// Width returning attribute 'width' with
// type int (idl: unsigned long long).
func (_this *OffscreenCanvas) Width() int {
	var ret int
	value := _this.Value_JS.Get("width")
	ret = (value).Int()
	return ret
}

// SetWidth setting attribute 'width' with
// type int (idl: unsigned long long).
func (_this *OffscreenCanvas) SetWidth(value int) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type int (idl: unsigned long long).
func (_this *OffscreenCanvas) Height() int {
	var ret int
	value := _this.Value_JS.Get("height")
	ret = (value).Int()
	return ret
}

// SetHeight setting attribute 'height' with
// type int (idl: unsigned long long).
func (_this *OffscreenCanvas) SetHeight(value int) {
	input := value
	_this.Value_JS.Set("height", input)
}

func (_this *OffscreenCanvas) GetContext(contextId html.OffscreenRenderingContextId, options interface{}) (_result *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := contextId.JSValue()
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("getContext", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *OffscreenCanvas) TransferToImageBitmap() (_result *ImageBitmap) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("transferToImageBitmap", _args[0:_end]...)
	var (
		_converted *ImageBitmap // javascript: ImageBitmap _what_return_name
	)
	_converted = ImageBitmapFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvas) ConvertToBlob(options *html.ImageEncodeOptions) (_result *javascript.Promise) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("convertToBlob", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

// interface: OffscreenCanvasRenderingContext2D
type OffscreenCanvasRenderingContext2D struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *OffscreenCanvasRenderingContext2D) JSValue() js.Value {
	return _this.Value_JS
}

// OffscreenCanvasRenderingContext2DFromJS is casting a js.Wrapper into OffscreenCanvasRenderingContext2D.
func OffscreenCanvasRenderingContext2DFromJS(value js.Wrapper) *OffscreenCanvasRenderingContext2D {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &OffscreenCanvasRenderingContext2D{}
	ret.Value_JS = input
	return ret
}

// Canvas returning attribute 'canvas' with
// type OffscreenCanvas (idl: OffscreenCanvas).
func (_this *OffscreenCanvasRenderingContext2D) Canvas() *OffscreenCanvas {
	var ret *OffscreenCanvas
	value := _this.Value_JS.Get("canvas")
	ret = OffscreenCanvasFromJS(value)
	return ret
}

// GlobalAlpha returning attribute 'globalAlpha' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) GlobalAlpha() float64 {
	var ret float64
	value := _this.Value_JS.Get("globalAlpha")
	ret = (value).Float()
	return ret
}

// SetGlobalAlpha setting attribute 'globalAlpha' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetGlobalAlpha(value float64) {
	input := value
	_this.Value_JS.Set("globalAlpha", input)
}

// GlobalCompositeOperation returning attribute 'globalCompositeOperation' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) GlobalCompositeOperation() string {
	var ret string
	value := _this.Value_JS.Get("globalCompositeOperation")
	ret = (value).String()
	return ret
}

// SetGlobalCompositeOperation setting attribute 'globalCompositeOperation' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) SetGlobalCompositeOperation(value string) {
	input := value
	_this.Value_JS.Set("globalCompositeOperation", input)
}

// ImageSmoothingEnabled returning attribute 'imageSmoothingEnabled' with
// type bool (idl: boolean).
func (_this *OffscreenCanvasRenderingContext2D) ImageSmoothingEnabled() bool {
	var ret bool
	value := _this.Value_JS.Get("imageSmoothingEnabled")
	ret = (value).Bool()
	return ret
}

// SetImageSmoothingEnabled setting attribute 'imageSmoothingEnabled' with
// type bool (idl: boolean).
func (_this *OffscreenCanvasRenderingContext2D) SetImageSmoothingEnabled(value bool) {
	input := value
	_this.Value_JS.Set("imageSmoothingEnabled", input)
}

// ImageSmoothingQuality returning attribute 'imageSmoothingQuality' with
// type ImageSmoothingQuality (idl: ImageSmoothingQuality).
func (_this *OffscreenCanvasRenderingContext2D) ImageSmoothingQuality() ImageSmoothingQuality {
	var ret ImageSmoothingQuality
	value := _this.Value_JS.Get("imageSmoothingQuality")
	ret = ImageSmoothingQualityFromJS(value)
	return ret
}

// SetImageSmoothingQuality setting attribute 'imageSmoothingQuality' with
// type ImageSmoothingQuality (idl: ImageSmoothingQuality).
func (_this *OffscreenCanvasRenderingContext2D) SetImageSmoothingQuality(value ImageSmoothingQuality) {
	input := value.JSValue()
	_this.Value_JS.Set("imageSmoothingQuality", input)
}

// StrokeStyle returning attribute 'strokeStyle' with
// type Union (idl: Union).
func (_this *OffscreenCanvasRenderingContext2D) StrokeStyle() *Union {
	var ret *Union
	value := _this.Value_JS.Get("strokeStyle")
	ret = UnionFromJS(value)
	return ret
}

// SetStrokeStyle setting attribute 'strokeStyle' with
// type Union (idl: Union).
func (_this *OffscreenCanvasRenderingContext2D) SetStrokeStyle(value *Union) {
	input := value.JSValue()
	_this.Value_JS.Set("strokeStyle", input)
}

// FillStyle returning attribute 'fillStyle' with
// type Union (idl: Union).
func (_this *OffscreenCanvasRenderingContext2D) FillStyle() *Union {
	var ret *Union
	value := _this.Value_JS.Get("fillStyle")
	ret = UnionFromJS(value)
	return ret
}

// SetFillStyle setting attribute 'fillStyle' with
// type Union (idl: Union).
func (_this *OffscreenCanvasRenderingContext2D) SetFillStyle(value *Union) {
	input := value.JSValue()
	_this.Value_JS.Set("fillStyle", input)
}

// ShadowOffsetX returning attribute 'shadowOffsetX' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) ShadowOffsetX() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowOffsetX")
	ret = (value).Float()
	return ret
}

// SetShadowOffsetX setting attribute 'shadowOffsetX' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetShadowOffsetX(value float64) {
	input := value
	_this.Value_JS.Set("shadowOffsetX", input)
}

// ShadowOffsetY returning attribute 'shadowOffsetY' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) ShadowOffsetY() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowOffsetY")
	ret = (value).Float()
	return ret
}

// SetShadowOffsetY setting attribute 'shadowOffsetY' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetShadowOffsetY(value float64) {
	input := value
	_this.Value_JS.Set("shadowOffsetY", input)
}

// ShadowBlur returning attribute 'shadowBlur' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) ShadowBlur() float64 {
	var ret float64
	value := _this.Value_JS.Get("shadowBlur")
	ret = (value).Float()
	return ret
}

// SetShadowBlur setting attribute 'shadowBlur' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetShadowBlur(value float64) {
	input := value
	_this.Value_JS.Set("shadowBlur", input)
}

// ShadowColor returning attribute 'shadowColor' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) ShadowColor() string {
	var ret string
	value := _this.Value_JS.Get("shadowColor")
	ret = (value).String()
	return ret
}

// SetShadowColor setting attribute 'shadowColor' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) SetShadowColor(value string) {
	input := value
	_this.Value_JS.Set("shadowColor", input)
}

// Filter returning attribute 'filter' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) Filter() string {
	var ret string
	value := _this.Value_JS.Get("filter")
	ret = (value).String()
	return ret
}

// SetFilter setting attribute 'filter' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) SetFilter(value string) {
	input := value
	_this.Value_JS.Set("filter", input)
}

// LineWidth returning attribute 'lineWidth' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) LineWidth() float64 {
	var ret float64
	value := _this.Value_JS.Get("lineWidth")
	ret = (value).Float()
	return ret
}

// SetLineWidth setting attribute 'lineWidth' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetLineWidth(value float64) {
	input := value
	_this.Value_JS.Set("lineWidth", input)
}

// LineCap returning attribute 'lineCap' with
// type CanvasLineCap (idl: CanvasLineCap).
func (_this *OffscreenCanvasRenderingContext2D) LineCap() CanvasLineCap {
	var ret CanvasLineCap
	value := _this.Value_JS.Get("lineCap")
	ret = CanvasLineCapFromJS(value)
	return ret
}

// SetLineCap setting attribute 'lineCap' with
// type CanvasLineCap (idl: CanvasLineCap).
func (_this *OffscreenCanvasRenderingContext2D) SetLineCap(value CanvasLineCap) {
	input := value.JSValue()
	_this.Value_JS.Set("lineCap", input)
}

// LineJoin returning attribute 'lineJoin' with
// type CanvasLineJoin (idl: CanvasLineJoin).
func (_this *OffscreenCanvasRenderingContext2D) LineJoin() CanvasLineJoin {
	var ret CanvasLineJoin
	value := _this.Value_JS.Get("lineJoin")
	ret = CanvasLineJoinFromJS(value)
	return ret
}

// SetLineJoin setting attribute 'lineJoin' with
// type CanvasLineJoin (idl: CanvasLineJoin).
func (_this *OffscreenCanvasRenderingContext2D) SetLineJoin(value CanvasLineJoin) {
	input := value.JSValue()
	_this.Value_JS.Set("lineJoin", input)
}

// MiterLimit returning attribute 'miterLimit' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) MiterLimit() float64 {
	var ret float64
	value := _this.Value_JS.Get("miterLimit")
	ret = (value).Float()
	return ret
}

// SetMiterLimit setting attribute 'miterLimit' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetMiterLimit(value float64) {
	input := value
	_this.Value_JS.Set("miterLimit", input)
}

// LineDashOffset returning attribute 'lineDashOffset' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) LineDashOffset() float64 {
	var ret float64
	value := _this.Value_JS.Get("lineDashOffset")
	ret = (value).Float()
	return ret
}

// SetLineDashOffset setting attribute 'lineDashOffset' with
// type float64 (idl: unrestricted double).
func (_this *OffscreenCanvasRenderingContext2D) SetLineDashOffset(value float64) {
	input := value
	_this.Value_JS.Set("lineDashOffset", input)
}

// Font returning attribute 'font' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) Font() string {
	var ret string
	value := _this.Value_JS.Get("font")
	ret = (value).String()
	return ret
}

// SetFont setting attribute 'font' with
// type string (idl: DOMString).
func (_this *OffscreenCanvasRenderingContext2D) SetFont(value string) {
	input := value
	_this.Value_JS.Set("font", input)
}

// TextAlign returning attribute 'textAlign' with
// type CanvasTextAlign (idl: CanvasTextAlign).
func (_this *OffscreenCanvasRenderingContext2D) TextAlign() CanvasTextAlign {
	var ret CanvasTextAlign
	value := _this.Value_JS.Get("textAlign")
	ret = CanvasTextAlignFromJS(value)
	return ret
}

// SetTextAlign setting attribute 'textAlign' with
// type CanvasTextAlign (idl: CanvasTextAlign).
func (_this *OffscreenCanvasRenderingContext2D) SetTextAlign(value CanvasTextAlign) {
	input := value.JSValue()
	_this.Value_JS.Set("textAlign", input)
}

// TextBaseline returning attribute 'textBaseline' with
// type CanvasTextBaseline (idl: CanvasTextBaseline).
func (_this *OffscreenCanvasRenderingContext2D) TextBaseline() CanvasTextBaseline {
	var ret CanvasTextBaseline
	value := _this.Value_JS.Get("textBaseline")
	ret = CanvasTextBaselineFromJS(value)
	return ret
}

// SetTextBaseline setting attribute 'textBaseline' with
// type CanvasTextBaseline (idl: CanvasTextBaseline).
func (_this *OffscreenCanvasRenderingContext2D) SetTextBaseline(value CanvasTextBaseline) {
	input := value.JSValue()
	_this.Value_JS.Set("textBaseline", input)
}

// Direction returning attribute 'direction' with
// type CanvasDirection (idl: CanvasDirection).
func (_this *OffscreenCanvasRenderingContext2D) Direction() CanvasDirection {
	var ret CanvasDirection
	value := _this.Value_JS.Get("direction")
	ret = CanvasDirectionFromJS(value)
	return ret
}

// SetDirection setting attribute 'direction' with
// type CanvasDirection (idl: CanvasDirection).
func (_this *OffscreenCanvasRenderingContext2D) SetDirection(value CanvasDirection) {
	input := value.JSValue()
	_this.Value_JS.Set("direction", input)
}

func (_this *OffscreenCanvasRenderingContext2D) Commit() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("commit", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Save() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("save", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Restore() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("restore", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Scale(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("scale", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Rotate(angle float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("rotate", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Translate(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("translate", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Transform(a float64, b float64, c float64, d float64, e float64, f float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	_p1 := b
	_args[1] = _p1
	_end++
	_p2 := c
	_args[2] = _p2
	_end++
	_p3 := d
	_args[3] = _p3
	_end++
	_p4 := e
	_args[4] = _p4
	_end++
	_p5 := f
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("transform", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) GetTransform() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTransform", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = geometry.DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) SetTransform(a float64, b float64, c float64, d float64, e float64, f float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := a
	_args[0] = _p0
	_end++
	_p1 := b
	_args[1] = _p1
	_end++
	_p2 := c
	_args[2] = _p2
	_end++
	_p3 := d
	_args[3] = _p3
	_end++
	_p4 := e
	_args[4] = _p4
	_end++
	_p5 := f
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("setTransform", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) SetTransform2(transform *geometry.DOMMatrix2DInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if transform != nil {
		_p0 := transform.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("setTransform", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) ResetTransform() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("resetTransform", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) CreateLinearGradient(x0 float64, y0 float64, x1 float64, y1 float64) (_result *CanvasGradient) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x0
	_args[0] = _p0
	_end++
	_p1 := y0
	_args[1] = _p1
	_end++
	_p2 := x1
	_args[2] = _p2
	_end++
	_p3 := y1
	_args[3] = _p3
	_end++
	_returned := _this.Value_JS.Call("createLinearGradient", _args[0:_end]...)
	var (
		_converted *CanvasGradient // javascript: CanvasGradient _what_return_name
	)
	_converted = CanvasGradientFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) CreateRadialGradient(x0 float64, y0 float64, r0 float64, x1 float64, y1 float64, r1 float64) (_result *CanvasGradient) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := x0
	_args[0] = _p0
	_end++
	_p1 := y0
	_args[1] = _p1
	_end++
	_p2 := r0
	_args[2] = _p2
	_end++
	_p3 := x1
	_args[3] = _p3
	_end++
	_p4 := y1
	_args[4] = _p4
	_end++
	_p5 := r1
	_args[5] = _p5
	_end++
	_returned := _this.Value_JS.Call("createRadialGradient", _args[0:_end]...)
	var (
		_converted *CanvasGradient // javascript: CanvasGradient _what_return_name
	)
	_converted = CanvasGradientFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) CreatePattern(image *Union, repetition string) (_result *CanvasPattern) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := repetition
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createPattern", _args[0:_end]...)
	var (
		_converted *CanvasPattern // javascript: CanvasPattern _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = CanvasPatternFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) ClearRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearRect", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) FillRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("fillRect", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) StrokeRect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("strokeRect", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) BeginPath() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("beginPath", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Fill(fillRule *CanvasFillRule) {
	var (
		_args [1]interface{}
		_end  int
	)
	if fillRule != nil {
		_p0 := fillRule.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("fill", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Fill2(path *Path2D, fillRule *CanvasFillRule) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	if fillRule != nil {
		_p1 := fillRule.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("fill", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Stroke() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stroke", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Stroke2(path *Path2D) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stroke", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Clip(fillRule *CanvasFillRule) {
	var (
		_args [1]interface{}
		_end  int
	)
	if fillRule != nil {
		_p0 := fillRule.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("clip", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Clip2(path *Path2D, fillRule *CanvasFillRule) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	if fillRule != nil {
		_p1 := fillRule.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("clip", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) IsPointInPath(x float64, y float64, fillRule *CanvasFillRule) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	if fillRule != nil {
		_p2 := fillRule.JSValue()
		_args[2] = _p2
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInPath", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) IsPointInPath2(path *Path2D, x float64, y float64, fillRule *CanvasFillRule) (_result bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if fillRule != nil {
		_p3 := fillRule.JSValue()
		_args[3] = _p3
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInPath", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) IsPointInStroke(x float64, y float64) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) IsPointInStroke2(path *Path2D, x float64, y float64) (_result bool) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) FillText(text string, x float64, y float64, maxWidth *float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if maxWidth != nil {
		_p3 := maxWidth
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("fillText", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) StrokeText(text string, x float64, y float64, maxWidth *float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	if maxWidth != nil {
		_p3 := maxWidth
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("strokeText", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) MeasureText(text string) (_result *TextMetrics) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := text
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("measureText", _args[0:_end]...)
	var (
		_converted *TextMetrics // javascript: TextMetrics _what_return_name
	)
	_converted = TextMetricsFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) DrawImage(image *Union, dx float64, dy float64) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) DrawImage2(image *Union, dx float64, dy float64, dw float64, dh float64) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_p3 := dw
	_args[3] = _p3
	_end++
	_p4 := dh
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) DrawImage3(image *Union, sx float64, sy float64, sw float64, sh float64, dx float64, dy float64, dw float64, dh float64) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := image.JSValue()
	_args[0] = _p0
	_end++
	_p1 := sx
	_args[1] = _p1
	_end++
	_p2 := sy
	_args[2] = _p2
	_end++
	_p3 := sw
	_args[3] = _p3
	_end++
	_p4 := sh
	_args[4] = _p4
	_end++
	_p5 := dx
	_args[5] = _p5
	_end++
	_p6 := dy
	_args[6] = _p6
	_end++
	_p7 := dw
	_args[7] = _p7
	_end++
	_p8 := dh
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("drawImage", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) CreateImageData(sw int, sh int) (_result *ImageData) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sw
	_args[0] = _p0
	_end++
	_p1 := sh
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("createImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) CreateImageData2(imagedata *ImageData) (_result *ImageData) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) GetImageData(sx int, sy int, sw int, sh int) (_result *ImageData) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := sx
	_args[0] = _p0
	_end++
	_p1 := sy
	_args[1] = _p1
	_end++
	_p2 := sw
	_args[2] = _p2
	_end++
	_p3 := sh
	_args[3] = _p3
	_end++
	_returned := _this.Value_JS.Call("getImageData", _args[0:_end]...)
	var (
		_converted *ImageData // javascript: ImageData _what_return_name
	)
	_converted = ImageDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) PutImageData(imagedata *ImageData, dx int, dy int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("putImageData", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) PutImageData2(imagedata *ImageData, dx int, dy int, dirtyX int, dirtyY int, dirtyWidth int, dirtyHeight int) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := imagedata.JSValue()
	_args[0] = _p0
	_end++
	_p1 := dx
	_args[1] = _p1
	_end++
	_p2 := dy
	_args[2] = _p2
	_end++
	_p3 := dirtyX
	_args[3] = _p3
	_end++
	_p4 := dirtyY
	_args[4] = _p4
	_end++
	_p5 := dirtyWidth
	_args[5] = _p5
	_end++
	_p6 := dirtyHeight
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("putImageData", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) SetLineDash(segments js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := segments
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setLineDash", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) GetLineDash() (_result js.Value) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getLineDash", _args[0:_end]...)
	var (
		_converted js.Value // javascript: typed-array _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *OffscreenCanvasRenderingContext2D) ClosePath() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("closePath", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) MoveTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("moveTo", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) LineTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("lineTo", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) QuadraticCurveTo(cpx float64, cpy float64, x float64, y float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := cpx
	_args[0] = _p0
	_end++
	_p1 := cpy
	_args[1] = _p1
	_end++
	_p2 := x
	_args[2] = _p2
	_end++
	_p3 := y
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("quadraticCurveTo", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) BezierCurveTo(cp1x float64, cp1y float64, cp2x float64, cp2y float64, x float64, y float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := cp1x
	_args[0] = _p0
	_end++
	_p1 := cp1y
	_args[1] = _p1
	_end++
	_p2 := cp2x
	_args[2] = _p2
	_end++
	_p3 := cp2y
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("bezierCurveTo", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) ArcTo(x1 float64, y1 float64, x2 float64, y2 float64, radius float64) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := x1
	_args[0] = _p0
	_end++
	_p1 := y1
	_args[1] = _p1
	_end++
	_p2 := x2
	_args[2] = _p2
	_end++
	_p3 := y2
	_args[3] = _p3
	_end++
	_p4 := radius
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("arcTo", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Rect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("rect", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Arc(x float64, y float64, radius float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radius
	_args[2] = _p2
	_end++
	_p3 := startAngle
	_args[3] = _p3
	_end++
	_p4 := endAngle
	_args[4] = _p4
	_end++
	if anticlockwise != nil {
		_p5 := anticlockwise
		_args[5] = _p5
		_end++
	}
	_this.Value_JS.Call("arc", _args[0:_end]...)
	return
}

func (_this *OffscreenCanvasRenderingContext2D) Ellipse(x float64, y float64, radiusX float64, radiusY float64, rotation float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radiusX
	_args[2] = _p2
	_end++
	_p3 := radiusY
	_args[3] = _p3
	_end++
	_p4 := rotation
	_args[4] = _p4
	_end++
	_p5 := startAngle
	_args[5] = _p5
	_end++
	_p6 := endAngle
	_args[6] = _p6
	_end++
	if anticlockwise != nil {
		_p7 := anticlockwise
		_args[7] = _p7
		_end++
	}
	_this.Value_JS.Call("ellipse", _args[0:_end]...)
	return
}

// interface: Path2D
type Path2D struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Path2D) JSValue() js.Value {
	return _this.Value_JS
}

// Path2DFromJS is casting a js.Wrapper into Path2D.
func Path2DFromJS(value js.Wrapper) *Path2D {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Path2D{}
	ret.Value_JS = input
	return ret
}

func NewPath2D(path *Union) (_result *Path2D) {
	_klass := js.Global().Get("Path2D")
	var (
		_args [1]interface{}
		_end  int
	)
	if path != nil {
		_p0 := path.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *Path2D // javascript: Path2D _what_return_name
	)
	_converted = Path2DFromJS(_returned)
	_result = _converted
	return
}

func (_this *Path2D) AddPath(path *Path2D, transform *geometry.DOMMatrix2DInit) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := path.JSValue()
	_args[0] = _p0
	_end++
	if transform != nil {
		_p1 := transform.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("addPath", _args[0:_end]...)
	return
}

func (_this *Path2D) ClosePath() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("closePath", _args[0:_end]...)
	return
}

func (_this *Path2D) MoveTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("moveTo", _args[0:_end]...)
	return
}

func (_this *Path2D) LineTo(x float64, y float64) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("lineTo", _args[0:_end]...)
	return
}

func (_this *Path2D) QuadraticCurveTo(cpx float64, cpy float64, x float64, y float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := cpx
	_args[0] = _p0
	_end++
	_p1 := cpy
	_args[1] = _p1
	_end++
	_p2 := x
	_args[2] = _p2
	_end++
	_p3 := y
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("quadraticCurveTo", _args[0:_end]...)
	return
}

func (_this *Path2D) BezierCurveTo(cp1x float64, cp1y float64, cp2x float64, cp2y float64, x float64, y float64) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := cp1x
	_args[0] = _p0
	_end++
	_p1 := cp1y
	_args[1] = _p1
	_end++
	_p2 := cp2x
	_args[2] = _p2
	_end++
	_p3 := cp2y
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("bezierCurveTo", _args[0:_end]...)
	return
}

func (_this *Path2D) ArcTo(x1 float64, y1 float64, x2 float64, y2 float64, radius float64) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := x1
	_args[0] = _p0
	_end++
	_p1 := y1
	_args[1] = _p1
	_end++
	_p2 := x2
	_args[2] = _p2
	_end++
	_p3 := y2
	_args[3] = _p3
	_end++
	_p4 := radius
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("arcTo", _args[0:_end]...)
	return
}

func (_this *Path2D) Rect(x float64, y float64, w float64, h float64) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := w
	_args[2] = _p2
	_end++
	_p3 := h
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("rect", _args[0:_end]...)
	return
}

func (_this *Path2D) Arc(x float64, y float64, radius float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radius
	_args[2] = _p2
	_end++
	_p3 := startAngle
	_args[3] = _p3
	_end++
	_p4 := endAngle
	_args[4] = _p4
	_end++
	if anticlockwise != nil {
		_p5 := anticlockwise
		_args[5] = _p5
		_end++
	}
	_this.Value_JS.Call("arc", _args[0:_end]...)
	return
}

func (_this *Path2D) Ellipse(x float64, y float64, radiusX float64, radiusY float64, rotation float64, startAngle float64, endAngle float64, anticlockwise *bool) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := radiusX
	_args[2] = _p2
	_end++
	_p3 := radiusY
	_args[3] = _p3
	_end++
	_p4 := rotation
	_args[4] = _p4
	_end++
	_p5 := startAngle
	_args[5] = _p5
	_end++
	_p6 := endAngle
	_args[6] = _p6
	_end++
	if anticlockwise != nil {
		_p7 := anticlockwise
		_args[7] = _p7
		_end++
	}
	_this.Value_JS.Call("ellipse", _args[0:_end]...)
	return
}

// interface: TextMetrics
type TextMetrics struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *TextMetrics) JSValue() js.Value {
	return _this.Value_JS
}

// TextMetricsFromJS is casting a js.Wrapper into TextMetrics.
func TextMetricsFromJS(value js.Wrapper) *TextMetrics {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TextMetrics{}
	ret.Value_JS = input
	return ret
}

// Width returning attribute 'width' with
// type float64 (idl: double).
func (_this *TextMetrics) Width() float64 {
	var ret float64
	value := _this.Value_JS.Get("width")
	ret = (value).Float()
	return ret
}

// ActualBoundingBoxLeft returning attribute 'actualBoundingBoxLeft' with
// type float64 (idl: double).
func (_this *TextMetrics) ActualBoundingBoxLeft() float64 {
	var ret float64
	value := _this.Value_JS.Get("actualBoundingBoxLeft")
	ret = (value).Float()
	return ret
}

// ActualBoundingBoxRight returning attribute 'actualBoundingBoxRight' with
// type float64 (idl: double).
func (_this *TextMetrics) ActualBoundingBoxRight() float64 {
	var ret float64
	value := _this.Value_JS.Get("actualBoundingBoxRight")
	ret = (value).Float()
	return ret
}

// FontBoundingBoxAscent returning attribute 'fontBoundingBoxAscent' with
// type float64 (idl: double).
func (_this *TextMetrics) FontBoundingBoxAscent() float64 {
	var ret float64
	value := _this.Value_JS.Get("fontBoundingBoxAscent")
	ret = (value).Float()
	return ret
}

// FontBoundingBoxDescent returning attribute 'fontBoundingBoxDescent' with
// type float64 (idl: double).
func (_this *TextMetrics) FontBoundingBoxDescent() float64 {
	var ret float64
	value := _this.Value_JS.Get("fontBoundingBoxDescent")
	ret = (value).Float()
	return ret
}

// ActualBoundingBoxAscent returning attribute 'actualBoundingBoxAscent' with
// type float64 (idl: double).
func (_this *TextMetrics) ActualBoundingBoxAscent() float64 {
	var ret float64
	value := _this.Value_JS.Get("actualBoundingBoxAscent")
	ret = (value).Float()
	return ret
}

// ActualBoundingBoxDescent returning attribute 'actualBoundingBoxDescent' with
// type float64 (idl: double).
func (_this *TextMetrics) ActualBoundingBoxDescent() float64 {
	var ret float64
	value := _this.Value_JS.Get("actualBoundingBoxDescent")
	ret = (value).Float()
	return ret
}

// EmHeightAscent returning attribute 'emHeightAscent' with
// type float64 (idl: double).
func (_this *TextMetrics) EmHeightAscent() float64 {
	var ret float64
	value := _this.Value_JS.Get("emHeightAscent")
	ret = (value).Float()
	return ret
}

// EmHeightDescent returning attribute 'emHeightDescent' with
// type float64 (idl: double).
func (_this *TextMetrics) EmHeightDescent() float64 {
	var ret float64
	value := _this.Value_JS.Get("emHeightDescent")
	ret = (value).Float()
	return ret
}

// HangingBaseline returning attribute 'hangingBaseline' with
// type float64 (idl: double).
func (_this *TextMetrics) HangingBaseline() float64 {
	var ret float64
	value := _this.Value_JS.Get("hangingBaseline")
	ret = (value).Float()
	return ret
}

// AlphabeticBaseline returning attribute 'alphabeticBaseline' with
// type float64 (idl: double).
func (_this *TextMetrics) AlphabeticBaseline() float64 {
	var ret float64
	value := _this.Value_JS.Get("alphabeticBaseline")
	ret = (value).Float()
	return ret
}

// IdeographicBaseline returning attribute 'ideographicBaseline' with
// type float64 (idl: double).
func (_this *TextMetrics) IdeographicBaseline() float64 {
	var ret float64
	value := _this.Value_JS.Get("ideographicBaseline")
	ret = (value).Float()
	return ret
}
