// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package html

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/clipboard"
	"github.com/gowebapi/webapi/communication/xhr"
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/csp"
	"github.com/gowebapi/webapi/css/animations"
	"github.com/gowebapi/webapi/css/cssom"
	"github.com/gowebapi/webapi/css/transitions"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/device/touchevents"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/file"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlcommon"
	"github.com/gowebapi/webapi/html/htmlevent"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// animations.AnimationEvent
// channel.MessageEvent
// clipboard.ClipboardEvent
// csp.SecurityPolicyViolationEvent
// cssom.CSSStyleDeclaration
// cssom.CSSStyleSheet
// dom.DocumentFragment
// dom.Element
// dom.HTMLCollection
// dom.Node
// dom.NodeList
// domcore.DOMStringMap
// domcore.DOMTokenList
// domcore.Event
// domcore.EventHandler
// file.Blob
// file.FileList
// htmlcommon.BeforeUnloadEvent
// htmlcommon.OnBeforeUnloadEventHandler
// htmlcommon.OnErrorEventHandler
// htmlevent.DragEvent
// htmlevent.FocusEvent
// htmlevent.HashChangeEvent
// htmlevent.InputEvent
// htmlevent.KeyboardEvent
// htmlevent.MouseEvent
// htmlevent.PageTransitionEvent
// htmlevent.PointerEvent
// htmlevent.PopStateEvent
// htmlevent.PromiseRejectionEvent
// htmlevent.StorageEvent
// htmlevent.UIEvent
// htmlevent.WheelEvent
// javascript.FrozenArray
// javascript.Object
// javascript.PromiseFinally
// javascript.PromiseVoid
// touchevents.TouchEvent
// transitions.TransitionEvent
// typedom.StylePropertyMap
// xhr.ProgressEvent

// source idl files:
// html.idl
// promises.idl
// xhr.idl

// transform files:
// html.go.md
// promises.go.md
// xhr.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// enum: OffscreenRenderingContextId
type OffscreenRenderingContextId int

const (
	_2dOffscreenRenderingContextId OffscreenRenderingContextId = iota
	WebglOffscreenRenderingContextId
	Webgl2OffscreenRenderingContextId
)

var offscreenRenderingContextIdToWasmTable = []string{
	"2d", "webgl", "webgl2",
}

var offscreenRenderingContextIdFromWasmTable = map[string]OffscreenRenderingContextId{
	"2d": _2dOffscreenRenderingContextId, "webgl": WebglOffscreenRenderingContextId, "webgl2": Webgl2OffscreenRenderingContextId,
}

// JSValue is converting this enum into a javascript object
func (this *OffscreenRenderingContextId) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this OffscreenRenderingContextId) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(offscreenRenderingContextIdToWasmTable) {
		return offscreenRenderingContextIdToWasmTable[idx]
	}
	panic("unknown input value")
}

// OffscreenRenderingContextIdFromJS is converting a javascript value into
// a OffscreenRenderingContextId enum value.
func OffscreenRenderingContextIdFromJS(value js.Value) OffscreenRenderingContextId {
	key := value.String()
	conv, ok := offscreenRenderingContextIdFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// enum: SelectionMode
type SelectionMode int

const (
	SelectSelectionMode SelectionMode = iota
	StartSelectionMode
	EndSelectionMode
	PreserveSelectionMode
)

var selectionModeToWasmTable = []string{
	"select", "start", "end", "preserve",
}

var selectionModeFromWasmTable = map[string]SelectionMode{
	"select": SelectSelectionMode, "start": StartSelectionMode, "end": EndSelectionMode, "preserve": PreserveSelectionMode,
}

// JSValue is converting this enum into a javascript object
func (this *SelectionMode) JSValue() js.Value {
	return js.ValueOf(this.Value())
}

// Value is converting this into javascript defined
// string value
func (this SelectionMode) Value() string {
	idx := int(this)
	if idx >= 0 && idx < len(selectionModeToWasmTable) {
		return selectionModeToWasmTable[idx]
	}
	panic("unknown input value")
}

// SelectionModeFromJS is converting a javascript value into
// a SelectionMode enum value.
func SelectionModeFromJS(value js.Value) SelectionMode {
	key := value.String()
	conv, ok := selectionModeFromWasmTable[key]
	if !ok {
		panic("unable to convert '" + key + "'")
	}
	return conv
}

// callback: FormDataForEach
type FormDataForEachFunc func(currentValue *Union, currentIndex int, listObj *FormData)

// FormDataForEach is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type FormDataForEach js.Func

func FormDataForEachToJS(callback FormDataForEachFunc) *FormDataForEach {
	if callback == nil {
		return nil
	}
	ret := FormDataForEach(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Union    // javascript: Union currentValue
			_p1 int       // javascript: long currentIndex
			_p2 *FormData // javascript: FormData listObj
		)
		_p0 = UnionFromJS(args[0])
		_p1 = (args[1]).Int()
		_p2 = FormDataFromJS(args[2])
		callback(_p0, _p1, _p2)

		// returning no return value
		return nil
	}))
	return &ret
}

func FormDataForEachFromJS(_value js.Value) FormDataForEachFunc {
	return func(currentValue *Union, currentIndex int, listObj *FormData) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := currentValue.JSValue()
		_args[0] = _p0
		_end++
		_p1 := currentIndex
		_args[1] = _p1
		_end++
		_p2 := listObj.JSValue()
		_args[2] = _p2
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseFormDataOnFulfilledFunc func(value *FormData)

// PromiseFormDataOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseFormDataOnFulfilled js.Func

func PromiseFormDataOnFulfilledToJS(callback PromiseFormDataOnFulfilledFunc) *PromiseFormDataOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseFormDataOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *FormData // javascript: FormData value
		)
		_p0 = FormDataFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseFormDataOnFulfilledFromJS(_value js.Value) PromiseFormDataOnFulfilledFunc {
	return func(value *FormData) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseFormDataOnRejectedFunc func(reason js.Value)

// PromiseFormDataOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseFormDataOnRejected js.Func

func PromiseFormDataOnRejectedToJS(callback PromiseFormDataOnRejectedFunc) *PromiseFormDataOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseFormDataOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseFormDataOnRejectedFromJS(_value js.Value) PromiseFormDataOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: AssignedNodesOptions
type AssignedNodesOptions struct {
	Flatten bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AssignedNodesOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Flatten
	out.Set("flatten", value0)
	return out
}

// AssignedNodesOptionsFromJS is allocating a new
// AssignedNodesOptions object and copy all values in the value javascript object.
func AssignedNodesOptionsFromJS(value js.Value) *AssignedNodesOptions {
	var out AssignedNodesOptions
	var (
		value0 bool // javascript: boolean {flatten Flatten flatten}
	)
	value0 = (value.Get("flatten")).Bool()
	out.Flatten = value0
	return &out
}

// dictionary: FocusOptions
type FocusOptions struct {
	PreventScroll bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FocusOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.PreventScroll
	out.Set("preventScroll", value0)
	return out
}

// FocusOptionsFromJS is allocating a new
// FocusOptions object and copy all values in the value javascript object.
func FocusOptionsFromJS(value js.Value) *FocusOptions {
	var out FocusOptions
	var (
		value0 bool // javascript: boolean {preventScroll PreventScroll preventScroll}
	)
	value0 = (value.Get("preventScroll")).Bool()
	out.PreventScroll = value0
	return &out
}

// dictionary: FormDataEntryIteratorValue
type FormDataEntryIteratorValue struct {
	Value []js.Value
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FormDataEntryIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Value))
	for __idx0, __seq_in0 := range _this.Value {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FormDataEntryIteratorValueFromJS is allocating a new
// FormDataEntryIteratorValue object and copy all values in the value javascript object.
func FormDataEntryIteratorValueFromJS(value js.Value) *FormDataEntryIteratorValue {
	var out FormDataEntryIteratorValue
	var (
		value0 []js.Value // javascript: sequence<any> {value Value value}
		value1 bool       // javascript: boolean {done Done done}
	)
	__length0 := value.Get("value").Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Get("value").Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: FormDataEventInit
type FormDataEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	FormData   *FormData
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FormDataEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.FormData.JSValue()
	out.Set("formData", value3)
	return out
}

// FormDataEventInitFromJS is allocating a new
// FormDataEventInit object and copy all values in the value javascript object.
func FormDataEventInitFromJS(value js.Value) *FormDataEventInit {
	var out FormDataEventInit
	var (
		value0 bool      // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool      // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool      // javascript: boolean {composed Composed composed}
		value3 *FormData // javascript: FormData {formData FormData formData}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = FormDataFromJS(value.Get("formData"))
	out.FormData = value3
	return &out
}

// dictionary: FormDataKeyIteratorValue
type FormDataKeyIteratorValue struct {
	Value string
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FormDataKeyIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FormDataKeyIteratorValueFromJS is allocating a new
// FormDataKeyIteratorValue object and copy all values in the value javascript object.
func FormDataKeyIteratorValueFromJS(value js.Value) *FormDataKeyIteratorValue {
	var out FormDataKeyIteratorValue
	var (
		value0 string // javascript: USVString {value Value value}
		value1 bool   // javascript: boolean {done Done done}
	)
	value0 = (value.Get("value")).String()
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: FormDataValueIteratorValue
type FormDataValueIteratorValue struct {
	Value *Union
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FormDataValueIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// FormDataValueIteratorValueFromJS is allocating a new
// FormDataValueIteratorValue object and copy all values in the value javascript object.
func FormDataValueIteratorValueFromJS(value js.Value) *FormDataValueIteratorValue {
	var out FormDataValueIteratorValue
	var (
		value0 *Union // javascript: Union {value Value value}
		value1 bool   // javascript: boolean {done Done done}
	)
	value0 = UnionFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: ImageEncodeOptions
type ImageEncodeOptions struct {
	Type    string
	Quality float64
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ImageEncodeOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Type
	out.Set("type", value0)
	value1 := _this.Quality
	out.Set("quality", value1)
	return out
}

// ImageEncodeOptionsFromJS is allocating a new
// ImageEncodeOptions object and copy all values in the value javascript object.
func ImageEncodeOptionsFromJS(value js.Value) *ImageEncodeOptions {
	var out ImageEncodeOptions
	var (
		value0 string  // javascript: DOMString {type Type _type}
		value1 float64 // javascript: unrestricted double {quality Quality quality}
	)
	value0 = (value.Get("type")).String()
	out.Type = value0
	value1 = (value.Get("quality")).Float()
	out.Quality = value1
	return &out
}

// class: FormData
type FormData struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *FormData) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// FormDataFromJS is casting a js.Value into FormData.
func FormDataFromJS(value js.Value) *FormData {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FormData{}
	ret.Value_JS = value
	return ret
}

// FormDataFromJS is casting from something that holds a js.Value into FormData.
func FormDataFromWrapper(input core.Wrapper) *FormData {
	return FormDataFromJS(input.JSValue())
}

func NewFormData(form *HTMLFormElement) (_result *FormData) {
	_klass := js.Global().Get("FormData")
	var (
		_args [1]interface{}
		_end  int
	)
	if form != nil {
		_p0 := form.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FormData // javascript: FormData _what_return_name
	)
	_converted = FormDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *FormData) Append(name string, value string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *FormData) Append2(name string, blobValue *file.Blob, filename *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := blobValue.JSValue()
	_args[1] = _p1
	_end++
	if filename != nil {

		var _p2 interface{}
		if filename != nil {
			_p2 = *(filename)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("append", _args[0:_end]...)
	return
}

func (_this *FormData) Delete(name string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("delete", _args[0:_end]...)
	return
}

func (_this *FormData) Get(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *FormData) GetAll(name string) (_result []*Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAll", _args[0:_end]...)
	var (
		_converted []*Union // javascript: sequence<Union> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*Union, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *Union
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = UnionFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *FormData) Has(name string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("has", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *FormData) Set(name string, value string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("set", _args[0:_end]...)
	return
}

func (_this *FormData) Set2(name string, blobValue *file.Blob, filename *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_p1 := blobValue.JSValue()
	_args[1] = _p1
	_end++
	if filename != nil {

		var _p2 interface{}
		if filename != nil {
			_p2 = *(filename)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("set", _args[0:_end]...)
	return
}

func (_this *FormData) Entries() (_result *FormDataEntryIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("entries", _args[0:_end]...)
	var (
		_converted *FormDataEntryIterator // javascript: FormDataEntryIterator _what_return_name
	)
	_converted = FormDataEntryIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *FormData) ForEach(callback *FormDataForEach, optionalThisForCallbackArgument interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if optionalThisForCallbackArgument != nil {
		_p1 := optionalThisForCallbackArgument
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("forEach", _args[0:_end]...)
	return
}

func (_this *FormData) Keys() (_result *FormDataKeyIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("keys", _args[0:_end]...)
	var (
		_converted *FormDataKeyIterator // javascript: FormDataKeyIterator _what_return_name
	)
	_converted = FormDataKeyIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *FormData) Values() (_result *FormDataValueIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("values", _args[0:_end]...)
	var (
		_converted *FormDataValueIterator // javascript: FormDataValueIterator _what_return_name
	)
	_converted = FormDataValueIteratorFromJS(_returned)
	_result = _converted
	return
}

// class: FormDataEntryIterator
type FormDataEntryIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *FormDataEntryIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// FormDataEntryIteratorFromJS is casting a js.Value into FormDataEntryIterator.
func FormDataEntryIteratorFromJS(value js.Value) *FormDataEntryIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FormDataEntryIterator{}
	ret.Value_JS = value
	return ret
}

// FormDataEntryIteratorFromJS is casting from something that holds a js.Value into FormDataEntryIterator.
func FormDataEntryIteratorFromWrapper(input core.Wrapper) *FormDataEntryIterator {
	return FormDataEntryIteratorFromJS(input.JSValue())
}

func (_this *FormDataEntryIterator) Next() (_result *FormDataEntryIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FormDataEntryIteratorValue // javascript: FormDataEntryIteratorValue _what_return_name
	)
	_converted = FormDataEntryIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: FormDataEvent
type FormDataEvent struct {
	domcore.Event
}

// FormDataEventFromJS is casting a js.Value into FormDataEvent.
func FormDataEventFromJS(value js.Value) *FormDataEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FormDataEvent{}
	ret.Value_JS = value
	return ret
}

// FormDataEventFromJS is casting from something that holds a js.Value into FormDataEvent.
func FormDataEventFromWrapper(input core.Wrapper) *FormDataEvent {
	return FormDataEventFromJS(input.JSValue())
}

func NewFormDataEvent(_type string, eventInitDict *FormDataEventInit) (_result *FormDataEvent) {
	_klass := js.Global().Get("FormDataEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FormDataEvent // javascript: FormDataEvent _what_return_name
	)
	_converted = FormDataEventFromJS(_returned)
	_result = _converted
	return
}

// FormData returning attribute 'formData' with
// type FormData (idl: FormData).
func (_this *FormDataEvent) FormData() *FormData {
	var ret *FormData
	value := _this.Value_JS.Get("formData")
	ret = FormDataFromJS(value)
	return ret
}

// class: FormDataKeyIterator
type FormDataKeyIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *FormDataKeyIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// FormDataKeyIteratorFromJS is casting a js.Value into FormDataKeyIterator.
func FormDataKeyIteratorFromJS(value js.Value) *FormDataKeyIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FormDataKeyIterator{}
	ret.Value_JS = value
	return ret
}

// FormDataKeyIteratorFromJS is casting from something that holds a js.Value into FormDataKeyIterator.
func FormDataKeyIteratorFromWrapper(input core.Wrapper) *FormDataKeyIterator {
	return FormDataKeyIteratorFromJS(input.JSValue())
}

func (_this *FormDataKeyIterator) Next() (_result *FormDataKeyIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FormDataKeyIteratorValue // javascript: FormDataKeyIteratorValue _what_return_name
	)
	_converted = FormDataKeyIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: FormDataValueIterator
type FormDataValueIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *FormDataValueIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// FormDataValueIteratorFromJS is casting a js.Value into FormDataValueIterator.
func FormDataValueIteratorFromJS(value js.Value) *FormDataValueIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FormDataValueIterator{}
	ret.Value_JS = value
	return ret
}

// FormDataValueIteratorFromJS is casting from something that holds a js.Value into FormDataValueIterator.
func FormDataValueIteratorFromWrapper(input core.Wrapper) *FormDataValueIterator {
	return FormDataValueIteratorFromJS(input.JSValue())
}

func (_this *FormDataValueIterator) Next() (_result *FormDataValueIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *FormDataValueIteratorValue // javascript: FormDataValueIteratorValue _what_return_name
	)
	_converted = FormDataValueIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: HTMLAllCollection
type HTMLAllCollection struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *HTMLAllCollection) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// HTMLAllCollectionFromJS is casting a js.Value into HTMLAllCollection.
func HTMLAllCollectionFromJS(value js.Value) *HTMLAllCollection {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLAllCollection{}
	ret.Value_JS = value
	return ret
}

// HTMLAllCollectionFromJS is casting from something that holds a js.Value into HTMLAllCollection.
func HTMLAllCollectionFromWrapper(input core.Wrapper) *HTMLAllCollection {
	return HTMLAllCollectionFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLAllCollection) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *HTMLAllCollection) Index(index uint) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLAllCollection) Get(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLAllCollection) NamedItem(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLAllCollection) Item(nameOrIndex *string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	if nameOrIndex != nil {

		var _p0 interface{}
		if nameOrIndex != nil {
			_p0 = *(nameOrIndex)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

// class: HTMLAnchorElement
type HTMLAnchorElement struct {
	HTMLElement
}

// HTMLAnchorElementFromJS is casting a js.Value into HTMLAnchorElement.
func HTMLAnchorElementFromJS(value js.Value) *HTMLAnchorElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLAnchorElement{}
	ret.Value_JS = value
	return ret
}

// HTMLAnchorElementFromJS is casting from something that holds a js.Value into HTMLAnchorElement.
func HTMLAnchorElementFromWrapper(input core.Wrapper) *HTMLAnchorElement {
	return HTMLAnchorElementFromJS(input.JSValue())
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// SetTarget setting attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetTarget(value string) {
	input := value
	_this.Value_JS.Set("target", input)
}

// Download returning attribute 'download' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Download() string {
	var ret string
	value := _this.Value_JS.Get("download")
	ret = (value).String()
	return ret
}

// SetDownload setting attribute 'download' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetDownload(value string) {
	input := value
	_this.Value_JS.Set("download", input)
}

// Ping returning attribute 'ping' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Ping() string {
	var ret string
	value := _this.Value_JS.Get("ping")
	ret = (value).String()
	return ret
}

// SetPing setting attribute 'ping' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetPing(value string) {
	input := value
	_this.Value_JS.Set("ping", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLAnchorElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Hreflang returning attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Hreflang() string {
	var ret string
	value := _this.Value_JS.Get("hreflang")
	ret = (value).String()
	return ret
}

// SetHreflang setting attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetHreflang(value string) {
	input := value
	_this.Value_JS.Set("hreflang", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Coords returning attribute 'coords' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Coords() string {
	var ret string
	value := _this.Value_JS.Get("coords")
	ret = (value).String()
	return ret
}

// SetCoords setting attribute 'coords' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetCoords(value string) {
	input := value
	_this.Value_JS.Set("coords", input)
}

// Charset returning attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Charset() string {
	var ret string
	value := _this.Value_JS.Get("charset")
	ret = (value).String()
	return ret
}

// SetCharset setting attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetCharset(value string) {
	input := value
	_this.Value_JS.Set("charset", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Rev returning attribute 'rev' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Rev() string {
	var ret string
	value := _this.Value_JS.Get("rev")
	ret = (value).String()
	return ret
}

// SetRev setting attribute 'rev' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetRev(value string) {
	input := value
	_this.Value_JS.Set("rev", input)
}

// Shape returning attribute 'shape' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) Shape() string {
	var ret string
	value := _this.Value_JS.Get("shape")
	ret = (value).String()
	return ret
}

// SetShape setting attribute 'shape' with
// type string (idl: DOMString).
func (_this *HTMLAnchorElement) SetShape(value string) {
	input := value
	_this.Value_JS.Set("shape", input)
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// ToString is an alias for Href.
func (_this *HTMLAnchorElement) ToString() string {
	return _this.Href()
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// SetProtocol setting attribute 'protocol' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetProtocol(value string) {
	input := value
	_this.Value_JS.Set("protocol", input)
}

// Username returning attribute 'username' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Username() string {
	var ret string
	value := _this.Value_JS.Get("username")
	ret = (value).String()
	return ret
}

// SetUsername setting attribute 'username' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetUsername(value string) {
	input := value
	_this.Value_JS.Set("username", input)
}

// Password returning attribute 'password' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Password() string {
	var ret string
	value := _this.Value_JS.Get("password")
	ret = (value).String()
	return ret
}

// SetPassword setting attribute 'password' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetPassword(value string) {
	input := value
	_this.Value_JS.Set("password", input)
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// SetHost setting attribute 'host' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetHost(value string) {
	input := value
	_this.Value_JS.Set("host", input)
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// SetHostname setting attribute 'hostname' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetHostname(value string) {
	input := value
	_this.Value_JS.Set("hostname", input)
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// SetPort setting attribute 'port' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetPort(value string) {
	input := value
	_this.Value_JS.Set("port", input)
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// SetPathname setting attribute 'pathname' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetPathname(value string) {
	input := value
	_this.Value_JS.Set("pathname", input)
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// SetSearch setting attribute 'search' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetSearch(value string) {
	input := value
	_this.Value_JS.Set("search", input)
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// SetHash setting attribute 'hash' with
// type string (idl: USVString).
func (_this *HTMLAnchorElement) SetHash(value string) {
	input := value
	_this.Value_JS.Set("hash", input)
}

// class: HTMLAreaElement
type HTMLAreaElement struct {
	HTMLElement
}

// HTMLAreaElementFromJS is casting a js.Value into HTMLAreaElement.
func HTMLAreaElementFromJS(value js.Value) *HTMLAreaElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLAreaElement{}
	ret.Value_JS = value
	return ret
}

// HTMLAreaElementFromJS is casting from something that holds a js.Value into HTMLAreaElement.
func HTMLAreaElementFromWrapper(input core.Wrapper) *HTMLAreaElement {
	return HTMLAreaElementFromJS(input.JSValue())
}

// Alt returning attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Alt() string {
	var ret string
	value := _this.Value_JS.Get("alt")
	ret = (value).String()
	return ret
}

// SetAlt setting attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetAlt(value string) {
	input := value
	_this.Value_JS.Set("alt", input)
}

// Coords returning attribute 'coords' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Coords() string {
	var ret string
	value := _this.Value_JS.Get("coords")
	ret = (value).String()
	return ret
}

// SetCoords setting attribute 'coords' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetCoords(value string) {
	input := value
	_this.Value_JS.Set("coords", input)
}

// Shape returning attribute 'shape' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Shape() string {
	var ret string
	value := _this.Value_JS.Get("shape")
	ret = (value).String()
	return ret
}

// SetShape setting attribute 'shape' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetShape(value string) {
	input := value
	_this.Value_JS.Set("shape", input)
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// SetTarget setting attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetTarget(value string) {
	input := value
	_this.Value_JS.Set("target", input)
}

// Download returning attribute 'download' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Download() string {
	var ret string
	value := _this.Value_JS.Get("download")
	ret = (value).String()
	return ret
}

// SetDownload setting attribute 'download' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetDownload(value string) {
	input := value
	_this.Value_JS.Set("download", input)
}

// Ping returning attribute 'ping' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Ping() string {
	var ret string
	value := _this.Value_JS.Get("ping")
	ret = (value).String()
	return ret
}

// SetPing setting attribute 'ping' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetPing(value string) {
	input := value
	_this.Value_JS.Set("ping", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLAreaElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLAreaElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// NoHref returning attribute 'noHref' with
// type bool (idl: boolean).
func (_this *HTMLAreaElement) NoHref() bool {
	var ret bool
	value := _this.Value_JS.Get("noHref")
	ret = (value).Bool()
	return ret
}

// SetNoHref setting attribute 'noHref' with
// type bool (idl: boolean).
func (_this *HTMLAreaElement) SetNoHref(value bool) {
	input := value
	_this.Value_JS.Set("noHref", input)
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// ToString is an alias for Href.
func (_this *HTMLAreaElement) ToString() string {
	return _this.Href()
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// SetProtocol setting attribute 'protocol' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetProtocol(value string) {
	input := value
	_this.Value_JS.Set("protocol", input)
}

// Username returning attribute 'username' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Username() string {
	var ret string
	value := _this.Value_JS.Get("username")
	ret = (value).String()
	return ret
}

// SetUsername setting attribute 'username' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetUsername(value string) {
	input := value
	_this.Value_JS.Set("username", input)
}

// Password returning attribute 'password' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Password() string {
	var ret string
	value := _this.Value_JS.Get("password")
	ret = (value).String()
	return ret
}

// SetPassword setting attribute 'password' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetPassword(value string) {
	input := value
	_this.Value_JS.Set("password", input)
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// SetHost setting attribute 'host' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetHost(value string) {
	input := value
	_this.Value_JS.Set("host", input)
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// SetHostname setting attribute 'hostname' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetHostname(value string) {
	input := value
	_this.Value_JS.Set("hostname", input)
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// SetPort setting attribute 'port' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetPort(value string) {
	input := value
	_this.Value_JS.Set("port", input)
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// SetPathname setting attribute 'pathname' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetPathname(value string) {
	input := value
	_this.Value_JS.Set("pathname", input)
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// SetSearch setting attribute 'search' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetSearch(value string) {
	input := value
	_this.Value_JS.Set("search", input)
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// SetHash setting attribute 'hash' with
// type string (idl: USVString).
func (_this *HTMLAreaElement) SetHash(value string) {
	input := value
	_this.Value_JS.Set("hash", input)
}

// class: HTMLBRElement
type HTMLBRElement struct {
	HTMLElement
}

// HTMLBRElementFromJS is casting a js.Value into HTMLBRElement.
func HTMLBRElementFromJS(value js.Value) *HTMLBRElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLBRElement{}
	ret.Value_JS = value
	return ret
}

// HTMLBRElementFromJS is casting from something that holds a js.Value into HTMLBRElement.
func HTMLBRElementFromWrapper(input core.Wrapper) *HTMLBRElement {
	return HTMLBRElementFromJS(input.JSValue())
}

// Clear returning attribute 'clear' with
// type string (idl: DOMString).
func (_this *HTMLBRElement) Clear() string {
	var ret string
	value := _this.Value_JS.Get("clear")
	ret = (value).String()
	return ret
}

// SetClear setting attribute 'clear' with
// type string (idl: DOMString).
func (_this *HTMLBRElement) SetClear(value string) {
	input := value
	_this.Value_JS.Set("clear", input)
}

// class: HTMLBaseElement
type HTMLBaseElement struct {
	HTMLElement
}

// HTMLBaseElementFromJS is casting a js.Value into HTMLBaseElement.
func HTMLBaseElementFromJS(value js.Value) *HTMLBaseElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLBaseElement{}
	ret.Value_JS = value
	return ret
}

// HTMLBaseElementFromJS is casting from something that holds a js.Value into HTMLBaseElement.
func HTMLBaseElementFromWrapper(input core.Wrapper) *HTMLBaseElement {
	return HTMLBaseElementFromJS(input.JSValue())
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLBaseElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLBaseElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLBaseElement) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// SetTarget setting attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLBaseElement) SetTarget(value string) {
	input := value
	_this.Value_JS.Set("target", input)
}

// class: HTMLBodyElement
type HTMLBodyElement struct {
	HTMLElement
}

// HTMLBodyElementFromJS is casting a js.Value into HTMLBodyElement.
func HTMLBodyElementFromJS(value js.Value) *HTMLBodyElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLBodyElement{}
	ret.Value_JS = value
	return ret
}

// HTMLBodyElementFromJS is casting from something that holds a js.Value into HTMLBodyElement.
func HTMLBodyElementFromWrapper(input core.Wrapper) *HTMLBodyElement {
	return HTMLBodyElementFromJS(input.JSValue())
}

// OnOrientationChange returning attribute 'onorientationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnOrientationChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onorientationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// Link returning attribute 'link' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) Link() string {
	var ret string
	value := _this.Value_JS.Get("link")
	ret = (value).String()
	return ret
}

// SetLink setting attribute 'link' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetLink(value string) {
	input := value
	_this.Value_JS.Set("link", input)
}

// VLink returning attribute 'vLink' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) VLink() string {
	var ret string
	value := _this.Value_JS.Get("vLink")
	ret = (value).String()
	return ret
}

// SetVLink setting attribute 'vLink' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetVLink(value string) {
	input := value
	_this.Value_JS.Set("vLink", input)
}

// ALink returning attribute 'aLink' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) ALink() string {
	var ret string
	value := _this.Value_JS.Get("aLink")
	ret = (value).String()
	return ret
}

// SetALink setting attribute 'aLink' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetALink(value string) {
	input := value
	_this.Value_JS.Set("aLink", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// Background returning attribute 'background' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) Background() string {
	var ret string
	value := _this.Value_JS.Get("background")
	ret = (value).String()
	return ret
}

// SetBackground setting attribute 'background' with
// type string (idl: DOMString).
func (_this *HTMLBodyElement) SetBackground(value string) {
	input := value
	_this.Value_JS.Set("background", input)
}

// OnAfterPrint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnAfterPrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforePrint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnBeforePrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforeUnload returning attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *HTMLBodyElement) OnBeforeUnload() htmlcommon.OnBeforeUnloadEventHandlerFunc {
	var ret htmlcommon.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// OnHashChange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnHashChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLanguageChange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnLanguageChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnOffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOnline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnOnline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageHide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnPageHide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageShow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnPageShow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPopState returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnPopState() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRejectionHandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnRejectionHandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnStorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnhandledRejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnUnhandledRejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLBodyElement) OnUnload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncHTMLBodyElement_domcore_Event(listener func(event *domcore.Event, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAfterPrint is adding doing AddEventListener for 'AfterPrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventAfterPrint(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "afterprint", cb)
	return cb
}

// SetOnAfterPrint is assigning a function to 'onafterprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnAfterPrint(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onafterprint", cb)
	return cb
}

// AddBeforePrint is adding doing AddEventListener for 'BeforePrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventBeforePrint(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "beforeprint", cb)
	return cb
}

// SetOnBeforePrint is assigning a function to 'onbeforeprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnBeforePrint(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onbeforeprint", cb)
	return cb
}

// event attribute: htmlcommon.BeforeUnloadEvent
func eventFuncHTMLBodyElement_htmlcommon_BeforeUnloadEvent(listener func(event *htmlcommon.BeforeUnloadEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlcommon.BeforeUnloadEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlcommon.BeforeUnloadEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBeforeUnload is adding doing AddEventListener for 'BeforeUnload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Call("addEventListener", "beforeunload", cb)
	return cb
}

// SetOnBeforeUnload is assigning a function to 'onbeforeunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Set("onbeforeunload", cb)
	return cb
}

// event attribute: htmlevent.HashChangeEvent
func eventFuncHTMLBodyElement_htmlevent_HashChangeEvent(listener func(event *htmlevent.HashChangeEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.HashChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.HashChangeEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddHashChange is adding doing AddEventListener for 'HashChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "hashchange", cb)
	return cb
}

// SetOnHashChange is assigning a function to 'onhashchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Set("onhashchange", cb)
	return cb
}

// AddLanguageChange is adding doing AddEventListener for 'LanguageChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventLanguageChange(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "languagechange", cb)
	return cb
}

// SetOnLanguageChange is assigning a function to 'onlanguagechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnLanguageChange(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onlanguagechange", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncHTMLBodyElement_channel_MessageEvent(listener func(event *channel.MessageEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

// AddOffline is adding doing AddEventListener for 'Offline' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventOffline(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "offline", cb)
	return cb
}

// SetOnOffline is assigning a function to 'onoffline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnOffline(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onoffline", cb)
	return cb
}

// AddOnline is adding doing AddEventListener for 'Online' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventOnline(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "online", cb)
	return cb
}

// SetOnOnline is assigning a function to 'ononline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnOnline(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("ononline", cb)
	return cb
}

// AddOrientationChange is adding doing AddEventListener for 'OrientationChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventOrientationChange(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "orientationchange", cb)
	return cb
}

// SetOnOrientationChange is assigning a function to 'onorientationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnOrientationChange(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onorientationchange", cb)
	return cb
}

// event attribute: htmlevent.PageTransitionEvent
func eventFuncHTMLBodyElement_htmlevent_PageTransitionEvent(listener func(event *htmlevent.PageTransitionEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PageTransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PageTransitionEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPageHide is adding doing AddEventListener for 'PageHide' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pagehide", cb)
	return cb
}

// SetOnPageHide is assigning a function to 'onpagehide'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpagehide", cb)
	return cb
}

// AddPageShow is adding doing AddEventListener for 'PageShow' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pageshow", cb)
	return cb
}

// SetOnPageShow is assigning a function to 'onpageshow'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpageshow", cb)
	return cb
}

// event attribute: htmlevent.PopStateEvent
func eventFuncHTMLBodyElement_htmlevent_PopStateEvent(listener func(event *htmlevent.PopStateEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PopStateEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PopStateEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPopState is adding doing AddEventListener for 'PopState' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Call("addEventListener", "popstate", cb)
	return cb
}

// SetOnPopState is assigning a function to 'onpopstate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Set("onpopstate", cb)
	return cb
}

// event attribute: htmlevent.PromiseRejectionEvent
func eventFuncHTMLBodyElement_htmlevent_PromiseRejectionEvent(listener func(event *htmlevent.PromiseRejectionEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PromiseRejectionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PromiseRejectionEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddRejectionHandled is adding doing AddEventListener for 'RejectionHandled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "rejectionhandled", cb)
	return cb
}

// SetOnRejectionHandled is assigning a function to 'onrejectionhandled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onrejectionhandled", cb)
	return cb
}

// event attribute: htmlevent.StorageEvent
func eventFuncHTMLBodyElement_htmlevent_StorageEvent(listener func(event *htmlevent.StorageEvent, target *HTMLBodyElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.StorageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.StorageEventFromJS(value)
		src := HTMLBodyElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddStorage is adding doing AddEventListener for 'Storage' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventStorage(listener func(event *htmlevent.StorageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Call("addEventListener", "storage", cb)
	return cb
}

// SetOnStorage is assigning a function to 'onstorage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnStorage(listener func(event *htmlevent.StorageEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Set("onstorage", cb)
	return cb
}

// AddUnhandledRejection is adding doing AddEventListener for 'UnhandledRejection' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "unhandledrejection", cb)
	return cb
}

// SetOnUnhandledRejection is assigning a function to 'onunhandledrejection'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onunhandledrejection", cb)
	return cb
}

// AddUnload is adding doing AddEventListener for 'Unload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) AddEventUnload(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "unload", cb)
	return cb
}

// SetOnUnload is assigning a function to 'onunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLBodyElement) SetOnUnload(listener func(event *domcore.Event, currentTarget *HTMLBodyElement)) js.Func {
	cb := eventFuncHTMLBodyElement_domcore_Event(listener)
	_this.Value_JS.Set("onunload", cb)
	return cb
}

// class: HTMLButtonElement
type HTMLButtonElement struct {
	HTMLElement
}

// HTMLButtonElementFromJS is casting a js.Value into HTMLButtonElement.
func HTMLButtonElementFromJS(value js.Value) *HTMLButtonElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLButtonElement{}
	ret.Value_JS = value
	return ret
}

// HTMLButtonElementFromJS is casting from something that holds a js.Value into HTMLButtonElement.
func HTMLButtonElementFromWrapper(input core.Wrapper) *HTMLButtonElement {
	return HTMLButtonElementFromJS(input.JSValue())
}

// Autofocus returning attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) Autofocus() bool {
	var ret bool
	value := _this.Value_JS.Get("autofocus")
	ret = (value).Bool()
	return ret
}

// SetAutofocus setting attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) SetAutofocus(value bool) {
	input := value
	_this.Value_JS.Set("autofocus", input)
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLButtonElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// FormAction returning attribute 'formAction' with
// type string (idl: USVString).
func (_this *HTMLButtonElement) FormAction() string {
	var ret string
	value := _this.Value_JS.Get("formAction")
	ret = (value).String()
	return ret
}

// SetFormAction setting attribute 'formAction' with
// type string (idl: USVString).
func (_this *HTMLButtonElement) SetFormAction(value string) {
	input := value
	_this.Value_JS.Set("formAction", input)
}

// FormEnctype returning attribute 'formEnctype' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) FormEnctype() string {
	var ret string
	value := _this.Value_JS.Get("formEnctype")
	ret = (value).String()
	return ret
}

// SetFormEnctype setting attribute 'formEnctype' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetFormEnctype(value string) {
	input := value
	_this.Value_JS.Set("formEnctype", input)
}

// FormMethod returning attribute 'formMethod' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) FormMethod() string {
	var ret string
	value := _this.Value_JS.Get("formMethod")
	ret = (value).String()
	return ret
}

// SetFormMethod setting attribute 'formMethod' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetFormMethod(value string) {
	input := value
	_this.Value_JS.Set("formMethod", input)
}

// FormNoValidate returning attribute 'formNoValidate' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) FormNoValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("formNoValidate")
	ret = (value).Bool()
	return ret
}

// SetFormNoValidate setting attribute 'formNoValidate' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) SetFormNoValidate(value bool) {
	input := value
	_this.Value_JS.Set("formNoValidate", input)
}

// FormTarget returning attribute 'formTarget' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) FormTarget() string {
	var ret string
	value := _this.Value_JS.Get("formTarget")
	ret = (value).String()
	return ret
}

// SetFormTarget setting attribute 'formTarget' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetFormTarget(value string) {
	input := value
	_this.Value_JS.Set("formTarget", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLButtonElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLButtonElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLButtonElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLButtonElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

func (_this *HTMLButtonElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLButtonElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLButtonElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// class: HTMLDListElement
type HTMLDListElement struct {
	HTMLElement
}

// HTMLDListElementFromJS is casting a js.Value into HTMLDListElement.
func HTMLDListElementFromJS(value js.Value) *HTMLDListElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDListElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDListElementFromJS is casting from something that holds a js.Value into HTMLDListElement.
func HTMLDListElementFromWrapper(input core.Wrapper) *HTMLDListElement {
	return HTMLDListElementFromJS(input.JSValue())
}

// Compact returning attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLDListElement) Compact() bool {
	var ret bool
	value := _this.Value_JS.Get("compact")
	ret = (value).Bool()
	return ret
}

// SetCompact setting attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLDListElement) SetCompact(value bool) {
	input := value
	_this.Value_JS.Set("compact", input)
}

// class: HTMLDataElement
type HTMLDataElement struct {
	HTMLElement
}

// HTMLDataElementFromJS is casting a js.Value into HTMLDataElement.
func HTMLDataElementFromJS(value js.Value) *HTMLDataElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDataElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDataElementFromJS is casting from something that holds a js.Value into HTMLDataElement.
func HTMLDataElementFromWrapper(input core.Wrapper) *HTMLDataElement {
	return HTMLDataElementFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLDataElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLDataElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// class: HTMLDataListElement
type HTMLDataListElement struct {
	HTMLElement
}

// HTMLDataListElementFromJS is casting a js.Value into HTMLDataListElement.
func HTMLDataListElementFromJS(value js.Value) *HTMLDataListElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDataListElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDataListElementFromJS is casting from something that holds a js.Value into HTMLDataListElement.
func HTMLDataListElementFromWrapper(input core.Wrapper) *HTMLDataListElement {
	return HTMLDataListElementFromJS(input.JSValue())
}

// Options returning attribute 'options' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLDataListElement) Options() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("options")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// class: HTMLDetailsElement
type HTMLDetailsElement struct {
	HTMLElement
}

// HTMLDetailsElementFromJS is casting a js.Value into HTMLDetailsElement.
func HTMLDetailsElementFromJS(value js.Value) *HTMLDetailsElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDetailsElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDetailsElementFromJS is casting from something that holds a js.Value into HTMLDetailsElement.
func HTMLDetailsElementFromWrapper(input core.Wrapper) *HTMLDetailsElement {
	return HTMLDetailsElementFromJS(input.JSValue())
}

// Open returning attribute 'open' with
// type bool (idl: boolean).
func (_this *HTMLDetailsElement) Open() bool {
	var ret bool
	value := _this.Value_JS.Get("open")
	ret = (value).Bool()
	return ret
}

// SetOpen setting attribute 'open' with
// type bool (idl: boolean).
func (_this *HTMLDetailsElement) SetOpen(value bool) {
	input := value
	_this.Value_JS.Set("open", input)
}

// class: HTMLDialogElement
type HTMLDialogElement struct {
	HTMLElement
}

// HTMLDialogElementFromJS is casting a js.Value into HTMLDialogElement.
func HTMLDialogElementFromJS(value js.Value) *HTMLDialogElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDialogElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDialogElementFromJS is casting from something that holds a js.Value into HTMLDialogElement.
func HTMLDialogElementFromWrapper(input core.Wrapper) *HTMLDialogElement {
	return HTMLDialogElementFromJS(input.JSValue())
}

// Open returning attribute 'open' with
// type bool (idl: boolean).
func (_this *HTMLDialogElement) Open() bool {
	var ret bool
	value := _this.Value_JS.Get("open")
	ret = (value).Bool()
	return ret
}

// SetOpen setting attribute 'open' with
// type bool (idl: boolean).
func (_this *HTMLDialogElement) SetOpen(value bool) {
	input := value
	_this.Value_JS.Set("open", input)
}

// ReturnValue returning attribute 'returnValue' with
// type string (idl: DOMString).
func (_this *HTMLDialogElement) ReturnValue() string {
	var ret string
	value := _this.Value_JS.Get("returnValue")
	ret = (value).String()
	return ret
}

// SetReturnValue setting attribute 'returnValue' with
// type string (idl: DOMString).
func (_this *HTMLDialogElement) SetReturnValue(value string) {
	input := value
	_this.Value_JS.Set("returnValue", input)
}

func (_this *HTMLDialogElement) Show() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("show", _args[0:_end]...)
	return
}

func (_this *HTMLDialogElement) ShowModal() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("showModal", _args[0:_end]...)
	return
}

func (_this *HTMLDialogElement) Close(returnValue *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	if returnValue != nil {

		var _p0 interface{}
		if returnValue != nil {
			_p0 = *(returnValue)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("close", _args[0:_end]...)
	return
}

// class: HTMLDirectoryElement
type HTMLDirectoryElement struct {
	HTMLElement
}

// HTMLDirectoryElementFromJS is casting a js.Value into HTMLDirectoryElement.
func HTMLDirectoryElementFromJS(value js.Value) *HTMLDirectoryElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDirectoryElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDirectoryElementFromJS is casting from something that holds a js.Value into HTMLDirectoryElement.
func HTMLDirectoryElementFromWrapper(input core.Wrapper) *HTMLDirectoryElement {
	return HTMLDirectoryElementFromJS(input.JSValue())
}

// Compact returning attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLDirectoryElement) Compact() bool {
	var ret bool
	value := _this.Value_JS.Get("compact")
	ret = (value).Bool()
	return ret
}

// SetCompact setting attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLDirectoryElement) SetCompact(value bool) {
	input := value
	_this.Value_JS.Set("compact", input)
}

// class: HTMLDivElement
type HTMLDivElement struct {
	HTMLElement
}

// HTMLDivElementFromJS is casting a js.Value into HTMLDivElement.
func HTMLDivElementFromJS(value js.Value) *HTMLDivElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLDivElement{}
	ret.Value_JS = value
	return ret
}

// HTMLDivElementFromJS is casting from something that holds a js.Value into HTMLDivElement.
func HTMLDivElementFromWrapper(input core.Wrapper) *HTMLDivElement {
	return HTMLDivElementFromJS(input.JSValue())
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLDivElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLDivElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// class: HTMLElement
type HTMLElement struct {
	dom.Element
}

// HTMLElementFromJS is casting a js.Value into HTMLElement.
func HTMLElementFromJS(value js.Value) *HTMLElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLElement{}
	ret.Value_JS = value
	return ret
}

// HTMLElementFromJS is casting from something that holds a js.Value into HTMLElement.
func HTMLElementFromWrapper(input core.Wrapper) *HTMLElement {
	return HTMLElementFromJS(input.JSValue())
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *HTMLElement) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Lang returning attribute 'lang' with
// type string (idl: DOMString).
func (_this *HTMLElement) Lang() string {
	var ret string
	value := _this.Value_JS.Get("lang")
	ret = (value).String()
	return ret
}

// SetLang setting attribute 'lang' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetLang(value string) {
	input := value
	_this.Value_JS.Set("lang", input)
}

// Translate returning attribute 'translate' with
// type bool (idl: boolean).
func (_this *HTMLElement) Translate() bool {
	var ret bool
	value := _this.Value_JS.Get("translate")
	ret = (value).Bool()
	return ret
}

// SetTranslate setting attribute 'translate' with
// type bool (idl: boolean).
func (_this *HTMLElement) SetTranslate(value bool) {
	input := value
	_this.Value_JS.Set("translate", input)
}

// Dir returning attribute 'dir' with
// type string (idl: DOMString).
func (_this *HTMLElement) Dir() string {
	var ret string
	value := _this.Value_JS.Get("dir")
	ret = (value).String()
	return ret
}

// SetDir setting attribute 'dir' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetDir(value string) {
	input := value
	_this.Value_JS.Set("dir", input)
}

// Hidden returning attribute 'hidden' with
// type bool (idl: boolean).
func (_this *HTMLElement) Hidden() bool {
	var ret bool
	value := _this.Value_JS.Get("hidden")
	ret = (value).Bool()
	return ret
}

// SetHidden setting attribute 'hidden' with
// type bool (idl: boolean).
func (_this *HTMLElement) SetHidden(value bool) {
	input := value
	_this.Value_JS.Set("hidden", input)
}

// AccessKey returning attribute 'accessKey' with
// type string (idl: DOMString).
func (_this *HTMLElement) AccessKey() string {
	var ret string
	value := _this.Value_JS.Get("accessKey")
	ret = (value).String()
	return ret
}

// SetAccessKey setting attribute 'accessKey' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetAccessKey(value string) {
	input := value
	_this.Value_JS.Set("accessKey", input)
}

// AccessKeyLabel returning attribute 'accessKeyLabel' with
// type string (idl: DOMString).
func (_this *HTMLElement) AccessKeyLabel() string {
	var ret string
	value := _this.Value_JS.Get("accessKeyLabel")
	ret = (value).String()
	return ret
}

// Draggable returning attribute 'draggable' with
// type bool (idl: boolean).
func (_this *HTMLElement) Draggable() bool {
	var ret bool
	value := _this.Value_JS.Get("draggable")
	ret = (value).Bool()
	return ret
}

// SetDraggable setting attribute 'draggable' with
// type bool (idl: boolean).
func (_this *HTMLElement) SetDraggable(value bool) {
	input := value
	_this.Value_JS.Set("draggable", input)
}

// Spellcheck returning attribute 'spellcheck' with
// type bool (idl: boolean).
func (_this *HTMLElement) Spellcheck() bool {
	var ret bool
	value := _this.Value_JS.Get("spellcheck")
	ret = (value).Bool()
	return ret
}

// SetSpellcheck setting attribute 'spellcheck' with
// type bool (idl: boolean).
func (_this *HTMLElement) SetSpellcheck(value bool) {
	input := value
	_this.Value_JS.Set("spellcheck", input)
}

// Autocapitalize returning attribute 'autocapitalize' with
// type string (idl: DOMString).
func (_this *HTMLElement) Autocapitalize() string {
	var ret string
	value := _this.Value_JS.Get("autocapitalize")
	ret = (value).String()
	return ret
}

// SetAutocapitalize setting attribute 'autocapitalize' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetAutocapitalize(value string) {
	input := value
	_this.Value_JS.Set("autocapitalize", input)
}

// InnerText returning attribute 'innerText' with
// type string (idl: DOMString).
func (_this *HTMLElement) InnerText() string {
	var ret string
	value := _this.Value_JS.Get("innerText")
	ret = (value).String()
	return ret
}

// SetInnerText setting attribute 'innerText' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetInnerText(value string) {
	input := value
	_this.Value_JS.Set("innerText", input)
}

// OffsetParent returning attribute 'offsetParent' with
// type dom.Element (idl: Element).
func (_this *HTMLElement) OffsetParent() *dom.Element {
	var ret *dom.Element
	value := _this.Value_JS.Get("offsetParent")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.ElementFromJS(value)
	}
	return ret
}

// OffsetTop returning attribute 'offsetTop' with
// type int (idl: long).
func (_this *HTMLElement) OffsetTop() int {
	var ret int
	value := _this.Value_JS.Get("offsetTop")
	ret = (value).Int()
	return ret
}

// OffsetLeft returning attribute 'offsetLeft' with
// type int (idl: long).
func (_this *HTMLElement) OffsetLeft() int {
	var ret int
	value := _this.Value_JS.Get("offsetLeft")
	ret = (value).Int()
	return ret
}

// OffsetWidth returning attribute 'offsetWidth' with
// type int (idl: long).
func (_this *HTMLElement) OffsetWidth() int {
	var ret int
	value := _this.Value_JS.Get("offsetWidth")
	ret = (value).Int()
	return ret
}

// OffsetHeight returning attribute 'offsetHeight' with
// type int (idl: long).
func (_this *HTMLElement) OffsetHeight() int {
	var ret int
	value := _this.Value_JS.Get("offsetHeight")
	ret = (value).Int()
	return ret
}

// Style returning attribute 'style' with
// type cssom.CSSStyleDeclaration (idl: CSSStyleDeclaration).
func (_this *HTMLElement) Style() *cssom.CSSStyleDeclaration {
	var ret *cssom.CSSStyleDeclaration
	value := _this.Value_JS.Get("style")
	ret = cssom.CSSStyleDeclarationFromJS(value)
	return ret
}

// AttributeStyleMap returning attribute 'attributeStyleMap' with
// type typedom.StylePropertyMap (idl: StylePropertyMap).
func (_this *HTMLElement) AttributeStyleMap() *typedom.StylePropertyMap {
	var ret *typedom.StylePropertyMap
	value := _this.Value_JS.Get("attributeStyleMap")
	ret = typedom.StylePropertyMapFromJS(value)
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAuxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAuxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBlur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnBlur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCanPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlayThrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCanPlayThrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnClose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnContextMenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnContextMenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCueChange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCueChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDblClick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDblClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnd returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragExit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragExit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragLeave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragOver returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragStart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDragStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDurationChange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnDurationChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEmptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnEmptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEnded returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnEnded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *HTMLElement) OnError() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// OnFocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnFocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFormData returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnFormData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnInput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnInvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyDown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnKeyDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyPress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnKeyPress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyUp returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnKeyUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoad returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLoad() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedData returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLoadedData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedMetaData returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLoadedMetaData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadEnd returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLoadEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadStart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLoadStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseDown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseEnter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseLeave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseMove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOut returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOver returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseUp returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnMouseUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnWheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPlaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnProgress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnProgress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRateChange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnRateChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnReset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnReset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnResize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnResize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnScroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnScroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSecurityPolicyViolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSecurityPolicyViolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSeeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSeeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSelect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnStalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTimeUpdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTimeUpdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnToggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnToggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVolumeChange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnVolumeChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnWaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGotPointerCapture returning attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnGotPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongotpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLostPointerCapture returning attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnLostPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlostpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerDown returning attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerdown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerMove returning attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointermove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerUp returning attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerCancel returning attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointercancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOver returning attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOut returning attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerEnter returning attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerLeave returning attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPointerLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchStart returning attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTouchStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchEnd returning attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTouchEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchMove returning attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTouchMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchmove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchCancel returning attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTouchCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationStart returning attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAnimationStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationIteration returning attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAnimationIteration() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationiteration")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationEnd returning attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAnimationEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationCancel returning attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnAnimationCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionRun returning attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTransitionRun() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionrun")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionStart returning attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTransitionStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionEnd returning attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTransitionEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionCancel returning attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnTransitionCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitioncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectStart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSelectStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectionChange returning attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnSelectionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCopy returning attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCopy() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncopy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCut returning attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnCut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncut")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPaste returning attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLElement) OnPaste() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaste")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// ContentEditable returning attribute 'contentEditable' with
// type string (idl: DOMString).
func (_this *HTMLElement) ContentEditable() string {
	var ret string
	value := _this.Value_JS.Get("contentEditable")
	ret = (value).String()
	return ret
}

// SetContentEditable setting attribute 'contentEditable' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetContentEditable(value string) {
	input := value
	_this.Value_JS.Set("contentEditable", input)
}

// EnterKeyHint returning attribute 'enterKeyHint' with
// type string (idl: DOMString).
func (_this *HTMLElement) EnterKeyHint() string {
	var ret string
	value := _this.Value_JS.Get("enterKeyHint")
	ret = (value).String()
	return ret
}

// SetEnterKeyHint setting attribute 'enterKeyHint' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetEnterKeyHint(value string) {
	input := value
	_this.Value_JS.Set("enterKeyHint", input)
}

// IsContentEditable returning attribute 'isContentEditable' with
// type bool (idl: boolean).
func (_this *HTMLElement) IsContentEditable() bool {
	var ret bool
	value := _this.Value_JS.Get("isContentEditable")
	ret = (value).Bool()
	return ret
}

// InputMode returning attribute 'inputMode' with
// type string (idl: DOMString).
func (_this *HTMLElement) InputMode() string {
	var ret string
	value := _this.Value_JS.Get("inputMode")
	ret = (value).String()
	return ret
}

// SetInputMode setting attribute 'inputMode' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetInputMode(value string) {
	input := value
	_this.Value_JS.Set("inputMode", input)
}

// Dataset returning attribute 'dataset' with
// type domcore.DOMStringMap (idl: DOMStringMap).
func (_this *HTMLElement) Dataset() *domcore.DOMStringMap {
	var ret *domcore.DOMStringMap
	value := _this.Value_JS.Get("dataset")
	ret = domcore.DOMStringMapFromJS(value)
	return ret
}

// Nonce returning attribute 'nonce' with
// type string (idl: DOMString).
func (_this *HTMLElement) Nonce() string {
	var ret string
	value := _this.Value_JS.Get("nonce")
	ret = (value).String()
	return ret
}

// SetNonce setting attribute 'nonce' with
// type string (idl: DOMString).
func (_this *HTMLElement) SetNonce(value string) {
	input := value
	_this.Value_JS.Set("nonce", input)
}

// TabIndex returning attribute 'tabIndex' with
// type int (idl: long).
func (_this *HTMLElement) TabIndex() int {
	var ret int
	value := _this.Value_JS.Get("tabIndex")
	ret = (value).Int()
	return ret
}

// SetTabIndex setting attribute 'tabIndex' with
// type int (idl: long).
func (_this *HTMLElement) SetTabIndex(value int) {
	input := value
	_this.Value_JS.Set("tabIndex", input)
}

// event attribute: domcore.Event
func eventFuncHTMLElement_domcore_Event(listener func(event *domcore.Event, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAbort(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAbort(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// event attribute: animations.AnimationEvent
func eventFuncHTMLElement_animations_AnimationEvent(listener func(event *animations.AnimationEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *animations.AnimationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = animations.AnimationEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAnimationCancel is adding doing AddEventListener for 'AnimationCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationcancel", cb)
	return cb
}

// SetOnAnimationCancel is assigning a function to 'onanimationcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationcancel", cb)
	return cb
}

// AddAnimationEnd is adding doing AddEventListener for 'AnimationEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationend", cb)
	return cb
}

// SetOnAnimationEnd is assigning a function to 'onanimationend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationend", cb)
	return cb
}

// AddAnimationIteration is adding doing AddEventListener for 'AnimationIteration' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationiteration", cb)
	return cb
}

// SetOnAnimationIteration is assigning a function to 'onanimationiteration'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationiteration", cb)
	return cb
}

// AddAnimationStart is adding doing AddEventListener for 'AnimationStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationstart", cb)
	return cb
}

// SetOnAnimationStart is assigning a function to 'onanimationstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationstart", cb)
	return cb
}

// event attribute: htmlevent.MouseEvent
func eventFuncHTMLElement_htmlevent_MouseEvent(listener func(event *htmlevent.MouseEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.MouseEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.MouseEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAuxclick is adding doing AddEventListener for 'Auxclick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "auxclick", cb)
	return cb
}

// SetOnAuxclick is assigning a function to 'onauxclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onauxclick", cb)
	return cb
}

// event attribute: htmlevent.FocusEvent
func eventFuncHTMLElement_htmlevent_FocusEvent(listener func(event *htmlevent.FocusEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.FocusEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.FocusEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBlur is adding doing AddEventListener for 'Blur' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventBlur(listener func(event *htmlevent.FocusEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "blur", cb)
	return cb
}

// SetOnBlur is assigning a function to 'onblur'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnBlur(listener func(event *htmlevent.FocusEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onblur", cb)
	return cb
}

// AddCancel is adding doing AddEventListener for 'Cancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCancel(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cancel", cb)
	return cb
}

// SetOnCancel is assigning a function to 'oncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCancel(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("oncancel", cb)
	return cb
}

// AddCanPlay is adding doing AddEventListener for 'CanPlay' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCanPlay(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplay", cb)
	return cb
}

// SetOnCanPlay is assigning a function to 'oncanplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCanPlay(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("oncanplay", cb)
	return cb
}

// AddCanPlayThrough is adding doing AddEventListener for 'CanPlayThrough' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCanPlayThrough(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplaythrough", cb)
	return cb
}

// SetOnCanPlayThrough is assigning a function to 'oncanplaythrough'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCanPlayThrough(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("oncanplaythrough", cb)
	return cb
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

// AddClick is adding doing AddEventListener for 'Click' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventClick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "click", cb)
	return cb
}

// SetOnClick is assigning a function to 'onclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnClick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onclick", cb)
	return cb
}

// AddClose is adding doing AddEventListener for 'Close' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventClose(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "close", cb)
	return cb
}

// SetOnClose is assigning a function to 'onclose'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnClose(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onclose", cb)
	return cb
}

// AddContextMenu is adding doing AddEventListener for 'ContextMenu' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "contextmenu", cb)
	return cb
}

// SetOnContextMenu is assigning a function to 'oncontextmenu'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("oncontextmenu", cb)
	return cb
}

// event attribute: clipboard.ClipboardEvent
func eventFuncHTMLElement_clipboard_ClipboardEvent(listener func(event *clipboard.ClipboardEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *clipboard.ClipboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = clipboard.ClipboardEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCopy is adding doing AddEventListener for 'Copy' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "copy", cb)
	return cb
}

// SetOnCopy is assigning a function to 'oncopy'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncopy", cb)
	return cb
}

// AddCueChange is adding doing AddEventListener for 'CueChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCueChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cuechange", cb)
	return cb
}

// SetOnCueChange is assigning a function to 'oncuechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCueChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("oncuechange", cb)
	return cb
}

// AddCut is adding doing AddEventListener for 'Cut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventCut(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "cut", cb)
	return cb
}

// SetOnCut is assigning a function to 'oncut'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnCut(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncut", cb)
	return cb
}

// AddDblClick is adding doing AddEventListener for 'DblClick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "dblclick", cb)
	return cb
}

// SetOnDblClick is assigning a function to 'ondblclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("ondblclick", cb)
	return cb
}

// event attribute: htmlevent.DragEvent
func eventFuncHTMLElement_htmlevent_DragEvent(listener func(event *htmlevent.DragEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.DragEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.DragEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDrag is adding doing AddEventListener for 'Drag' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDrag(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drag", cb)
	return cb
}

// SetOnDrag is assigning a function to 'ondrag'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDrag(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrag", cb)
	return cb
}

// AddDragEnd is adding doing AddEventListener for 'DragEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragend", cb)
	return cb
}

// SetOnDragEnd is assigning a function to 'ondragend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragend", cb)
	return cb
}

// AddDragEnter is adding doing AddEventListener for 'DragEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragenter", cb)
	return cb
}

// SetOnDragEnter is assigning a function to 'ondragenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragenter", cb)
	return cb
}

// AddDragExit is adding doing AddEventListener for 'DragExit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragExit(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragexit", cb)
	return cb
}

// SetOnDragExit is assigning a function to 'ondragexit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragExit(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragexit", cb)
	return cb
}

// AddDragLeave is adding doing AddEventListener for 'DragLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragleave", cb)
	return cb
}

// SetOnDragLeave is assigning a function to 'ondragleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragleave", cb)
	return cb
}

// AddDragOver is adding doing AddEventListener for 'DragOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragOver(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragover", cb)
	return cb
}

// SetOnDragOver is assigning a function to 'ondragover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragOver(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragover", cb)
	return cb
}

// AddDragStart is adding doing AddEventListener for 'DragStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDragStart(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragstart", cb)
	return cb
}

// SetOnDragStart is assigning a function to 'ondragstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDragStart(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragstart", cb)
	return cb
}

// AddDrop is adding doing AddEventListener for 'Drop' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDrop(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drop", cb)
	return cb
}

// SetOnDrop is assigning a function to 'ondrop'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDrop(listener func(event *htmlevent.DragEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrop", cb)
	return cb
}

// AddDurationChange is adding doing AddEventListener for 'DurationChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventDurationChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "durationchange", cb)
	return cb
}

// SetOnDurationChange is assigning a function to 'ondurationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnDurationChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("ondurationchange", cb)
	return cb
}

// AddEmptied is adding doing AddEventListener for 'Emptied' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventEmptied(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "emptied", cb)
	return cb
}

// SetOnEmptied is assigning a function to 'onemptied'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnEmptied(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onemptied", cb)
	return cb
}

// AddEnded is adding doing AddEventListener for 'Ended' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventEnded(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ended", cb)
	return cb
}

// SetOnEnded is assigning a function to 'onended'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnEnded(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onended", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventError(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnError(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddFocus is adding doing AddEventListener for 'Focus' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventFocus(listener func(event *htmlevent.FocusEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "focus", cb)
	return cb
}

// SetOnFocus is assigning a function to 'onfocus'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnFocus(listener func(event *htmlevent.FocusEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onfocus", cb)
	return cb
}

// event attribute: FormDataEvent
func eventFuncHTMLElement_FormDataEvent(listener func(event *FormDataEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *FormDataEvent
		value := args[0]
		incoming := value.Get("target")
		ret = FormDataEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFormData is adding doing AddEventListener for 'FormData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventFormData(listener func(event *FormDataEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_FormDataEvent(listener)
	_this.Value_JS.Call("addEventListener", "formdata", cb)
	return cb
}

// SetOnFormData is assigning a function to 'onformdata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnFormData(listener func(event *FormDataEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_FormDataEvent(listener)
	_this.Value_JS.Set("onformdata", cb)
	return cb
}

// event attribute: htmlevent.PointerEvent
func eventFuncHTMLElement_htmlevent_PointerEvent(listener func(event *htmlevent.PointerEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PointerEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PointerEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddGotPointerCapture is adding doing AddEventListener for 'GotPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "gotpointercapture", cb)
	return cb
}

// SetOnGotPointerCapture is assigning a function to 'ongotpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("ongotpointercapture", cb)
	return cb
}

// event attribute: htmlevent.InputEvent
func eventFuncHTMLElement_htmlevent_InputEvent(listener func(event *htmlevent.InputEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.InputEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.InputEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddInput is adding doing AddEventListener for 'Input' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventInput(listener func(event *htmlevent.InputEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_InputEvent(listener)
	_this.Value_JS.Call("addEventListener", "input", cb)
	return cb
}

// SetOnInput is assigning a function to 'oninput'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnInput(listener func(event *htmlevent.InputEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_InputEvent(listener)
	_this.Value_JS.Set("oninput", cb)
	return cb
}

// AddInvalid is adding doing AddEventListener for 'Invalid' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventInvalid(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "invalid", cb)
	return cb
}

// SetOnInvalid is assigning a function to 'oninvalid'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnInvalid(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("oninvalid", cb)
	return cb
}

// event attribute: htmlevent.KeyboardEvent
func eventFuncHTMLElement_htmlevent_KeyboardEvent(listener func(event *htmlevent.KeyboardEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.KeyboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.KeyboardEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddKeyDown is adding doing AddEventListener for 'KeyDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keydown", cb)
	return cb
}

// SetOnKeyDown is assigning a function to 'onkeydown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeydown", cb)
	return cb
}

// AddKeyPress is adding doing AddEventListener for 'KeyPress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keypress", cb)
	return cb
}

// SetOnKeyPress is assigning a function to 'onkeypress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeypress", cb)
	return cb
}

// AddKeyUp is adding doing AddEventListener for 'KeyUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keyup", cb)
	return cb
}

// SetOnKeyUp is assigning a function to 'onkeyup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeyup", cb)
	return cb
}

// AddLoad is adding doing AddEventListener for 'Load' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLoad(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "load", cb)
	return cb
}

// SetOnLoad is assigning a function to 'onload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLoad(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onload", cb)
	return cb
}

// AddLoadedData is adding doing AddEventListener for 'LoadedData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLoadedData(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadeddata", cb)
	return cb
}

// SetOnLoadedData is assigning a function to 'onloadeddata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLoadedData(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadeddata", cb)
	return cb
}

// AddLoadedMetaData is adding doing AddEventListener for 'LoadedMetaData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLoadedMetaData(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadedmetadata", cb)
	return cb
}

// SetOnLoadedMetaData is assigning a function to 'onloadedmetadata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLoadedMetaData(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadedmetadata", cb)
	return cb
}

// event attribute: xhr.ProgressEvent
func eventFuncHTMLElement_xhr_ProgressEvent(listener func(event *xhr.ProgressEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *xhr.ProgressEvent
		value := args[0]
		incoming := value.Get("target")
		ret = xhr.ProgressEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddLoadEnd is adding doing AddEventListener for 'LoadEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadend", cb)
	return cb
}

// SetOnLoadEnd is assigning a function to 'onloadend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onloadend", cb)
	return cb
}

// AddLoadStart is adding doing AddEventListener for 'LoadStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLoadStart(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadstart", cb)
	return cb
}

// SetOnLoadStart is assigning a function to 'onloadstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLoadStart(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadstart", cb)
	return cb
}

// AddLostPointerCapture is adding doing AddEventListener for 'LostPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "lostpointercapture", cb)
	return cb
}

// SetOnLostPointerCapture is assigning a function to 'onlostpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onlostpointercapture", cb)
	return cb
}

// AddMouseDown is adding doing AddEventListener for 'MouseDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousedown", cb)
	return cb
}

// SetOnMouseDown is assigning a function to 'onmousedown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousedown", cb)
	return cb
}

// AddMouseEnter is adding doing AddEventListener for 'MouseEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseenter", cb)
	return cb
}

// SetOnMouseEnter is assigning a function to 'onmouseenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseenter", cb)
	return cb
}

// AddMouseLeave is adding doing AddEventListener for 'MouseLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseleave", cb)
	return cb
}

// SetOnMouseLeave is assigning a function to 'onmouseleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseleave", cb)
	return cb
}

// AddMouseMove is adding doing AddEventListener for 'MouseMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousemove", cb)
	return cb
}

// SetOnMouseMove is assigning a function to 'onmousemove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousemove", cb)
	return cb
}

// AddMouseOut is adding doing AddEventListener for 'MouseOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseout", cb)
	return cb
}

// SetOnMouseOut is assigning a function to 'onmouseout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseout", cb)
	return cb
}

// AddMouseOver is adding doing AddEventListener for 'MouseOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseover", cb)
	return cb
}

// SetOnMouseOver is assigning a function to 'onmouseover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseover", cb)
	return cb
}

// AddMouseUp is adding doing AddEventListener for 'MouseUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseup", cb)
	return cb
}

// SetOnMouseUp is assigning a function to 'onmouseup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseup", cb)
	return cb
}

// AddPaste is adding doing AddEventListener for 'Paste' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "paste", cb)
	return cb
}

// SetOnPaste is assigning a function to 'onpaste'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("onpaste", cb)
	return cb
}

// AddPause is adding doing AddEventListener for 'Pause' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPause(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pause", cb)
	return cb
}

// SetOnPause is assigning a function to 'onpause'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPause(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onpause", cb)
	return cb
}

// AddPlay is adding doing AddEventListener for 'Play' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPlay(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "play", cb)
	return cb
}

// SetOnPlay is assigning a function to 'onplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPlay(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onplay", cb)
	return cb
}

// AddPlaying is adding doing AddEventListener for 'Playing' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPlaying(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "playing", cb)
	return cb
}

// SetOnPlaying is assigning a function to 'onplaying'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPlaying(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onplaying", cb)
	return cb
}

// AddPointerCancel is adding doing AddEventListener for 'PointerCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointercancel", cb)
	return cb
}

// SetOnPointerCancel is assigning a function to 'onpointercancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointercancel", cb)
	return cb
}

// AddPointerDown is adding doing AddEventListener for 'PointerDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerdown", cb)
	return cb
}

// SetOnPointerDown is assigning a function to 'onpointerdown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerdown", cb)
	return cb
}

// AddPointerEnter is adding doing AddEventListener for 'PointerEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerenter", cb)
	return cb
}

// SetOnPointerEnter is assigning a function to 'onpointerenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerenter", cb)
	return cb
}

// AddPointerLeave is adding doing AddEventListener for 'PointerLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerleave", cb)
	return cb
}

// SetOnPointerLeave is assigning a function to 'onpointerleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerleave", cb)
	return cb
}

// AddPointerMove is adding doing AddEventListener for 'PointerMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointermove", cb)
	return cb
}

// SetOnPointerMove is assigning a function to 'onpointermove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointermove", cb)
	return cb
}

// AddPointerOut is adding doing AddEventListener for 'PointerOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerout", cb)
	return cb
}

// SetOnPointerOut is assigning a function to 'onpointerout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerout", cb)
	return cb
}

// AddPointerOver is adding doing AddEventListener for 'PointerOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerover", cb)
	return cb
}

// SetOnPointerOver is assigning a function to 'onpointerover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerover", cb)
	return cb
}

// AddPointerUp is adding doing AddEventListener for 'PointerUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerup", cb)
	return cb
}

// SetOnPointerUp is assigning a function to 'onpointerup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerup", cb)
	return cb
}

// AddProgress is adding doing AddEventListener for 'Progress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventProgress(listener func(event *xhr.ProgressEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "progress", cb)
	return cb
}

// SetOnProgress is assigning a function to 'onprogress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnProgress(listener func(event *xhr.ProgressEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onprogress", cb)
	return cb
}

// AddRateChange is adding doing AddEventListener for 'RateChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventRateChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ratechange", cb)
	return cb
}

// SetOnRateChange is assigning a function to 'onratechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnRateChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onratechange", cb)
	return cb
}

// AddReset is adding doing AddEventListener for 'Reset' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventReset(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "reset", cb)
	return cb
}

// SetOnReset is assigning a function to 'onreset'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnReset(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onreset", cb)
	return cb
}

// event attribute: htmlevent.UIEvent
func eventFuncHTMLElement_htmlevent_UIEvent(listener func(event *htmlevent.UIEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.UIEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.UIEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddResize is adding doing AddEventListener for 'Resize' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventResize(listener func(event *htmlevent.UIEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_UIEvent(listener)
	_this.Value_JS.Call("addEventListener", "resize", cb)
	return cb
}

// SetOnResize is assigning a function to 'onresize'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnResize(listener func(event *htmlevent.UIEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_UIEvent(listener)
	_this.Value_JS.Set("onresize", cb)
	return cb
}

// AddScroll is adding doing AddEventListener for 'Scroll' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventScroll(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "scroll", cb)
	return cb
}

// SetOnScroll is assigning a function to 'onscroll'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnScroll(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onscroll", cb)
	return cb
}

// event attribute: csp.SecurityPolicyViolationEvent
func eventFuncHTMLElement_csp_SecurityPolicyViolationEvent(listener func(event *csp.SecurityPolicyViolationEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *csp.SecurityPolicyViolationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = csp.SecurityPolicyViolationEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddSecurityPolicyViolation is adding doing AddEventListener for 'SecurityPolicyViolation' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Call("addEventListener", "securitypolicyviolation", cb)
	return cb
}

// SetOnSecurityPolicyViolation is assigning a function to 'onsecuritypolicyviolation'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Set("onsecuritypolicyviolation", cb)
	return cb
}

// AddSeeked is adding doing AddEventListener for 'Seeked' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSeeked(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeked", cb)
	return cb
}

// SetOnSeeked is assigning a function to 'onseeked'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSeeked(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onseeked", cb)
	return cb
}

// AddSeeking is adding doing AddEventListener for 'Seeking' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSeeking(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeking", cb)
	return cb
}

// SetOnSeeking is assigning a function to 'onseeking'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSeeking(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onseeking", cb)
	return cb
}

// AddSelect is adding doing AddEventListener for 'Select' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSelect(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "select", cb)
	return cb
}

// SetOnSelect is assigning a function to 'onselect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSelect(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onselect", cb)
	return cb
}

// AddSelectionChange is adding doing AddEventListener for 'SelectionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSelectionChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectionchange", cb)
	return cb
}

// SetOnSelectionChange is assigning a function to 'onselectionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSelectionChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onselectionchange", cb)
	return cb
}

// AddSelectStart is adding doing AddEventListener for 'SelectStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSelectStart(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectstart", cb)
	return cb
}

// SetOnSelectStart is assigning a function to 'onselectstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSelectStart(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onselectstart", cb)
	return cb
}

// AddStalled is adding doing AddEventListener for 'Stalled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventStalled(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "stalled", cb)
	return cb
}

// SetOnStalled is assigning a function to 'onstalled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnStalled(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onstalled", cb)
	return cb
}

// AddSubmit is adding doing AddEventListener for 'Submit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSubmit(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "submit", cb)
	return cb
}

// SetOnSubmit is assigning a function to 'onsubmit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSubmit(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onsubmit", cb)
	return cb
}

// AddSuspend is adding doing AddEventListener for 'Suspend' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventSuspend(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "suspend", cb)
	return cb
}

// SetOnSuspend is assigning a function to 'onsuspend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnSuspend(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onsuspend", cb)
	return cb
}

// AddTimeUpdate is adding doing AddEventListener for 'TimeUpdate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTimeUpdate(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "timeupdate", cb)
	return cb
}

// SetOnTimeUpdate is assigning a function to 'ontimeupdate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTimeUpdate(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("ontimeupdate", cb)
	return cb
}

// AddToggle is adding doing AddEventListener for 'Toggle' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventToggle(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "toggle", cb)
	return cb
}

// SetOnToggle is assigning a function to 'ontoggle'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnToggle(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("ontoggle", cb)
	return cb
}

// event attribute: touchevents.TouchEvent
func eventFuncHTMLElement_touchevents_TouchEvent(listener func(event *touchevents.TouchEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *touchevents.TouchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = touchevents.TouchEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTouchCancel is adding doing AddEventListener for 'TouchCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchcancel", cb)
	return cb
}

// SetOnTouchCancel is assigning a function to 'ontouchcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchcancel", cb)
	return cb
}

// AddTouchEnd is adding doing AddEventListener for 'TouchEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchend", cb)
	return cb
}

// SetOnTouchEnd is assigning a function to 'ontouchend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchend", cb)
	return cb
}

// AddTouchMove is adding doing AddEventListener for 'TouchMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchmove", cb)
	return cb
}

// SetOnTouchMove is assigning a function to 'ontouchmove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchmove", cb)
	return cb
}

// AddTouchStart is adding doing AddEventListener for 'TouchStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchstart", cb)
	return cb
}

// SetOnTouchStart is assigning a function to 'ontouchstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchstart", cb)
	return cb
}

// event attribute: transitions.TransitionEvent
func eventFuncHTMLElement_transitions_TransitionEvent(listener func(event *transitions.TransitionEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *transitions.TransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = transitions.TransitionEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTransitionCancel is adding doing AddEventListener for 'TransitionCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitioncancel", cb)
	return cb
}

// SetOnTransitionCancel is assigning a function to 'ontransitioncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitioncancel", cb)
	return cb
}

// AddTransitionEnd is adding doing AddEventListener for 'TransitionEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionend", cb)
	return cb
}

// SetOnTransitionEnd is assigning a function to 'ontransitionend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionend", cb)
	return cb
}

// AddTransitionRun is adding doing AddEventListener for 'TransitionRun' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionrun", cb)
	return cb
}

// SetOnTransitionRun is assigning a function to 'ontransitionrun'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionrun", cb)
	return cb
}

// AddTransitionStart is adding doing AddEventListener for 'TransitionStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionstart", cb)
	return cb
}

// SetOnTransitionStart is assigning a function to 'ontransitionstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionstart", cb)
	return cb
}

// AddVolumeChange is adding doing AddEventListener for 'VolumeChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventVolumeChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "volumechange", cb)
	return cb
}

// SetOnVolumeChange is assigning a function to 'onvolumechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnVolumeChange(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onvolumechange", cb)
	return cb
}

// AddWaiting is adding doing AddEventListener for 'Waiting' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventWaiting(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "waiting", cb)
	return cb
}

// SetOnWaiting is assigning a function to 'onwaiting'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnWaiting(listener func(event *domcore.Event, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_domcore_Event(listener)
	_this.Value_JS.Set("onwaiting", cb)
	return cb
}

// event attribute: htmlevent.WheelEvent
func eventFuncHTMLElement_htmlevent_WheelEvent(listener func(event *htmlevent.WheelEvent, target *HTMLElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.WheelEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.WheelEventFromJS(value)
		src := HTMLElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddWheel is adding doing AddEventListener for 'Wheel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) AddEventWheel(listener func(event *htmlevent.WheelEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_WheelEvent(listener)
	_this.Value_JS.Call("addEventListener", "wheel", cb)
	return cb
}

// SetOnWheel is assigning a function to 'onwheel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLElement) SetOnWheel(listener func(event *htmlevent.WheelEvent, currentTarget *HTMLElement)) js.Func {
	cb := eventFuncHTMLElement_htmlevent_WheelEvent(listener)
	_this.Value_JS.Set("onwheel", cb)
	return cb
}

func (_this *HTMLElement) Click() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("click", _args[0:_end]...)
	return
}

func (_this *HTMLElement) Focus(options *FocusOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("focus", _args[0:_end]...)
	return
}

func (_this *HTMLElement) Blur() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("blur", _args[0:_end]...)
	return
}

// class: HTMLFieldSetElement
type HTMLFieldSetElement struct {
	HTMLElement
}

// HTMLFieldSetElementFromJS is casting a js.Value into HTMLFieldSetElement.
func HTMLFieldSetElementFromJS(value js.Value) *HTMLFieldSetElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFieldSetElement{}
	ret.Value_JS = value
	return ret
}

// HTMLFieldSetElementFromJS is casting from something that holds a js.Value into HTMLFieldSetElement.
func HTMLFieldSetElementFromWrapper(input core.Wrapper) *HTMLFieldSetElement {
	return HTMLFieldSetElementFromJS(input.JSValue())
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLFieldSetElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLFieldSetElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLFieldSetElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFieldSetElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFieldSetElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLFieldSetElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// Elements returning attribute 'elements' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLFieldSetElement) Elements() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("elements")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLFieldSetElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLFieldSetElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLFieldSetElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

func (_this *HTMLFieldSetElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLFieldSetElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLFieldSetElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// class: HTMLFontElement
type HTMLFontElement struct {
	HTMLElement
}

// HTMLFontElementFromJS is casting a js.Value into HTMLFontElement.
func HTMLFontElementFromJS(value js.Value) *HTMLFontElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFontElement{}
	ret.Value_JS = value
	return ret
}

// HTMLFontElementFromJS is casting from something that holds a js.Value into HTMLFontElement.
func HTMLFontElementFromWrapper(input core.Wrapper) *HTMLFontElement {
	return HTMLFontElementFromJS(input.JSValue())
}

// Color returning attribute 'color' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) Color() string {
	var ret string
	value := _this.Value_JS.Get("color")
	ret = (value).String()
	return ret
}

// SetColor setting attribute 'color' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) SetColor(value string) {
	input := value
	_this.Value_JS.Set("color", input)
}

// Face returning attribute 'face' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) Face() string {
	var ret string
	value := _this.Value_JS.Get("face")
	ret = (value).String()
	return ret
}

// SetFace setting attribute 'face' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) SetFace(value string) {
	input := value
	_this.Value_JS.Set("face", input)
}

// Size returning attribute 'size' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) Size() string {
	var ret string
	value := _this.Value_JS.Get("size")
	ret = (value).String()
	return ret
}

// SetSize setting attribute 'size' with
// type string (idl: DOMString).
func (_this *HTMLFontElement) SetSize(value string) {
	input := value
	_this.Value_JS.Set("size", input)
}

// class: HTMLFormControlsCollection
type HTMLFormControlsCollection struct {
	dom.HTMLCollection
}

// HTMLFormControlsCollectionFromJS is casting a js.Value into HTMLFormControlsCollection.
func HTMLFormControlsCollectionFromJS(value js.Value) *HTMLFormControlsCollection {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFormControlsCollection{}
	ret.Value_JS = value
	return ret
}

// HTMLFormControlsCollectionFromJS is casting from something that holds a js.Value into HTMLFormControlsCollection.
func HTMLFormControlsCollectionFromWrapper(input core.Wrapper) *HTMLFormControlsCollection {
	return HTMLFormControlsCollectionFromJS(input.JSValue())
}

func (_this *HTMLFormControlsCollection) Get2(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLFormControlsCollection) NamedItem2(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = UnionFromJS(_returned)
	}
	_result = _converted
	return
}

// class: HTMLFormElement
type HTMLFormElement struct {
	HTMLElement
}

// HTMLFormElementFromJS is casting a js.Value into HTMLFormElement.
func HTMLFormElementFromJS(value js.Value) *HTMLFormElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFormElement{}
	ret.Value_JS = value
	return ret
}

// HTMLFormElementFromJS is casting from something that holds a js.Value into HTMLFormElement.
func HTMLFormElementFromWrapper(input core.Wrapper) *HTMLFormElement {
	return HTMLFormElementFromJS(input.JSValue())
}

// AcceptCharset returning attribute 'acceptCharset' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) AcceptCharset() string {
	var ret string
	value := _this.Value_JS.Get("acceptCharset")
	ret = (value).String()
	return ret
}

// SetAcceptCharset setting attribute 'acceptCharset' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetAcceptCharset(value string) {
	input := value
	_this.Value_JS.Set("acceptCharset", input)
}

// Action returning attribute 'action' with
// type string (idl: USVString).
func (_this *HTMLFormElement) Action() string {
	var ret string
	value := _this.Value_JS.Get("action")
	ret = (value).String()
	return ret
}

// SetAction setting attribute 'action' with
// type string (idl: USVString).
func (_this *HTMLFormElement) SetAction(value string) {
	input := value
	_this.Value_JS.Set("action", input)
}

// Autocomplete returning attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Autocomplete() string {
	var ret string
	value := _this.Value_JS.Get("autocomplete")
	ret = (value).String()
	return ret
}

// SetAutocomplete setting attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetAutocomplete(value string) {
	input := value
	_this.Value_JS.Set("autocomplete", input)
}

// Enctype returning attribute 'enctype' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Enctype() string {
	var ret string
	value := _this.Value_JS.Get("enctype")
	ret = (value).String()
	return ret
}

// SetEnctype setting attribute 'enctype' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetEnctype(value string) {
	input := value
	_this.Value_JS.Set("enctype", input)
}

// Encoding returning attribute 'encoding' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Encoding() string {
	var ret string
	value := _this.Value_JS.Get("encoding")
	ret = (value).String()
	return ret
}

// SetEncoding setting attribute 'encoding' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetEncoding(value string) {
	input := value
	_this.Value_JS.Set("encoding", input)
}

// Method returning attribute 'method' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Method() string {
	var ret string
	value := _this.Value_JS.Get("method")
	ret = (value).String()
	return ret
}

// SetMethod setting attribute 'method' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetMethod(value string) {
	input := value
	_this.Value_JS.Set("method", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// NoValidate returning attribute 'noValidate' with
// type bool (idl: boolean).
func (_this *HTMLFormElement) NoValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("noValidate")
	ret = (value).Bool()
	return ret
}

// SetNoValidate setting attribute 'noValidate' with
// type bool (idl: boolean).
func (_this *HTMLFormElement) SetNoValidate(value bool) {
	input := value
	_this.Value_JS.Set("noValidate", input)
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// SetTarget setting attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetTarget(value string) {
	input := value
	_this.Value_JS.Set("target", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLFormElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLFormElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Elements returning attribute 'elements' with
// type HTMLFormControlsCollection (idl: HTMLFormControlsCollection).
func (_this *HTMLFormElement) Elements() *HTMLFormControlsCollection {
	var ret *HTMLFormControlsCollection
	value := _this.Value_JS.Get("elements")
	ret = HTMLFormControlsCollectionFromJS(value)
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLFormElement) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *HTMLFormElement) Index(index uint) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLFormElement) Get(name string) (_result *Union) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("", _args[0:_end]...)
	var (
		_converted *Union // javascript: Union _what_return_name
	)
	_converted = UnionFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLFormElement) Submit() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("submit", _args[0:_end]...)
	return
}

func (_this *HTMLFormElement) Reset() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("reset", _args[0:_end]...)
	return
}

func (_this *HTMLFormElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLFormElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: HTMLFrameSetElement
type HTMLFrameSetElement struct {
	HTMLElement
}

// HTMLFrameSetElementFromJS is casting a js.Value into HTMLFrameSetElement.
func HTMLFrameSetElementFromJS(value js.Value) *HTMLFrameSetElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLFrameSetElement{}
	ret.Value_JS = value
	return ret
}

// HTMLFrameSetElementFromJS is casting from something that holds a js.Value into HTMLFrameSetElement.
func HTMLFrameSetElementFromWrapper(input core.Wrapper) *HTMLFrameSetElement {
	return HTMLFrameSetElementFromJS(input.JSValue())
}

// Cols returning attribute 'cols' with
// type string (idl: DOMString).
func (_this *HTMLFrameSetElement) Cols() string {
	var ret string
	value := _this.Value_JS.Get("cols")
	ret = (value).String()
	return ret
}

// SetCols setting attribute 'cols' with
// type string (idl: DOMString).
func (_this *HTMLFrameSetElement) SetCols(value string) {
	input := value
	_this.Value_JS.Set("cols", input)
}

// Rows returning attribute 'rows' with
// type string (idl: DOMString).
func (_this *HTMLFrameSetElement) Rows() string {
	var ret string
	value := _this.Value_JS.Get("rows")
	ret = (value).String()
	return ret
}

// SetRows setting attribute 'rows' with
// type string (idl: DOMString).
func (_this *HTMLFrameSetElement) SetRows(value string) {
	input := value
	_this.Value_JS.Set("rows", input)
}

// OnAfterPrint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnAfterPrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforePrint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnBeforePrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforeUnload returning attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnBeforeUnload() htmlcommon.OnBeforeUnloadEventHandlerFunc {
	var ret htmlcommon.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// OnHashChange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnHashChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLanguageChange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnLanguageChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnOffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOnline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnOnline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageHide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnPageHide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageShow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnPageShow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPopState returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnPopState() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRejectionHandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnRejectionHandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnStorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnhandledRejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnUnhandledRejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLFrameSetElement) OnUnload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncHTMLFrameSetElement_domcore_Event(listener func(event *domcore.Event, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAfterPrint is adding doing AddEventListener for 'AfterPrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventAfterPrint(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "afterprint", cb)
	return cb
}

// SetOnAfterPrint is assigning a function to 'onafterprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnAfterPrint(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("onafterprint", cb)
	return cb
}

// AddBeforePrint is adding doing AddEventListener for 'BeforePrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventBeforePrint(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "beforeprint", cb)
	return cb
}

// SetOnBeforePrint is assigning a function to 'onbeforeprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnBeforePrint(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("onbeforeprint", cb)
	return cb
}

// event attribute: htmlcommon.BeforeUnloadEvent
func eventFuncHTMLFrameSetElement_htmlcommon_BeforeUnloadEvent(listener func(event *htmlcommon.BeforeUnloadEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlcommon.BeforeUnloadEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlcommon.BeforeUnloadEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBeforeUnload is adding doing AddEventListener for 'BeforeUnload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Call("addEventListener", "beforeunload", cb)
	return cb
}

// SetOnBeforeUnload is assigning a function to 'onbeforeunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Set("onbeforeunload", cb)
	return cb
}

// event attribute: htmlevent.HashChangeEvent
func eventFuncHTMLFrameSetElement_htmlevent_HashChangeEvent(listener func(event *htmlevent.HashChangeEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.HashChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.HashChangeEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddHashChange is adding doing AddEventListener for 'HashChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "hashchange", cb)
	return cb
}

// SetOnHashChange is assigning a function to 'onhashchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Set("onhashchange", cb)
	return cb
}

// AddLanguageChange is adding doing AddEventListener for 'LanguageChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventLanguageChange(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "languagechange", cb)
	return cb
}

// SetOnLanguageChange is assigning a function to 'onlanguagechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnLanguageChange(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("onlanguagechange", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncHTMLFrameSetElement_channel_MessageEvent(listener func(event *channel.MessageEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

// AddOffline is adding doing AddEventListener for 'Offline' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventOffline(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "offline", cb)
	return cb
}

// SetOnOffline is assigning a function to 'onoffline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnOffline(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("onoffline", cb)
	return cb
}

// AddOnline is adding doing AddEventListener for 'Online' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventOnline(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "online", cb)
	return cb
}

// SetOnOnline is assigning a function to 'ononline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnOnline(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("ononline", cb)
	return cb
}

// event attribute: htmlevent.PageTransitionEvent
func eventFuncHTMLFrameSetElement_htmlevent_PageTransitionEvent(listener func(event *htmlevent.PageTransitionEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PageTransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PageTransitionEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPageHide is adding doing AddEventListener for 'PageHide' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pagehide", cb)
	return cb
}

// SetOnPageHide is assigning a function to 'onpagehide'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpagehide", cb)
	return cb
}

// AddPageShow is adding doing AddEventListener for 'PageShow' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pageshow", cb)
	return cb
}

// SetOnPageShow is assigning a function to 'onpageshow'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpageshow", cb)
	return cb
}

// event attribute: htmlevent.PopStateEvent
func eventFuncHTMLFrameSetElement_htmlevent_PopStateEvent(listener func(event *htmlevent.PopStateEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PopStateEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PopStateEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPopState is adding doing AddEventListener for 'PopState' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Call("addEventListener", "popstate", cb)
	return cb
}

// SetOnPopState is assigning a function to 'onpopstate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Set("onpopstate", cb)
	return cb
}

// event attribute: htmlevent.PromiseRejectionEvent
func eventFuncHTMLFrameSetElement_htmlevent_PromiseRejectionEvent(listener func(event *htmlevent.PromiseRejectionEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PromiseRejectionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PromiseRejectionEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddRejectionHandled is adding doing AddEventListener for 'RejectionHandled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "rejectionhandled", cb)
	return cb
}

// SetOnRejectionHandled is assigning a function to 'onrejectionhandled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onrejectionhandled", cb)
	return cb
}

// event attribute: htmlevent.StorageEvent
func eventFuncHTMLFrameSetElement_htmlevent_StorageEvent(listener func(event *htmlevent.StorageEvent, target *HTMLFrameSetElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.StorageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.StorageEventFromJS(value)
		src := HTMLFrameSetElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddStorage is adding doing AddEventListener for 'Storage' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventStorage(listener func(event *htmlevent.StorageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Call("addEventListener", "storage", cb)
	return cb
}

// SetOnStorage is assigning a function to 'onstorage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnStorage(listener func(event *htmlevent.StorageEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Set("onstorage", cb)
	return cb
}

// AddUnhandledRejection is adding doing AddEventListener for 'UnhandledRejection' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "unhandledrejection", cb)
	return cb
}

// SetOnUnhandledRejection is assigning a function to 'onunhandledrejection'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onunhandledrejection", cb)
	return cb
}

// AddUnload is adding doing AddEventListener for 'Unload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) AddEventUnload(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "unload", cb)
	return cb
}

// SetOnUnload is assigning a function to 'onunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLFrameSetElement) SetOnUnload(listener func(event *domcore.Event, currentTarget *HTMLFrameSetElement)) js.Func {
	cb := eventFuncHTMLFrameSetElement_domcore_Event(listener)
	_this.Value_JS.Set("onunload", cb)
	return cb
}

// class: HTMLHRElement
type HTMLHRElement struct {
	HTMLElement
}

// HTMLHRElementFromJS is casting a js.Value into HTMLHRElement.
func HTMLHRElementFromJS(value js.Value) *HTMLHRElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLHRElement{}
	ret.Value_JS = value
	return ret
}

// HTMLHRElementFromJS is casting from something that holds a js.Value into HTMLHRElement.
func HTMLHRElementFromWrapper(input core.Wrapper) *HTMLHRElement {
	return HTMLHRElementFromJS(input.JSValue())
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Color returning attribute 'color' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) Color() string {
	var ret string
	value := _this.Value_JS.Get("color")
	ret = (value).String()
	return ret
}

// SetColor setting attribute 'color' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) SetColor(value string) {
	input := value
	_this.Value_JS.Set("color", input)
}

// NoShade returning attribute 'noShade' with
// type bool (idl: boolean).
func (_this *HTMLHRElement) NoShade() bool {
	var ret bool
	value := _this.Value_JS.Get("noShade")
	ret = (value).Bool()
	return ret
}

// SetNoShade setting attribute 'noShade' with
// type bool (idl: boolean).
func (_this *HTMLHRElement) SetNoShade(value bool) {
	input := value
	_this.Value_JS.Set("noShade", input)
}

// Size returning attribute 'size' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) Size() string {
	var ret string
	value := _this.Value_JS.Get("size")
	ret = (value).String()
	return ret
}

// SetSize setting attribute 'size' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) SetSize(value string) {
	input := value
	_this.Value_JS.Set("size", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLHRElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// class: HTMLHeadElement
type HTMLHeadElement struct {
	HTMLElement
}

// HTMLHeadElementFromJS is casting a js.Value into HTMLHeadElement.
func HTMLHeadElementFromJS(value js.Value) *HTMLHeadElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLHeadElement{}
	ret.Value_JS = value
	return ret
}

// HTMLHeadElementFromJS is casting from something that holds a js.Value into HTMLHeadElement.
func HTMLHeadElementFromWrapper(input core.Wrapper) *HTMLHeadElement {
	return HTMLHeadElementFromJS(input.JSValue())
}

// class: HTMLHeadingElement
type HTMLHeadingElement struct {
	HTMLElement
}

// HTMLHeadingElementFromJS is casting a js.Value into HTMLHeadingElement.
func HTMLHeadingElementFromJS(value js.Value) *HTMLHeadingElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLHeadingElement{}
	ret.Value_JS = value
	return ret
}

// HTMLHeadingElementFromJS is casting from something that holds a js.Value into HTMLHeadingElement.
func HTMLHeadingElementFromWrapper(input core.Wrapper) *HTMLHeadingElement {
	return HTMLHeadingElementFromJS(input.JSValue())
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLHeadingElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLHeadingElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// class: HTMLHtmlElement
type HTMLHtmlElement struct {
	HTMLElement
}

// HTMLHtmlElementFromJS is casting a js.Value into HTMLHtmlElement.
func HTMLHtmlElementFromJS(value js.Value) *HTMLHtmlElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLHtmlElement{}
	ret.Value_JS = value
	return ret
}

// HTMLHtmlElementFromJS is casting from something that holds a js.Value into HTMLHtmlElement.
func HTMLHtmlElementFromWrapper(input core.Wrapper) *HTMLHtmlElement {
	return HTMLHtmlElementFromJS(input.JSValue())
}

// Version returning attribute 'version' with
// type string (idl: DOMString).
func (_this *HTMLHtmlElement) Version() string {
	var ret string
	value := _this.Value_JS.Get("version")
	ret = (value).String()
	return ret
}

// SetVersion setting attribute 'version' with
// type string (idl: DOMString).
func (_this *HTMLHtmlElement) SetVersion(value string) {
	input := value
	_this.Value_JS.Set("version", input)
}

// class: HTMLImageElement
type HTMLImageElement struct {
	HTMLElement
}

// HTMLImageElementFromJS is casting a js.Value into HTMLImageElement.
func HTMLImageElementFromJS(value js.Value) *HTMLImageElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLImageElement{}
	ret.Value_JS = value
	return ret
}

// HTMLImageElementFromJS is casting from something that holds a js.Value into HTMLImageElement.
func HTMLImageElementFromWrapper(input core.Wrapper) *HTMLImageElement {
	return HTMLImageElementFromJS(input.JSValue())
}

// Alt returning attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Alt() string {
	var ret string
	value := _this.Value_JS.Get("alt")
	ret = (value).String()
	return ret
}

// SetAlt setting attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetAlt(value string) {
	input := value
	_this.Value_JS.Set("alt", input)
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLImageElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLImageElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Srcset returning attribute 'srcset' with
// type string (idl: USVString).
func (_this *HTMLImageElement) Srcset() string {
	var ret string
	value := _this.Value_JS.Get("srcset")
	ret = (value).String()
	return ret
}

// SetSrcset setting attribute 'srcset' with
// type string (idl: USVString).
func (_this *HTMLImageElement) SetSrcset(value string) {
	input := value
	_this.Value_JS.Set("srcset", input)
}

// Sizes returning attribute 'sizes' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Sizes() string {
	var ret string
	value := _this.Value_JS.Get("sizes")
	ret = (value).String()
	return ret
}

// SetSizes setting attribute 'sizes' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetSizes(value string) {
	input := value
	_this.Value_JS.Set("sizes", input)
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetCrossOrigin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("crossOrigin", input)
}

// UseMap returning attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) UseMap() string {
	var ret string
	value := _this.Value_JS.Get("useMap")
	ret = (value).String()
	return ret
}

// SetUseMap setting attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetUseMap(value string) {
	input := value
	_this.Value_JS.Set("useMap", input)
}

// IsMap returning attribute 'isMap' with
// type bool (idl: boolean).
func (_this *HTMLImageElement) IsMap() bool {
	var ret bool
	value := _this.Value_JS.Get("isMap")
	ret = (value).Bool()
	return ret
}

// SetIsMap setting attribute 'isMap' with
// type bool (idl: boolean).
func (_this *HTMLImageElement) SetIsMap(value bool) {
	input := value
	_this.Value_JS.Set("isMap", input)
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// SetWidth setting attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) SetWidth(value uint) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

// SetHeight setting attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) SetHeight(value uint) {
	input := value
	_this.Value_JS.Set("height", input)
}

// NaturalWidth returning attribute 'naturalWidth' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) NaturalWidth() uint {
	var ret uint
	value := _this.Value_JS.Get("naturalWidth")
	ret = (uint)((value).Int())
	return ret
}

// NaturalHeight returning attribute 'naturalHeight' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) NaturalHeight() uint {
	var ret uint
	value := _this.Value_JS.Get("naturalHeight")
	ret = (uint)((value).Int())
	return ret
}

// Complete returning attribute 'complete' with
// type bool (idl: boolean).
func (_this *HTMLImageElement) Complete() bool {
	var ret bool
	value := _this.Value_JS.Get("complete")
	ret = (value).Bool()
	return ret
}

// CurrentSrc returning attribute 'currentSrc' with
// type string (idl: USVString).
func (_this *HTMLImageElement) CurrentSrc() string {
	var ret string
	value := _this.Value_JS.Get("currentSrc")
	ret = (value).String()
	return ret
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Decoding returning attribute 'decoding' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Decoding() string {
	var ret string
	value := _this.Value_JS.Get("decoding")
	ret = (value).String()
	return ret
}

// SetDecoding setting attribute 'decoding' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetDecoding(value string) {
	input := value
	_this.Value_JS.Set("decoding", input)
}

// X returning attribute 'x' with
// type int (idl: long).
func (_this *HTMLImageElement) X() int {
	var ret int
	value := _this.Value_JS.Get("x")
	ret = (value).Int()
	return ret
}

// Y returning attribute 'y' with
// type int (idl: long).
func (_this *HTMLImageElement) Y() int {
	var ret int
	value := _this.Value_JS.Get("y")
	ret = (value).Int()
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Lowsrc returning attribute 'lowsrc' with
// type string (idl: USVString).
func (_this *HTMLImageElement) Lowsrc() string {
	var ret string
	value := _this.Value_JS.Get("lowsrc")
	ret = (value).String()
	return ret
}

// SetLowsrc setting attribute 'lowsrc' with
// type string (idl: USVString).
func (_this *HTMLImageElement) SetLowsrc(value string) {
	input := value
	_this.Value_JS.Set("lowsrc", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Hspace returning attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) Hspace() uint {
	var ret uint
	value := _this.Value_JS.Get("hspace")
	ret = (uint)((value).Int())
	return ret
}

// SetHspace setting attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) SetHspace(value uint) {
	input := value
	_this.Value_JS.Set("hspace", input)
}

// Vspace returning attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) Vspace() uint {
	var ret uint
	value := _this.Value_JS.Get("vspace")
	ret = (uint)((value).Int())
	return ret
}

// SetVspace setting attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLImageElement) SetVspace(value uint) {
	input := value
	_this.Value_JS.Set("vspace", input)
}

// LongDesc returning attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLImageElement) LongDesc() string {
	var ret string
	value := _this.Value_JS.Get("longDesc")
	ret = (value).String()
	return ret
}

// SetLongDesc setting attribute 'longDesc' with
// type string (idl: USVString).
func (_this *HTMLImageElement) SetLongDesc(value string) {
	input := value
	_this.Value_JS.Set("longDesc", input)
}

// Border returning attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) Border() string {
	var ret string
	value := _this.Value_JS.Get("border")
	ret = (value).String()
	return ret
}

// SetBorder setting attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLImageElement) SetBorder(value string) {
	input := value
	_this.Value_JS.Set("border", input)
}

func (_this *HTMLImageElement) Decode() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("decode", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

// class: HTMLInputElement
type HTMLInputElement struct {
	HTMLElement
}

// HTMLInputElementFromJS is casting a js.Value into HTMLInputElement.
func HTMLInputElementFromJS(value js.Value) *HTMLInputElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLInputElement{}
	ret.Value_JS = value
	return ret
}

// HTMLInputElementFromJS is casting from something that holds a js.Value into HTMLInputElement.
func HTMLInputElementFromWrapper(input core.Wrapper) *HTMLInputElement {
	return HTMLInputElementFromJS(input.JSValue())
}

// Accept returning attribute 'accept' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Accept() string {
	var ret string
	value := _this.Value_JS.Get("accept")
	ret = (value).String()
	return ret
}

// SetAccept setting attribute 'accept' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetAccept(value string) {
	input := value
	_this.Value_JS.Set("accept", input)
}

// Alt returning attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Alt() string {
	var ret string
	value := _this.Value_JS.Get("alt")
	ret = (value).String()
	return ret
}

// SetAlt setting attribute 'alt' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetAlt(value string) {
	input := value
	_this.Value_JS.Set("alt", input)
}

// Autocomplete returning attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Autocomplete() string {
	var ret string
	value := _this.Value_JS.Get("autocomplete")
	ret = (value).String()
	return ret
}

// SetAutocomplete setting attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetAutocomplete(value string) {
	input := value
	_this.Value_JS.Set("autocomplete", input)
}

// Autofocus returning attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Autofocus() bool {
	var ret bool
	value := _this.Value_JS.Get("autofocus")
	ret = (value).Bool()
	return ret
}

// SetAutofocus setting attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetAutofocus(value bool) {
	input := value
	_this.Value_JS.Set("autofocus", input)
}

// DefaultChecked returning attribute 'defaultChecked' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) DefaultChecked() bool {
	var ret bool
	value := _this.Value_JS.Get("defaultChecked")
	ret = (value).Bool()
	return ret
}

// SetDefaultChecked setting attribute 'defaultChecked' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetDefaultChecked(value bool) {
	input := value
	_this.Value_JS.Set("defaultChecked", input)
}

// Checked returning attribute 'checked' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Checked() bool {
	var ret bool
	value := _this.Value_JS.Get("checked")
	ret = (value).Bool()
	return ret
}

// SetChecked setting attribute 'checked' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetChecked(value bool) {
	input := value
	_this.Value_JS.Set("checked", input)
}

// DirName returning attribute 'dirName' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) DirName() string {
	var ret string
	value := _this.Value_JS.Get("dirName")
	ret = (value).String()
	return ret
}

// SetDirName setting attribute 'dirName' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetDirName(value string) {
	input := value
	_this.Value_JS.Set("dirName", input)
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLInputElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Files returning attribute 'files' with
// type file.FileList (idl: FileList).
func (_this *HTMLInputElement) Files() *file.FileList {
	var ret *file.FileList
	value := _this.Value_JS.Get("files")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = file.FileListFromJS(value)
	}
	return ret
}

// SetFiles setting attribute 'files' with
// type file.FileList (idl: FileList).
func (_this *HTMLInputElement) SetFiles(value *file.FileList) {
	input := value.JSValue()
	_this.Value_JS.Set("files", input)
}

// FormAction returning attribute 'formAction' with
// type string (idl: USVString).
func (_this *HTMLInputElement) FormAction() string {
	var ret string
	value := _this.Value_JS.Get("formAction")
	ret = (value).String()
	return ret
}

// SetFormAction setting attribute 'formAction' with
// type string (idl: USVString).
func (_this *HTMLInputElement) SetFormAction(value string) {
	input := value
	_this.Value_JS.Set("formAction", input)
}

// FormEnctype returning attribute 'formEnctype' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) FormEnctype() string {
	var ret string
	value := _this.Value_JS.Get("formEnctype")
	ret = (value).String()
	return ret
}

// SetFormEnctype setting attribute 'formEnctype' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetFormEnctype(value string) {
	input := value
	_this.Value_JS.Set("formEnctype", input)
}

// FormMethod returning attribute 'formMethod' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) FormMethod() string {
	var ret string
	value := _this.Value_JS.Get("formMethod")
	ret = (value).String()
	return ret
}

// SetFormMethod setting attribute 'formMethod' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetFormMethod(value string) {
	input := value
	_this.Value_JS.Set("formMethod", input)
}

// FormNoValidate returning attribute 'formNoValidate' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) FormNoValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("formNoValidate")
	ret = (value).Bool()
	return ret
}

// SetFormNoValidate setting attribute 'formNoValidate' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetFormNoValidate(value bool) {
	input := value
	_this.Value_JS.Set("formNoValidate", input)
}

// FormTarget returning attribute 'formTarget' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) FormTarget() string {
	var ret string
	value := _this.Value_JS.Get("formTarget")
	ret = (value).String()
	return ret
}

// SetFormTarget setting attribute 'formTarget' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetFormTarget(value string) {
	input := value
	_this.Value_JS.Set("formTarget", input)
}

// Height returning attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) Height() uint {
	var ret uint
	value := _this.Value_JS.Get("height")
	ret = (uint)((value).Int())
	return ret
}

// SetHeight setting attribute 'height' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SetHeight(value uint) {
	input := value
	_this.Value_JS.Set("height", input)
}

// Indeterminate returning attribute 'indeterminate' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Indeterminate() bool {
	var ret bool
	value := _this.Value_JS.Get("indeterminate")
	ret = (value).Bool()
	return ret
}

// SetIndeterminate setting attribute 'indeterminate' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetIndeterminate(value bool) {
	input := value
	_this.Value_JS.Set("indeterminate", input)
}

// List returning attribute 'list' with
// type HTMLElement (idl: HTMLElement).
func (_this *HTMLInputElement) List() *HTMLElement {
	var ret *HTMLElement
	value := _this.Value_JS.Get("list")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLElementFromJS(value)
	}
	return ret
}

// Max returning attribute 'max' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Max() string {
	var ret string
	value := _this.Value_JS.Get("max")
	ret = (value).String()
	return ret
}

// SetMax setting attribute 'max' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetMax(value string) {
	input := value
	_this.Value_JS.Set("max", input)
}

// MaxLength returning attribute 'maxLength' with
// type int (idl: long).
func (_this *HTMLInputElement) MaxLength() int {
	var ret int
	value := _this.Value_JS.Get("maxLength")
	ret = (value).Int()
	return ret
}

// SetMaxLength setting attribute 'maxLength' with
// type int (idl: long).
func (_this *HTMLInputElement) SetMaxLength(value int) {
	input := value
	_this.Value_JS.Set("maxLength", input)
}

// Min returning attribute 'min' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Min() string {
	var ret string
	value := _this.Value_JS.Get("min")
	ret = (value).String()
	return ret
}

// SetMin setting attribute 'min' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetMin(value string) {
	input := value
	_this.Value_JS.Set("min", input)
}

// MinLength returning attribute 'minLength' with
// type int (idl: long).
func (_this *HTMLInputElement) MinLength() int {
	var ret int
	value := _this.Value_JS.Get("minLength")
	ret = (value).Int()
	return ret
}

// SetMinLength setting attribute 'minLength' with
// type int (idl: long).
func (_this *HTMLInputElement) SetMinLength(value int) {
	input := value
	_this.Value_JS.Set("minLength", input)
}

// Multiple returning attribute 'multiple' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Multiple() bool {
	var ret bool
	value := _this.Value_JS.Get("multiple")
	ret = (value).Bool()
	return ret
}

// SetMultiple setting attribute 'multiple' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetMultiple(value bool) {
	input := value
	_this.Value_JS.Set("multiple", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Pattern returning attribute 'pattern' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Pattern() string {
	var ret string
	value := _this.Value_JS.Get("pattern")
	ret = (value).String()
	return ret
}

// SetPattern setting attribute 'pattern' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetPattern(value string) {
	input := value
	_this.Value_JS.Set("pattern", input)
}

// Placeholder returning attribute 'placeholder' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Placeholder() string {
	var ret string
	value := _this.Value_JS.Get("placeholder")
	ret = (value).String()
	return ret
}

// SetPlaceholder setting attribute 'placeholder' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetPlaceholder(value string) {
	input := value
	_this.Value_JS.Set("placeholder", input)
}

// ReadOnly returning attribute 'readOnly' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) ReadOnly() bool {
	var ret bool
	value := _this.Value_JS.Get("readOnly")
	ret = (value).Bool()
	return ret
}

// SetReadOnly setting attribute 'readOnly' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetReadOnly(value bool) {
	input := value
	_this.Value_JS.Set("readOnly", input)
}

// Required returning attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Required() bool {
	var ret bool
	value := _this.Value_JS.Get("required")
	ret = (value).Bool()
	return ret
}

// SetRequired setting attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetRequired(value bool) {
	input := value
	_this.Value_JS.Set("required", input)
}

// Size returning attribute 'size' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) Size() uint {
	var ret uint
	value := _this.Value_JS.Get("size")
	ret = (uint)((value).Int())
	return ret
}

// SetSize setting attribute 'size' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SetSize(value uint) {
	input := value
	_this.Value_JS.Set("size", input)
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLInputElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLInputElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Step returning attribute 'step' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Step() string {
	var ret string
	value := _this.Value_JS.Get("step")
	ret = (value).String()
	return ret
}

// SetStep setting attribute 'step' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetStep(value string) {
	input := value
	_this.Value_JS.Set("step", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// DefaultValue returning attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) DefaultValue() string {
	var ret string
	value := _this.Value_JS.Get("defaultValue")
	ret = (value).String()
	return ret
}

// SetDefaultValue setting attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetDefaultValue(value string) {
	input := value
	_this.Value_JS.Set("defaultValue", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// ValueAsDate returning attribute 'valueAsDate' with
// type javascript.Object (idl: object).
func (_this *HTMLInputElement) ValueAsDate() *javascript.Object {
	var ret *javascript.Object
	value := _this.Value_JS.Get("valueAsDate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = javascript.ObjectFromJS(value)
	}
	return ret
}

// SetValueAsDate setting attribute 'valueAsDate' with
// type javascript.Object (idl: object).
func (_this *HTMLInputElement) SetValueAsDate(value *javascript.Object) {
	input := value.JSValue()
	_this.Value_JS.Set("valueAsDate", input)
}

// ValueAsNumber returning attribute 'valueAsNumber' with
// type float64 (idl: unrestricted double).
func (_this *HTMLInputElement) ValueAsNumber() float64 {
	var ret float64
	value := _this.Value_JS.Get("valueAsNumber")
	ret = (value).Float()
	return ret
}

// SetValueAsNumber setting attribute 'valueAsNumber' with
// type float64 (idl: unrestricted double).
func (_this *HTMLInputElement) SetValueAsNumber(value float64) {
	input := value
	_this.Value_JS.Set("valueAsNumber", input)
}

// Width returning attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) Width() uint {
	var ret uint
	value := _this.Value_JS.Get("width")
	ret = (uint)((value).Int())
	return ret
}

// SetWidth setting attribute 'width' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SetWidth(value uint) {
	input := value
	_this.Value_JS.Set("width", input)
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLInputElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLInputElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = dom.NodeListFromJS(value)
	}
	return ret
}

// SelectionStart returning attribute 'selectionStart' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SelectionStart() *uint {
	var ret *uint
	value := _this.Value_JS.Get("selectionStart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// SetSelectionStart setting attribute 'selectionStart' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SetSelectionStart(value *uint) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("selectionStart", input)
}

// SelectionEnd returning attribute 'selectionEnd' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SelectionEnd() *uint {
	var ret *uint
	value := _this.Value_JS.Get("selectionEnd")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// SetSelectionEnd setting attribute 'selectionEnd' with
// type uint (idl: unsigned long).
func (_this *HTMLInputElement) SetSelectionEnd(value *uint) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("selectionEnd", input)
}

// SelectionDirection returning attribute 'selectionDirection' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SelectionDirection() *string {
	var ret *string
	value := _this.Value_JS.Get("selectionDirection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetSelectionDirection setting attribute 'selectionDirection' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetSelectionDirection(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("selectionDirection", input)
}

// Webkitdirectory returning attribute 'webkitdirectory' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) Webkitdirectory() bool {
	var ret bool
	value := _this.Value_JS.Get("webkitdirectory")
	ret = (value).Bool()
	return ret
}

// SetWebkitdirectory setting attribute 'webkitdirectory' with
// type bool (idl: boolean).
func (_this *HTMLInputElement) SetWebkitdirectory(value bool) {
	input := value
	_this.Value_JS.Set("webkitdirectory", input)
}

// WebkitEntries returning attribute 'webkitEntries' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *HTMLInputElement) WebkitEntries() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("webkitEntries")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Capture returning attribute 'capture' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Capture() string {
	var ret string
	value := _this.Value_JS.Get("capture")
	ret = (value).String()
	return ret
}

// SetCapture setting attribute 'capture' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetCapture(value string) {
	input := value
	_this.Value_JS.Set("capture", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// UseMap returning attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) UseMap() string {
	var ret string
	value := _this.Value_JS.Get("useMap")
	ret = (value).String()
	return ret
}

// SetUseMap setting attribute 'useMap' with
// type string (idl: DOMString).
func (_this *HTMLInputElement) SetUseMap(value string) {
	input := value
	_this.Value_JS.Set("useMap", input)
}

func (_this *HTMLInputElement) StepUp(n *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if n != nil {

		var _p0 interface{}
		if n != nil {
			_p0 = *(n)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("stepUp", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) StepDown(n *int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if n != nil {

		var _p0 interface{}
		if n != nil {
			_p0 = *(n)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("stepDown", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLInputElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLInputElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) Select() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("select", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) SetRangeText(replacement string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := replacement
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setRangeText", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) SetRangeText2(replacement string, start uint, end uint, selectionMode *SelectionMode) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := replacement
	_args[0] = _p0
	_end++
	_p1 := start
	_args[1] = _p1
	_end++
	_p2 := end
	_args[2] = _p2
	_end++
	if selectionMode != nil {
		_p3 := selectionMode.JSValue()
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("setRangeText", _args[0:_end]...)
	return
}

func (_this *HTMLInputElement) SetSelectionRange(start uint, end uint, direction *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := start
	_args[0] = _p0
	_end++
	_p1 := end
	_args[1] = _p1
	_end++
	if direction != nil {

		var _p2 interface{}
		if direction != nil {
			_p2 = *(direction)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("setSelectionRange", _args[0:_end]...)
	return
}

// class: HTMLLIElement
type HTMLLIElement struct {
	HTMLElement
}

// HTMLLIElementFromJS is casting a js.Value into HTMLLIElement.
func HTMLLIElementFromJS(value js.Value) *HTMLLIElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLLIElement{}
	ret.Value_JS = value
	return ret
}

// HTMLLIElementFromJS is casting from something that holds a js.Value into HTMLLIElement.
func HTMLLIElementFromWrapper(input core.Wrapper) *HTMLLIElement {
	return HTMLLIElementFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type int (idl: long).
func (_this *HTMLLIElement) Value() int {
	var ret int
	value := _this.Value_JS.Get("value")
	ret = (value).Int()
	return ret
}

// SetValue setting attribute 'value' with
// type int (idl: long).
func (_this *HTMLLIElement) SetValue(value int) {
	input := value
	_this.Value_JS.Set("value", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLLIElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLLIElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// class: HTMLLabelElement
type HTMLLabelElement struct {
	HTMLElement
}

// HTMLLabelElementFromJS is casting a js.Value into HTMLLabelElement.
func HTMLLabelElementFromJS(value js.Value) *HTMLLabelElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLLabelElement{}
	ret.Value_JS = value
	return ret
}

// HTMLLabelElementFromJS is casting from something that holds a js.Value into HTMLLabelElement.
func HTMLLabelElementFromWrapper(input core.Wrapper) *HTMLLabelElement {
	return HTMLLabelElementFromJS(input.JSValue())
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLLabelElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// HtmlFor returning attribute 'htmlFor' with
// type string (idl: DOMString).
func (_this *HTMLLabelElement) HtmlFor() string {
	var ret string
	value := _this.Value_JS.Get("htmlFor")
	ret = (value).String()
	return ret
}

// SetHtmlFor setting attribute 'htmlFor' with
// type string (idl: DOMString).
func (_this *HTMLLabelElement) SetHtmlFor(value string) {
	input := value
	_this.Value_JS.Set("htmlFor", input)
}

// Control returning attribute 'control' with
// type HTMLElement (idl: HTMLElement).
func (_this *HTMLLabelElement) Control() *HTMLElement {
	var ret *HTMLElement
	value := _this.Value_JS.Get("control")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLElementFromJS(value)
	}
	return ret
}

// class: HTMLLegendElement
type HTMLLegendElement struct {
	HTMLElement
}

// HTMLLegendElementFromJS is casting a js.Value into HTMLLegendElement.
func HTMLLegendElementFromJS(value js.Value) *HTMLLegendElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLLegendElement{}
	ret.Value_JS = value
	return ret
}

// HTMLLegendElementFromJS is casting from something that holds a js.Value into HTMLLegendElement.
func HTMLLegendElementFromWrapper(input core.Wrapper) *HTMLLegendElement {
	return HTMLLegendElementFromJS(input.JSValue())
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLLegendElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLLegendElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLLegendElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// class: HTMLLinkElement
type HTMLLinkElement struct {
	HTMLElement
}

// HTMLLinkElementFromJS is casting a js.Value into HTMLLinkElement.
func HTMLLinkElementFromJS(value js.Value) *HTMLLinkElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLLinkElement{}
	ret.Value_JS = value
	return ret
}

// HTMLLinkElementFromJS is casting from something that holds a js.Value into HTMLLinkElement.
func HTMLLinkElementFromWrapper(input core.Wrapper) *HTMLLinkElement {
	return HTMLLinkElementFromJS(input.JSValue())
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLLinkElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *HTMLLinkElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetCrossOrigin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("crossOrigin", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// As returning attribute 'as' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) As() string {
	var ret string
	value := _this.Value_JS.Get("as")
	ret = (value).String()
	return ret
}

// SetAs setting attribute 'as' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetAs(value string) {
	input := value
	_this.Value_JS.Set("as", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLLinkElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Media returning attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Media() string {
	var ret string
	value := _this.Value_JS.Get("media")
	ret = (value).String()
	return ret
}

// SetMedia setting attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetMedia(value string) {
	input := value
	_this.Value_JS.Set("media", input)
}

// Integrity returning attribute 'integrity' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Integrity() string {
	var ret string
	value := _this.Value_JS.Get("integrity")
	ret = (value).String()
	return ret
}

// SetIntegrity setting attribute 'integrity' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetIntegrity(value string) {
	input := value
	_this.Value_JS.Set("integrity", input)
}

// Hreflang returning attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Hreflang() string {
	var ret string
	value := _this.Value_JS.Get("hreflang")
	ret = (value).String()
	return ret
}

// SetHreflang setting attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetHreflang(value string) {
	input := value
	_this.Value_JS.Set("hreflang", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Sizes returning attribute 'sizes' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLLinkElement) Sizes() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("sizes")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Charset returning attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Charset() string {
	var ret string
	value := _this.Value_JS.Get("charset")
	ret = (value).String()
	return ret
}

// SetCharset setting attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetCharset(value string) {
	input := value
	_this.Value_JS.Set("charset", input)
}

// Rev returning attribute 'rev' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Rev() string {
	var ret string
	value := _this.Value_JS.Get("rev")
	ret = (value).String()
	return ret
}

// SetRev setting attribute 'rev' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetRev(value string) {
	input := value
	_this.Value_JS.Set("rev", input)
}

// Target returning attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) Target() string {
	var ret string
	value := _this.Value_JS.Get("target")
	ret = (value).String()
	return ret
}

// SetTarget setting attribute 'target' with
// type string (idl: DOMString).
func (_this *HTMLLinkElement) SetTarget(value string) {
	input := value
	_this.Value_JS.Set("target", input)
}

// Sheet returning attribute 'sheet' with
// type cssom.CSSStyleSheet (idl: CSSStyleSheet).
func (_this *HTMLLinkElement) Sheet() *cssom.CSSStyleSheet {
	var ret *cssom.CSSStyleSheet
	value := _this.Value_JS.Get("sheet")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = cssom.CSSStyleSheetFromJS(value)
	}
	return ret
}

// class: HTMLMapElement
type HTMLMapElement struct {
	HTMLElement
}

// HTMLMapElementFromJS is casting a js.Value into HTMLMapElement.
func HTMLMapElementFromJS(value js.Value) *HTMLMapElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLMapElement{}
	ret.Value_JS = value
	return ret
}

// HTMLMapElementFromJS is casting from something that holds a js.Value into HTMLMapElement.
func HTMLMapElementFromWrapper(input core.Wrapper) *HTMLMapElement {
	return HTMLMapElementFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLMapElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLMapElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Areas returning attribute 'areas' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLMapElement) Areas() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("areas")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// class: HTMLMarqueeElement
type HTMLMarqueeElement struct {
	HTMLElement
}

// HTMLMarqueeElementFromJS is casting a js.Value into HTMLMarqueeElement.
func HTMLMarqueeElementFromJS(value js.Value) *HTMLMarqueeElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLMarqueeElement{}
	ret.Value_JS = value
	return ret
}

// HTMLMarqueeElementFromJS is casting from something that holds a js.Value into HTMLMarqueeElement.
func HTMLMarqueeElementFromWrapper(input core.Wrapper) *HTMLMarqueeElement {
	return HTMLMarqueeElementFromJS(input.JSValue())
}

// Behavior returning attribute 'behavior' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) Behavior() string {
	var ret string
	value := _this.Value_JS.Get("behavior")
	ret = (value).String()
	return ret
}

// SetBehavior setting attribute 'behavior' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) SetBehavior(value string) {
	input := value
	_this.Value_JS.Set("behavior", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// Direction returning attribute 'direction' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) Direction() string {
	var ret string
	value := _this.Value_JS.Get("direction")
	ret = (value).String()
	return ret
}

// SetDirection setting attribute 'direction' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) SetDirection(value string) {
	input := value
	_this.Value_JS.Set("direction", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// Hspace returning attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) Hspace() uint {
	var ret uint
	value := _this.Value_JS.Get("hspace")
	ret = (uint)((value).Int())
	return ret
}

// SetHspace setting attribute 'hspace' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) SetHspace(value uint) {
	input := value
	_this.Value_JS.Set("hspace", input)
}

// Loop returning attribute 'loop' with
// type int (idl: long).
func (_this *HTMLMarqueeElement) Loop() int {
	var ret int
	value := _this.Value_JS.Get("loop")
	ret = (value).Int()
	return ret
}

// SetLoop setting attribute 'loop' with
// type int (idl: long).
func (_this *HTMLMarqueeElement) SetLoop(value int) {
	input := value
	_this.Value_JS.Set("loop", input)
}

// ScrollAmount returning attribute 'scrollAmount' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) ScrollAmount() uint {
	var ret uint
	value := _this.Value_JS.Get("scrollAmount")
	ret = (uint)((value).Int())
	return ret
}

// SetScrollAmount setting attribute 'scrollAmount' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) SetScrollAmount(value uint) {
	input := value
	_this.Value_JS.Set("scrollAmount", input)
}

// ScrollDelay returning attribute 'scrollDelay' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) ScrollDelay() uint {
	var ret uint
	value := _this.Value_JS.Get("scrollDelay")
	ret = (uint)((value).Int())
	return ret
}

// SetScrollDelay setting attribute 'scrollDelay' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) SetScrollDelay(value uint) {
	input := value
	_this.Value_JS.Set("scrollDelay", input)
}

// TrueSpeed returning attribute 'trueSpeed' with
// type bool (idl: boolean).
func (_this *HTMLMarqueeElement) TrueSpeed() bool {
	var ret bool
	value := _this.Value_JS.Get("trueSpeed")
	ret = (value).Bool()
	return ret
}

// SetTrueSpeed setting attribute 'trueSpeed' with
// type bool (idl: boolean).
func (_this *HTMLMarqueeElement) SetTrueSpeed(value bool) {
	input := value
	_this.Value_JS.Set("trueSpeed", input)
}

// Vspace returning attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) Vspace() uint {
	var ret uint
	value := _this.Value_JS.Get("vspace")
	ret = (uint)((value).Int())
	return ret
}

// SetVspace setting attribute 'vspace' with
// type uint (idl: unsigned long).
func (_this *HTMLMarqueeElement) SetVspace(value uint) {
	input := value
	_this.Value_JS.Set("vspace", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLMarqueeElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// OnBounce returning attribute 'onbounce' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLMarqueeElement) OnBounce() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbounce")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFinish returning attribute 'onfinish' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLMarqueeElement) OnFinish() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfinish")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStart returning attribute 'onstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *HTMLMarqueeElement) OnStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncHTMLMarqueeElement_domcore_Event(listener func(event *domcore.Event, target *HTMLMarqueeElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := HTMLMarqueeElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBounce is adding doing AddEventListener for 'Bounce' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) AddEventBounce(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "bounce", cb)
	return cb
}

// SetOnBounce is assigning a function to 'onbounce'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) SetOnBounce(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Set("onbounce", cb)
	return cb
}

// AddFinish is adding doing AddEventListener for 'Finish' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) AddEventFinish(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "finish", cb)
	return cb
}

// SetOnFinish is assigning a function to 'onfinish'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) SetOnFinish(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Set("onfinish", cb)
	return cb
}

// AddStart is adding doing AddEventListener for 'Start' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) AddEventStart(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "start", cb)
	return cb
}

// SetOnStart is assigning a function to 'onstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *HTMLMarqueeElement) SetOnStart(listener func(event *domcore.Event, currentTarget *HTMLMarqueeElement)) js.Func {
	cb := eventFuncHTMLMarqueeElement_domcore_Event(listener)
	_this.Value_JS.Set("onstart", cb)
	return cb
}

func (_this *HTMLMarqueeElement) Start() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("start", _args[0:_end]...)
	return
}

func (_this *HTMLMarqueeElement) Stop() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("stop", _args[0:_end]...)
	return
}

// class: HTMLMenuElement
type HTMLMenuElement struct {
	HTMLElement
}

// HTMLMenuElementFromJS is casting a js.Value into HTMLMenuElement.
func HTMLMenuElementFromJS(value js.Value) *HTMLMenuElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLMenuElement{}
	ret.Value_JS = value
	return ret
}

// HTMLMenuElementFromJS is casting from something that holds a js.Value into HTMLMenuElement.
func HTMLMenuElementFromWrapper(input core.Wrapper) *HTMLMenuElement {
	return HTMLMenuElementFromJS(input.JSValue())
}

// Compact returning attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLMenuElement) Compact() bool {
	var ret bool
	value := _this.Value_JS.Get("compact")
	ret = (value).Bool()
	return ret
}

// SetCompact setting attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLMenuElement) SetCompact(value bool) {
	input := value
	_this.Value_JS.Set("compact", input)
}

// class: HTMLMetaElement
type HTMLMetaElement struct {
	HTMLElement
}

// HTMLMetaElementFromJS is casting a js.Value into HTMLMetaElement.
func HTMLMetaElementFromJS(value js.Value) *HTMLMetaElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLMetaElement{}
	ret.Value_JS = value
	return ret
}

// HTMLMetaElementFromJS is casting from something that holds a js.Value into HTMLMetaElement.
func HTMLMetaElementFromWrapper(input core.Wrapper) *HTMLMetaElement {
	return HTMLMetaElementFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// HttpEquiv returning attribute 'httpEquiv' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) HttpEquiv() string {
	var ret string
	value := _this.Value_JS.Get("httpEquiv")
	ret = (value).String()
	return ret
}

// SetHttpEquiv setting attribute 'httpEquiv' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) SetHttpEquiv(value string) {
	input := value
	_this.Value_JS.Set("httpEquiv", input)
}

// Content returning attribute 'content' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) Content() string {
	var ret string
	value := _this.Value_JS.Get("content")
	ret = (value).String()
	return ret
}

// SetContent setting attribute 'content' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) SetContent(value string) {
	input := value
	_this.Value_JS.Set("content", input)
}

// Scheme returning attribute 'scheme' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) Scheme() string {
	var ret string
	value := _this.Value_JS.Get("scheme")
	ret = (value).String()
	return ret
}

// SetScheme setting attribute 'scheme' with
// type string (idl: DOMString).
func (_this *HTMLMetaElement) SetScheme(value string) {
	input := value
	_this.Value_JS.Set("scheme", input)
}

// class: HTMLMeterElement
type HTMLMeterElement struct {
	HTMLElement
}

// HTMLMeterElementFromJS is casting a js.Value into HTMLMeterElement.
func HTMLMeterElementFromJS(value js.Value) *HTMLMeterElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLMeterElement{}
	ret.Value_JS = value
	return ret
}

// HTMLMeterElementFromJS is casting from something that holds a js.Value into HTMLMeterElement.
func HTMLMeterElementFromWrapper(input core.Wrapper) *HTMLMeterElement {
	return HTMLMeterElementFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) Value() float64 {
	var ret float64
	value := _this.Value_JS.Get("value")
	ret = (value).Float()
	return ret
}

// SetValue setting attribute 'value' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetValue(value float64) {
	input := value
	_this.Value_JS.Set("value", input)
}

// Min returning attribute 'min' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) Min() float64 {
	var ret float64
	value := _this.Value_JS.Get("min")
	ret = (value).Float()
	return ret
}

// SetMin setting attribute 'min' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetMin(value float64) {
	input := value
	_this.Value_JS.Set("min", input)
}

// Max returning attribute 'max' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) Max() float64 {
	var ret float64
	value := _this.Value_JS.Get("max")
	ret = (value).Float()
	return ret
}

// SetMax setting attribute 'max' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetMax(value float64) {
	input := value
	_this.Value_JS.Set("max", input)
}

// Low returning attribute 'low' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) Low() float64 {
	var ret float64
	value := _this.Value_JS.Get("low")
	ret = (value).Float()
	return ret
}

// SetLow setting attribute 'low' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetLow(value float64) {
	input := value
	_this.Value_JS.Set("low", input)
}

// High returning attribute 'high' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) High() float64 {
	var ret float64
	value := _this.Value_JS.Get("high")
	ret = (value).Float()
	return ret
}

// SetHigh setting attribute 'high' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetHigh(value float64) {
	input := value
	_this.Value_JS.Set("high", input)
}

// Optimum returning attribute 'optimum' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) Optimum() float64 {
	var ret float64
	value := _this.Value_JS.Get("optimum")
	ret = (value).Float()
	return ret
}

// SetOptimum setting attribute 'optimum' with
// type float64 (idl: double).
func (_this *HTMLMeterElement) SetOptimum(value float64) {
	input := value
	_this.Value_JS.Set("optimum", input)
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLMeterElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

// class: HTMLModElement
type HTMLModElement struct {
	HTMLElement
}

// HTMLModElementFromJS is casting a js.Value into HTMLModElement.
func HTMLModElementFromJS(value js.Value) *HTMLModElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLModElement{}
	ret.Value_JS = value
	return ret
}

// HTMLModElementFromJS is casting from something that holds a js.Value into HTMLModElement.
func HTMLModElementFromWrapper(input core.Wrapper) *HTMLModElement {
	return HTMLModElementFromJS(input.JSValue())
}

// Cite returning attribute 'cite' with
// type string (idl: USVString).
func (_this *HTMLModElement) Cite() string {
	var ret string
	value := _this.Value_JS.Get("cite")
	ret = (value).String()
	return ret
}

// SetCite setting attribute 'cite' with
// type string (idl: USVString).
func (_this *HTMLModElement) SetCite(value string) {
	input := value
	_this.Value_JS.Set("cite", input)
}

// DateTime returning attribute 'dateTime' with
// type string (idl: DOMString).
func (_this *HTMLModElement) DateTime() string {
	var ret string
	value := _this.Value_JS.Get("dateTime")
	ret = (value).String()
	return ret
}

// SetDateTime setting attribute 'dateTime' with
// type string (idl: DOMString).
func (_this *HTMLModElement) SetDateTime(value string) {
	input := value
	_this.Value_JS.Set("dateTime", input)
}

// class: HTMLOListElement
type HTMLOListElement struct {
	HTMLElement
}

// HTMLOListElementFromJS is casting a js.Value into HTMLOListElement.
func HTMLOListElementFromJS(value js.Value) *HTMLOListElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLOListElement{}
	ret.Value_JS = value
	return ret
}

// HTMLOListElementFromJS is casting from something that holds a js.Value into HTMLOListElement.
func HTMLOListElementFromWrapper(input core.Wrapper) *HTMLOListElement {
	return HTMLOListElementFromJS(input.JSValue())
}

// Reversed returning attribute 'reversed' with
// type bool (idl: boolean).
func (_this *HTMLOListElement) Reversed() bool {
	var ret bool
	value := _this.Value_JS.Get("reversed")
	ret = (value).Bool()
	return ret
}

// SetReversed setting attribute 'reversed' with
// type bool (idl: boolean).
func (_this *HTMLOListElement) SetReversed(value bool) {
	input := value
	_this.Value_JS.Set("reversed", input)
}

// Start returning attribute 'start' with
// type int (idl: long).
func (_this *HTMLOListElement) Start() int {
	var ret int
	value := _this.Value_JS.Get("start")
	ret = (value).Int()
	return ret
}

// SetStart setting attribute 'start' with
// type int (idl: long).
func (_this *HTMLOListElement) SetStart(value int) {
	input := value
	_this.Value_JS.Set("start", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLOListElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLOListElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Compact returning attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLOListElement) Compact() bool {
	var ret bool
	value := _this.Value_JS.Get("compact")
	ret = (value).Bool()
	return ret
}

// SetCompact setting attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLOListElement) SetCompact(value bool) {
	input := value
	_this.Value_JS.Set("compact", input)
}

// class: HTMLOptGroupElement
type HTMLOptGroupElement struct {
	HTMLElement
}

// HTMLOptGroupElementFromJS is casting a js.Value into HTMLOptGroupElement.
func HTMLOptGroupElementFromJS(value js.Value) *HTMLOptGroupElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLOptGroupElement{}
	ret.Value_JS = value
	return ret
}

// HTMLOptGroupElementFromJS is casting from something that holds a js.Value into HTMLOptGroupElement.
func HTMLOptGroupElementFromWrapper(input core.Wrapper) *HTMLOptGroupElement {
	return HTMLOptGroupElementFromJS(input.JSValue())
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLOptGroupElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLOptGroupElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLOptGroupElement) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// SetLabel setting attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLOptGroupElement) SetLabel(value string) {
	input := value
	_this.Value_JS.Set("label", input)
}

// class: HTMLOptionElement
type HTMLOptionElement struct {
	HTMLElement
}

// HTMLOptionElementFromJS is casting a js.Value into HTMLOptionElement.
func HTMLOptionElementFromJS(value js.Value) *HTMLOptionElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLOptionElement{}
	ret.Value_JS = value
	return ret
}

// HTMLOptionElementFromJS is casting from something that holds a js.Value into HTMLOptionElement.
func HTMLOptionElementFromWrapper(input core.Wrapper) *HTMLOptionElement {
	return HTMLOptionElementFromJS(input.JSValue())
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLOptionElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Label returning attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) Label() string {
	var ret string
	value := _this.Value_JS.Get("label")
	ret = (value).String()
	return ret
}

// SetLabel setting attribute 'label' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) SetLabel(value string) {
	input := value
	_this.Value_JS.Set("label", input)
}

// DefaultSelected returning attribute 'defaultSelected' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) DefaultSelected() bool {
	var ret bool
	value := _this.Value_JS.Get("defaultSelected")
	ret = (value).Bool()
	return ret
}

// SetDefaultSelected setting attribute 'defaultSelected' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) SetDefaultSelected(value bool) {
	input := value
	_this.Value_JS.Set("defaultSelected", input)
}

// Selected returning attribute 'selected' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) Selected() bool {
	var ret bool
	value := _this.Value_JS.Get("selected")
	ret = (value).Bool()
	return ret
}

// SetSelected setting attribute 'selected' with
// type bool (idl: boolean).
func (_this *HTMLOptionElement) SetSelected(value bool) {
	input := value
	_this.Value_JS.Set("selected", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLOptionElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// Index returning attribute 'index' with
// type int (idl: long).
func (_this *HTMLOptionElement) Index() int {
	var ret int
	value := _this.Value_JS.Get("index")
	ret = (value).Int()
	return ret
}

// class: HTMLOptionsCollection
type HTMLOptionsCollection struct {
	dom.HTMLCollection
}

// HTMLOptionsCollectionFromJS is casting a js.Value into HTMLOptionsCollection.
func HTMLOptionsCollectionFromJS(value js.Value) *HTMLOptionsCollection {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLOptionsCollection{}
	ret.Value_JS = value
	return ret
}

// HTMLOptionsCollectionFromJS is casting from something that holds a js.Value into HTMLOptionsCollection.
func HTMLOptionsCollectionFromWrapper(input core.Wrapper) *HTMLOptionsCollection {
	return HTMLOptionsCollectionFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLOptionsCollection) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// SetLength setting attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLOptionsCollection) SetLength(value uint) {
	input := value
	_this.Value_JS.Set("length", input)
}

// SelectedIndex returning attribute 'selectedIndex' with
// type int (idl: long).
func (_this *HTMLOptionsCollection) SelectedIndex() int {
	var ret int
	value := _this.Value_JS.Get("selectedIndex")
	ret = (value).Int()
	return ret
}

// SetSelectedIndex setting attribute 'selectedIndex' with
// type int (idl: long).
func (_this *HTMLOptionsCollection) SetSelectedIndex(value int) {
	input := value
	_this.Value_JS.Set("selectedIndex", input)
}

func (_this *HTMLOptionsCollection) SetIndex(index uint, option *HTMLOptionElement) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := option.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *HTMLOptionsCollection) Add(element *Union, before *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	if before != nil {
		_p1 := before.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("add", _args[0:_end]...)
	return
}

func (_this *HTMLOptionsCollection) Remove(index int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

// class: HTMLOutputElement
type HTMLOutputElement struct {
	HTMLElement
}

// HTMLOutputElementFromJS is casting a js.Value into HTMLOutputElement.
func HTMLOutputElementFromJS(value js.Value) *HTMLOutputElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLOutputElement{}
	ret.Value_JS = value
	return ret
}

// HTMLOutputElementFromJS is casting from something that holds a js.Value into HTMLOutputElement.
func HTMLOutputElementFromWrapper(input core.Wrapper) *HTMLOutputElement {
	return HTMLOutputElementFromJS(input.JSValue())
}

// HtmlFor returning attribute 'htmlFor' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *HTMLOutputElement) HtmlFor() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("htmlFor")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLOutputElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// DefaultValue returning attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) DefaultValue() string {
	var ret string
	value := _this.Value_JS.Get("defaultValue")
	ret = (value).String()
	return ret
}

// SetDefaultValue setting attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) SetDefaultValue(value string) {
	input := value
	_this.Value_JS.Set("defaultValue", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLOutputElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLOutputElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLOutputElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLOutputElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

func (_this *HTMLOutputElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLOutputElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLOutputElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// class: HTMLParagraphElement
type HTMLParagraphElement struct {
	HTMLElement
}

// HTMLParagraphElementFromJS is casting a js.Value into HTMLParagraphElement.
func HTMLParagraphElementFromJS(value js.Value) *HTMLParagraphElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLParagraphElement{}
	ret.Value_JS = value
	return ret
}

// HTMLParagraphElementFromJS is casting from something that holds a js.Value into HTMLParagraphElement.
func HTMLParagraphElementFromWrapper(input core.Wrapper) *HTMLParagraphElement {
	return HTMLParagraphElementFromJS(input.JSValue())
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLParagraphElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLParagraphElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// class: HTMLParamElement
type HTMLParamElement struct {
	HTMLElement
}

// HTMLParamElementFromJS is casting a js.Value into HTMLParamElement.
func HTMLParamElementFromJS(value js.Value) *HTMLParamElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLParamElement{}
	ret.Value_JS = value
	return ret
}

// HTMLParamElementFromJS is casting from something that holds a js.Value into HTMLParamElement.
func HTMLParamElementFromWrapper(input core.Wrapper) *HTMLParamElement {
	return HTMLParamElementFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// ValueType returning attribute 'valueType' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) ValueType() string {
	var ret string
	value := _this.Value_JS.Get("valueType")
	ret = (value).String()
	return ret
}

// SetValueType setting attribute 'valueType' with
// type string (idl: DOMString).
func (_this *HTMLParamElement) SetValueType(value string) {
	input := value
	_this.Value_JS.Set("valueType", input)
}

// class: HTMLPictureElement
type HTMLPictureElement struct {
	HTMLElement
}

// HTMLPictureElementFromJS is casting a js.Value into HTMLPictureElement.
func HTMLPictureElementFromJS(value js.Value) *HTMLPictureElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLPictureElement{}
	ret.Value_JS = value
	return ret
}

// HTMLPictureElementFromJS is casting from something that holds a js.Value into HTMLPictureElement.
func HTMLPictureElementFromWrapper(input core.Wrapper) *HTMLPictureElement {
	return HTMLPictureElementFromJS(input.JSValue())
}

// class: HTMLPreElement
type HTMLPreElement struct {
	HTMLElement
}

// HTMLPreElementFromJS is casting a js.Value into HTMLPreElement.
func HTMLPreElementFromJS(value js.Value) *HTMLPreElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLPreElement{}
	ret.Value_JS = value
	return ret
}

// HTMLPreElementFromJS is casting from something that holds a js.Value into HTMLPreElement.
func HTMLPreElementFromWrapper(input core.Wrapper) *HTMLPreElement {
	return HTMLPreElementFromJS(input.JSValue())
}

// Width returning attribute 'width' with
// type int (idl: long).
func (_this *HTMLPreElement) Width() int {
	var ret int
	value := _this.Value_JS.Get("width")
	ret = (value).Int()
	return ret
}

// SetWidth setting attribute 'width' with
// type int (idl: long).
func (_this *HTMLPreElement) SetWidth(value int) {
	input := value
	_this.Value_JS.Set("width", input)
}

// class: HTMLProgressElement
type HTMLProgressElement struct {
	HTMLElement
}

// HTMLProgressElementFromJS is casting a js.Value into HTMLProgressElement.
func HTMLProgressElementFromJS(value js.Value) *HTMLProgressElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLProgressElement{}
	ret.Value_JS = value
	return ret
}

// HTMLProgressElementFromJS is casting from something that holds a js.Value into HTMLProgressElement.
func HTMLProgressElementFromWrapper(input core.Wrapper) *HTMLProgressElement {
	return HTMLProgressElementFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type float64 (idl: double).
func (_this *HTMLProgressElement) Value() float64 {
	var ret float64
	value := _this.Value_JS.Get("value")
	ret = (value).Float()
	return ret
}

// SetValue setting attribute 'value' with
// type float64 (idl: double).
func (_this *HTMLProgressElement) SetValue(value float64) {
	input := value
	_this.Value_JS.Set("value", input)
}

// Max returning attribute 'max' with
// type float64 (idl: double).
func (_this *HTMLProgressElement) Max() float64 {
	var ret float64
	value := _this.Value_JS.Get("max")
	ret = (value).Float()
	return ret
}

// SetMax setting attribute 'max' with
// type float64 (idl: double).
func (_this *HTMLProgressElement) SetMax(value float64) {
	input := value
	_this.Value_JS.Set("max", input)
}

// Position returning attribute 'position' with
// type float64 (idl: double).
func (_this *HTMLProgressElement) Position() float64 {
	var ret float64
	value := _this.Value_JS.Get("position")
	ret = (value).Float()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLProgressElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

// class: HTMLQuoteElement
type HTMLQuoteElement struct {
	HTMLElement
}

// HTMLQuoteElementFromJS is casting a js.Value into HTMLQuoteElement.
func HTMLQuoteElementFromJS(value js.Value) *HTMLQuoteElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLQuoteElement{}
	ret.Value_JS = value
	return ret
}

// HTMLQuoteElementFromJS is casting from something that holds a js.Value into HTMLQuoteElement.
func HTMLQuoteElementFromWrapper(input core.Wrapper) *HTMLQuoteElement {
	return HTMLQuoteElementFromJS(input.JSValue())
}

// Cite returning attribute 'cite' with
// type string (idl: USVString).
func (_this *HTMLQuoteElement) Cite() string {
	var ret string
	value := _this.Value_JS.Get("cite")
	ret = (value).String()
	return ret
}

// SetCite setting attribute 'cite' with
// type string (idl: USVString).
func (_this *HTMLQuoteElement) SetCite(value string) {
	input := value
	_this.Value_JS.Set("cite", input)
}

// class: HTMLScriptElement
type HTMLScriptElement struct {
	HTMLElement
}

// HTMLScriptElementFromJS is casting a js.Value into HTMLScriptElement.
func HTMLScriptElementFromJS(value js.Value) *HTMLScriptElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLScriptElement{}
	ret.Value_JS = value
	return ret
}

// HTMLScriptElementFromJS is casting from something that holds a js.Value into HTMLScriptElement.
func HTMLScriptElementFromWrapper(input core.Wrapper) *HTMLScriptElement {
	return HTMLScriptElementFromJS(input.JSValue())
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLScriptElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLScriptElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// NoModule returning attribute 'noModule' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) NoModule() bool {
	var ret bool
	value := _this.Value_JS.Get("noModule")
	ret = (value).Bool()
	return ret
}

// SetNoModule setting attribute 'noModule' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) SetNoModule(value bool) {
	input := value
	_this.Value_JS.Set("noModule", input)
}

// Async returning attribute 'async' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) Async() bool {
	var ret bool
	value := _this.Value_JS.Get("async")
	ret = (value).Bool()
	return ret
}

// SetAsync setting attribute 'async' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) SetAsync(value bool) {
	input := value
	_this.Value_JS.Set("async", input)
}

// Defer returning attribute 'defer' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) Defer() bool {
	var ret bool
	value := _this.Value_JS.Get("defer")
	ret = (value).Bool()
	return ret
}

// SetDefer setting attribute 'defer' with
// type bool (idl: boolean).
func (_this *HTMLScriptElement) SetDefer(value bool) {
	input := value
	_this.Value_JS.Set("defer", input)
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetCrossOrigin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("crossOrigin", input)
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// Integrity returning attribute 'integrity' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) Integrity() string {
	var ret string
	value := _this.Value_JS.Get("integrity")
	ret = (value).String()
	return ret
}

// SetIntegrity setting attribute 'integrity' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetIntegrity(value string) {
	input := value
	_this.Value_JS.Set("integrity", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Charset returning attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) Charset() string {
	var ret string
	value := _this.Value_JS.Get("charset")
	ret = (value).String()
	return ret
}

// SetCharset setting attribute 'charset' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetCharset(value string) {
	input := value
	_this.Value_JS.Set("charset", input)
}

// Event returning attribute 'event' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) Event() string {
	var ret string
	value := _this.Value_JS.Get("event")
	ret = (value).String()
	return ret
}

// SetEvent setting attribute 'event' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetEvent(value string) {
	input := value
	_this.Value_JS.Set("event", input)
}

// HtmlFor returning attribute 'htmlFor' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) HtmlFor() string {
	var ret string
	value := _this.Value_JS.Get("htmlFor")
	ret = (value).String()
	return ret
}

// SetHtmlFor setting attribute 'htmlFor' with
// type string (idl: DOMString).
func (_this *HTMLScriptElement) SetHtmlFor(value string) {
	input := value
	_this.Value_JS.Set("htmlFor", input)
}

// class: HTMLSelectElement
type HTMLSelectElement struct {
	HTMLElement
}

// HTMLSelectElementFromJS is casting a js.Value into HTMLSelectElement.
func HTMLSelectElementFromJS(value js.Value) *HTMLSelectElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLSelectElement{}
	ret.Value_JS = value
	return ret
}

// HTMLSelectElementFromJS is casting from something that holds a js.Value into HTMLSelectElement.
func HTMLSelectElementFromWrapper(input core.Wrapper) *HTMLSelectElement {
	return HTMLSelectElementFromJS(input.JSValue())
}

// Autocomplete returning attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) Autocomplete() string {
	var ret string
	value := _this.Value_JS.Get("autocomplete")
	ret = (value).String()
	return ret
}

// SetAutocomplete setting attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) SetAutocomplete(value string) {
	input := value
	_this.Value_JS.Set("autocomplete", input)
}

// Autofocus returning attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) Autofocus() bool {
	var ret bool
	value := _this.Value_JS.Get("autofocus")
	ret = (value).Bool()
	return ret
}

// SetAutofocus setting attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) SetAutofocus(value bool) {
	input := value
	_this.Value_JS.Set("autofocus", input)
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLSelectElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// Multiple returning attribute 'multiple' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) Multiple() bool {
	var ret bool
	value := _this.Value_JS.Get("multiple")
	ret = (value).Bool()
	return ret
}

// SetMultiple setting attribute 'multiple' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) SetMultiple(value bool) {
	input := value
	_this.Value_JS.Set("multiple", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Required returning attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) Required() bool {
	var ret bool
	value := _this.Value_JS.Get("required")
	ret = (value).Bool()
	return ret
}

// SetRequired setting attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) SetRequired(value bool) {
	input := value
	_this.Value_JS.Set("required", input)
}

// Size returning attribute 'size' with
// type uint (idl: unsigned long).
func (_this *HTMLSelectElement) Size() uint {
	var ret uint
	value := _this.Value_JS.Get("size")
	ret = (uint)((value).Int())
	return ret
}

// SetSize setting attribute 'size' with
// type uint (idl: unsigned long).
func (_this *HTMLSelectElement) SetSize(value uint) {
	input := value
	_this.Value_JS.Set("size", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// Options returning attribute 'options' with
// type HTMLOptionsCollection (idl: HTMLOptionsCollection).
func (_this *HTMLSelectElement) Options() *HTMLOptionsCollection {
	var ret *HTMLOptionsCollection
	value := _this.Value_JS.Get("options")
	ret = HTMLOptionsCollectionFromJS(value)
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLSelectElement) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// SetLength setting attribute 'length' with
// type uint (idl: unsigned long).
func (_this *HTMLSelectElement) SetLength(value uint) {
	input := value
	_this.Value_JS.Set("length", input)
}

// SelectedOptions returning attribute 'selectedOptions' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLSelectElement) SelectedOptions() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("selectedOptions")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// SelectedIndex returning attribute 'selectedIndex' with
// type int (idl: long).
func (_this *HTMLSelectElement) SelectedIndex() int {
	var ret int
	value := _this.Value_JS.Get("selectedIndex")
	ret = (value).Int()
	return ret
}

// SetSelectedIndex setting attribute 'selectedIndex' with
// type int (idl: long).
func (_this *HTMLSelectElement) SetSelectedIndex(value int) {
	input := value
	_this.Value_JS.Set("selectedIndex", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLSelectElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLSelectElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLSelectElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLSelectElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

func (_this *HTMLSelectElement) Index(index uint) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLSelectElement) SetIndex(index uint, option *HTMLOptionElement) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := option.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *HTMLSelectElement) Item(index uint) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("item", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = dom.ElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLSelectElement) NamedItem(name string) (_result *HTMLOptionElement) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("namedItem", _args[0:_end]...)
	var (
		_converted *HTMLOptionElement // javascript: HTMLOptionElement _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = HTMLOptionElementFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *HTMLSelectElement) Add(element *Union, before *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	if before != nil {
		_p1 := before.JSValue()
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("add", _args[0:_end]...)
	return
}

func (_this *HTMLSelectElement) Remove2() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

func (_this *HTMLSelectElement) Remove3(index int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("remove", _args[0:_end]...)
	return
}

func (_this *HTMLSelectElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLSelectElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLSelectElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

// class: HTMLSlotElement
type HTMLSlotElement struct {
	HTMLElement
}

// HTMLSlotElementFromJS is casting a js.Value into HTMLSlotElement.
func HTMLSlotElementFromJS(value js.Value) *HTMLSlotElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLSlotElement{}
	ret.Value_JS = value
	return ret
}

// HTMLSlotElementFromJS is casting from something that holds a js.Value into HTMLSlotElement.
func HTMLSlotElementFromWrapper(input core.Wrapper) *HTMLSlotElement {
	return HTMLSlotElementFromJS(input.JSValue())
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLSlotElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLSlotElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

func (_this *HTMLSlotElement) AssignedNodes(options *AssignedNodesOptions) (_result []*dom.Node) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("assignedNodes", _args[0:_end]...)
	var (
		_converted []*dom.Node // javascript: sequence<Node> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*dom.Node, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *dom.Node
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = dom.NodeFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *HTMLSlotElement) AssignedElements(options *AssignedNodesOptions) (_result []*dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("assignedElements", _args[0:_end]...)
	var (
		_converted []*dom.Element // javascript: sequence<Element> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*dom.Element, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *dom.Element
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = dom.ElementFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// class: HTMLSourceElement
type HTMLSourceElement struct {
	HTMLElement
}

// HTMLSourceElementFromJS is casting a js.Value into HTMLSourceElement.
func HTMLSourceElementFromJS(value js.Value) *HTMLSourceElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLSourceElement{}
	ret.Value_JS = value
	return ret
}

// HTMLSourceElementFromJS is casting from something that holds a js.Value into HTMLSourceElement.
func HTMLSourceElementFromWrapper(input core.Wrapper) *HTMLSourceElement {
	return HTMLSourceElementFromJS(input.JSValue())
}

// Src returning attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLSourceElement) Src() string {
	var ret string
	value := _this.Value_JS.Get("src")
	ret = (value).String()
	return ret
}

// SetSrc setting attribute 'src' with
// type string (idl: USVString).
func (_this *HTMLSourceElement) SetSrc(value string) {
	input := value
	_this.Value_JS.Set("src", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Srcset returning attribute 'srcset' with
// type string (idl: USVString).
func (_this *HTMLSourceElement) Srcset() string {
	var ret string
	value := _this.Value_JS.Get("srcset")
	ret = (value).String()
	return ret
}

// SetSrcset setting attribute 'srcset' with
// type string (idl: USVString).
func (_this *HTMLSourceElement) SetSrcset(value string) {
	input := value
	_this.Value_JS.Set("srcset", input)
}

// Sizes returning attribute 'sizes' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) Sizes() string {
	var ret string
	value := _this.Value_JS.Get("sizes")
	ret = (value).String()
	return ret
}

// SetSizes setting attribute 'sizes' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) SetSizes(value string) {
	input := value
	_this.Value_JS.Set("sizes", input)
}

// Media returning attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) Media() string {
	var ret string
	value := _this.Value_JS.Get("media")
	ret = (value).String()
	return ret
}

// SetMedia setting attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLSourceElement) SetMedia(value string) {
	input := value
	_this.Value_JS.Set("media", input)
}

// class: HTMLSpanElement
type HTMLSpanElement struct {
	HTMLElement
}

// HTMLSpanElementFromJS is casting a js.Value into HTMLSpanElement.
func HTMLSpanElementFromJS(value js.Value) *HTMLSpanElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLSpanElement{}
	ret.Value_JS = value
	return ret
}

// HTMLSpanElementFromJS is casting from something that holds a js.Value into HTMLSpanElement.
func HTMLSpanElementFromWrapper(input core.Wrapper) *HTMLSpanElement {
	return HTMLSpanElementFromJS(input.JSValue())
}

// class: HTMLStyleElement
type HTMLStyleElement struct {
	HTMLElement
}

// HTMLStyleElementFromJS is casting a js.Value into HTMLStyleElement.
func HTMLStyleElementFromJS(value js.Value) *HTMLStyleElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLStyleElement{}
	ret.Value_JS = value
	return ret
}

// HTMLStyleElementFromJS is casting from something that holds a js.Value into HTMLStyleElement.
func HTMLStyleElementFromWrapper(input core.Wrapper) *HTMLStyleElement {
	return HTMLStyleElementFromJS(input.JSValue())
}

// Media returning attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLStyleElement) Media() string {
	var ret string
	value := _this.Value_JS.Get("media")
	ret = (value).String()
	return ret
}

// SetMedia setting attribute 'media' with
// type string (idl: DOMString).
func (_this *HTMLStyleElement) SetMedia(value string) {
	input := value
	_this.Value_JS.Set("media", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLStyleElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLStyleElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Sheet returning attribute 'sheet' with
// type cssom.CSSStyleSheet (idl: CSSStyleSheet).
func (_this *HTMLStyleElement) Sheet() *cssom.CSSStyleSheet {
	var ret *cssom.CSSStyleSheet
	value := _this.Value_JS.Get("sheet")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = cssom.CSSStyleSheetFromJS(value)
	}
	return ret
}

// class: HTMLTableCaptionElement
type HTMLTableCaptionElement struct {
	HTMLElement
}

// HTMLTableCaptionElementFromJS is casting a js.Value into HTMLTableCaptionElement.
func HTMLTableCaptionElementFromJS(value js.Value) *HTMLTableCaptionElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableCaptionElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableCaptionElementFromJS is casting from something that holds a js.Value into HTMLTableCaptionElement.
func HTMLTableCaptionElementFromWrapper(input core.Wrapper) *HTMLTableCaptionElement {
	return HTMLTableCaptionElementFromJS(input.JSValue())
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableCaptionElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableCaptionElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// class: HTMLTableCellElement
type HTMLTableCellElement struct {
	HTMLElement
}

// HTMLTableCellElementFromJS is casting a js.Value into HTMLTableCellElement.
func HTMLTableCellElementFromJS(value js.Value) *HTMLTableCellElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableCellElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableCellElementFromJS is casting from something that holds a js.Value into HTMLTableCellElement.
func HTMLTableCellElementFromWrapper(input core.Wrapper) *HTMLTableCellElement {
	return HTMLTableCellElementFromJS(input.JSValue())
}

// ColSpan returning attribute 'colSpan' with
// type uint (idl: unsigned long).
func (_this *HTMLTableCellElement) ColSpan() uint {
	var ret uint
	value := _this.Value_JS.Get("colSpan")
	ret = (uint)((value).Int())
	return ret
}

// SetColSpan setting attribute 'colSpan' with
// type uint (idl: unsigned long).
func (_this *HTMLTableCellElement) SetColSpan(value uint) {
	input := value
	_this.Value_JS.Set("colSpan", input)
}

// RowSpan returning attribute 'rowSpan' with
// type uint (idl: unsigned long).
func (_this *HTMLTableCellElement) RowSpan() uint {
	var ret uint
	value := _this.Value_JS.Get("rowSpan")
	ret = (uint)((value).Int())
	return ret
}

// SetRowSpan setting attribute 'rowSpan' with
// type uint (idl: unsigned long).
func (_this *HTMLTableCellElement) SetRowSpan(value uint) {
	input := value
	_this.Value_JS.Set("rowSpan", input)
}

// Headers returning attribute 'headers' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Headers() string {
	var ret string
	value := _this.Value_JS.Get("headers")
	ret = (value).String()
	return ret
}

// SetHeaders setting attribute 'headers' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetHeaders(value string) {
	input := value
	_this.Value_JS.Set("headers", input)
}

// CellIndex returning attribute 'cellIndex' with
// type int (idl: long).
func (_this *HTMLTableCellElement) CellIndex() int {
	var ret int
	value := _this.Value_JS.Get("cellIndex")
	ret = (value).Int()
	return ret
}

// Scope returning attribute 'scope' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Scope() string {
	var ret string
	value := _this.Value_JS.Get("scope")
	ret = (value).String()
	return ret
}

// SetScope setting attribute 'scope' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetScope(value string) {
	input := value
	_this.Value_JS.Set("scope", input)
}

// Abbr returning attribute 'abbr' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Abbr() string {
	var ret string
	value := _this.Value_JS.Get("abbr")
	ret = (value).String()
	return ret
}

// SetAbbr setting attribute 'abbr' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetAbbr(value string) {
	input := value
	_this.Value_JS.Set("abbr", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Axis returning attribute 'axis' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Axis() string {
	var ret string
	value := _this.Value_JS.Get("axis")
	ret = (value).String()
	return ret
}

// SetAxis setting attribute 'axis' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetAxis(value string) {
	input := value
	_this.Value_JS.Set("axis", input)
}

// Height returning attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Height() string {
	var ret string
	value := _this.Value_JS.Get("height")
	ret = (value).String()
	return ret
}

// SetHeight setting attribute 'height' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetHeight(value string) {
	input := value
	_this.Value_JS.Set("height", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// Ch returning attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) Ch() string {
	var ret string
	value := _this.Value_JS.Get("ch")
	ret = (value).String()
	return ret
}

// SetCh setting attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetCh(value string) {
	input := value
	_this.Value_JS.Set("ch", input)
}

// ChOff returning attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) ChOff() string {
	var ret string
	value := _this.Value_JS.Get("chOff")
	ret = (value).String()
	return ret
}

// SetChOff setting attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetChOff(value string) {
	input := value
	_this.Value_JS.Set("chOff", input)
}

// NoWrap returning attribute 'noWrap' with
// type bool (idl: boolean).
func (_this *HTMLTableCellElement) NoWrap() bool {
	var ret bool
	value := _this.Value_JS.Get("noWrap")
	ret = (value).Bool()
	return ret
}

// SetNoWrap setting attribute 'noWrap' with
// type bool (idl: boolean).
func (_this *HTMLTableCellElement) SetNoWrap(value bool) {
	input := value
	_this.Value_JS.Set("noWrap", input)
}

// VAlign returning attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) VAlign() string {
	var ret string
	value := _this.Value_JS.Get("vAlign")
	ret = (value).String()
	return ret
}

// SetVAlign setting attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetVAlign(value string) {
	input := value
	_this.Value_JS.Set("vAlign", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableCellElement) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// class: HTMLTableColElement
type HTMLTableColElement struct {
	HTMLElement
}

// HTMLTableColElementFromJS is casting a js.Value into HTMLTableColElement.
func HTMLTableColElementFromJS(value js.Value) *HTMLTableColElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableColElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableColElementFromJS is casting from something that holds a js.Value into HTMLTableColElement.
func HTMLTableColElementFromWrapper(input core.Wrapper) *HTMLTableColElement {
	return HTMLTableColElementFromJS(input.JSValue())
}

// Span returning attribute 'span' with
// type uint (idl: unsigned long).
func (_this *HTMLTableColElement) Span() uint {
	var ret uint
	value := _this.Value_JS.Get("span")
	ret = (uint)((value).Int())
	return ret
}

// SetSpan setting attribute 'span' with
// type uint (idl: unsigned long).
func (_this *HTMLTableColElement) SetSpan(value uint) {
	input := value
	_this.Value_JS.Set("span", input)
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Ch returning attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) Ch() string {
	var ret string
	value := _this.Value_JS.Get("ch")
	ret = (value).String()
	return ret
}

// SetCh setting attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) SetCh(value string) {
	input := value
	_this.Value_JS.Set("ch", input)
}

// ChOff returning attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) ChOff() string {
	var ret string
	value := _this.Value_JS.Get("chOff")
	ret = (value).String()
	return ret
}

// SetChOff setting attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) SetChOff(value string) {
	input := value
	_this.Value_JS.Set("chOff", input)
}

// VAlign returning attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) VAlign() string {
	var ret string
	value := _this.Value_JS.Get("vAlign")
	ret = (value).String()
	return ret
}

// SetVAlign setting attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) SetVAlign(value string) {
	input := value
	_this.Value_JS.Set("vAlign", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableColElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// class: HTMLTableElement
type HTMLTableElement struct {
	HTMLElement
}

// HTMLTableElementFromJS is casting a js.Value into HTMLTableElement.
func HTMLTableElementFromJS(value js.Value) *HTMLTableElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableElementFromJS is casting from something that holds a js.Value into HTMLTableElement.
func HTMLTableElementFromWrapper(input core.Wrapper) *HTMLTableElement {
	return HTMLTableElementFromJS(input.JSValue())
}

// Caption returning attribute 'caption' with
// type HTMLTableCaptionElement (idl: HTMLTableCaptionElement).
func (_this *HTMLTableElement) Caption() *HTMLTableCaptionElement {
	var ret *HTMLTableCaptionElement
	value := _this.Value_JS.Get("caption")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLTableCaptionElementFromJS(value)
	}
	return ret
}

// SetCaption setting attribute 'caption' with
// type HTMLTableCaptionElement (idl: HTMLTableCaptionElement).
func (_this *HTMLTableElement) SetCaption(value *HTMLTableCaptionElement) {
	input := value.JSValue()
	_this.Value_JS.Set("caption", input)
}

// THead returning attribute 'tHead' with
// type HTMLTableSectionElement (idl: HTMLTableSectionElement).
func (_this *HTMLTableElement) THead() *HTMLTableSectionElement {
	var ret *HTMLTableSectionElement
	value := _this.Value_JS.Get("tHead")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLTableSectionElementFromJS(value)
	}
	return ret
}

// SetTHead setting attribute 'tHead' with
// type HTMLTableSectionElement (idl: HTMLTableSectionElement).
func (_this *HTMLTableElement) SetTHead(value *HTMLTableSectionElement) {
	input := value.JSValue()
	_this.Value_JS.Set("tHead", input)
}

// TFoot returning attribute 'tFoot' with
// type HTMLTableSectionElement (idl: HTMLTableSectionElement).
func (_this *HTMLTableElement) TFoot() *HTMLTableSectionElement {
	var ret *HTMLTableSectionElement
	value := _this.Value_JS.Get("tFoot")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLTableSectionElementFromJS(value)
	}
	return ret
}

// SetTFoot setting attribute 'tFoot' with
// type HTMLTableSectionElement (idl: HTMLTableSectionElement).
func (_this *HTMLTableElement) SetTFoot(value *HTMLTableSectionElement) {
	input := value.JSValue()
	_this.Value_JS.Set("tFoot", input)
}

// TBodies returning attribute 'tBodies' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLTableElement) TBodies() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("tBodies")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Rows returning attribute 'rows' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLTableElement) Rows() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("rows")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Border returning attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Border() string {
	var ret string
	value := _this.Value_JS.Get("border")
	ret = (value).String()
	return ret
}

// SetBorder setting attribute 'border' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetBorder(value string) {
	input := value
	_this.Value_JS.Set("border", input)
}

// Frame returning attribute 'frame' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Frame() string {
	var ret string
	value := _this.Value_JS.Get("frame")
	ret = (value).String()
	return ret
}

// SetFrame setting attribute 'frame' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetFrame(value string) {
	input := value
	_this.Value_JS.Set("frame", input)
}

// Rules returning attribute 'rules' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Rules() string {
	var ret string
	value := _this.Value_JS.Get("rules")
	ret = (value).String()
	return ret
}

// SetRules setting attribute 'rules' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetRules(value string) {
	input := value
	_this.Value_JS.Set("rules", input)
}

// Summary returning attribute 'summary' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Summary() string {
	var ret string
	value := _this.Value_JS.Get("summary")
	ret = (value).String()
	return ret
}

// SetSummary setting attribute 'summary' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetSummary(value string) {
	input := value
	_this.Value_JS.Set("summary", input)
}

// Width returning attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) Width() string {
	var ret string
	value := _this.Value_JS.Get("width")
	ret = (value).String()
	return ret
}

// SetWidth setting attribute 'width' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetWidth(value string) {
	input := value
	_this.Value_JS.Set("width", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

// CellPadding returning attribute 'cellPadding' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) CellPadding() string {
	var ret string
	value := _this.Value_JS.Get("cellPadding")
	ret = (value).String()
	return ret
}

// SetCellPadding setting attribute 'cellPadding' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetCellPadding(value string) {
	input := value
	_this.Value_JS.Set("cellPadding", input)
}

// CellSpacing returning attribute 'cellSpacing' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) CellSpacing() string {
	var ret string
	value := _this.Value_JS.Get("cellSpacing")
	ret = (value).String()
	return ret
}

// SetCellSpacing setting attribute 'cellSpacing' with
// type string (idl: DOMString).
func (_this *HTMLTableElement) SetCellSpacing(value string) {
	input := value
	_this.Value_JS.Set("cellSpacing", input)
}

func (_this *HTMLTableElement) CreateCaption() (_result *HTMLTableCaptionElement) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createCaption", _args[0:_end]...)
	var (
		_converted *HTMLTableCaptionElement // javascript: HTMLTableCaptionElement _what_return_name
	)
	_converted = HTMLTableCaptionElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableElement) DeleteCaption() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deleteCaption", _args[0:_end]...)
	return
}

func (_this *HTMLTableElement) CreateTHead() (_result *HTMLTableSectionElement) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTHead", _args[0:_end]...)
	var (
		_converted *HTMLTableSectionElement // javascript: HTMLTableSectionElement _what_return_name
	)
	_converted = HTMLTableSectionElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableElement) DeleteTHead() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deleteTHead", _args[0:_end]...)
	return
}

func (_this *HTMLTableElement) CreateTFoot() (_result *HTMLTableSectionElement) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTFoot", _args[0:_end]...)
	var (
		_converted *HTMLTableSectionElement // javascript: HTMLTableSectionElement _what_return_name
	)
	_converted = HTMLTableSectionElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableElement) DeleteTFoot() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deleteTFoot", _args[0:_end]...)
	return
}

func (_this *HTMLTableElement) CreateTBody() (_result *HTMLTableSectionElement) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTBody", _args[0:_end]...)
	var (
		_converted *HTMLTableSectionElement // javascript: HTMLTableSectionElement _what_return_name
	)
	_converted = HTMLTableSectionElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableElement) InsertRow(index *int) (_result *HTMLTableRowElement) {
	var (
		_args [1]interface{}
		_end  int
	)
	if index != nil {

		var _p0 interface{}
		if index != nil {
			_p0 = *(index)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("insertRow", _args[0:_end]...)
	var (
		_converted *HTMLTableRowElement // javascript: HTMLTableRowElement _what_return_name
	)
	_converted = HTMLTableRowElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableElement) DeleteRow(index int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRow", _args[0:_end]...)
	return
}

// class: HTMLTableRowElement
type HTMLTableRowElement struct {
	HTMLElement
}

// HTMLTableRowElementFromJS is casting a js.Value into HTMLTableRowElement.
func HTMLTableRowElementFromJS(value js.Value) *HTMLTableRowElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableRowElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableRowElementFromJS is casting from something that holds a js.Value into HTMLTableRowElement.
func HTMLTableRowElementFromWrapper(input core.Wrapper) *HTMLTableRowElement {
	return HTMLTableRowElementFromJS(input.JSValue())
}

// RowIndex returning attribute 'rowIndex' with
// type int (idl: long).
func (_this *HTMLTableRowElement) RowIndex() int {
	var ret int
	value := _this.Value_JS.Get("rowIndex")
	ret = (value).Int()
	return ret
}

// SectionRowIndex returning attribute 'sectionRowIndex' with
// type int (idl: long).
func (_this *HTMLTableRowElement) SectionRowIndex() int {
	var ret int
	value := _this.Value_JS.Get("sectionRowIndex")
	ret = (value).Int()
	return ret
}

// Cells returning attribute 'cells' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLTableRowElement) Cells() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("cells")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Ch returning attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) Ch() string {
	var ret string
	value := _this.Value_JS.Get("ch")
	ret = (value).String()
	return ret
}

// SetCh setting attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) SetCh(value string) {
	input := value
	_this.Value_JS.Set("ch", input)
}

// ChOff returning attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) ChOff() string {
	var ret string
	value := _this.Value_JS.Get("chOff")
	ret = (value).String()
	return ret
}

// SetChOff setting attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) SetChOff(value string) {
	input := value
	_this.Value_JS.Set("chOff", input)
}

// VAlign returning attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) VAlign() string {
	var ret string
	value := _this.Value_JS.Get("vAlign")
	ret = (value).String()
	return ret
}

// SetVAlign setting attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) SetVAlign(value string) {
	input := value
	_this.Value_JS.Set("vAlign", input)
}

// BgColor returning attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) BgColor() string {
	var ret string
	value := _this.Value_JS.Get("bgColor")
	ret = (value).String()
	return ret
}

// SetBgColor setting attribute 'bgColor' with
// type string (idl: DOMString).
func (_this *HTMLTableRowElement) SetBgColor(value string) {
	input := value
	_this.Value_JS.Set("bgColor", input)
}

func (_this *HTMLTableRowElement) InsertCell(index *int) (_result *HTMLTableCellElement) {
	var (
		_args [1]interface{}
		_end  int
	)
	if index != nil {

		var _p0 interface{}
		if index != nil {
			_p0 = *(index)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("insertCell", _args[0:_end]...)
	var (
		_converted *HTMLTableCellElement // javascript: HTMLTableCellElement _what_return_name
	)
	_converted = HTMLTableCellElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableRowElement) DeleteCell(index int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteCell", _args[0:_end]...)
	return
}

// class: HTMLTableSectionElement
type HTMLTableSectionElement struct {
	HTMLElement
}

// HTMLTableSectionElementFromJS is casting a js.Value into HTMLTableSectionElement.
func HTMLTableSectionElementFromJS(value js.Value) *HTMLTableSectionElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTableSectionElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTableSectionElementFromJS is casting from something that holds a js.Value into HTMLTableSectionElement.
func HTMLTableSectionElementFromWrapper(input core.Wrapper) *HTMLTableSectionElement {
	return HTMLTableSectionElementFromJS(input.JSValue())
}

// Rows returning attribute 'rows' with
// type dom.HTMLCollection (idl: HTMLCollection).
func (_this *HTMLTableSectionElement) Rows() *dom.HTMLCollection {
	var ret *dom.HTMLCollection
	value := _this.Value_JS.Get("rows")
	ret = dom.HTMLCollectionFromJS(value)
	return ret
}

// Align returning attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) Align() string {
	var ret string
	value := _this.Value_JS.Get("align")
	ret = (value).String()
	return ret
}

// SetAlign setting attribute 'align' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) SetAlign(value string) {
	input := value
	_this.Value_JS.Set("align", input)
}

// Ch returning attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) Ch() string {
	var ret string
	value := _this.Value_JS.Get("ch")
	ret = (value).String()
	return ret
}

// SetCh setting attribute 'ch' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) SetCh(value string) {
	input := value
	_this.Value_JS.Set("ch", input)
}

// ChOff returning attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) ChOff() string {
	var ret string
	value := _this.Value_JS.Get("chOff")
	ret = (value).String()
	return ret
}

// SetChOff setting attribute 'chOff' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) SetChOff(value string) {
	input := value
	_this.Value_JS.Set("chOff", input)
}

// VAlign returning attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) VAlign() string {
	var ret string
	value := _this.Value_JS.Get("vAlign")
	ret = (value).String()
	return ret
}

// SetVAlign setting attribute 'vAlign' with
// type string (idl: DOMString).
func (_this *HTMLTableSectionElement) SetVAlign(value string) {
	input := value
	_this.Value_JS.Set("vAlign", input)
}

func (_this *HTMLTableSectionElement) InsertRow(index *int) (_result *HTMLTableRowElement) {
	var (
		_args [1]interface{}
		_end  int
	)
	if index != nil {

		var _p0 interface{}
		if index != nil {
			_p0 = *(index)
		} else {
			_p0 = nil
		}
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("insertRow", _args[0:_end]...)
	var (
		_converted *HTMLTableRowElement // javascript: HTMLTableRowElement _what_return_name
	)
	_converted = HTMLTableRowElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *HTMLTableSectionElement) DeleteRow(index int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRow", _args[0:_end]...)
	return
}

// class: HTMLTemplateElement
type HTMLTemplateElement struct {
	HTMLElement
}

// HTMLTemplateElementFromJS is casting a js.Value into HTMLTemplateElement.
func HTMLTemplateElementFromJS(value js.Value) *HTMLTemplateElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTemplateElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTemplateElementFromJS is casting from something that holds a js.Value into HTMLTemplateElement.
func HTMLTemplateElementFromWrapper(input core.Wrapper) *HTMLTemplateElement {
	return HTMLTemplateElementFromJS(input.JSValue())
}

// Content returning attribute 'content' with
// type dom.DocumentFragment (idl: DocumentFragment).
func (_this *HTMLTemplateElement) Content() *dom.DocumentFragment {
	var ret *dom.DocumentFragment
	value := _this.Value_JS.Get("content")
	ret = dom.DocumentFragmentFromJS(value)
	return ret
}

// class: HTMLTextAreaElement
type HTMLTextAreaElement struct {
	HTMLElement
}

// HTMLTextAreaElementFromJS is casting a js.Value into HTMLTextAreaElement.
func HTMLTextAreaElementFromJS(value js.Value) *HTMLTextAreaElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTextAreaElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTextAreaElementFromJS is casting from something that holds a js.Value into HTMLTextAreaElement.
func HTMLTextAreaElementFromWrapper(input core.Wrapper) *HTMLTextAreaElement {
	return HTMLTextAreaElementFromJS(input.JSValue())
}

// Autocomplete returning attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Autocomplete() string {
	var ret string
	value := _this.Value_JS.Get("autocomplete")
	ret = (value).String()
	return ret
}

// SetAutocomplete setting attribute 'autocomplete' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetAutocomplete(value string) {
	input := value
	_this.Value_JS.Set("autocomplete", input)
}

// Autofocus returning attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) Autofocus() bool {
	var ret bool
	value := _this.Value_JS.Get("autofocus")
	ret = (value).Bool()
	return ret
}

// SetAutofocus setting attribute 'autofocus' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) SetAutofocus(value bool) {
	input := value
	_this.Value_JS.Set("autofocus", input)
}

// Cols returning attribute 'cols' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) Cols() uint {
	var ret uint
	value := _this.Value_JS.Get("cols")
	ret = (uint)((value).Int())
	return ret
}

// SetCols setting attribute 'cols' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SetCols(value uint) {
	input := value
	_this.Value_JS.Set("cols", input)
}

// DirName returning attribute 'dirName' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) DirName() string {
	var ret string
	value := _this.Value_JS.Get("dirName")
	ret = (value).String()
	return ret
}

// SetDirName setting attribute 'dirName' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetDirName(value string) {
	input := value
	_this.Value_JS.Set("dirName", input)
}

// Disabled returning attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) Disabled() bool {
	var ret bool
	value := _this.Value_JS.Get("disabled")
	ret = (value).Bool()
	return ret
}

// SetDisabled setting attribute 'disabled' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) SetDisabled(value bool) {
	input := value
	_this.Value_JS.Set("disabled", input)
}

// Form returning attribute 'form' with
// type HTMLFormElement (idl: HTMLFormElement).
func (_this *HTMLTextAreaElement) Form() *HTMLFormElement {
	var ret *HTMLFormElement
	value := _this.Value_JS.Get("form")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = HTMLFormElementFromJS(value)
	}
	return ret
}

// MaxLength returning attribute 'maxLength' with
// type int (idl: long).
func (_this *HTMLTextAreaElement) MaxLength() int {
	var ret int
	value := _this.Value_JS.Get("maxLength")
	ret = (value).Int()
	return ret
}

// SetMaxLength setting attribute 'maxLength' with
// type int (idl: long).
func (_this *HTMLTextAreaElement) SetMaxLength(value int) {
	input := value
	_this.Value_JS.Set("maxLength", input)
}

// MinLength returning attribute 'minLength' with
// type int (idl: long).
func (_this *HTMLTextAreaElement) MinLength() int {
	var ret int
	value := _this.Value_JS.Get("minLength")
	ret = (value).Int()
	return ret
}

// SetMinLength setting attribute 'minLength' with
// type int (idl: long).
func (_this *HTMLTextAreaElement) SetMinLength(value int) {
	input := value
	_this.Value_JS.Set("minLength", input)
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Name() string {
	var ret string
	value := _this.Value_JS.Get("name")
	ret = (value).String()
	return ret
}

// SetName setting attribute 'name' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetName(value string) {
	input := value
	_this.Value_JS.Set("name", input)
}

// Placeholder returning attribute 'placeholder' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Placeholder() string {
	var ret string
	value := _this.Value_JS.Get("placeholder")
	ret = (value).String()
	return ret
}

// SetPlaceholder setting attribute 'placeholder' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetPlaceholder(value string) {
	input := value
	_this.Value_JS.Set("placeholder", input)
}

// ReadOnly returning attribute 'readOnly' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) ReadOnly() bool {
	var ret bool
	value := _this.Value_JS.Get("readOnly")
	ret = (value).Bool()
	return ret
}

// SetReadOnly setting attribute 'readOnly' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) SetReadOnly(value bool) {
	input := value
	_this.Value_JS.Set("readOnly", input)
}

// Required returning attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) Required() bool {
	var ret bool
	value := _this.Value_JS.Get("required")
	ret = (value).Bool()
	return ret
}

// SetRequired setting attribute 'required' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) SetRequired(value bool) {
	input := value
	_this.Value_JS.Set("required", input)
}

// Rows returning attribute 'rows' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) Rows() uint {
	var ret uint
	value := _this.Value_JS.Get("rows")
	ret = (uint)((value).Int())
	return ret
}

// SetRows setting attribute 'rows' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SetRows(value uint) {
	input := value
	_this.Value_JS.Set("rows", input)
}

// Wrap returning attribute 'wrap' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Wrap() string {
	var ret string
	value := _this.Value_JS.Get("wrap")
	ret = (value).String()
	return ret
}

// SetWrap setting attribute 'wrap' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetWrap(value string) {
	input := value
	_this.Value_JS.Set("wrap", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// DefaultValue returning attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) DefaultValue() string {
	var ret string
	value := _this.Value_JS.Get("defaultValue")
	ret = (value).String()
	return ret
}

// SetDefaultValue setting attribute 'defaultValue' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetDefaultValue(value string) {
	input := value
	_this.Value_JS.Set("defaultValue", input)
}

// Value returning attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) Value() string {
	var ret string
	value := _this.Value_JS.Get("value")
	ret = (value).String()
	return ret
}

// SetValue setting attribute 'value' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetValue(value string) {
	input := value
	_this.Value_JS.Set("value", input)
}

// TextLength returning attribute 'textLength' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) TextLength() uint {
	var ret uint
	value := _this.Value_JS.Get("textLength")
	ret = (uint)((value).Int())
	return ret
}

// WillValidate returning attribute 'willValidate' with
// type bool (idl: boolean).
func (_this *HTMLTextAreaElement) WillValidate() bool {
	var ret bool
	value := _this.Value_JS.Get("willValidate")
	ret = (value).Bool()
	return ret
}

// Validity returning attribute 'validity' with
// type ValidityState (idl: ValidityState).
func (_this *HTMLTextAreaElement) Validity() *ValidityState {
	var ret *ValidityState
	value := _this.Value_JS.Get("validity")
	ret = ValidityStateFromJS(value)
	return ret
}

// ValidationMessage returning attribute 'validationMessage' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) ValidationMessage() string {
	var ret string
	value := _this.Value_JS.Get("validationMessage")
	ret = (value).String()
	return ret
}

// Labels returning attribute 'labels' with
// type dom.NodeList (idl: NodeList).
func (_this *HTMLTextAreaElement) Labels() *dom.NodeList {
	var ret *dom.NodeList
	value := _this.Value_JS.Get("labels")
	ret = dom.NodeListFromJS(value)
	return ret
}

// SelectionStart returning attribute 'selectionStart' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SelectionStart() uint {
	var ret uint
	value := _this.Value_JS.Get("selectionStart")
	ret = (uint)((value).Int())
	return ret
}

// SetSelectionStart setting attribute 'selectionStart' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SetSelectionStart(value uint) {
	input := value
	_this.Value_JS.Set("selectionStart", input)
}

// SelectionEnd returning attribute 'selectionEnd' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SelectionEnd() uint {
	var ret uint
	value := _this.Value_JS.Get("selectionEnd")
	ret = (uint)((value).Int())
	return ret
}

// SetSelectionEnd setting attribute 'selectionEnd' with
// type uint (idl: unsigned long).
func (_this *HTMLTextAreaElement) SetSelectionEnd(value uint) {
	input := value
	_this.Value_JS.Set("selectionEnd", input)
}

// SelectionDirection returning attribute 'selectionDirection' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SelectionDirection() string {
	var ret string
	value := _this.Value_JS.Get("selectionDirection")
	ret = (value).String()
	return ret
}

// SetSelectionDirection setting attribute 'selectionDirection' with
// type string (idl: DOMString).
func (_this *HTMLTextAreaElement) SetSelectionDirection(value string) {
	input := value
	_this.Value_JS.Set("selectionDirection", input)
}

func (_this *HTMLTextAreaElement) CheckValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("checkValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLTextAreaElement) ReportValidity() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("reportValidity", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *HTMLTextAreaElement) SetCustomValidity(_error string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _error
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setCustomValidity", _args[0:_end]...)
	return
}

func (_this *HTMLTextAreaElement) Select() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("select", _args[0:_end]...)
	return
}

func (_this *HTMLTextAreaElement) SetRangeText(replacement string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := replacement
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setRangeText", _args[0:_end]...)
	return
}

func (_this *HTMLTextAreaElement) SetRangeText2(replacement string, start uint, end uint, selectionMode *SelectionMode) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := replacement
	_args[0] = _p0
	_end++
	_p1 := start
	_args[1] = _p1
	_end++
	_p2 := end
	_args[2] = _p2
	_end++
	if selectionMode != nil {
		_p3 := selectionMode.JSValue()
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("setRangeText", _args[0:_end]...)
	return
}

func (_this *HTMLTextAreaElement) SetSelectionRange(start uint, end uint, direction *string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := start
	_args[0] = _p0
	_end++
	_p1 := end
	_args[1] = _p1
	_end++
	if direction != nil {

		var _p2 interface{}
		if direction != nil {
			_p2 = *(direction)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	_this.Value_JS.Call("setSelectionRange", _args[0:_end]...)
	return
}

// class: HTMLTimeElement
type HTMLTimeElement struct {
	HTMLElement
}

// HTMLTimeElementFromJS is casting a js.Value into HTMLTimeElement.
func HTMLTimeElementFromJS(value js.Value) *HTMLTimeElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTimeElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTimeElementFromJS is casting from something that holds a js.Value into HTMLTimeElement.
func HTMLTimeElementFromWrapper(input core.Wrapper) *HTMLTimeElement {
	return HTMLTimeElementFromJS(input.JSValue())
}

// DateTime returning attribute 'dateTime' with
// type string (idl: DOMString).
func (_this *HTMLTimeElement) DateTime() string {
	var ret string
	value := _this.Value_JS.Get("dateTime")
	ret = (value).String()
	return ret
}

// SetDateTime setting attribute 'dateTime' with
// type string (idl: DOMString).
func (_this *HTMLTimeElement) SetDateTime(value string) {
	input := value
	_this.Value_JS.Set("dateTime", input)
}

// class: HTMLTitleElement
type HTMLTitleElement struct {
	HTMLElement
}

// HTMLTitleElementFromJS is casting a js.Value into HTMLTitleElement.
func HTMLTitleElementFromJS(value js.Value) *HTMLTitleElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLTitleElement{}
	ret.Value_JS = value
	return ret
}

// HTMLTitleElementFromJS is casting from something that holds a js.Value into HTMLTitleElement.
func HTMLTitleElementFromWrapper(input core.Wrapper) *HTMLTitleElement {
	return HTMLTitleElementFromJS(input.JSValue())
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLTitleElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *HTMLTitleElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// class: HTMLUListElement
type HTMLUListElement struct {
	HTMLElement
}

// HTMLUListElementFromJS is casting a js.Value into HTMLUListElement.
func HTMLUListElementFromJS(value js.Value) *HTMLUListElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLUListElement{}
	ret.Value_JS = value
	return ret
}

// HTMLUListElementFromJS is casting from something that holds a js.Value into HTMLUListElement.
func HTMLUListElementFromWrapper(input core.Wrapper) *HTMLUListElement {
	return HTMLUListElementFromJS(input.JSValue())
}

// Compact returning attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLUListElement) Compact() bool {
	var ret bool
	value := _this.Value_JS.Get("compact")
	ret = (value).Bool()
	return ret
}

// SetCompact setting attribute 'compact' with
// type bool (idl: boolean).
func (_this *HTMLUListElement) SetCompact(value bool) {
	input := value
	_this.Value_JS.Set("compact", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLUListElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *HTMLUListElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// class: HTMLUnknownElement
type HTMLUnknownElement struct {
	HTMLElement
}

// HTMLUnknownElementFromJS is casting a js.Value into HTMLUnknownElement.
func HTMLUnknownElementFromJS(value js.Value) *HTMLUnknownElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HTMLUnknownElement{}
	ret.Value_JS = value
	return ret
}

// HTMLUnknownElementFromJS is casting from something that holds a js.Value into HTMLUnknownElement.
func HTMLUnknownElementFromWrapper(input core.Wrapper) *HTMLUnknownElement {
	return HTMLUnknownElementFromJS(input.JSValue())
}

// class: Promise
type PromiseFormData struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseFormData) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseFormDataFromJS is casting a js.Value into PromiseFormData.
func PromiseFormDataFromJS(value js.Value) *PromiseFormData {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseFormData{}
	ret.Value_JS = value
	return ret
}

// PromiseFormDataFromJS is casting from something that holds a js.Value into PromiseFormData.
func PromiseFormDataFromWrapper(input core.Wrapper) *PromiseFormData {
	return PromiseFormDataFromJS(input.JSValue())
}

func (_this *PromiseFormData) Then(onFulfilled *PromiseFormDataOnFulfilled, onRejected *PromiseFormDataOnRejected) (_result *PromiseFormData) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseFormData // javascript: Promise _what_return_name
	)
	_converted = PromiseFormDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseFormData) Catch(onRejected *PromiseFormDataOnRejected) (_result *PromiseFormData) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseFormData // javascript: Promise _what_return_name
	)
	_converted = PromiseFormDataFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseFormData) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseFormData) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseFormData // javascript: Promise _what_return_name
	)
	_converted = PromiseFormDataFromJS(_returned)
	_result = _converted
	return
}

// class: TimeRanges
type TimeRanges struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *TimeRanges) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// TimeRangesFromJS is casting a js.Value into TimeRanges.
func TimeRangesFromJS(value js.Value) *TimeRanges {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &TimeRanges{}
	ret.Value_JS = value
	return ret
}

// TimeRangesFromJS is casting from something that holds a js.Value into TimeRanges.
func TimeRangesFromWrapper(input core.Wrapper) *TimeRanges {
	return TimeRangesFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *TimeRanges) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *TimeRanges) Start(index uint) (_result float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("start", _args[0:_end]...)
	var (
		_converted float64 // javascript: double _what_return_name
	)
	_converted = (_returned).Float()
	_result = _converted
	return
}

func (_this *TimeRanges) End(index uint) (_result float64) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("end", _args[0:_end]...)
	var (
		_converted float64 // javascript: double _what_return_name
	)
	_converted = (_returned).Float()
	_result = _converted
	return
}

// class: ValidityState
type ValidityState struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ValidityState) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ValidityStateFromJS is casting a js.Value into ValidityState.
func ValidityStateFromJS(value js.Value) *ValidityState {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ValidityState{}
	ret.Value_JS = value
	return ret
}

// ValidityStateFromJS is casting from something that holds a js.Value into ValidityState.
func ValidityStateFromWrapper(input core.Wrapper) *ValidityState {
	return ValidityStateFromJS(input.JSValue())
}

// ValueMissing returning attribute 'valueMissing' with
// type bool (idl: boolean).
func (_this *ValidityState) ValueMissing() bool {
	var ret bool
	value := _this.Value_JS.Get("valueMissing")
	ret = (value).Bool()
	return ret
}

// TypeMismatch returning attribute 'typeMismatch' with
// type bool (idl: boolean).
func (_this *ValidityState) TypeMismatch() bool {
	var ret bool
	value := _this.Value_JS.Get("typeMismatch")
	ret = (value).Bool()
	return ret
}

// PatternMismatch returning attribute 'patternMismatch' with
// type bool (idl: boolean).
func (_this *ValidityState) PatternMismatch() bool {
	var ret bool
	value := _this.Value_JS.Get("patternMismatch")
	ret = (value).Bool()
	return ret
}

// TooLong returning attribute 'tooLong' with
// type bool (idl: boolean).
func (_this *ValidityState) TooLong() bool {
	var ret bool
	value := _this.Value_JS.Get("tooLong")
	ret = (value).Bool()
	return ret
}

// TooShort returning attribute 'tooShort' with
// type bool (idl: boolean).
func (_this *ValidityState) TooShort() bool {
	var ret bool
	value := _this.Value_JS.Get("tooShort")
	ret = (value).Bool()
	return ret
}

// RangeUnderflow returning attribute 'rangeUnderflow' with
// type bool (idl: boolean).
func (_this *ValidityState) RangeUnderflow() bool {
	var ret bool
	value := _this.Value_JS.Get("rangeUnderflow")
	ret = (value).Bool()
	return ret
}

// RangeOverflow returning attribute 'rangeOverflow' with
// type bool (idl: boolean).
func (_this *ValidityState) RangeOverflow() bool {
	var ret bool
	value := _this.Value_JS.Get("rangeOverflow")
	ret = (value).Bool()
	return ret
}

// StepMismatch returning attribute 'stepMismatch' with
// type bool (idl: boolean).
func (_this *ValidityState) StepMismatch() bool {
	var ret bool
	value := _this.Value_JS.Get("stepMismatch")
	ret = (value).Bool()
	return ret
}

// BadInput returning attribute 'badInput' with
// type bool (idl: boolean).
func (_this *ValidityState) BadInput() bool {
	var ret bool
	value := _this.Value_JS.Get("badInput")
	ret = (value).Bool()
	return ret
}

// CustomError returning attribute 'customError' with
// type bool (idl: boolean).
func (_this *ValidityState) CustomError() bool {
	var ret bool
	value := _this.Value_JS.Get("customError")
	ret = (value).Bool()
	return ret
}

// Valid returning attribute 'valid' with
// type bool (idl: boolean).
func (_this *ValidityState) Valid() bool {
	var ret bool
	value := _this.Value_JS.Get("valid")
	ret = (value).Bool()
	return ret
}
