// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package htmlevent

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/device/inputcapabilities"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/html/datatransfer"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// datatransfer.DataTransfer
// dom.StaticRange
// domcore.Event
// domcore.EventTarget
// inputcapabilities.InputDeviceCapabilities
// javascript.Promise

// source idl files:
// html.idl
// pointerevents.idl
// uievents.idl

// transform files:
// html.go.md
// pointerevents.go.md
// uievents.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: CompositionEventInit
type CompositionEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	Data               string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *CompositionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.Data
	out.Set("data", value6)
	return out
}

// CompositionEventInitFromJS is allocating a new
// CompositionEventInit object and copy all values in the value javascript object.
func CompositionEventInitFromJS(value js.Value) *CompositionEventInit {
	var out CompositionEventInit
	var (
		value0 bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                                       // javascript: boolean {composed Composed composed}
		value3 js.Value                                   // javascript: Window {view View view}
		value4 int                                        // javascript: long {detail Detail detail}
		value5 *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6 string                                     // javascript: DOMString {data Data data}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("data")).String()
	out.Data = value6
	return &out
}

// dictionary: DragEventInit
type DragEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
	ScreenX            float64
	ScreenY            float64
	ClientX            float64
	ClientY            float64
	MovementX          int
	MovementY          int
	DataTransfer       *datatransfer.DataTransfer
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *DragEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	value20 := _this.Button
	out.Set("button", value20)
	value21 := _this.Buttons
	out.Set("buttons", value21)
	value22 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value22)
	value23 := _this.ScreenX
	out.Set("screenX", value23)
	value24 := _this.ScreenY
	out.Set("screenY", value24)
	value25 := _this.ClientX
	out.Set("clientX", value25)
	value26 := _this.ClientY
	out.Set("clientY", value26)
	value27 := _this.MovementX
	out.Set("movementX", value27)
	value28 := _this.MovementY
	out.Set("movementY", value28)
	value29 := _this.DataTransfer.JSValue()
	out.Set("dataTransfer", value29)
	return out
}

// DragEventInitFromJS is allocating a new
// DragEventInit object and copy all values in the value javascript object.
func DragEventInitFromJS(value js.Value) *DragEventInit {
	var out DragEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value20 int                                        // javascript: short {button Button button}
		value21 int                                        // javascript: unsigned short {buttons Buttons buttons}
		value22 *domcore.EventTarget                       // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
		value23 float64                                    // javascript: double {screenX ScreenX screenX}
		value24 float64                                    // javascript: double {screenY ScreenY screenY}
		value25 float64                                    // javascript: double {clientX ClientX clientX}
		value26 float64                                    // javascript: double {clientY ClientY clientY}
		value27 int                                        // javascript: long {movementX MovementX movementX}
		value28 int                                        // javascript: long {movementY MovementY movementY}
		value29 *datatransfer.DataTransfer                 // javascript: DataTransfer {dataTransfer DataTransfer dataTransfer}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	value20 = (value.Get("button")).Int()
	out.Button = value20
	value21 = (value.Get("buttons")).Int()
	out.Buttons = value21
	if value.Get("relatedTarget").Type() != js.TypeNull && value.Get("relatedTarget").Type() != js.TypeUndefined {
		value22 = domcore.EventTargetFromJS(value.Get("relatedTarget"))
	}
	out.RelatedTarget = value22
	value23 = (value.Get("screenX")).Float()
	out.ScreenX = value23
	value24 = (value.Get("screenY")).Float()
	out.ScreenY = value24
	value25 = (value.Get("clientX")).Float()
	out.ClientX = value25
	value26 = (value.Get("clientY")).Float()
	out.ClientY = value26
	value27 = (value.Get("movementX")).Int()
	out.MovementX = value27
	value28 = (value.Get("movementY")).Int()
	out.MovementY = value28
	if value.Get("dataTransfer").Type() != js.TypeNull && value.Get("dataTransfer").Type() != js.TypeUndefined {
		value29 = datatransfer.DataTransferFromJS(value.Get("dataTransfer"))
	}
	out.DataTransfer = value29
	return &out
}

// dictionary: ErrorEventInit
type ErrorEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Message    string
	Filename   string
	Lineno     uint
	Colno      uint
	Error      js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ErrorEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Message
	out.Set("message", value3)
	value4 := _this.Filename
	out.Set("filename", value4)
	value5 := _this.Lineno
	out.Set("lineno", value5)
	value6 := _this.Colno
	out.Set("colno", value6)
	value7 := _this.Error
	out.Set("error", value7)
	return out
}

// ErrorEventInitFromJS is allocating a new
// ErrorEventInit object and copy all values in the value javascript object.
func ErrorEventInitFromJS(value js.Value) *ErrorEventInit {
	var out ErrorEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 string   // javascript: DOMString {message Message message}
		value4 string   // javascript: USVString {filename Filename filename}
		value5 uint     // javascript: unsigned long {lineno Lineno lineno}
		value6 uint     // javascript: unsigned long {colno Colno colno}
		value7 js.Value // javascript: any {error Error _error}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = (value.Get("message")).String()
	out.Message = value3
	value4 = (value.Get("filename")).String()
	out.Filename = value4
	value5 = (uint)((value.Get("lineno")).Int())
	out.Lineno = value5
	value6 = (uint)((value.Get("colno")).Int())
	out.Colno = value6
	value7 = value.Get("error")
	out.Error = value7
	return &out
}

// dictionary: EventModifierInit
type EventModifierInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *EventModifierInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	return out
}

// EventModifierInitFromJS is allocating a new
// EventModifierInit object and copy all values in the value javascript object.
func EventModifierInitFromJS(value js.Value) *EventModifierInit {
	var out EventModifierInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	return &out
}

// dictionary: FocusEventInit
type FocusEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	RelatedTarget      *domcore.EventTarget
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *FocusEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value6)
	return out
}

// FocusEventInitFromJS is allocating a new
// FocusEventInit object and copy all values in the value javascript object.
func FocusEventInitFromJS(value js.Value) *FocusEventInit {
	var out FocusEventInit
	var (
		value0 bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                                       // javascript: boolean {composed Composed composed}
		value3 js.Value                                   // javascript: Window {view View view}
		value4 int                                        // javascript: long {detail Detail detail}
		value5 *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6 *domcore.EventTarget                       // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	if value.Get("relatedTarget").Type() != js.TypeNull && value.Get("relatedTarget").Type() != js.TypeUndefined {
		value6 = domcore.EventTargetFromJS(value.Get("relatedTarget"))
	}
	out.RelatedTarget = value6
	return &out
}

// dictionary: HashChangeEventInit
type HashChangeEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	OldURL     string
	NewURL     string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *HashChangeEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.OldURL
	out.Set("oldURL", value3)
	value4 := _this.NewURL
	out.Set("newURL", value4)
	return out
}

// HashChangeEventInitFromJS is allocating a new
// HashChangeEventInit object and copy all values in the value javascript object.
func HashChangeEventInitFromJS(value js.Value) *HashChangeEventInit {
	var out HashChangeEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 string // javascript: USVString {oldURL OldURL oldURL}
		value4 string // javascript: USVString {newURL NewURL newURL}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = (value.Get("oldURL")).String()
	out.OldURL = value3
	value4 = (value.Get("newURL")).String()
	out.NewURL = value4
	return &out
}

// dictionary: InputEventInit
type InputEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	Data               *string
	IsComposing        bool
	InputType          string
	DataTransfer       *datatransfer.DataTransfer
	TargetRanges       []*dom.StaticRange
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *InputEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)

	var value6 interface{}
	if _this.Data != nil {
		value6 = *(_this.Data)
	} else {
		value6 = nil
	}
	out.Set("data", value6)
	value7 := _this.IsComposing
	out.Set("isComposing", value7)
	value8 := _this.InputType
	out.Set("inputType", value8)
	value9 := _this.DataTransfer.JSValue()
	out.Set("dataTransfer", value9)
	value10 := js.Global().Get("Array").New(len(_this.TargetRanges))
	for __idx10, __seq_in10 := range _this.TargetRanges {
		__seq_out10 := __seq_in10.JSValue()
		value10.SetIndex(__idx10, __seq_out10)
	}
	out.Set("targetRanges", value10)
	return out
}

// InputEventInitFromJS is allocating a new
// InputEventInit object and copy all values in the value javascript object.
func InputEventInitFromJS(value js.Value) *InputEventInit {
	var out InputEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  *string                                    // javascript: DOMString {data Data data}
		value7  bool                                       // javascript: boolean {isComposing IsComposing isComposing}
		value8  string                                     // javascript: DOMString {inputType InputType inputType}
		value9  *datatransfer.DataTransfer                 // javascript: DataTransfer {dataTransfer DataTransfer dataTransfer}
		value10 []*dom.StaticRange                         // javascript: sequence<StaticRange> {targetRanges TargetRanges targetRanges}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	if value.Get("data").Type() != js.TypeNull && value.Get("data").Type() != js.TypeUndefined {
		__tmp := (value.Get("data")).String()
		value6 = &__tmp
	}
	out.Data = value6
	value7 = (value.Get("isComposing")).Bool()
	out.IsComposing = value7
	value8 = (value.Get("inputType")).String()
	out.InputType = value8
	if value.Get("dataTransfer").Type() != js.TypeNull && value.Get("dataTransfer").Type() != js.TypeUndefined {
		value9 = datatransfer.DataTransferFromJS(value.Get("dataTransfer"))
	}
	out.DataTransfer = value9
	__length10 := value.Get("targetRanges").Length()
	__array10 := make([]*dom.StaticRange, __length10, __length10)
	for __idx10 := 0; __idx10 < __length10; __idx10++ {
		var __seq_out10 *dom.StaticRange
		__seq_in10 := value.Get("targetRanges").Index(__idx10)
		__seq_out10 = dom.StaticRangeFromJS(__seq_in10)
		__array10[__idx10] = __seq_out10
	}
	value10 = __array10
	out.TargetRanges = value10
	return &out
}

// dictionary: KeyboardEventInit
type KeyboardEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Key                string
	Code               string
	Location           uint
	Repeat             bool
	IsComposing        bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *KeyboardEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	value20 := _this.Key
	out.Set("key", value20)
	value21 := _this.Code
	out.Set("code", value21)
	value22 := _this.Location
	out.Set("location", value22)
	value23 := _this.Repeat
	out.Set("repeat", value23)
	value24 := _this.IsComposing
	out.Set("isComposing", value24)
	return out
}

// KeyboardEventInitFromJS is allocating a new
// KeyboardEventInit object and copy all values in the value javascript object.
func KeyboardEventInitFromJS(value js.Value) *KeyboardEventInit {
	var out KeyboardEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value20 string                                     // javascript: DOMString {key Key key}
		value21 string                                     // javascript: DOMString {code Code code}
		value22 uint                                       // javascript: unsigned long {location Location location}
		value23 bool                                       // javascript: boolean {repeat Repeat repeat}
		value24 bool                                       // javascript: boolean {isComposing IsComposing isComposing}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	value20 = (value.Get("key")).String()
	out.Key = value20
	value21 = (value.Get("code")).String()
	out.Code = value21
	value22 = (uint)((value.Get("location")).Int())
	out.Location = value22
	value23 = (value.Get("repeat")).Bool()
	out.Repeat = value23
	value24 = (value.Get("isComposing")).Bool()
	out.IsComposing = value24
	return &out
}

// dictionary: MouseEventInit
type MouseEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
	ScreenX            float64
	ScreenY            float64
	ClientX            float64
	ClientY            float64
	MovementX          int
	MovementY          int
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *MouseEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	value20 := _this.Button
	out.Set("button", value20)
	value21 := _this.Buttons
	out.Set("buttons", value21)
	value22 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value22)
	value23 := _this.ScreenX
	out.Set("screenX", value23)
	value24 := _this.ScreenY
	out.Set("screenY", value24)
	value25 := _this.ClientX
	out.Set("clientX", value25)
	value26 := _this.ClientY
	out.Set("clientY", value26)
	value27 := _this.MovementX
	out.Set("movementX", value27)
	value28 := _this.MovementY
	out.Set("movementY", value28)
	return out
}

// MouseEventInitFromJS is allocating a new
// MouseEventInit object and copy all values in the value javascript object.
func MouseEventInitFromJS(value js.Value) *MouseEventInit {
	var out MouseEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value20 int                                        // javascript: short {button Button button}
		value21 int                                        // javascript: unsigned short {buttons Buttons buttons}
		value22 *domcore.EventTarget                       // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
		value23 float64                                    // javascript: double {screenX ScreenX screenX}
		value24 float64                                    // javascript: double {screenY ScreenY screenY}
		value25 float64                                    // javascript: double {clientX ClientX clientX}
		value26 float64                                    // javascript: double {clientY ClientY clientY}
		value27 int                                        // javascript: long {movementX MovementX movementX}
		value28 int                                        // javascript: long {movementY MovementY movementY}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	value20 = (value.Get("button")).Int()
	out.Button = value20
	value21 = (value.Get("buttons")).Int()
	out.Buttons = value21
	if value.Get("relatedTarget").Type() != js.TypeNull && value.Get("relatedTarget").Type() != js.TypeUndefined {
		value22 = domcore.EventTargetFromJS(value.Get("relatedTarget"))
	}
	out.RelatedTarget = value22
	value23 = (value.Get("screenX")).Float()
	out.ScreenX = value23
	value24 = (value.Get("screenY")).Float()
	out.ScreenY = value24
	value25 = (value.Get("clientX")).Float()
	out.ClientX = value25
	value26 = (value.Get("clientY")).Float()
	out.ClientY = value26
	value27 = (value.Get("movementX")).Int()
	out.MovementX = value27
	value28 = (value.Get("movementY")).Int()
	out.MovementY = value28
	return &out
}

// dictionary: PageTransitionEventInit
type PageTransitionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Persisted  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PageTransitionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Persisted
	out.Set("persisted", value3)
	return out
}

// PageTransitionEventInitFromJS is allocating a new
// PageTransitionEventInit object and copy all values in the value javascript object.
func PageTransitionEventInitFromJS(value js.Value) *PageTransitionEventInit {
	var out PageTransitionEventInit
	var (
		value0 bool // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool // javascript: boolean {composed Composed composed}
		value3 bool // javascript: boolean {persisted Persisted persisted}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = (value.Get("persisted")).Bool()
	out.Persisted = value3
	return &out
}

// dictionary: PointerEventInit
type PointerEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
	ScreenX            float64
	ScreenY            float64
	ClientX            float64
	ClientY            float64
	MovementX          int
	MovementY          int
	PointerId          int
	Width              float64
	Height             float64
	Pressure           float32
	TangentialPressure float32
	TiltX              int
	TiltY              int
	Twist              int
	PointerType        string
	IsPrimary          bool
	CoalescedEvents    []*PointerEvent
	PredictedEvents    []*PointerEvent
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PointerEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	value20 := _this.Button
	out.Set("button", value20)
	value21 := _this.Buttons
	out.Set("buttons", value21)
	value22 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value22)
	value23 := _this.ScreenX
	out.Set("screenX", value23)
	value24 := _this.ScreenY
	out.Set("screenY", value24)
	value25 := _this.ClientX
	out.Set("clientX", value25)
	value26 := _this.ClientY
	out.Set("clientY", value26)
	value27 := _this.MovementX
	out.Set("movementX", value27)
	value28 := _this.MovementY
	out.Set("movementY", value28)
	value29 := _this.PointerId
	out.Set("pointerId", value29)
	value30 := _this.Width
	out.Set("width", value30)
	value31 := _this.Height
	out.Set("height", value31)
	value32 := _this.Pressure
	out.Set("pressure", value32)
	value33 := _this.TangentialPressure
	out.Set("tangentialPressure", value33)
	value34 := _this.TiltX
	out.Set("tiltX", value34)
	value35 := _this.TiltY
	out.Set("tiltY", value35)
	value36 := _this.Twist
	out.Set("twist", value36)
	value37 := _this.PointerType
	out.Set("pointerType", value37)
	value38 := _this.IsPrimary
	out.Set("isPrimary", value38)
	value39 := js.Global().Get("Array").New(len(_this.CoalescedEvents))
	for __idx39, __seq_in39 := range _this.CoalescedEvents {
		__seq_out39 := __seq_in39.JSValue()
		value39.SetIndex(__idx39, __seq_out39)
	}
	out.Set("coalescedEvents", value39)
	value40 := js.Global().Get("Array").New(len(_this.PredictedEvents))
	for __idx40, __seq_in40 := range _this.PredictedEvents {
		__seq_out40 := __seq_in40.JSValue()
		value40.SetIndex(__idx40, __seq_out40)
	}
	out.Set("predictedEvents", value40)
	return out
}

// PointerEventInitFromJS is allocating a new
// PointerEventInit object and copy all values in the value javascript object.
func PointerEventInitFromJS(value js.Value) *PointerEventInit {
	var out PointerEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value20 int                                        // javascript: short {button Button button}
		value21 int                                        // javascript: unsigned short {buttons Buttons buttons}
		value22 *domcore.EventTarget                       // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
		value23 float64                                    // javascript: double {screenX ScreenX screenX}
		value24 float64                                    // javascript: double {screenY ScreenY screenY}
		value25 float64                                    // javascript: double {clientX ClientX clientX}
		value26 float64                                    // javascript: double {clientY ClientY clientY}
		value27 int                                        // javascript: long {movementX MovementX movementX}
		value28 int                                        // javascript: long {movementY MovementY movementY}
		value29 int                                        // javascript: long {pointerId PointerId pointerId}
		value30 float64                                    // javascript: double {width Width width}
		value31 float64                                    // javascript: double {height Height height}
		value32 float32                                    // javascript: float {pressure Pressure pressure}
		value33 float32                                    // javascript: float {tangentialPressure TangentialPressure tangentialPressure}
		value34 int                                        // javascript: long {tiltX TiltX tiltX}
		value35 int                                        // javascript: long {tiltY TiltY tiltY}
		value36 int                                        // javascript: long {twist Twist twist}
		value37 string                                     // javascript: DOMString {pointerType PointerType pointerType}
		value38 bool                                       // javascript: boolean {isPrimary IsPrimary isPrimary}
		value39 []*PointerEvent                            // javascript: sequence<PointerEvent> {coalescedEvents CoalescedEvents coalescedEvents}
		value40 []*PointerEvent                            // javascript: sequence<PointerEvent> {predictedEvents PredictedEvents predictedEvents}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	value20 = (value.Get("button")).Int()
	out.Button = value20
	value21 = (value.Get("buttons")).Int()
	out.Buttons = value21
	if value.Get("relatedTarget").Type() != js.TypeNull && value.Get("relatedTarget").Type() != js.TypeUndefined {
		value22 = domcore.EventTargetFromJS(value.Get("relatedTarget"))
	}
	out.RelatedTarget = value22
	value23 = (value.Get("screenX")).Float()
	out.ScreenX = value23
	value24 = (value.Get("screenY")).Float()
	out.ScreenY = value24
	value25 = (value.Get("clientX")).Float()
	out.ClientX = value25
	value26 = (value.Get("clientY")).Float()
	out.ClientY = value26
	value27 = (value.Get("movementX")).Int()
	out.MovementX = value27
	value28 = (value.Get("movementY")).Int()
	out.MovementY = value28
	value29 = (value.Get("pointerId")).Int()
	out.PointerId = value29
	value30 = (value.Get("width")).Float()
	out.Width = value30
	value31 = (value.Get("height")).Float()
	out.Height = value31
	value32 = (float32)((value.Get("pressure")).Float())
	out.Pressure = value32
	value33 = (float32)((value.Get("tangentialPressure")).Float())
	out.TangentialPressure = value33
	value34 = (value.Get("tiltX")).Int()
	out.TiltX = value34
	value35 = (value.Get("tiltY")).Int()
	out.TiltY = value35
	value36 = (value.Get("twist")).Int()
	out.Twist = value36
	value37 = (value.Get("pointerType")).String()
	out.PointerType = value37
	value38 = (value.Get("isPrimary")).Bool()
	out.IsPrimary = value38
	__length39 := value.Get("coalescedEvents").Length()
	__array39 := make([]*PointerEvent, __length39, __length39)
	for __idx39 := 0; __idx39 < __length39; __idx39++ {
		var __seq_out39 *PointerEvent
		__seq_in39 := value.Get("coalescedEvents").Index(__idx39)
		__seq_out39 = PointerEventFromJS(__seq_in39)
		__array39[__idx39] = __seq_out39
	}
	value39 = __array39
	out.CoalescedEvents = value39
	__length40 := value.Get("predictedEvents").Length()
	__array40 := make([]*PointerEvent, __length40, __length40)
	for __idx40 := 0; __idx40 < __length40; __idx40++ {
		var __seq_out40 *PointerEvent
		__seq_in40 := value.Get("predictedEvents").Index(__idx40)
		__seq_out40 = PointerEventFromJS(__seq_in40)
		__array40[__idx40] = __seq_out40
	}
	value40 = __array40
	out.PredictedEvents = value40
	return &out
}

// dictionary: PopStateEventInit
type PopStateEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	State      js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PopStateEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.State
	out.Set("state", value3)
	return out
}

// PopStateEventInitFromJS is allocating a new
// PopStateEventInit object and copy all values in the value javascript object.
func PopStateEventInitFromJS(value js.Value) *PopStateEventInit {
	var out PopStateEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 js.Value // javascript: any {state State state}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("state")
	out.State = value3
	return &out
}

// dictionary: PromiseRejectionEventInit
type PromiseRejectionEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Promise    *javascript.Promise
	Reason     js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PromiseRejectionEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Promise.JSValue()
	out.Set("promise", value3)
	value4 := _this.Reason
	out.Set("reason", value4)
	return out
}

// PromiseRejectionEventInitFromJS is allocating a new
// PromiseRejectionEventInit object and copy all values in the value javascript object.
func PromiseRejectionEventInitFromJS(value js.Value) *PromiseRejectionEventInit {
	var out PromiseRejectionEventInit
	var (
		value0 bool                // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                // javascript: boolean {composed Composed composed}
		value3 *javascript.Promise // javascript: Promise {promise Promise promise}
		value4 js.Value            // javascript: any {reason Reason reason}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = javascript.PromiseFromJS(value.Get("promise"))
	out.Promise = value3
	value4 = value.Get("reason")
	out.Reason = value4
	return &out
}

// dictionary: StorageEventInit
type StorageEventInit struct {
	Bubbles     bool
	Cancelable  bool
	Composed    bool
	Key         *string
	OldValue    *string
	NewValue    *string
	Url         string
	StorageArea *Storage
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *StorageEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)

	var value3 interface{}
	if _this.Key != nil {
		value3 = *(_this.Key)
	} else {
		value3 = nil
	}
	out.Set("key", value3)

	var value4 interface{}
	if _this.OldValue != nil {
		value4 = *(_this.OldValue)
	} else {
		value4 = nil
	}
	out.Set("oldValue", value4)

	var value5 interface{}
	if _this.NewValue != nil {
		value5 = *(_this.NewValue)
	} else {
		value5 = nil
	}
	out.Set("newValue", value5)
	value6 := _this.Url
	out.Set("url", value6)
	value7 := _this.StorageArea.JSValue()
	out.Set("storageArea", value7)
	return out
}

// StorageEventInitFromJS is allocating a new
// StorageEventInit object and copy all values in the value javascript object.
func StorageEventInitFromJS(value js.Value) *StorageEventInit {
	var out StorageEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 *string  // javascript: DOMString {key Key key}
		value4 *string  // javascript: DOMString {oldValue OldValue oldValue}
		value5 *string  // javascript: DOMString {newValue NewValue newValue}
		value6 string   // javascript: USVString {url Url url}
		value7 *Storage // javascript: Storage {storageArea StorageArea storageArea}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	if value.Get("key").Type() != js.TypeNull && value.Get("key").Type() != js.TypeUndefined {
		__tmp := (value.Get("key")).String()
		value3 = &__tmp
	}
	out.Key = value3
	if value.Get("oldValue").Type() != js.TypeNull && value.Get("oldValue").Type() != js.TypeUndefined {
		__tmp := (value.Get("oldValue")).String()
		value4 = &__tmp
	}
	out.OldValue = value4
	if value.Get("newValue").Type() != js.TypeNull && value.Get("newValue").Type() != js.TypeUndefined {
		__tmp := (value.Get("newValue")).String()
		value5 = &__tmp
	}
	out.NewValue = value5
	value6 = (value.Get("url")).String()
	out.Url = value6
	if value.Get("storageArea").Type() != js.TypeNull && value.Get("storageArea").Type() != js.TypeUndefined {
		value7 = StorageFromJS(value.Get("storageArea"))
	}
	out.StorageArea = value7
	return &out
}

// dictionary: TrackEventInit
type TrackEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Track      *Union
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *TrackEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Track.JSValue()
	out.Set("track", value3)
	return out
}

// TrackEventInitFromJS is allocating a new
// TrackEventInit object and copy all values in the value javascript object.
func TrackEventInitFromJS(value js.Value) *TrackEventInit {
	var out TrackEventInit
	var (
		value0 bool   // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool   // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool   // javascript: boolean {composed Composed composed}
		value3 *Union // javascript: Union {track Track track}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	if value.Get("track").Type() != js.TypeNull && value.Get("track").Type() != js.TypeUndefined {
		value3 = UnionFromJS(value.Get("track"))
	}
	out.Track = value3
	return &out
}

// dictionary: UIEventInit
type UIEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *UIEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	return out
}

// UIEventInitFromJS is allocating a new
// UIEventInit object and copy all values in the value javascript object.
func UIEventInitFromJS(value js.Value) *UIEventInit {
	var out UIEventInit
	var (
		value0 bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool                                       // javascript: boolean {composed Composed composed}
		value3 js.Value                                   // javascript: Window {view View view}
		value4 int                                        // javascript: long {detail Detail detail}
		value5 *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	return &out
}

// dictionary: WheelEventInit
type WheelEventInit struct {
	Bubbles            bool
	Cancelable         bool
	Composed           bool
	View               js.Value
	Detail             int
	SourceCapabilities *inputcapabilities.InputDeviceCapabilities
	CtrlKey            bool
	ShiftKey           bool
	AltKey             bool
	MetaKey            bool
	ModifierAltGraph   bool
	ModifierCapsLock   bool
	ModifierFn         bool
	ModifierFnLock     bool
	ModifierHyper      bool
	ModifierNumLock    bool
	ModifierScrollLock bool
	ModifierSuper      bool
	ModifierSymbol     bool
	ModifierSymbolLock bool
	Button             int
	Buttons            int
	RelatedTarget      *domcore.EventTarget
	ScreenX            float64
	ScreenY            float64
	ClientX            float64
	ClientY            float64
	MovementX          int
	MovementY          int
	DeltaX             float64
	DeltaY             float64
	DeltaZ             float64
	DeltaMode          uint
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *WheelEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.View
	out.Set("view", value3)
	value4 := _this.Detail
	out.Set("detail", value4)
	value5 := _this.SourceCapabilities.JSValue()
	out.Set("sourceCapabilities", value5)
	value6 := _this.CtrlKey
	out.Set("ctrlKey", value6)
	value7 := _this.ShiftKey
	out.Set("shiftKey", value7)
	value8 := _this.AltKey
	out.Set("altKey", value8)
	value9 := _this.MetaKey
	out.Set("metaKey", value9)
	value10 := _this.ModifierAltGraph
	out.Set("modifierAltGraph", value10)
	value11 := _this.ModifierCapsLock
	out.Set("modifierCapsLock", value11)
	value12 := _this.ModifierFn
	out.Set("modifierFn", value12)
	value13 := _this.ModifierFnLock
	out.Set("modifierFnLock", value13)
	value14 := _this.ModifierHyper
	out.Set("modifierHyper", value14)
	value15 := _this.ModifierNumLock
	out.Set("modifierNumLock", value15)
	value16 := _this.ModifierScrollLock
	out.Set("modifierScrollLock", value16)
	value17 := _this.ModifierSuper
	out.Set("modifierSuper", value17)
	value18 := _this.ModifierSymbol
	out.Set("modifierSymbol", value18)
	value19 := _this.ModifierSymbolLock
	out.Set("modifierSymbolLock", value19)
	value20 := _this.Button
	out.Set("button", value20)
	value21 := _this.Buttons
	out.Set("buttons", value21)
	value22 := _this.RelatedTarget.JSValue()
	out.Set("relatedTarget", value22)
	value23 := _this.ScreenX
	out.Set("screenX", value23)
	value24 := _this.ScreenY
	out.Set("screenY", value24)
	value25 := _this.ClientX
	out.Set("clientX", value25)
	value26 := _this.ClientY
	out.Set("clientY", value26)
	value27 := _this.MovementX
	out.Set("movementX", value27)
	value28 := _this.MovementY
	out.Set("movementY", value28)
	value29 := _this.DeltaX
	out.Set("deltaX", value29)
	value30 := _this.DeltaY
	out.Set("deltaY", value30)
	value31 := _this.DeltaZ
	out.Set("deltaZ", value31)
	value32 := _this.DeltaMode
	out.Set("deltaMode", value32)
	return out
}

// WheelEventInitFromJS is allocating a new
// WheelEventInit object and copy all values in the value javascript object.
func WheelEventInitFromJS(value js.Value) *WheelEventInit {
	var out WheelEventInit
	var (
		value0  bool                                       // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                                       // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                                       // javascript: boolean {composed Composed composed}
		value3  js.Value                                   // javascript: Window {view View view}
		value4  int                                        // javascript: long {detail Detail detail}
		value5  *inputcapabilities.InputDeviceCapabilities // javascript: InputDeviceCapabilities {sourceCapabilities SourceCapabilities sourceCapabilities}
		value6  bool                                       // javascript: boolean {ctrlKey CtrlKey ctrlKey}
		value7  bool                                       // javascript: boolean {shiftKey ShiftKey shiftKey}
		value8  bool                                       // javascript: boolean {altKey AltKey altKey}
		value9  bool                                       // javascript: boolean {metaKey MetaKey metaKey}
		value10 bool                                       // javascript: boolean {modifierAltGraph ModifierAltGraph modifierAltGraph}
		value11 bool                                       // javascript: boolean {modifierCapsLock ModifierCapsLock modifierCapsLock}
		value12 bool                                       // javascript: boolean {modifierFn ModifierFn modifierFn}
		value13 bool                                       // javascript: boolean {modifierFnLock ModifierFnLock modifierFnLock}
		value14 bool                                       // javascript: boolean {modifierHyper ModifierHyper modifierHyper}
		value15 bool                                       // javascript: boolean {modifierNumLock ModifierNumLock modifierNumLock}
		value16 bool                                       // javascript: boolean {modifierScrollLock ModifierScrollLock modifierScrollLock}
		value17 bool                                       // javascript: boolean {modifierSuper ModifierSuper modifierSuper}
		value18 bool                                       // javascript: boolean {modifierSymbol ModifierSymbol modifierSymbol}
		value19 bool                                       // javascript: boolean {modifierSymbolLock ModifierSymbolLock modifierSymbolLock}
		value20 int                                        // javascript: short {button Button button}
		value21 int                                        // javascript: unsigned short {buttons Buttons buttons}
		value22 *domcore.EventTarget                       // javascript: EventTarget {relatedTarget RelatedTarget relatedTarget}
		value23 float64                                    // javascript: double {screenX ScreenX screenX}
		value24 float64                                    // javascript: double {screenY ScreenY screenY}
		value25 float64                                    // javascript: double {clientX ClientX clientX}
		value26 float64                                    // javascript: double {clientY ClientY clientY}
		value27 int                                        // javascript: long {movementX MovementX movementX}
		value28 int                                        // javascript: long {movementY MovementY movementY}
		value29 float64                                    // javascript: double {deltaX DeltaX deltaX}
		value30 float64                                    // javascript: double {deltaY DeltaY deltaY}
		value31 float64                                    // javascript: double {deltaZ DeltaZ deltaZ}
		value32 uint                                       // javascript: unsigned long {deltaMode DeltaMode deltaMode}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("view")
	out.View = value3
	value4 = (value.Get("detail")).Int()
	out.Detail = value4
	if value.Get("sourceCapabilities").Type() != js.TypeNull && value.Get("sourceCapabilities").Type() != js.TypeUndefined {
		value5 = inputcapabilities.InputDeviceCapabilitiesFromJS(value.Get("sourceCapabilities"))
	}
	out.SourceCapabilities = value5
	value6 = (value.Get("ctrlKey")).Bool()
	out.CtrlKey = value6
	value7 = (value.Get("shiftKey")).Bool()
	out.ShiftKey = value7
	value8 = (value.Get("altKey")).Bool()
	out.AltKey = value8
	value9 = (value.Get("metaKey")).Bool()
	out.MetaKey = value9
	value10 = (value.Get("modifierAltGraph")).Bool()
	out.ModifierAltGraph = value10
	value11 = (value.Get("modifierCapsLock")).Bool()
	out.ModifierCapsLock = value11
	value12 = (value.Get("modifierFn")).Bool()
	out.ModifierFn = value12
	value13 = (value.Get("modifierFnLock")).Bool()
	out.ModifierFnLock = value13
	value14 = (value.Get("modifierHyper")).Bool()
	out.ModifierHyper = value14
	value15 = (value.Get("modifierNumLock")).Bool()
	out.ModifierNumLock = value15
	value16 = (value.Get("modifierScrollLock")).Bool()
	out.ModifierScrollLock = value16
	value17 = (value.Get("modifierSuper")).Bool()
	out.ModifierSuper = value17
	value18 = (value.Get("modifierSymbol")).Bool()
	out.ModifierSymbol = value18
	value19 = (value.Get("modifierSymbolLock")).Bool()
	out.ModifierSymbolLock = value19
	value20 = (value.Get("button")).Int()
	out.Button = value20
	value21 = (value.Get("buttons")).Int()
	out.Buttons = value21
	if value.Get("relatedTarget").Type() != js.TypeNull && value.Get("relatedTarget").Type() != js.TypeUndefined {
		value22 = domcore.EventTargetFromJS(value.Get("relatedTarget"))
	}
	out.RelatedTarget = value22
	value23 = (value.Get("screenX")).Float()
	out.ScreenX = value23
	value24 = (value.Get("screenY")).Float()
	out.ScreenY = value24
	value25 = (value.Get("clientX")).Float()
	out.ClientX = value25
	value26 = (value.Get("clientY")).Float()
	out.ClientY = value26
	value27 = (value.Get("movementX")).Int()
	out.MovementX = value27
	value28 = (value.Get("movementY")).Int()
	out.MovementY = value28
	value29 = (value.Get("deltaX")).Float()
	out.DeltaX = value29
	value30 = (value.Get("deltaY")).Float()
	out.DeltaY = value30
	value31 = (value.Get("deltaZ")).Float()
	out.DeltaZ = value31
	value32 = (uint)((value.Get("deltaMode")).Int())
	out.DeltaMode = value32
	return &out
}

// class: CompositionEvent
type CompositionEvent struct {
	UIEvent
}

// CompositionEventFromJS is casting a js.Value into CompositionEvent.
func CompositionEventFromJS(value js.Value) *CompositionEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CompositionEvent{}
	ret.Value_JS = value
	return ret
}

// CompositionEventFromJS is casting from something that holds a js.Value into CompositionEvent.
func CompositionEventFromWrapper(input core.Wrapper) *CompositionEvent {
	return CompositionEventFromJS(input.JSValue())
}

func NewCompositionEvent(_type string, eventInitDict *CompositionEventInit) (_result *CompositionEvent) {
	_klass := js.Global().Get("CompositionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *CompositionEvent // javascript: CompositionEvent _what_return_name
	)
	_converted = CompositionEventFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type string (idl: DOMString).
func (_this *CompositionEvent) Data() string {
	var ret string
	value := _this.Value_JS.Get("data")
	ret = (value).String()
	return ret
}

// class: DragEvent
type DragEvent struct {
	MouseEvent
}

// DragEventFromJS is casting a js.Value into DragEvent.
func DragEventFromJS(value js.Value) *DragEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DragEvent{}
	ret.Value_JS = value
	return ret
}

// DragEventFromJS is casting from something that holds a js.Value into DragEvent.
func DragEventFromWrapper(input core.Wrapper) *DragEvent {
	return DragEventFromJS(input.JSValue())
}

func NewDragEvent(_type string, eventInitDict *DragEventInit) (_result *DragEvent) {
	_klass := js.Global().Get("DragEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *DragEvent // javascript: DragEvent _what_return_name
	)
	_converted = DragEventFromJS(_returned)
	_result = _converted
	return
}

// DataTransfer returning attribute 'dataTransfer' with
// type datatransfer.DataTransfer (idl: DataTransfer).
func (_this *DragEvent) DataTransfer() *datatransfer.DataTransfer {
	var ret *datatransfer.DataTransfer
	value := _this.Value_JS.Get("dataTransfer")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = datatransfer.DataTransferFromJS(value)
	}
	return ret
}

// class: ErrorEvent
type ErrorEvent struct {
	domcore.Event
}

// ErrorEventFromJS is casting a js.Value into ErrorEvent.
func ErrorEventFromJS(value js.Value) *ErrorEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ErrorEvent{}
	ret.Value_JS = value
	return ret
}

// ErrorEventFromJS is casting from something that holds a js.Value into ErrorEvent.
func ErrorEventFromWrapper(input core.Wrapper) *ErrorEvent {
	return ErrorEventFromJS(input.JSValue())
}

func NewErrorEvent(_type string, eventInitDict *ErrorEventInit) (_result *ErrorEvent) {
	_klass := js.Global().Get("ErrorEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ErrorEvent // javascript: ErrorEvent _what_return_name
	)
	_converted = ErrorEventFromJS(_returned)
	_result = _converted
	return
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *ErrorEvent) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// Filename returning attribute 'filename' with
// type string (idl: USVString).
func (_this *ErrorEvent) Filename() string {
	var ret string
	value := _this.Value_JS.Get("filename")
	ret = (value).String()
	return ret
}

// Lineno returning attribute 'lineno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Lineno() uint {
	var ret uint
	value := _this.Value_JS.Get("lineno")
	ret = (uint)((value).Int())
	return ret
}

// Colno returning attribute 'colno' with
// type uint (idl: unsigned long).
func (_this *ErrorEvent) Colno() uint {
	var ret uint
	value := _this.Value_JS.Get("colno")
	ret = (uint)((value).Int())
	return ret
}

// Error returning attribute 'error' with
// type Any (idl: any).
func (_this *ErrorEvent) Error() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("error")
	ret = value
	return ret
}

// class: FocusEvent
type FocusEvent struct {
	UIEvent
}

// FocusEventFromJS is casting a js.Value into FocusEvent.
func FocusEventFromJS(value js.Value) *FocusEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &FocusEvent{}
	ret.Value_JS = value
	return ret
}

// FocusEventFromJS is casting from something that holds a js.Value into FocusEvent.
func FocusEventFromWrapper(input core.Wrapper) *FocusEvent {
	return FocusEventFromJS(input.JSValue())
}

func NewFocusEvent(_type string, eventInitDict *FocusEventInit) (_result *FocusEvent) {
	_klass := js.Global().Get("FocusEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *FocusEvent // javascript: FocusEvent _what_return_name
	)
	_converted = FocusEventFromJS(_returned)
	_result = _converted
	return
}

// RelatedTarget returning attribute 'relatedTarget' with
// type domcore.EventTarget (idl: EventTarget).
func (_this *FocusEvent) RelatedTarget() *domcore.EventTarget {
	var ret *domcore.EventTarget
	value := _this.Value_JS.Get("relatedTarget")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventTargetFromJS(value)
	}
	return ret
}

// class: HashChangeEvent
type HashChangeEvent struct {
	domcore.Event
}

// HashChangeEventFromJS is casting a js.Value into HashChangeEvent.
func HashChangeEventFromJS(value js.Value) *HashChangeEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &HashChangeEvent{}
	ret.Value_JS = value
	return ret
}

// HashChangeEventFromJS is casting from something that holds a js.Value into HashChangeEvent.
func HashChangeEventFromWrapper(input core.Wrapper) *HashChangeEvent {
	return HashChangeEventFromJS(input.JSValue())
}

func NewHashChangeEvent(_type string, eventInitDict *HashChangeEventInit) (_result *HashChangeEvent) {
	_klass := js.Global().Get("HashChangeEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *HashChangeEvent // javascript: HashChangeEvent _what_return_name
	)
	_converted = HashChangeEventFromJS(_returned)
	_result = _converted
	return
}

// OldURL returning attribute 'oldURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) OldURL() string {
	var ret string
	value := _this.Value_JS.Get("oldURL")
	ret = (value).String()
	return ret
}

// NewURL returning attribute 'newURL' with
// type string (idl: USVString).
func (_this *HashChangeEvent) NewURL() string {
	var ret string
	value := _this.Value_JS.Get("newURL")
	ret = (value).String()
	return ret
}

// class: InputEvent
type InputEvent struct {
	UIEvent
}

// InputEventFromJS is casting a js.Value into InputEvent.
func InputEventFromJS(value js.Value) *InputEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &InputEvent{}
	ret.Value_JS = value
	return ret
}

// InputEventFromJS is casting from something that holds a js.Value into InputEvent.
func InputEventFromWrapper(input core.Wrapper) *InputEvent {
	return InputEventFromJS(input.JSValue())
}

func NewInputEvent(_type string, eventInitDict *InputEventInit) (_result *InputEvent) {
	_klass := js.Global().Get("InputEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *InputEvent // javascript: InputEvent _what_return_name
	)
	_converted = InputEventFromJS(_returned)
	_result = _converted
	return
}

// Data returning attribute 'data' with
// type string (idl: DOMString).
func (_this *InputEvent) Data() *string {
	var ret *string
	value := _this.Value_JS.Get("data")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// IsComposing returning attribute 'isComposing' with
// type bool (idl: boolean).
func (_this *InputEvent) IsComposing() bool {
	var ret bool
	value := _this.Value_JS.Get("isComposing")
	ret = (value).Bool()
	return ret
}

// InputType returning attribute 'inputType' with
// type string (idl: DOMString).
func (_this *InputEvent) InputType() string {
	var ret string
	value := _this.Value_JS.Get("inputType")
	ret = (value).String()
	return ret
}

// DataTransfer returning attribute 'dataTransfer' with
// type datatransfer.DataTransfer (idl: DataTransfer).
func (_this *InputEvent) DataTransfer() *datatransfer.DataTransfer {
	var ret *datatransfer.DataTransfer
	value := _this.Value_JS.Get("dataTransfer")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = datatransfer.DataTransferFromJS(value)
	}
	return ret
}

func (_this *InputEvent) GetTargetRanges() (_result []*dom.StaticRange) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTargetRanges", _args[0:_end]...)
	var (
		_converted []*dom.StaticRange // javascript: sequence<StaticRange> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*dom.StaticRange, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *dom.StaticRange
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = dom.StaticRangeFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// class: KeyboardEvent
type KeyboardEvent struct {
	UIEvent
}

// KeyboardEventFromJS is casting a js.Value into KeyboardEvent.
func KeyboardEventFromJS(value js.Value) *KeyboardEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &KeyboardEvent{}
	ret.Value_JS = value
	return ret
}

// KeyboardEventFromJS is casting from something that holds a js.Value into KeyboardEvent.
func KeyboardEventFromWrapper(input core.Wrapper) *KeyboardEvent {
	return KeyboardEventFromJS(input.JSValue())
}

const (
	DOM_KEY_LOCATION_STANDARD uint = 0x00
	DOM_KEY_LOCATION_LEFT     uint = 0x01
	DOM_KEY_LOCATION_RIGHT    uint = 0x02
	DOM_KEY_LOCATION_NUMPAD   uint = 0x03
)

func NewKeyboardEvent(_type string, eventInitDict *KeyboardEventInit) (_result *KeyboardEvent) {
	_klass := js.Global().Get("KeyboardEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *KeyboardEvent // javascript: KeyboardEvent _what_return_name
	)
	_converted = KeyboardEventFromJS(_returned)
	_result = _converted
	return
}

// Key returning attribute 'key' with
// type string (idl: DOMString).
func (_this *KeyboardEvent) Key() string {
	var ret string
	value := _this.Value_JS.Get("key")
	ret = (value).String()
	return ret
}

// Code returning attribute 'code' with
// type string (idl: DOMString).
func (_this *KeyboardEvent) Code() string {
	var ret string
	value := _this.Value_JS.Get("code")
	ret = (value).String()
	return ret
}

// Location returning attribute 'location' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) Location() uint {
	var ret uint
	value := _this.Value_JS.Get("location")
	ret = (uint)((value).Int())
	return ret
}

// CtrlKey returning attribute 'ctrlKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) CtrlKey() bool {
	var ret bool
	value := _this.Value_JS.Get("ctrlKey")
	ret = (value).Bool()
	return ret
}

// ShiftKey returning attribute 'shiftKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) ShiftKey() bool {
	var ret bool
	value := _this.Value_JS.Get("shiftKey")
	ret = (value).Bool()
	return ret
}

// AltKey returning attribute 'altKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) AltKey() bool {
	var ret bool
	value := _this.Value_JS.Get("altKey")
	ret = (value).Bool()
	return ret
}

// MetaKey returning attribute 'metaKey' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) MetaKey() bool {
	var ret bool
	value := _this.Value_JS.Get("metaKey")
	ret = (value).Bool()
	return ret
}

// Repeat returning attribute 'repeat' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) Repeat() bool {
	var ret bool
	value := _this.Value_JS.Get("repeat")
	ret = (value).Bool()
	return ret
}

// IsComposing returning attribute 'isComposing' with
// type bool (idl: boolean).
func (_this *KeyboardEvent) IsComposing() bool {
	var ret bool
	value := _this.Value_JS.Get("isComposing")
	ret = (value).Bool()
	return ret
}

// CharCode returning attribute 'charCode' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) CharCode() uint {
	var ret uint
	value := _this.Value_JS.Get("charCode")
	ret = (uint)((value).Int())
	return ret
}

// KeyCode returning attribute 'keyCode' with
// type uint (idl: unsigned long).
func (_this *KeyboardEvent) KeyCode() uint {
	var ret uint
	value := _this.Value_JS.Get("keyCode")
	ret = (uint)((value).Int())
	return ret
}

func (_this *KeyboardEvent) GetModifierState(keyArg string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyArg
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getModifierState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: MouseEvent
type MouseEvent struct {
	UIEvent
}

// MouseEventFromJS is casting a js.Value into MouseEvent.
func MouseEventFromJS(value js.Value) *MouseEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &MouseEvent{}
	ret.Value_JS = value
	return ret
}

// MouseEventFromJS is casting from something that holds a js.Value into MouseEvent.
func MouseEventFromWrapper(input core.Wrapper) *MouseEvent {
	return MouseEventFromJS(input.JSValue())
}

func NewMouseEvent(_type string, eventInitDict *MouseEventInit) (_result *MouseEvent) {
	_klass := js.Global().Get("MouseEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *MouseEvent // javascript: MouseEvent _what_return_name
	)
	_converted = MouseEventFromJS(_returned)
	_result = _converted
	return
}

// CtrlKey returning attribute 'ctrlKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) CtrlKey() bool {
	var ret bool
	value := _this.Value_JS.Get("ctrlKey")
	ret = (value).Bool()
	return ret
}

// ShiftKey returning attribute 'shiftKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) ShiftKey() bool {
	var ret bool
	value := _this.Value_JS.Get("shiftKey")
	ret = (value).Bool()
	return ret
}

// AltKey returning attribute 'altKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) AltKey() bool {
	var ret bool
	value := _this.Value_JS.Get("altKey")
	ret = (value).Bool()
	return ret
}

// MetaKey returning attribute 'metaKey' with
// type bool (idl: boolean).
func (_this *MouseEvent) MetaKey() bool {
	var ret bool
	value := _this.Value_JS.Get("metaKey")
	ret = (value).Bool()
	return ret
}

// Button returning attribute 'button' with
// type int (idl: short).
func (_this *MouseEvent) Button() int {
	var ret int
	value := _this.Value_JS.Get("button")
	ret = (value).Int()
	return ret
}

// Buttons returning attribute 'buttons' with
// type int (idl: unsigned short).
func (_this *MouseEvent) Buttons() int {
	var ret int
	value := _this.Value_JS.Get("buttons")
	ret = (value).Int()
	return ret
}

// RelatedTarget returning attribute 'relatedTarget' with
// type domcore.EventTarget (idl: EventTarget).
func (_this *MouseEvent) RelatedTarget() *domcore.EventTarget {
	var ret *domcore.EventTarget
	value := _this.Value_JS.Get("relatedTarget")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventTargetFromJS(value)
	}
	return ret
}

// ScreenX returning attribute 'screenX' with
// type float64 (idl: double).
func (_this *MouseEvent) ScreenX() float64 {
	var ret float64
	value := _this.Value_JS.Get("screenX")
	ret = (value).Float()
	return ret
}

// ScreenY returning attribute 'screenY' with
// type float64 (idl: double).
func (_this *MouseEvent) ScreenY() float64 {
	var ret float64
	value := _this.Value_JS.Get("screenY")
	ret = (value).Float()
	return ret
}

// PageX returning attribute 'pageX' with
// type float64 (idl: double).
func (_this *MouseEvent) PageX() float64 {
	var ret float64
	value := _this.Value_JS.Get("pageX")
	ret = (value).Float()
	return ret
}

// PageY returning attribute 'pageY' with
// type float64 (idl: double).
func (_this *MouseEvent) PageY() float64 {
	var ret float64
	value := _this.Value_JS.Get("pageY")
	ret = (value).Float()
	return ret
}

// ClientX returning attribute 'clientX' with
// type float64 (idl: double).
func (_this *MouseEvent) ClientX() float64 {
	var ret float64
	value := _this.Value_JS.Get("clientX")
	ret = (value).Float()
	return ret
}

// ClientY returning attribute 'clientY' with
// type float64 (idl: double).
func (_this *MouseEvent) ClientY() float64 {
	var ret float64
	value := _this.Value_JS.Get("clientY")
	ret = (value).Float()
	return ret
}

// X returning attribute 'x' with
// type float64 (idl: double).
func (_this *MouseEvent) X() float64 {
	var ret float64
	value := _this.Value_JS.Get("x")
	ret = (value).Float()
	return ret
}

// Y returning attribute 'y' with
// type float64 (idl: double).
func (_this *MouseEvent) Y() float64 {
	var ret float64
	value := _this.Value_JS.Get("y")
	ret = (value).Float()
	return ret
}

// OffsetX returning attribute 'offsetX' with
// type float64 (idl: double).
func (_this *MouseEvent) OffsetX() float64 {
	var ret float64
	value := _this.Value_JS.Get("offsetX")
	ret = (value).Float()
	return ret
}

// OffsetY returning attribute 'offsetY' with
// type float64 (idl: double).
func (_this *MouseEvent) OffsetY() float64 {
	var ret float64
	value := _this.Value_JS.Get("offsetY")
	ret = (value).Float()
	return ret
}

// MovementX returning attribute 'movementX' with
// type int (idl: long).
func (_this *MouseEvent) MovementX() int {
	var ret int
	value := _this.Value_JS.Get("movementX")
	ret = (value).Int()
	return ret
}

// MovementY returning attribute 'movementY' with
// type int (idl: long).
func (_this *MouseEvent) MovementY() int {
	var ret int
	value := _this.Value_JS.Get("movementY")
	ret = (value).Int()
	return ret
}

func (_this *MouseEvent) GetModifierState(keyArg string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := keyArg
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getModifierState", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: PageTransitionEvent
type PageTransitionEvent struct {
	domcore.Event
}

// PageTransitionEventFromJS is casting a js.Value into PageTransitionEvent.
func PageTransitionEventFromJS(value js.Value) *PageTransitionEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PageTransitionEvent{}
	ret.Value_JS = value
	return ret
}

// PageTransitionEventFromJS is casting from something that holds a js.Value into PageTransitionEvent.
func PageTransitionEventFromWrapper(input core.Wrapper) *PageTransitionEvent {
	return PageTransitionEventFromJS(input.JSValue())
}

func NewPageTransitionEvent(_type string, eventInitDict *PageTransitionEventInit) (_result *PageTransitionEvent) {
	_klass := js.Global().Get("PageTransitionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PageTransitionEvent // javascript: PageTransitionEvent _what_return_name
	)
	_converted = PageTransitionEventFromJS(_returned)
	_result = _converted
	return
}

// Persisted returning attribute 'persisted' with
// type bool (idl: boolean).
func (_this *PageTransitionEvent) Persisted() bool {
	var ret bool
	value := _this.Value_JS.Get("persisted")
	ret = (value).Bool()
	return ret
}

// class: PointerEvent
type PointerEvent struct {
	MouseEvent
}

// PointerEventFromJS is casting a js.Value into PointerEvent.
func PointerEventFromJS(value js.Value) *PointerEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PointerEvent{}
	ret.Value_JS = value
	return ret
}

// PointerEventFromJS is casting from something that holds a js.Value into PointerEvent.
func PointerEventFromWrapper(input core.Wrapper) *PointerEvent {
	return PointerEventFromJS(input.JSValue())
}

func NewPointerEvent(_type string, eventInitDict *PointerEventInit) (_result *PointerEvent) {
	_klass := js.Global().Get("PointerEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PointerEvent // javascript: PointerEvent _what_return_name
	)
	_converted = PointerEventFromJS(_returned)
	_result = _converted
	return
}

// PointerId returning attribute 'pointerId' with
// type int (idl: long).
func (_this *PointerEvent) PointerId() int {
	var ret int
	value := _this.Value_JS.Get("pointerId")
	ret = (value).Int()
	return ret
}

// Width returning attribute 'width' with
// type float64 (idl: double).
func (_this *PointerEvent) Width() float64 {
	var ret float64
	value := _this.Value_JS.Get("width")
	ret = (value).Float()
	return ret
}

// Height returning attribute 'height' with
// type float64 (idl: double).
func (_this *PointerEvent) Height() float64 {
	var ret float64
	value := _this.Value_JS.Get("height")
	ret = (value).Float()
	return ret
}

// Pressure returning attribute 'pressure' with
// type float32 (idl: float).
func (_this *PointerEvent) Pressure() float32 {
	var ret float32
	value := _this.Value_JS.Get("pressure")
	ret = (float32)((value).Float())
	return ret
}

// TangentialPressure returning attribute 'tangentialPressure' with
// type float32 (idl: float).
func (_this *PointerEvent) TangentialPressure() float32 {
	var ret float32
	value := _this.Value_JS.Get("tangentialPressure")
	ret = (float32)((value).Float())
	return ret
}

// TiltX returning attribute 'tiltX' with
// type int (idl: long).
func (_this *PointerEvent) TiltX() int {
	var ret int
	value := _this.Value_JS.Get("tiltX")
	ret = (value).Int()
	return ret
}

// TiltY returning attribute 'tiltY' with
// type int (idl: long).
func (_this *PointerEvent) TiltY() int {
	var ret int
	value := _this.Value_JS.Get("tiltY")
	ret = (value).Int()
	return ret
}

// Twist returning attribute 'twist' with
// type int (idl: long).
func (_this *PointerEvent) Twist() int {
	var ret int
	value := _this.Value_JS.Get("twist")
	ret = (value).Int()
	return ret
}

// PointerType returning attribute 'pointerType' with
// type string (idl: DOMString).
func (_this *PointerEvent) PointerType() string {
	var ret string
	value := _this.Value_JS.Get("pointerType")
	ret = (value).String()
	return ret
}

// IsPrimary returning attribute 'isPrimary' with
// type bool (idl: boolean).
func (_this *PointerEvent) IsPrimary() bool {
	var ret bool
	value := _this.Value_JS.Get("isPrimary")
	ret = (value).Bool()
	return ret
}

func (_this *PointerEvent) GetCoalescedEvents() (_result []*PointerEvent) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCoalescedEvents", _args[0:_end]...)
	var (
		_converted []*PointerEvent // javascript: sequence<PointerEvent> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*PointerEvent, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *PointerEvent
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = PointerEventFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

func (_this *PointerEvent) GetPredictedEvents() (_result []*PointerEvent) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getPredictedEvents", _args[0:_end]...)
	var (
		_converted []*PointerEvent // javascript: sequence<PointerEvent> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*PointerEvent, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *PointerEvent
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = PointerEventFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}

// class: PopStateEvent
type PopStateEvent struct {
	domcore.Event
}

// PopStateEventFromJS is casting a js.Value into PopStateEvent.
func PopStateEventFromJS(value js.Value) *PopStateEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PopStateEvent{}
	ret.Value_JS = value
	return ret
}

// PopStateEventFromJS is casting from something that holds a js.Value into PopStateEvent.
func PopStateEventFromWrapper(input core.Wrapper) *PopStateEvent {
	return PopStateEventFromJS(input.JSValue())
}

func NewPopStateEvent(_type string, eventInitDict *PopStateEventInit) (_result *PopStateEvent) {
	_klass := js.Global().Get("PopStateEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PopStateEvent // javascript: PopStateEvent _what_return_name
	)
	_converted = PopStateEventFromJS(_returned)
	_result = _converted
	return
}

// State returning attribute 'state' with
// type Any (idl: any).
func (_this *PopStateEvent) State() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("state")
	ret = value
	return ret
}

// class: PromiseRejectionEvent
type PromiseRejectionEvent struct {
	domcore.Event
}

// PromiseRejectionEventFromJS is casting a js.Value into PromiseRejectionEvent.
func PromiseRejectionEventFromJS(value js.Value) *PromiseRejectionEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseRejectionEvent{}
	ret.Value_JS = value
	return ret
}

// PromiseRejectionEventFromJS is casting from something that holds a js.Value into PromiseRejectionEvent.
func PromiseRejectionEventFromWrapper(input core.Wrapper) *PromiseRejectionEvent {
	return PromiseRejectionEventFromJS(input.JSValue())
}

func NewPromiseRejectionEvent(_type string, eventInitDict *PromiseRejectionEventInit) (_result *PromiseRejectionEvent) {
	_klass := js.Global().Get("PromiseRejectionEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := eventInitDict.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *PromiseRejectionEvent // javascript: PromiseRejectionEvent _what_return_name
	)
	_converted = PromiseRejectionEventFromJS(_returned)
	_result = _converted
	return
}

// Promise returning attribute 'promise' with
// type javascript.Promise (idl: Promise).
func (_this *PromiseRejectionEvent) Promise() *javascript.Promise {
	var ret *javascript.Promise
	value := _this.Value_JS.Get("promise")
	ret = javascript.PromiseFromJS(value)
	return ret
}

// Reason returning attribute 'reason' with
// type Any (idl: any).
func (_this *PromiseRejectionEvent) Reason() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("reason")
	ret = value
	return ret
}

// class: Storage
type Storage struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *Storage) JSValue() js.Value {
	return _this.Value_JS
}

// StorageFromJS is casting a js.Value into Storage.
func StorageFromJS(value js.Value) *Storage {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Storage{}
	ret.Value_JS = value
	return ret
}

// StorageFromJS is casting from something that holds a js.Value into Storage.
func StorageFromWrapper(input core.Wrapper) *Storage {
	return StorageFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *Storage) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

func (_this *Storage) Get(key string) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Storage) Set(key string, value string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setItem", _args[0:_end]...)
	return
}

func (_this *Storage) Delete(key string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("removeItem", _args[0:_end]...)
	return
}

func (_this *Storage) Key(index uint) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("key", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Storage) GetItem(key string) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *Storage) SetItem(key string, value string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_p1 := value
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setItem", _args[0:_end]...)
	return
}

func (_this *Storage) RemoveItem(key string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("removeItem", _args[0:_end]...)
	return
}

func (_this *Storage) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

// class: StorageEvent
type StorageEvent struct {
	domcore.Event
}

// StorageEventFromJS is casting a js.Value into StorageEvent.
func StorageEventFromJS(value js.Value) *StorageEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &StorageEvent{}
	ret.Value_JS = value
	return ret
}

// StorageEventFromJS is casting from something that holds a js.Value into StorageEvent.
func StorageEventFromWrapper(input core.Wrapper) *StorageEvent {
	return StorageEventFromJS(input.JSValue())
}

func NewStorageEvent(_type string, eventInitDict *StorageEventInit) (_result *StorageEvent) {
	_klass := js.Global().Get("StorageEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *StorageEvent // javascript: StorageEvent _what_return_name
	)
	_converted = StorageEventFromJS(_returned)
	_result = _converted
	return
}

// Key returning attribute 'key' with
// type string (idl: DOMString).
func (_this *StorageEvent) Key() *string {
	var ret *string
	value := _this.Value_JS.Get("key")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// OldValue returning attribute 'oldValue' with
// type string (idl: DOMString).
func (_this *StorageEvent) OldValue() *string {
	var ret *string
	value := _this.Value_JS.Get("oldValue")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// NewValue returning attribute 'newValue' with
// type string (idl: DOMString).
func (_this *StorageEvent) NewValue() *string {
	var ret *string
	value := _this.Value_JS.Get("newValue")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Url returning attribute 'url' with
// type string (idl: USVString).
func (_this *StorageEvent) Url() string {
	var ret string
	value := _this.Value_JS.Get("url")
	ret = (value).String()
	return ret
}

// StorageArea returning attribute 'storageArea' with
// type Storage (idl: Storage).
func (_this *StorageEvent) StorageArea() *Storage {
	var ret *Storage
	value := _this.Value_JS.Get("storageArea")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = StorageFromJS(value)
	}
	return ret
}

func (_this *StorageEvent) InitStorageEvent(_type string, bubbles *bool, cancelable *bool, key *string, oldValue *string, newValue *string, url *string, storageArea *Storage) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if bubbles != nil {

		var _p1 interface{}
		if bubbles != nil {
			_p1 = *(bubbles)
		} else {
			_p1 = nil
		}
		_args[1] = _p1
		_end++
	}
	if cancelable != nil {

		var _p2 interface{}
		if cancelable != nil {
			_p2 = *(cancelable)
		} else {
			_p2 = nil
		}
		_args[2] = _p2
		_end++
	}
	if key != nil {

		var _p3 interface{}
		if key != nil {
			_p3 = *(key)
		} else {
			_p3 = nil
		}
		_args[3] = _p3
		_end++
	}
	if oldValue != nil {

		var _p4 interface{}
		if oldValue != nil {
			_p4 = *(oldValue)
		} else {
			_p4 = nil
		}
		_args[4] = _p4
		_end++
	}
	if newValue != nil {

		var _p5 interface{}
		if newValue != nil {
			_p5 = *(newValue)
		} else {
			_p5 = nil
		}
		_args[5] = _p5
		_end++
	}
	if url != nil {

		var _p6 interface{}
		if url != nil {
			_p6 = *(url)
		} else {
			_p6 = nil
		}
		_args[6] = _p6
		_end++
	}
	if storageArea != nil {
		_p7 := storageArea.JSValue()
		_args[7] = _p7
		_end++
	}
	_this.Value_JS.Call("initStorageEvent", _args[0:_end]...)
	return
}

// class: TrackEvent
type TrackEvent struct {
	domcore.Event
}

// TrackEventFromJS is casting a js.Value into TrackEvent.
func TrackEventFromJS(value js.Value) *TrackEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &TrackEvent{}
	ret.Value_JS = value
	return ret
}

// TrackEventFromJS is casting from something that holds a js.Value into TrackEvent.
func TrackEventFromWrapper(input core.Wrapper) *TrackEvent {
	return TrackEventFromJS(input.JSValue())
}

func NewTrackEvent(_type string, eventInitDict *TrackEventInit) (_result *TrackEvent) {
	_klass := js.Global().Get("TrackEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *TrackEvent // javascript: TrackEvent _what_return_name
	)
	_converted = TrackEventFromJS(_returned)
	_result = _converted
	return
}

// Track returning attribute 'track' with
// type Union (idl: Union).
func (_this *TrackEvent) Track() *Union {
	var ret *Union
	value := _this.Value_JS.Get("track")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = UnionFromJS(value)
	}
	return ret
}

// class: UIEvent
type UIEvent struct {
	domcore.Event
}

// UIEventFromJS is casting a js.Value into UIEvent.
func UIEventFromJS(value js.Value) *UIEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &UIEvent{}
	ret.Value_JS = value
	return ret
}

// UIEventFromJS is casting from something that holds a js.Value into UIEvent.
func UIEventFromWrapper(input core.Wrapper) *UIEvent {
	return UIEventFromJS(input.JSValue())
}

func NewUIEvent(_type string, eventInitDict *UIEventInit) (_result *UIEvent) {
	_klass := js.Global().Get("UIEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *UIEvent // javascript: UIEvent _what_return_name
	)
	_converted = UIEventFromJS(_returned)
	_result = _converted
	return
}

// View returning attribute 'view' with
// type js.Value (idl: Window).
func (_this *UIEvent) View() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("view")
	ret = value
	return ret
}

// Detail returning attribute 'detail' with
// type int (idl: long).
func (_this *UIEvent) Detail() int {
	var ret int
	value := _this.Value_JS.Get("detail")
	ret = (value).Int()
	return ret
}

// SourceCapabilities returning attribute 'sourceCapabilities' with
// type inputcapabilities.InputDeviceCapabilities (idl: InputDeviceCapabilities).
func (_this *UIEvent) SourceCapabilities() *inputcapabilities.InputDeviceCapabilities {
	var ret *inputcapabilities.InputDeviceCapabilities
	value := _this.Value_JS.Get("sourceCapabilities")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = inputcapabilities.InputDeviceCapabilitiesFromJS(value)
	}
	return ret
}

// Which returning attribute 'which' with
// type uint (idl: unsigned long).
func (_this *UIEvent) Which() uint {
	var ret uint
	value := _this.Value_JS.Get("which")
	ret = (uint)((value).Int())
	return ret
}

// class: WheelEvent
type WheelEvent struct {
	MouseEvent
}

// WheelEventFromJS is casting a js.Value into WheelEvent.
func WheelEventFromJS(value js.Value) *WheelEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &WheelEvent{}
	ret.Value_JS = value
	return ret
}

// WheelEventFromJS is casting from something that holds a js.Value into WheelEvent.
func WheelEventFromWrapper(input core.Wrapper) *WheelEvent {
	return WheelEventFromJS(input.JSValue())
}

const (
	DOM_DELTA_PIXEL uint = 0x00
	DOM_DELTA_LINE  uint = 0x01
	DOM_DELTA_PAGE  uint = 0x02
)

func NewWheelEvent(_type string, eventInitDict *WheelEventInit) (_result *WheelEvent) {
	_klass := js.Global().Get("WheelEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if eventInitDict != nil {
		_p1 := eventInitDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *WheelEvent // javascript: WheelEvent _what_return_name
	)
	_converted = WheelEventFromJS(_returned)
	_result = _converted
	return
}

// DeltaX returning attribute 'deltaX' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaX() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaX")
	ret = (value).Float()
	return ret
}

// DeltaY returning attribute 'deltaY' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaY() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaY")
	ret = (value).Float()
	return ret
}

// DeltaZ returning attribute 'deltaZ' with
// type float64 (idl: double).
func (_this *WheelEvent) DeltaZ() float64 {
	var ret float64
	value := _this.Value_JS.Get("deltaZ")
	ret = (value).Float()
	return ret
}

// DeltaMode returning attribute 'deltaMode' with
// type uint (idl: unsigned long).
func (_this *WheelEvent) DeltaMode() uint {
	var ret uint
	value := _this.Value_JS.Get("deltaMode")
	ret = (uint)((value).Int())
	return ret
}
