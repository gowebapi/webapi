// Code generated by webidl-bind. DO NOT EDIT.

// +build !js

package bluetooth

import js "github.com/gowebapi/webapi/core/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/permissions"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// domcore.Event
// domcore.EventHandler
// domcore.EventTarget
// javascript.DataView
// javascript.FrozenArray
// javascript.Object
// javascript.PromiseBool
// javascript.PromiseDataView
// javascript.PromiseFinally
// javascript.PromiseVoid
// permissions.PermissionStatus

// source idl files:
// promises.idl
// web-bluetooth.idl

// transform files:
// promises.go.md
// web-bluetooth.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// callback: BluetoothManufacturerDataMapForEach
type ManufacturerDataMapForEachFunc func(currentValue *javascript.DataView, currentKey int, listObj *ManufacturerDataMap)

// ManufacturerDataMapForEach is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type ManufacturerDataMapForEach js.Func

func ManufacturerDataMapForEachToJS(callback ManufacturerDataMapForEachFunc) *ManufacturerDataMapForEach {
	if callback == nil {
		return nil
	}
	ret := ManufacturerDataMapForEach(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *javascript.DataView // javascript: DataView currentValue
			_p1 int                  // javascript: unsigned short currentKey
			_p2 *ManufacturerDataMap // javascript: BluetoothManufacturerDataMap listObj
		)
		_p0 = javascript.DataViewFromJS(args[0])
		_p1 = (args[1]).Int()
		_p2 = ManufacturerDataMapFromJS(args[2])
		callback(_p0, _p1, _p2)

		// returning no return value
		return nil
	}))
	return &ret
}

func ManufacturerDataMapForEachFromJS(_value js.Value) ManufacturerDataMapForEachFunc {
	return func(currentValue *javascript.DataView, currentKey int, listObj *ManufacturerDataMap) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := currentValue.JSValue()
		_args[0] = _p0
		_end++
		_p1 := currentKey
		_args[1] = _p1
		_end++
		_p2 := listObj.JSValue()
		_args[2] = _p2
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseDeviceOnFulfilledFunc func(value *Device)

// PromiseDeviceOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseDeviceOnFulfilled js.Func

func PromiseDeviceOnFulfilledToJS(callback PromiseDeviceOnFulfilledFunc) *PromiseDeviceOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseDeviceOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *Device // javascript: BluetoothDevice value
		)
		_p0 = DeviceFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseDeviceOnFulfilledFromJS(_value js.Value) PromiseDeviceOnFulfilledFunc {
	return func(value *Device) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseDeviceOnRejectedFunc func(reason js.Value)

// PromiseDeviceOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseDeviceOnRejected js.Func

func PromiseDeviceOnRejectedToJS(callback PromiseDeviceOnRejectedFunc) *PromiseDeviceOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseDeviceOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseDeviceOnRejectedFromJS(_value js.Value) PromiseDeviceOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseRemoteGATTCharacteristicOnFulfilledFunc func(value *RemoteGATTCharacteristic)

// PromiseRemoteGATTCharacteristicOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTCharacteristicOnFulfilled js.Func

func PromiseRemoteGATTCharacteristicOnFulfilledToJS(callback PromiseRemoteGATTCharacteristicOnFulfilledFunc) *PromiseRemoteGATTCharacteristicOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTCharacteristicOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *RemoteGATTCharacteristic // javascript: BluetoothRemoteGATTCharacteristic value
		)
		_p0 = RemoteGATTCharacteristicFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTCharacteristicOnFulfilledFromJS(_value js.Value) PromiseRemoteGATTCharacteristicOnFulfilledFunc {
	return func(value *RemoteGATTCharacteristic) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseRemoteGATTCharacteristicOnRejectedFunc func(reason js.Value)

// PromiseRemoteGATTCharacteristicOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTCharacteristicOnRejected js.Func

func PromiseRemoteGATTCharacteristicOnRejectedToJS(callback PromiseRemoteGATTCharacteristicOnRejectedFunc) *PromiseRemoteGATTCharacteristicOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTCharacteristicOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTCharacteristicOnRejectedFromJS(_value js.Value) PromiseRemoteGATTCharacteristicOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseRemoteGATTDescriptorOnFulfilledFunc func(value *RemoteGATTDescriptor)

// PromiseRemoteGATTDescriptorOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTDescriptorOnFulfilled js.Func

func PromiseRemoteGATTDescriptorOnFulfilledToJS(callback PromiseRemoteGATTDescriptorOnFulfilledFunc) *PromiseRemoteGATTDescriptorOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTDescriptorOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *RemoteGATTDescriptor // javascript: BluetoothRemoteGATTDescriptor value
		)
		_p0 = RemoteGATTDescriptorFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTDescriptorOnFulfilledFromJS(_value js.Value) PromiseRemoteGATTDescriptorOnFulfilledFunc {
	return func(value *RemoteGATTDescriptor) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseRemoteGATTDescriptorOnRejectedFunc func(reason js.Value)

// PromiseRemoteGATTDescriptorOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTDescriptorOnRejected js.Func

func PromiseRemoteGATTDescriptorOnRejectedToJS(callback PromiseRemoteGATTDescriptorOnRejectedFunc) *PromiseRemoteGATTDescriptorOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTDescriptorOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTDescriptorOnRejectedFromJS(_value js.Value) PromiseRemoteGATTDescriptorOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseRemoteGATTServerOnFulfilledFunc func(value *RemoteGATTServer)

// PromiseRemoteGATTServerOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTServerOnFulfilled js.Func

func PromiseRemoteGATTServerOnFulfilledToJS(callback PromiseRemoteGATTServerOnFulfilledFunc) *PromiseRemoteGATTServerOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTServerOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *RemoteGATTServer // javascript: BluetoothRemoteGATTServer value
		)
		_p0 = RemoteGATTServerFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTServerOnFulfilledFromJS(_value js.Value) PromiseRemoteGATTServerOnFulfilledFunc {
	return func(value *RemoteGATTServer) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseRemoteGATTServerOnRejectedFunc func(reason js.Value)

// PromiseRemoteGATTServerOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTServerOnRejected js.Func

func PromiseRemoteGATTServerOnRejectedToJS(callback PromiseRemoteGATTServerOnRejectedFunc) *PromiseRemoteGATTServerOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTServerOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTServerOnRejectedFromJS(_value js.Value) PromiseRemoteGATTServerOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseRemoteGATTServiceOnFulfilledFunc func(value *RemoteGATTService)

// PromiseRemoteGATTServiceOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTServiceOnFulfilled js.Func

func PromiseRemoteGATTServiceOnFulfilledToJS(callback PromiseRemoteGATTServiceOnFulfilledFunc) *PromiseRemoteGATTServiceOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTServiceOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *RemoteGATTService // javascript: BluetoothRemoteGATTService value
		)
		_p0 = RemoteGATTServiceFromJS(args[0])
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTServiceOnFulfilledFromJS(_value js.Value) PromiseRemoteGATTServiceOnFulfilledFunc {
	return func(value *RemoteGATTService) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := value.JSValue()
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseRemoteGATTServiceOnRejectedFunc func(reason js.Value)

// PromiseRemoteGATTServiceOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseRemoteGATTServiceOnRejected js.Func

func PromiseRemoteGATTServiceOnRejectedToJS(callback PromiseRemoteGATTServiceOnRejectedFunc) *PromiseRemoteGATTServiceOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseRemoteGATTServiceOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseRemoteGATTServiceOnRejectedFromJS(_value js.Value) PromiseRemoteGATTServiceOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceRemoteGATTCharacteristicOnFulfilledFunc func(value []*RemoteGATTCharacteristic)

// PromiseSequenceRemoteGATTCharacteristicOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTCharacteristicOnFulfilled js.Func

func PromiseSequenceRemoteGATTCharacteristicOnFulfilledToJS(callback PromiseSequenceRemoteGATTCharacteristicOnFulfilledFunc) *PromiseSequenceRemoteGATTCharacteristicOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTCharacteristicOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*RemoteGATTCharacteristic // javascript: sequence<BluetoothRemoteGATTCharacteristic> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*RemoteGATTCharacteristic, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *RemoteGATTCharacteristic
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = RemoteGATTCharacteristicFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTCharacteristicOnFulfilledFromJS(_value js.Value) PromiseSequenceRemoteGATTCharacteristicOnFulfilledFunc {
	return func(value []*RemoteGATTCharacteristic) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceRemoteGATTCharacteristicOnRejectedFunc func(reason js.Value)

// PromiseSequenceRemoteGATTCharacteristicOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTCharacteristicOnRejected js.Func

func PromiseSequenceRemoteGATTCharacteristicOnRejectedToJS(callback PromiseSequenceRemoteGATTCharacteristicOnRejectedFunc) *PromiseSequenceRemoteGATTCharacteristicOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTCharacteristicOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTCharacteristicOnRejectedFromJS(_value js.Value) PromiseSequenceRemoteGATTCharacteristicOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceRemoteGATTDescriptorOnFulfilledFunc func(value []*RemoteGATTDescriptor)

// PromiseSequenceRemoteGATTDescriptorOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTDescriptorOnFulfilled js.Func

func PromiseSequenceRemoteGATTDescriptorOnFulfilledToJS(callback PromiseSequenceRemoteGATTDescriptorOnFulfilledFunc) *PromiseSequenceRemoteGATTDescriptorOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTDescriptorOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*RemoteGATTDescriptor // javascript: sequence<BluetoothRemoteGATTDescriptor> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*RemoteGATTDescriptor, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *RemoteGATTDescriptor
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = RemoteGATTDescriptorFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTDescriptorOnFulfilledFromJS(_value js.Value) PromiseSequenceRemoteGATTDescriptorOnFulfilledFunc {
	return func(value []*RemoteGATTDescriptor) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceRemoteGATTDescriptorOnRejectedFunc func(reason js.Value)

// PromiseSequenceRemoteGATTDescriptorOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTDescriptorOnRejected js.Func

func PromiseSequenceRemoteGATTDescriptorOnRejectedToJS(callback PromiseSequenceRemoteGATTDescriptorOnRejectedFunc) *PromiseSequenceRemoteGATTDescriptorOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTDescriptorOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTDescriptorOnRejectedFromJS(_value js.Value) PromiseSequenceRemoteGATTDescriptorOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnFulfilled
type PromiseSequenceRemoteGATTServiceOnFulfilledFunc func(value []*RemoteGATTService)

// PromiseSequenceRemoteGATTServiceOnFulfilled is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTServiceOnFulfilled js.Func

func PromiseSequenceRemoteGATTServiceOnFulfilledToJS(callback PromiseSequenceRemoteGATTServiceOnFulfilledFunc) *PromiseSequenceRemoteGATTServiceOnFulfilled {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTServiceOnFulfilled(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*RemoteGATTService // javascript: sequence<BluetoothRemoteGATTService> value
		)
		__length0 := args[0].Length()
		__array0 := make([]*RemoteGATTService, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *RemoteGATTService
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = RemoteGATTServiceFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTServiceOnFulfilledFromJS(_value js.Value) PromiseSequenceRemoteGATTServiceOnFulfilledFunc {
	return func(value []*RemoteGATTService) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(value))
		for __idx0, __seq_in0 := range value {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: PromiseTemplateOnRejected
type PromiseSequenceRemoteGATTServiceOnRejectedFunc func(reason js.Value)

// PromiseSequenceRemoteGATTServiceOnRejected is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type PromiseSequenceRemoteGATTServiceOnRejected js.Func

func PromiseSequenceRemoteGATTServiceOnRejectedToJS(callback PromiseSequenceRemoteGATTServiceOnRejectedFunc) *PromiseSequenceRemoteGATTServiceOnRejected {
	if callback == nil {
		return nil
	}
	ret := PromiseSequenceRemoteGATTServiceOnRejected(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 js.Value // javascript: any reason
		)
		_p0 = args[0]
		callback(_p0)

		// returning no return value
		return nil
	}))
	return &ret
}

func PromiseSequenceRemoteGATTServiceOnRejectedFromJS(_value js.Value) PromiseSequenceRemoteGATTServiceOnRejectedFunc {
	return func(reason js.Value) {
		var (
			_args [1]interface{}
			_end  int
		)
		_p0 := reason
		_args[0] = _p0
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// callback: BluetoothServiceDataMapForEach
type ServiceDataMapForEachFunc func(currentValue *javascript.DataView, currentKey string, listObj *ServiceDataMap)

// ServiceDataMapForEach is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type ServiceDataMapForEach js.Func

func ServiceDataMapForEachToJS(callback ServiceDataMapForEachFunc) *ServiceDataMapForEach {
	if callback == nil {
		return nil
	}
	ret := ServiceDataMapForEach(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 *javascript.DataView // javascript: DataView currentValue
			_p1 string               // javascript: DOMString currentKey
			_p2 *ServiceDataMap      // javascript: BluetoothServiceDataMap listObj
		)
		_p0 = javascript.DataViewFromJS(args[0])
		_p1 = (args[1]).String()
		_p2 = ServiceDataMapFromJS(args[2])
		callback(_p0, _p1, _p2)

		// returning no return value
		return nil
	}))
	return &ret
}

func ServiceDataMapForEachFromJS(_value js.Value) ServiceDataMapForEachFunc {
	return func(currentValue *javascript.DataView, currentKey string, listObj *ServiceDataMap) {
		var (
			_args [3]interface{}
			_end  int
		)
		_p0 := currentValue.JSValue()
		_args[0] = _p0
		_end++
		_p1 := currentKey
		_args[1] = _p1
		_end++
		_p2 := listObj.JSValue()
		_args[2] = _p2
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: BluetoothAdvertisingEventInit
type AdvertisingEventInit struct {
	Bubbles          bool
	Cancelable       bool
	Composed         bool
	Device           *Device
	Uuids            []*Union
	Name             string
	Appearance       int
	TxPower          int
	Rssi             int
	ManufacturerData *ManufacturerDataMap
	ServiceData      *ServiceDataMap
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AdvertisingEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Device.JSValue()
	out.Set("device", value3)
	value4 := js.Global().Get("Array").New(len(_this.Uuids))
	for __idx4, __seq_in4 := range _this.Uuids {
		__seq_out4 := __seq_in4.JSValue()
		value4.SetIndex(__idx4, __seq_out4)
	}
	out.Set("uuids", value4)
	value5 := _this.Name
	out.Set("name", value5)
	value6 := _this.Appearance
	out.Set("appearance", value6)
	value7 := _this.TxPower
	out.Set("txPower", value7)
	value8 := _this.Rssi
	out.Set("rssi", value8)
	value9 := _this.ManufacturerData.JSValue()
	out.Set("manufacturerData", value9)
	value10 := _this.ServiceData.JSValue()
	out.Set("serviceData", value10)
	return out
}

// AdvertisingEventInitFromJS is allocating a new
// AdvertisingEventInit object and copy all values in the value javascript object.
func AdvertisingEventInitFromJS(value js.Value) *AdvertisingEventInit {
	var out AdvertisingEventInit
	var (
		value0  bool                 // javascript: boolean {bubbles Bubbles bubbles}
		value1  bool                 // javascript: boolean {cancelable Cancelable cancelable}
		value2  bool                 // javascript: boolean {composed Composed composed}
		value3  *Device              // javascript: BluetoothDevice {device Device device}
		value4  []*Union             // javascript: sequence<Union> {uuids Uuids uuids}
		value5  string               // javascript: DOMString {name Name name}
		value6  int                  // javascript: unsigned short {appearance Appearance appearance}
		value7  int                  // javascript: byte {txPower TxPower txPower}
		value8  int                  // javascript: byte {rssi Rssi rssi}
		value9  *ManufacturerDataMap // javascript: BluetoothManufacturerDataMap {manufacturerData ManufacturerData manufacturerData}
		value10 *ServiceDataMap      // javascript: BluetoothServiceDataMap {serviceData ServiceData serviceData}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = DeviceFromJS(value.Get("device"))
	out.Device = value3
	__length4 := value.Get("uuids").Length()
	__array4 := make([]*Union, __length4, __length4)
	for __idx4 := 0; __idx4 < __length4; __idx4++ {
		var __seq_out4 *Union
		__seq_in4 := value.Get("uuids").Index(__idx4)
		__seq_out4 = UnionFromJS(__seq_in4)
		__array4[__idx4] = __seq_out4
	}
	value4 = __array4
	out.Uuids = value4
	value5 = (value.Get("name")).String()
	out.Name = value5
	value6 = (value.Get("appearance")).Int()
	out.Appearance = value6
	value7 = (value.Get("txPower")).Int()
	out.TxPower = value7
	value8 = (value.Get("rssi")).Int()
	out.Rssi = value8
	value9 = ManufacturerDataMapFromJS(value.Get("manufacturerData"))
	out.ManufacturerData = value9
	value10 = ServiceDataMapFromJS(value.Get("serviceData"))
	out.ServiceData = value10
	return &out
}

// dictionary: AllowedBluetoothDevice
type AllowedDevice struct {
	DeviceId        string
	MayUseGATT      bool
	AllowedServices *Union
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *AllowedDevice) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.DeviceId
	out.Set("deviceId", value0)
	value1 := _this.MayUseGATT
	out.Set("mayUseGATT", value1)
	value2 := _this.AllowedServices.JSValue()
	out.Set("allowedServices", value2)
	return out
}

// AllowedDeviceFromJS is allocating a new
// AllowedDevice object and copy all values in the value javascript object.
func AllowedDeviceFromJS(value js.Value) *AllowedDevice {
	var out AllowedDevice
	var (
		value0 string // javascript: DOMString {deviceId DeviceId deviceId}
		value1 bool   // javascript: boolean {mayUseGATT MayUseGATT mayUseGATT}
		value2 *Union // javascript: Union {allowedServices AllowedServices allowedServices}
	)
	value0 = (value.Get("deviceId")).String()
	out.DeviceId = value0
	value1 = (value.Get("mayUseGATT")).Bool()
	out.MayUseGATT = value1
	value2 = UnionFromJS(value.Get("allowedServices"))
	out.AllowedServices = value2
	return &out
}

// dictionary: BluetoothDataFilterInit
type DataFilterInit struct {
	DataPrefix *Union
	Mask       *Union
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *DataFilterInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.DataPrefix.JSValue()
	out.Set("dataPrefix", value0)
	value1 := _this.Mask.JSValue()
	out.Set("mask", value1)
	return out
}

// DataFilterInitFromJS is allocating a new
// DataFilterInit object and copy all values in the value javascript object.
func DataFilterInitFromJS(value js.Value) *DataFilterInit {
	var out DataFilterInit
	var (
		value0 *Union // javascript: Union {dataPrefix DataPrefix dataPrefix}
		value1 *Union // javascript: Union {mask Mask mask}
	)
	value0 = UnionFromJS(value.Get("dataPrefix"))
	out.DataPrefix = value0
	value1 = UnionFromJS(value.Get("mask"))
	out.Mask = value1
	return &out
}

// dictionary: BluetoothLEScanFilterInit
type LEScanFilterInit struct {
	Services         []*Union
	Name             string
	NamePrefix       string
	ManufacturerData *javascript.Object
	ServiceData      *javascript.Object
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *LEScanFilterInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Services))
	for __idx0, __seq_in0 := range _this.Services {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("services", value0)
	value1 := _this.Name
	out.Set("name", value1)
	value2 := _this.NamePrefix
	out.Set("namePrefix", value2)
	value3 := _this.ManufacturerData.JSValue()
	out.Set("manufacturerData", value3)
	value4 := _this.ServiceData.JSValue()
	out.Set("serviceData", value4)
	return out
}

// LEScanFilterInitFromJS is allocating a new
// LEScanFilterInit object and copy all values in the value javascript object.
func LEScanFilterInitFromJS(value js.Value) *LEScanFilterInit {
	var out LEScanFilterInit
	var (
		value0 []*Union           // javascript: sequence<Union> {services Services services}
		value1 string             // javascript: DOMString {name Name name}
		value2 string             // javascript: DOMString {namePrefix NamePrefix namePrefix}
		value3 *javascript.Object // javascript: object {manufacturerData ManufacturerData manufacturerData}
		value4 *javascript.Object // javascript: object {serviceData ServiceData serviceData}
	)
	__length0 := value.Get("services").Length()
	__array0 := make([]*Union, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *Union
		__seq_in0 := value.Get("services").Index(__idx0)
		__seq_out0 = UnionFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Services = value0
	value1 = (value.Get("name")).String()
	out.Name = value1
	value2 = (value.Get("namePrefix")).String()
	out.NamePrefix = value2
	value3 = javascript.ObjectFromJS(value.Get("manufacturerData"))
	out.ManufacturerData = value3
	value4 = javascript.ObjectFromJS(value.Get("serviceData"))
	out.ServiceData = value4
	return &out
}

// dictionary: BluetoothManufacturerDataMapEntryIteratorValue
type ManufacturerDataMapEntryIteratorValue struct {
	Value []js.Value
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ManufacturerDataMapEntryIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Value))
	for __idx0, __seq_in0 := range _this.Value {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ManufacturerDataMapEntryIteratorValueFromJS is allocating a new
// ManufacturerDataMapEntryIteratorValue object and copy all values in the value javascript object.
func ManufacturerDataMapEntryIteratorValueFromJS(value js.Value) *ManufacturerDataMapEntryIteratorValue {
	var out ManufacturerDataMapEntryIteratorValue
	var (
		value0 []js.Value // javascript: sequence<any> {value Value value}
		value1 bool       // javascript: boolean {done Done done}
	)
	__length0 := value.Get("value").Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Get("value").Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: BluetoothManufacturerDataMapKeyIteratorValue
type ManufacturerDataMapKeyIteratorValue struct {
	Value int
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ManufacturerDataMapKeyIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ManufacturerDataMapKeyIteratorValueFromJS is allocating a new
// ManufacturerDataMapKeyIteratorValue object and copy all values in the value javascript object.
func ManufacturerDataMapKeyIteratorValueFromJS(value js.Value) *ManufacturerDataMapKeyIteratorValue {
	var out ManufacturerDataMapKeyIteratorValue
	var (
		value0 int  // javascript: unsigned short {value Value value}
		value1 bool // javascript: boolean {done Done done}
	)
	value0 = (value.Get("value")).Int()
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: BluetoothManufacturerDataMapValueIteratorValue
type ManufacturerDataMapValueIteratorValue struct {
	Value *javascript.DataView
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ManufacturerDataMapValueIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ManufacturerDataMapValueIteratorValueFromJS is allocating a new
// ManufacturerDataMapValueIteratorValue object and copy all values in the value javascript object.
func ManufacturerDataMapValueIteratorValueFromJS(value js.Value) *ManufacturerDataMapValueIteratorValue {
	var out ManufacturerDataMapValueIteratorValue
	var (
		value0 *javascript.DataView // javascript: DataView {value Value value}
		value1 bool                 // javascript: boolean {done Done done}
	)
	value0 = javascript.DataViewFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: BluetoothPermissionData
type PermissionData struct {
	AllowedDevices []*AllowedDevice
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PermissionData) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.AllowedDevices))
	for __idx0, __seq_in0 := range _this.AllowedDevices {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("allowedDevices", value0)
	return out
}

// PermissionDataFromJS is allocating a new
// PermissionData object and copy all values in the value javascript object.
func PermissionDataFromJS(value js.Value) *PermissionData {
	var out PermissionData
	var (
		value0 []*AllowedDevice // javascript: sequence<AllowedBluetoothDevice> {allowedDevices AllowedDevices allowedDevices}
	)
	__length0 := value.Get("allowedDevices").Length()
	__array0 := make([]*AllowedDevice, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *AllowedDevice
		__seq_in0 := value.Get("allowedDevices").Index(__idx0)
		__seq_out0 = AllowedDeviceFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.AllowedDevices = value0
	return &out
}

// dictionary: BluetoothPermissionDescriptor
type PermissionDescriptor struct {
	Name             string
	DeviceId         string
	Filters          []*LEScanFilterInit
	OptionalServices []*Union
	AcceptAllDevices bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *PermissionDescriptor) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Name
	out.Set("name", value0)
	value1 := _this.DeviceId
	out.Set("deviceId", value1)
	value2 := js.Global().Get("Array").New(len(_this.Filters))
	for __idx2, __seq_in2 := range _this.Filters {
		__seq_out2 := __seq_in2.JSValue()
		value2.SetIndex(__idx2, __seq_out2)
	}
	out.Set("filters", value2)
	value3 := js.Global().Get("Array").New(len(_this.OptionalServices))
	for __idx3, __seq_in3 := range _this.OptionalServices {
		__seq_out3 := __seq_in3.JSValue()
		value3.SetIndex(__idx3, __seq_out3)
	}
	out.Set("optionalServices", value3)
	value4 := _this.AcceptAllDevices
	out.Set("acceptAllDevices", value4)
	return out
}

// PermissionDescriptorFromJS is allocating a new
// PermissionDescriptor object and copy all values in the value javascript object.
func PermissionDescriptorFromJS(value js.Value) *PermissionDescriptor {
	var out PermissionDescriptor
	var (
		value0 string              // javascript: DOMString {name Name name}
		value1 string              // javascript: DOMString {deviceId DeviceId deviceId}
		value2 []*LEScanFilterInit // javascript: sequence<BluetoothLEScanFilterInit> {filters Filters filters}
		value3 []*Union            // javascript: sequence<Union> {optionalServices OptionalServices optionalServices}
		value4 bool                // javascript: boolean {acceptAllDevices AcceptAllDevices acceptAllDevices}
	)
	value0 = (value.Get("name")).String()
	out.Name = value0
	value1 = (value.Get("deviceId")).String()
	out.DeviceId = value1
	__length2 := value.Get("filters").Length()
	__array2 := make([]*LEScanFilterInit, __length2, __length2)
	for __idx2 := 0; __idx2 < __length2; __idx2++ {
		var __seq_out2 *LEScanFilterInit
		__seq_in2 := value.Get("filters").Index(__idx2)
		__seq_out2 = LEScanFilterInitFromJS(__seq_in2)
		__array2[__idx2] = __seq_out2
	}
	value2 = __array2
	out.Filters = value2
	__length3 := value.Get("optionalServices").Length()
	__array3 := make([]*Union, __length3, __length3)
	for __idx3 := 0; __idx3 < __length3; __idx3++ {
		var __seq_out3 *Union
		__seq_in3 := value.Get("optionalServices").Index(__idx3)
		__seq_out3 = UnionFromJS(__seq_in3)
		__array3[__idx3] = __seq_out3
	}
	value3 = __array3
	out.OptionalServices = value3
	value4 = (value.Get("acceptAllDevices")).Bool()
	out.AcceptAllDevices = value4
	return &out
}

// dictionary: RequestDeviceOptions
type RequestDeviceOptions struct {
	Filters          []*LEScanFilterInit
	OptionalServices []*Union
	AcceptAllDevices bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *RequestDeviceOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Filters))
	for __idx0, __seq_in0 := range _this.Filters {
		__seq_out0 := __seq_in0.JSValue()
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("filters", value0)
	value1 := js.Global().Get("Array").New(len(_this.OptionalServices))
	for __idx1, __seq_in1 := range _this.OptionalServices {
		__seq_out1 := __seq_in1.JSValue()
		value1.SetIndex(__idx1, __seq_out1)
	}
	out.Set("optionalServices", value1)
	value2 := _this.AcceptAllDevices
	out.Set("acceptAllDevices", value2)
	return out
}

// RequestDeviceOptionsFromJS is allocating a new
// RequestDeviceOptions object and copy all values in the value javascript object.
func RequestDeviceOptionsFromJS(value js.Value) *RequestDeviceOptions {
	var out RequestDeviceOptions
	var (
		value0 []*LEScanFilterInit // javascript: sequence<BluetoothLEScanFilterInit> {filters Filters filters}
		value1 []*Union            // javascript: sequence<Union> {optionalServices OptionalServices optionalServices}
		value2 bool                // javascript: boolean {acceptAllDevices AcceptAllDevices acceptAllDevices}
	)
	__length0 := value.Get("filters").Length()
	__array0 := make([]*LEScanFilterInit, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *LEScanFilterInit
		__seq_in0 := value.Get("filters").Index(__idx0)
		__seq_out0 = LEScanFilterInitFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Filters = value0
	__length1 := value.Get("optionalServices").Length()
	__array1 := make([]*Union, __length1, __length1)
	for __idx1 := 0; __idx1 < __length1; __idx1++ {
		var __seq_out1 *Union
		__seq_in1 := value.Get("optionalServices").Index(__idx1)
		__seq_out1 = UnionFromJS(__seq_in1)
		__array1[__idx1] = __seq_out1
	}
	value1 = __array1
	out.OptionalServices = value1
	value2 = (value.Get("acceptAllDevices")).Bool()
	out.AcceptAllDevices = value2
	return &out
}

// dictionary: BluetoothServiceDataMapEntryIteratorValue
type ServiceDataMapEntryIteratorValue struct {
	Value []js.Value
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ServiceDataMapEntryIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Value))
	for __idx0, __seq_in0 := range _this.Value {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ServiceDataMapEntryIteratorValueFromJS is allocating a new
// ServiceDataMapEntryIteratorValue object and copy all values in the value javascript object.
func ServiceDataMapEntryIteratorValueFromJS(value js.Value) *ServiceDataMapEntryIteratorValue {
	var out ServiceDataMapEntryIteratorValue
	var (
		value0 []js.Value // javascript: sequence<any> {value Value value}
		value1 bool       // javascript: boolean {done Done done}
	)
	__length0 := value.Get("value").Length()
	__array0 := make([]js.Value, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 js.Value
		__seq_in0 := value.Get("value").Index(__idx0)
		__seq_out0 = __seq_in0
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: BluetoothServiceDataMapKeyIteratorValue
type ServiceDataMapKeyIteratorValue struct {
	Value string
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ServiceDataMapKeyIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ServiceDataMapKeyIteratorValueFromJS is allocating a new
// ServiceDataMapKeyIteratorValue object and copy all values in the value javascript object.
func ServiceDataMapKeyIteratorValueFromJS(value js.Value) *ServiceDataMapKeyIteratorValue {
	var out ServiceDataMapKeyIteratorValue
	var (
		value0 string // javascript: DOMString {value Value value}
		value1 bool   // javascript: boolean {done Done done}
	)
	value0 = (value.Get("value")).String()
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: BluetoothServiceDataMapValueIteratorValue
type ServiceDataMapValueIteratorValue struct {
	Value *javascript.DataView
	Done  bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ServiceDataMapValueIteratorValue) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Value.JSValue()
	out.Set("value", value0)
	value1 := _this.Done
	out.Set("done", value1)
	return out
}

// ServiceDataMapValueIteratorValueFromJS is allocating a new
// ServiceDataMapValueIteratorValue object and copy all values in the value javascript object.
func ServiceDataMapValueIteratorValueFromJS(value js.Value) *ServiceDataMapValueIteratorValue {
	var out ServiceDataMapValueIteratorValue
	var (
		value0 *javascript.DataView // javascript: DataView {value Value value}
		value1 bool                 // javascript: boolean {done Done done}
	)
	value0 = javascript.DataViewFromJS(value.Get("value"))
	out.Value = value0
	value1 = (value.Get("done")).Bool()
	out.Done = value1
	return &out
}

// dictionary: ValueEventInit
type ValueEventInit struct {
	Bubbles    bool
	Cancelable bool
	Composed   bool
	Value      js.Value
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ValueEventInit) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Bubbles
	out.Set("bubbles", value0)
	value1 := _this.Cancelable
	out.Set("cancelable", value1)
	value2 := _this.Composed
	out.Set("composed", value2)
	value3 := _this.Value
	out.Set("value", value3)
	return out
}

// ValueEventInitFromJS is allocating a new
// ValueEventInit object and copy all values in the value javascript object.
func ValueEventInitFromJS(value js.Value) *ValueEventInit {
	var out ValueEventInit
	var (
		value0 bool     // javascript: boolean {bubbles Bubbles bubbles}
		value1 bool     // javascript: boolean {cancelable Cancelable cancelable}
		value2 bool     // javascript: boolean {composed Composed composed}
		value3 js.Value // javascript: any {value Value value}
	)
	value0 = (value.Get("bubbles")).Bool()
	out.Bubbles = value0
	value1 = (value.Get("cancelable")).Bool()
	out.Cancelable = value1
	value2 = (value.Get("composed")).Bool()
	out.Composed = value2
	value3 = value.Get("value")
	out.Value = value3
	return &out
}

// class: BluetoothAdvertisingEvent
type AdvertisingEvent struct {
	domcore.Event
}

// AdvertisingEventFromJS is casting a js.Value into AdvertisingEvent.
func AdvertisingEventFromJS(value js.Value) *AdvertisingEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &AdvertisingEvent{}
	ret.Value_JS = value
	return ret
}

// AdvertisingEventFromJS is casting from something that holds a js.Value into AdvertisingEvent.
func AdvertisingEventFromWrapper(input core.Wrapper) *AdvertisingEvent {
	return AdvertisingEventFromJS(input.JSValue())
}

func NewBluetoothAdvertisingEvent(_type string, init *AdvertisingEventInit) (_result *AdvertisingEvent) {
	_klass := js.Global().Get("BluetoothAdvertisingEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_p1 := init.JSValue()
	_args[1] = _p1
	_end++
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *AdvertisingEvent // javascript: BluetoothAdvertisingEvent _what_return_name
	)
	_converted = AdvertisingEventFromJS(_returned)
	_result = _converted
	return
}

// Device returning attribute 'device' with
// type Device (idl: BluetoothDevice).
func (_this *AdvertisingEvent) Device() *Device {
	var ret *Device
	value := _this.Value_JS.Get("device")
	ret = DeviceFromJS(value)
	return ret
}

// Uuids returning attribute 'uuids' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *AdvertisingEvent) Uuids() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("uuids")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *AdvertisingEvent) Name() *string {
	var ret *string
	value := _this.Value_JS.Get("name")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Appearance returning attribute 'appearance' with
// type int (idl: unsigned short).
func (_this *AdvertisingEvent) Appearance() *int {
	var ret *int
	value := _this.Value_JS.Get("appearance")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Int()
		ret = &__tmp
	}
	return ret
}

// TxPower returning attribute 'txPower' with
// type int (idl: byte).
func (_this *AdvertisingEvent) TxPower() *int {
	var ret *int
	value := _this.Value_JS.Get("txPower")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Int()
		ret = &__tmp
	}
	return ret
}

// Rssi returning attribute 'rssi' with
// type int (idl: byte).
func (_this *AdvertisingEvent) Rssi() *int {
	var ret *int
	value := _this.Value_JS.Get("rssi")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).Int()
		ret = &__tmp
	}
	return ret
}

// ManufacturerData returning attribute 'manufacturerData' with
// type ManufacturerDataMap (idl: BluetoothManufacturerDataMap).
func (_this *AdvertisingEvent) ManufacturerData() *ManufacturerDataMap {
	var ret *ManufacturerDataMap
	value := _this.Value_JS.Get("manufacturerData")
	ret = ManufacturerDataMapFromJS(value)
	return ret
}

// ServiceData returning attribute 'serviceData' with
// type ServiceDataMap (idl: BluetoothServiceDataMap).
func (_this *AdvertisingEvent) ServiceData() *ServiceDataMap {
	var ret *ServiceDataMap
	value := _this.Value_JS.Get("serviceData")
	ret = ServiceDataMapFromJS(value)
	return ret
}

// class: Bluetooth
type Bluetooth struct {
	domcore.EventTarget
}

// BluetoothFromJS is casting a js.Value into Bluetooth.
func BluetoothFromJS(value js.Value) *Bluetooth {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Bluetooth{}
	ret.Value_JS = value
	return ret
}

// BluetoothFromJS is casting from something that holds a js.Value into Bluetooth.
func BluetoothFromWrapper(input core.Wrapper) *Bluetooth {
	return BluetoothFromJS(input.JSValue())
}

// OnAvailabilityChanged returning attribute 'onavailabilitychanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnAvailabilityChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onavailabilitychanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// ReferringDevice returning attribute 'referringDevice' with
// type Device (idl: BluetoothDevice).
func (_this *Bluetooth) ReferringDevice() *Device {
	var ret *Device
	value := _this.Value_JS.Get("referringDevice")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = DeviceFromJS(value)
	}
	return ret
}

// OnAdvertisementReceived returning attribute 'onadvertisementreceived' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnAdvertisementReceived() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onadvertisementreceived")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGattServerDisconnected returning attribute 'ongattserverdisconnected' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnGattServerDisconnected() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongattserverdisconnected")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCharacteristicValueChanged returning attribute 'oncharacteristicvaluechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnCharacteristicValueChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncharacteristicvaluechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceAdded returning attribute 'onserviceadded' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnServiceAdded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceadded")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceChanged returning attribute 'onservicechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnServiceChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onservicechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceRemoved returning attribute 'onserviceremoved' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Bluetooth) OnServiceRemoved() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceremoved")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: AdvertisingEvent
func eventFuncBluetooth_AdvertisingEvent(listener func(event *AdvertisingEvent, target *Bluetooth)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *AdvertisingEvent
		value := args[0]
		incoming := value.Get("target")
		ret = AdvertisingEventFromJS(value)
		src := BluetoothFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAdvertisementReceived is adding doing AddEventListener for 'AdvertisementReceived' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventAdvertisementReceived(listener func(event *AdvertisingEvent, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_AdvertisingEvent(listener)
	_this.Value_JS.Call("addEventListener", "advertisementreceived", cb)
	return cb
}

// SetOnAdvertisementReceived is assigning a function to 'onadvertisementreceived'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnAdvertisementReceived(listener func(event *AdvertisingEvent, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_AdvertisingEvent(listener)
	_this.Value_JS.Set("onadvertisementreceived", cb)
	return cb
}

// event attribute: ValueEvent
func eventFuncBluetooth_ValueEvent(listener func(event *ValueEvent, target *Bluetooth)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *ValueEvent
		value := args[0]
		incoming := value.Get("target")
		ret = ValueEventFromJS(value)
		src := BluetoothFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAvailabilityChanged is adding doing AddEventListener for 'AvailabilityChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventAvailabilityChanged(listener func(event *ValueEvent, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_ValueEvent(listener)
	_this.Value_JS.Call("addEventListener", "availabilitychanged", cb)
	return cb
}

// SetOnAvailabilityChanged is assigning a function to 'onavailabilitychanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnAvailabilityChanged(listener func(event *ValueEvent, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_ValueEvent(listener)
	_this.Value_JS.Set("onavailabilitychanged", cb)
	return cb
}

// event attribute: domcore.Event
func eventFuncBluetooth_domcore_Event(listener func(event *domcore.Event, target *Bluetooth)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := BluetoothFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCharacteristicValueChanged is adding doing AddEventListener for 'CharacteristicValueChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "characteristicvaluechanged", cb)
	return cb
}

// SetOnCharacteristicValueChanged is assigning a function to 'oncharacteristicvaluechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Set("oncharacteristicvaluechanged", cb)
	return cb
}

// AddGattServerDisconnected is adding doing AddEventListener for 'GattServerDisconnected' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventGattServerDisconnected(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "gattserverdisconnected", cb)
	return cb
}

// SetOnGattServerDisconnected is assigning a function to 'ongattserverdisconnected'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnGattServerDisconnected(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Set("ongattserverdisconnected", cb)
	return cb
}

// AddServiceAdded is adding doing AddEventListener for 'ServiceAdded' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventServiceAdded(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceadded", cb)
	return cb
}

// SetOnServiceAdded is assigning a function to 'onserviceadded'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnServiceAdded(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Set("onserviceadded", cb)
	return cb
}

// AddServiceChanged is adding doing AddEventListener for 'ServiceChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventServiceChanged(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "servicechanged", cb)
	return cb
}

// SetOnServiceChanged is assigning a function to 'onservicechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnServiceChanged(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Set("onservicechanged", cb)
	return cb
}

// AddServiceRemoved is adding doing AddEventListener for 'ServiceRemoved' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) AddEventServiceRemoved(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceremoved", cb)
	return cb
}

// SetOnServiceRemoved is assigning a function to 'onserviceremoved'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Bluetooth) SetOnServiceRemoved(listener func(event *domcore.Event, currentTarget *Bluetooth)) js.Func {
	cb := eventFuncBluetooth_domcore_Event(listener)
	_this.Value_JS.Set("onserviceremoved", cb)
	return cb
}

func (_this *Bluetooth) GetAvailability() (_result *javascript.PromiseBool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getAvailability", _args[0:_end]...)
	var (
		_converted *javascript.PromiseBool // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseBoolFromJS(_returned)
	_result = _converted
	return
}

func (_this *Bluetooth) RequestDevice(options *RequestDeviceOptions) (_result *PromiseDevice) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("requestDevice", _args[0:_end]...)
	var (
		_converted *PromiseDevice // javascript: Promise _what_return_name
	)
	_converted = PromiseDeviceFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothCharacteristicProperties
type CharacteristicProperties struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *CharacteristicProperties) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// CharacteristicPropertiesFromJS is casting a js.Value into CharacteristicProperties.
func CharacteristicPropertiesFromJS(value js.Value) *CharacteristicProperties {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CharacteristicProperties{}
	ret.Value_JS = value
	return ret
}

// CharacteristicPropertiesFromJS is casting from something that holds a js.Value into CharacteristicProperties.
func CharacteristicPropertiesFromWrapper(input core.Wrapper) *CharacteristicProperties {
	return CharacteristicPropertiesFromJS(input.JSValue())
}

// Broadcast returning attribute 'broadcast' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) Broadcast() bool {
	var ret bool
	value := _this.Value_JS.Get("broadcast")
	ret = (value).Bool()
	return ret
}

// Read returning attribute 'read' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) Read() bool {
	var ret bool
	value := _this.Value_JS.Get("read")
	ret = (value).Bool()
	return ret
}

// WriteWithoutResponse returning attribute 'writeWithoutResponse' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) WriteWithoutResponse() bool {
	var ret bool
	value := _this.Value_JS.Get("writeWithoutResponse")
	ret = (value).Bool()
	return ret
}

// Write returning attribute 'write' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) Write() bool {
	var ret bool
	value := _this.Value_JS.Get("write")
	ret = (value).Bool()
	return ret
}

// Notify returning attribute 'notify' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) Notify() bool {
	var ret bool
	value := _this.Value_JS.Get("notify")
	ret = (value).Bool()
	return ret
}

// Indicate returning attribute 'indicate' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) Indicate() bool {
	var ret bool
	value := _this.Value_JS.Get("indicate")
	ret = (value).Bool()
	return ret
}

// AuthenticatedSignedWrites returning attribute 'authenticatedSignedWrites' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) AuthenticatedSignedWrites() bool {
	var ret bool
	value := _this.Value_JS.Get("authenticatedSignedWrites")
	ret = (value).Bool()
	return ret
}

// ReliableWrite returning attribute 'reliableWrite' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) ReliableWrite() bool {
	var ret bool
	value := _this.Value_JS.Get("reliableWrite")
	ret = (value).Bool()
	return ret
}

// WritableAuxiliaries returning attribute 'writableAuxiliaries' with
// type bool (idl: boolean).
func (_this *CharacteristicProperties) WritableAuxiliaries() bool {
	var ret bool
	value := _this.Value_JS.Get("writableAuxiliaries")
	ret = (value).Bool()
	return ret
}

// class: BluetoothDevice
type Device struct {
	domcore.EventTarget
}

// DeviceFromJS is casting a js.Value into Device.
func DeviceFromJS(value js.Value) *Device {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Device{}
	ret.Value_JS = value
	return ret
}

// DeviceFromJS is casting from something that holds a js.Value into Device.
func DeviceFromWrapper(input core.Wrapper) *Device {
	return DeviceFromJS(input.JSValue())
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *Device) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Name returning attribute 'name' with
// type string (idl: DOMString).
func (_this *Device) Name() *string {
	var ret *string
	value := _this.Value_JS.Get("name")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// Gatt returning attribute 'gatt' with
// type RemoteGATTServer (idl: BluetoothRemoteGATTServer).
func (_this *Device) Gatt() *RemoteGATTServer {
	var ret *RemoteGATTServer
	value := _this.Value_JS.Get("gatt")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = RemoteGATTServerFromJS(value)
	}
	return ret
}

// WatchingAdvertisements returning attribute 'watchingAdvertisements' with
// type bool (idl: boolean).
func (_this *Device) WatchingAdvertisements() bool {
	var ret bool
	value := _this.Value_JS.Get("watchingAdvertisements")
	ret = (value).Bool()
	return ret
}

// OnAdvertisementReceived returning attribute 'onadvertisementreceived' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnAdvertisementReceived() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onadvertisementreceived")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGattServerDisconnected returning attribute 'ongattserverdisconnected' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnGattServerDisconnected() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongattserverdisconnected")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCharacteristicValueChanged returning attribute 'oncharacteristicvaluechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnCharacteristicValueChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncharacteristicvaluechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceAdded returning attribute 'onserviceadded' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnServiceAdded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceadded")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceChanged returning attribute 'onservicechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnServiceChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onservicechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceRemoved returning attribute 'onserviceremoved' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *Device) OnServiceRemoved() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceremoved")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: AdvertisingEvent
func eventFuncDevice_AdvertisingEvent(listener func(event *AdvertisingEvent, target *Device)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *AdvertisingEvent
		value := args[0]
		incoming := value.Get("target")
		ret = AdvertisingEventFromJS(value)
		src := DeviceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAdvertisementReceived is adding doing AddEventListener for 'AdvertisementReceived' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventAdvertisementReceived(listener func(event *AdvertisingEvent, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_AdvertisingEvent(listener)
	_this.Value_JS.Call("addEventListener", "advertisementreceived", cb)
	return cb
}

// SetOnAdvertisementReceived is assigning a function to 'onadvertisementreceived'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnAdvertisementReceived(listener func(event *AdvertisingEvent, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_AdvertisingEvent(listener)
	_this.Value_JS.Set("onadvertisementreceived", cb)
	return cb
}

// event attribute: domcore.Event
func eventFuncDevice_domcore_Event(listener func(event *domcore.Event, target *Device)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := DeviceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCharacteristicValueChanged is adding doing AddEventListener for 'CharacteristicValueChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "characteristicvaluechanged", cb)
	return cb
}

// SetOnCharacteristicValueChanged is assigning a function to 'oncharacteristicvaluechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Set("oncharacteristicvaluechanged", cb)
	return cb
}

// AddGattServerDisconnected is adding doing AddEventListener for 'GattServerDisconnected' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventGattServerDisconnected(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "gattserverdisconnected", cb)
	return cb
}

// SetOnGattServerDisconnected is assigning a function to 'ongattserverdisconnected'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnGattServerDisconnected(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Set("ongattserverdisconnected", cb)
	return cb
}

// AddServiceAdded is adding doing AddEventListener for 'ServiceAdded' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventServiceAdded(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceadded", cb)
	return cb
}

// SetOnServiceAdded is assigning a function to 'onserviceadded'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnServiceAdded(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Set("onserviceadded", cb)
	return cb
}

// AddServiceChanged is adding doing AddEventListener for 'ServiceChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventServiceChanged(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "servicechanged", cb)
	return cb
}

// SetOnServiceChanged is assigning a function to 'onservicechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnServiceChanged(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Set("onservicechanged", cb)
	return cb
}

// AddServiceRemoved is adding doing AddEventListener for 'ServiceRemoved' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *Device) AddEventServiceRemoved(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceremoved", cb)
	return cb
}

// SetOnServiceRemoved is assigning a function to 'onserviceremoved'. This
// This method is returning allocated javascript function that need to be released.
func (_this *Device) SetOnServiceRemoved(listener func(event *domcore.Event, currentTarget *Device)) js.Func {
	cb := eventFuncDevice_domcore_Event(listener)
	_this.Value_JS.Set("onserviceremoved", cb)
	return cb
}

func (_this *Device) WatchAdvertisements() (_result *javascript.PromiseVoid) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("watchAdvertisements", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *Device) UnwatchAdvertisements() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("unwatchAdvertisements", _args[0:_end]...)
	return
}

// class: BluetoothManufacturerDataMap
type ManufacturerDataMap struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ManufacturerDataMap) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ManufacturerDataMapFromJS is casting a js.Value into ManufacturerDataMap.
func ManufacturerDataMapFromJS(value js.Value) *ManufacturerDataMap {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ManufacturerDataMap{}
	ret.Value_JS = value
	return ret
}

// ManufacturerDataMapFromJS is casting from something that holds a js.Value into ManufacturerDataMap.
func ManufacturerDataMapFromWrapper(input core.Wrapper) *ManufacturerDataMap {
	return ManufacturerDataMapFromJS(input.JSValue())
}

// Size returning attribute 'size' with
// type int (idl: long).
func (_this *ManufacturerDataMap) Size() int {
	var ret int
	value := _this.Value_JS.Get("size")
	ret = (value).Int()
	return ret
}

func (_this *ManufacturerDataMap) Entries() (_result *ManufacturerDataMapEntryIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("entries", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapEntryIterator // javascript: BluetoothManufacturerDataMapEntryIterator _what_return_name
	)
	_converted = ManufacturerDataMapEntryIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ManufacturerDataMap) ForEach(callback *ManufacturerDataMapForEach, optionalThisForCallbackArgument interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if optionalThisForCallbackArgument != nil {
		_p1 := optionalThisForCallbackArgument
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("forEach", _args[0:_end]...)
	return
}

func (_this *ManufacturerDataMap) Keys() (_result *ManufacturerDataMapKeyIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("keys", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapKeyIterator // javascript: BluetoothManufacturerDataMapKeyIterator _what_return_name
	)
	_converted = ManufacturerDataMapKeyIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ManufacturerDataMap) Values() (_result *ManufacturerDataMapValueIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("values", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapValueIterator // javascript: BluetoothManufacturerDataMapValueIterator _what_return_name
	)
	_converted = ManufacturerDataMapValueIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ManufacturerDataMap) Get(key int) (_result *javascript.DataView) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *javascript.DataView // javascript: DataView _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = javascript.DataViewFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *ManufacturerDataMap) Has(key int) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("has", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: BluetoothManufacturerDataMapEntryIterator
type ManufacturerDataMapEntryIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ManufacturerDataMapEntryIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ManufacturerDataMapEntryIteratorFromJS is casting a js.Value into ManufacturerDataMapEntryIterator.
func ManufacturerDataMapEntryIteratorFromJS(value js.Value) *ManufacturerDataMapEntryIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ManufacturerDataMapEntryIterator{}
	ret.Value_JS = value
	return ret
}

// ManufacturerDataMapEntryIteratorFromJS is casting from something that holds a js.Value into ManufacturerDataMapEntryIterator.
func ManufacturerDataMapEntryIteratorFromWrapper(input core.Wrapper) *ManufacturerDataMapEntryIterator {
	return ManufacturerDataMapEntryIteratorFromJS(input.JSValue())
}

func (_this *ManufacturerDataMapEntryIterator) Next() (_result *ManufacturerDataMapEntryIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapEntryIteratorValue // javascript: BluetoothManufacturerDataMapEntryIteratorValue _what_return_name
	)
	_converted = ManufacturerDataMapEntryIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothManufacturerDataMapKeyIterator
type ManufacturerDataMapKeyIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ManufacturerDataMapKeyIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ManufacturerDataMapKeyIteratorFromJS is casting a js.Value into ManufacturerDataMapKeyIterator.
func ManufacturerDataMapKeyIteratorFromJS(value js.Value) *ManufacturerDataMapKeyIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ManufacturerDataMapKeyIterator{}
	ret.Value_JS = value
	return ret
}

// ManufacturerDataMapKeyIteratorFromJS is casting from something that holds a js.Value into ManufacturerDataMapKeyIterator.
func ManufacturerDataMapKeyIteratorFromWrapper(input core.Wrapper) *ManufacturerDataMapKeyIterator {
	return ManufacturerDataMapKeyIteratorFromJS(input.JSValue())
}

func (_this *ManufacturerDataMapKeyIterator) Next() (_result *ManufacturerDataMapKeyIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapKeyIteratorValue // javascript: BluetoothManufacturerDataMapKeyIteratorValue _what_return_name
	)
	_converted = ManufacturerDataMapKeyIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothManufacturerDataMapValueIterator
type ManufacturerDataMapValueIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ManufacturerDataMapValueIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ManufacturerDataMapValueIteratorFromJS is casting a js.Value into ManufacturerDataMapValueIterator.
func ManufacturerDataMapValueIteratorFromJS(value js.Value) *ManufacturerDataMapValueIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ManufacturerDataMapValueIterator{}
	ret.Value_JS = value
	return ret
}

// ManufacturerDataMapValueIteratorFromJS is casting from something that holds a js.Value into ManufacturerDataMapValueIterator.
func ManufacturerDataMapValueIteratorFromWrapper(input core.Wrapper) *ManufacturerDataMapValueIterator {
	return ManufacturerDataMapValueIteratorFromJS(input.JSValue())
}

func (_this *ManufacturerDataMapValueIterator) Next() (_result *ManufacturerDataMapValueIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ManufacturerDataMapValueIteratorValue // javascript: BluetoothManufacturerDataMapValueIteratorValue _what_return_name
	)
	_converted = ManufacturerDataMapValueIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothPermissionResult
type PermissionResult struct {
	permissions.PermissionStatus
}

// PermissionResultFromJS is casting a js.Value into PermissionResult.
func PermissionResultFromJS(value js.Value) *PermissionResult {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PermissionResult{}
	ret.Value_JS = value
	return ret
}

// PermissionResultFromJS is casting from something that holds a js.Value into PermissionResult.
func PermissionResultFromWrapper(input core.Wrapper) *PermissionResult {
	return PermissionResultFromJS(input.JSValue())
}

// Devices returning attribute 'devices' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *PermissionResult) Devices() *javascript.FrozenArray {
	var ret *javascript.FrozenArray
	value := _this.Value_JS.Get("devices")
	ret = javascript.FrozenArrayFromJS(value)
	return ret
}

// SetDevices setting attribute 'devices' with
// type javascript.FrozenArray (idl: FrozenArray).
func (_this *PermissionResult) SetDevices(value *javascript.FrozenArray) {
	input := value.JSValue()
	_this.Value_JS.Set("devices", input)
}

// class: Promise
type PromiseDevice struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseDevice) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseDeviceFromJS is casting a js.Value into PromiseDevice.
func PromiseDeviceFromJS(value js.Value) *PromiseDevice {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseDevice{}
	ret.Value_JS = value
	return ret
}

// PromiseDeviceFromJS is casting from something that holds a js.Value into PromiseDevice.
func PromiseDeviceFromWrapper(input core.Wrapper) *PromiseDevice {
	return PromiseDeviceFromJS(input.JSValue())
}

func (_this *PromiseDevice) Then(onFulfilled *PromiseDeviceOnFulfilled, onRejected *PromiseDeviceOnRejected) (_result *PromiseDevice) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseDevice // javascript: Promise _what_return_name
	)
	_converted = PromiseDeviceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseDevice) Catch(onRejected *PromiseDeviceOnRejected) (_result *PromiseDevice) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseDevice // javascript: Promise _what_return_name
	)
	_converted = PromiseDeviceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseDevice) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseDevice) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseDevice // javascript: Promise _what_return_name
	)
	_converted = PromiseDeviceFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseRemoteGATTCharacteristic struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseRemoteGATTCharacteristic) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseRemoteGATTCharacteristicFromJS is casting a js.Value into PromiseRemoteGATTCharacteristic.
func PromiseRemoteGATTCharacteristicFromJS(value js.Value) *PromiseRemoteGATTCharacteristic {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseRemoteGATTCharacteristic{}
	ret.Value_JS = value
	return ret
}

// PromiseRemoteGATTCharacteristicFromJS is casting from something that holds a js.Value into PromiseRemoteGATTCharacteristic.
func PromiseRemoteGATTCharacteristicFromWrapper(input core.Wrapper) *PromiseRemoteGATTCharacteristic {
	return PromiseRemoteGATTCharacteristicFromJS(input.JSValue())
}

func (_this *PromiseRemoteGATTCharacteristic) Then(onFulfilled *PromiseRemoteGATTCharacteristicOnFulfilled, onRejected *PromiseRemoteGATTCharacteristicOnRejected) (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTCharacteristic) Catch(onRejected *PromiseRemoteGATTCharacteristicOnRejected) (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTCharacteristic) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseRemoteGATTDescriptor struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseRemoteGATTDescriptor) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseRemoteGATTDescriptorFromJS is casting a js.Value into PromiseRemoteGATTDescriptor.
func PromiseRemoteGATTDescriptorFromJS(value js.Value) *PromiseRemoteGATTDescriptor {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseRemoteGATTDescriptor{}
	ret.Value_JS = value
	return ret
}

// PromiseRemoteGATTDescriptorFromJS is casting from something that holds a js.Value into PromiseRemoteGATTDescriptor.
func PromiseRemoteGATTDescriptorFromWrapper(input core.Wrapper) *PromiseRemoteGATTDescriptor {
	return PromiseRemoteGATTDescriptorFromJS(input.JSValue())
}

func (_this *PromiseRemoteGATTDescriptor) Then(onFulfilled *PromiseRemoteGATTDescriptorOnFulfilled, onRejected *PromiseRemoteGATTDescriptorOnRejected) (_result *PromiseRemoteGATTDescriptor) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTDescriptor) Catch(onRejected *PromiseRemoteGATTDescriptorOnRejected) (_result *PromiseRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTDescriptor) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseRemoteGATTServer struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseRemoteGATTServer) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseRemoteGATTServerFromJS is casting a js.Value into PromiseRemoteGATTServer.
func PromiseRemoteGATTServerFromJS(value js.Value) *PromiseRemoteGATTServer {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseRemoteGATTServer{}
	ret.Value_JS = value
	return ret
}

// PromiseRemoteGATTServerFromJS is casting from something that holds a js.Value into PromiseRemoteGATTServer.
func PromiseRemoteGATTServerFromWrapper(input core.Wrapper) *PromiseRemoteGATTServer {
	return PromiseRemoteGATTServerFromJS(input.JSValue())
}

func (_this *PromiseRemoteGATTServer) Then(onFulfilled *PromiseRemoteGATTServerOnFulfilled, onRejected *PromiseRemoteGATTServerOnRejected) (_result *PromiseRemoteGATTServer) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTServer // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServerFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTServer) Catch(onRejected *PromiseRemoteGATTServerOnRejected) (_result *PromiseRemoteGATTServer) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTServer // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServerFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTServer) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseRemoteGATTServer) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTServer // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServerFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseRemoteGATTService struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseRemoteGATTService) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseRemoteGATTServiceFromJS is casting a js.Value into PromiseRemoteGATTService.
func PromiseRemoteGATTServiceFromJS(value js.Value) *PromiseRemoteGATTService {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseRemoteGATTService{}
	ret.Value_JS = value
	return ret
}

// PromiseRemoteGATTServiceFromJS is casting from something that holds a js.Value into PromiseRemoteGATTService.
func PromiseRemoteGATTServiceFromWrapper(input core.Wrapper) *PromiseRemoteGATTService {
	return PromiseRemoteGATTServiceFromJS(input.JSValue())
}

func (_this *PromiseRemoteGATTService) Then(onFulfilled *PromiseRemoteGATTServiceOnFulfilled, onRejected *PromiseRemoteGATTServiceOnRejected) (_result *PromiseRemoteGATTService) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTService) Catch(onRejected *PromiseRemoteGATTServiceOnRejected) (_result *PromiseRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseRemoteGATTService) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceRemoteGATTCharacteristic struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseSequenceRemoteGATTCharacteristic) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseSequenceRemoteGATTCharacteristicFromJS is casting a js.Value into PromiseSequenceRemoteGATTCharacteristic.
func PromiseSequenceRemoteGATTCharacteristicFromJS(value js.Value) *PromiseSequenceRemoteGATTCharacteristic {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceRemoteGATTCharacteristic{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceRemoteGATTCharacteristicFromJS is casting from something that holds a js.Value into PromiseSequenceRemoteGATTCharacteristic.
func PromiseSequenceRemoteGATTCharacteristicFromWrapper(input core.Wrapper) *PromiseSequenceRemoteGATTCharacteristic {
	return PromiseSequenceRemoteGATTCharacteristicFromJS(input.JSValue())
}

func (_this *PromiseSequenceRemoteGATTCharacteristic) Then(onFulfilled *PromiseSequenceRemoteGATTCharacteristicOnFulfilled, onRejected *PromiseSequenceRemoteGATTCharacteristicOnRejected) (_result *PromiseSequenceRemoteGATTCharacteristic) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTCharacteristic) Catch(onRejected *PromiseSequenceRemoteGATTCharacteristicOnRejected) (_result *PromiseSequenceRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTCharacteristic) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceRemoteGATTDescriptor struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseSequenceRemoteGATTDescriptor) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseSequenceRemoteGATTDescriptorFromJS is casting a js.Value into PromiseSequenceRemoteGATTDescriptor.
func PromiseSequenceRemoteGATTDescriptorFromJS(value js.Value) *PromiseSequenceRemoteGATTDescriptor {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceRemoteGATTDescriptor{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceRemoteGATTDescriptorFromJS is casting from something that holds a js.Value into PromiseSequenceRemoteGATTDescriptor.
func PromiseSequenceRemoteGATTDescriptorFromWrapper(input core.Wrapper) *PromiseSequenceRemoteGATTDescriptor {
	return PromiseSequenceRemoteGATTDescriptorFromJS(input.JSValue())
}

func (_this *PromiseSequenceRemoteGATTDescriptor) Then(onFulfilled *PromiseSequenceRemoteGATTDescriptorOnFulfilled, onRejected *PromiseSequenceRemoteGATTDescriptorOnRejected) (_result *PromiseSequenceRemoteGATTDescriptor) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTDescriptor) Catch(onRejected *PromiseSequenceRemoteGATTDescriptorOnRejected) (_result *PromiseSequenceRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTDescriptor) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

// class: Promise
type PromiseSequenceRemoteGATTService struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *PromiseSequenceRemoteGATTService) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// PromiseSequenceRemoteGATTServiceFromJS is casting a js.Value into PromiseSequenceRemoteGATTService.
func PromiseSequenceRemoteGATTServiceFromJS(value js.Value) *PromiseSequenceRemoteGATTService {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &PromiseSequenceRemoteGATTService{}
	ret.Value_JS = value
	return ret
}

// PromiseSequenceRemoteGATTServiceFromJS is casting from something that holds a js.Value into PromiseSequenceRemoteGATTService.
func PromiseSequenceRemoteGATTServiceFromWrapper(input core.Wrapper) *PromiseSequenceRemoteGATTService {
	return PromiseSequenceRemoteGATTServiceFromJS(input.JSValue())
}

func (_this *PromiseSequenceRemoteGATTService) Then(onFulfilled *PromiseSequenceRemoteGATTServiceOnFulfilled, onRejected *PromiseSequenceRemoteGATTServiceOnRejected) (_result *PromiseSequenceRemoteGATTService) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFulfilled != nil {
		__callback0 = (*onFulfilled).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if onRejected != nil {

		var __callback1 js.Value
		if onRejected != nil {
			__callback1 = (*onRejected).Value
		} else {
			__callback1 = js.Null()
		}
		_p1 := __callback1
		_args[1] = _p1
		_end++
	}
	_returned := _this.Value_JS.Call("then", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTService) Catch(onRejected *PromiseSequenceRemoteGATTServiceOnRejected) (_result *PromiseSequenceRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onRejected != nil {
		__callback0 = (*onRejected).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("catch", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *PromiseSequenceRemoteGATTService) Finally(onFinally *javascript.PromiseFinally) (_result *PromiseSequenceRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)

	var __callback0 js.Value
	if onFinally != nil {
		__callback0 = (*onFinally).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("finally", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothRemoteGATTCharacteristic
type RemoteGATTCharacteristic struct {
	domcore.EventTarget
}

// RemoteGATTCharacteristicFromJS is casting a js.Value into RemoteGATTCharacteristic.
func RemoteGATTCharacteristicFromJS(value js.Value) *RemoteGATTCharacteristic {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &RemoteGATTCharacteristic{}
	ret.Value_JS = value
	return ret
}

// RemoteGATTCharacteristicFromJS is casting from something that holds a js.Value into RemoteGATTCharacteristic.
func RemoteGATTCharacteristicFromWrapper(input core.Wrapper) *RemoteGATTCharacteristic {
	return RemoteGATTCharacteristicFromJS(input.JSValue())
}

// Service returning attribute 'service' with
// type RemoteGATTService (idl: BluetoothRemoteGATTService).
func (_this *RemoteGATTCharacteristic) Service() *RemoteGATTService {
	var ret *RemoteGATTService
	value := _this.Value_JS.Get("service")
	ret = RemoteGATTServiceFromJS(value)
	return ret
}

// Uuid returning attribute 'uuid' with
// type string (idl: DOMString).
func (_this *RemoteGATTCharacteristic) Uuid() string {
	var ret string
	value := _this.Value_JS.Get("uuid")
	ret = (value).String()
	return ret
}

// Properties returning attribute 'properties' with
// type CharacteristicProperties (idl: BluetoothCharacteristicProperties).
func (_this *RemoteGATTCharacteristic) Properties() *CharacteristicProperties {
	var ret *CharacteristicProperties
	value := _this.Value_JS.Get("properties")
	ret = CharacteristicPropertiesFromJS(value)
	return ret
}

// Value returning attribute 'value' with
// type javascript.DataView (idl: DataView).
func (_this *RemoteGATTCharacteristic) Value() *javascript.DataView {
	var ret *javascript.DataView
	value := _this.Value_JS.Get("value")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = javascript.DataViewFromJS(value)
	}
	return ret
}

// OnCharacteristicValueChanged returning attribute 'oncharacteristicvaluechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *RemoteGATTCharacteristic) OnCharacteristicValueChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncharacteristicvaluechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncRemoteGATTCharacteristic_domcore_Event(listener func(event *domcore.Event, target *RemoteGATTCharacteristic)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := RemoteGATTCharacteristicFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCharacteristicValueChanged is adding doing AddEventListener for 'CharacteristicValueChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTCharacteristic) AddEventCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTCharacteristic)) js.Func {
	cb := eventFuncRemoteGATTCharacteristic_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "characteristicvaluechanged", cb)
	return cb
}

// SetOnCharacteristicValueChanged is assigning a function to 'oncharacteristicvaluechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTCharacteristic) SetOnCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTCharacteristic)) js.Func {
	cb := eventFuncRemoteGATTCharacteristic_domcore_Event(listener)
	_this.Value_JS.Set("oncharacteristicvaluechanged", cb)
	return cb
}

func (_this *RemoteGATTCharacteristic) GetDescriptor(descriptor *Union) (_result *PromiseRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := descriptor.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getDescriptor", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTCharacteristic) GetDescriptors(descriptor *Union) (_result *PromiseSequenceRemoteGATTDescriptor) {
	var (
		_args [1]interface{}
		_end  int
	)
	if descriptor != nil {
		_p0 := descriptor.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getDescriptors", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTDescriptor // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTDescriptorFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTCharacteristic) ReadValue() (_result *javascript.PromiseDataView) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("readValue", _args[0:_end]...)
	var (
		_converted *javascript.PromiseDataView // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseDataViewFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTCharacteristic) WriteValue(value *Union) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := value.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("writeValue", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTCharacteristic) StartNotifications() (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("startNotifications", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTCharacteristic) StopNotifications() (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("stopNotifications", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothRemoteGATTDescriptor
type RemoteGATTDescriptor struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *RemoteGATTDescriptor) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// RemoteGATTDescriptorFromJS is casting a js.Value into RemoteGATTDescriptor.
func RemoteGATTDescriptorFromJS(value js.Value) *RemoteGATTDescriptor {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &RemoteGATTDescriptor{}
	ret.Value_JS = value
	return ret
}

// RemoteGATTDescriptorFromJS is casting from something that holds a js.Value into RemoteGATTDescriptor.
func RemoteGATTDescriptorFromWrapper(input core.Wrapper) *RemoteGATTDescriptor {
	return RemoteGATTDescriptorFromJS(input.JSValue())
}

// Characteristic returning attribute 'characteristic' with
// type RemoteGATTCharacteristic (idl: BluetoothRemoteGATTCharacteristic).
func (_this *RemoteGATTDescriptor) Characteristic() *RemoteGATTCharacteristic {
	var ret *RemoteGATTCharacteristic
	value := _this.Value_JS.Get("characteristic")
	ret = RemoteGATTCharacteristicFromJS(value)
	return ret
}

// Uuid returning attribute 'uuid' with
// type string (idl: DOMString).
func (_this *RemoteGATTDescriptor) Uuid() string {
	var ret string
	value := _this.Value_JS.Get("uuid")
	ret = (value).String()
	return ret
}

// Value returning attribute 'value' with
// type javascript.DataView (idl: DataView).
func (_this *RemoteGATTDescriptor) Value() *javascript.DataView {
	var ret *javascript.DataView
	value := _this.Value_JS.Get("value")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = javascript.DataViewFromJS(value)
	}
	return ret
}

func (_this *RemoteGATTDescriptor) ReadValue() (_result *javascript.PromiseDataView) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("readValue", _args[0:_end]...)
	var (
		_converted *javascript.PromiseDataView // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseDataViewFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTDescriptor) WriteValue(value *Union) (_result *javascript.PromiseVoid) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := value.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("writeValue", _args[0:_end]...)
	var (
		_converted *javascript.PromiseVoid // javascript: PromiseVoid _what_return_name
	)
	_converted = javascript.PromiseVoidFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothRemoteGATTServer
type RemoteGATTServer struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *RemoteGATTServer) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// RemoteGATTServerFromJS is casting a js.Value into RemoteGATTServer.
func RemoteGATTServerFromJS(value js.Value) *RemoteGATTServer {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &RemoteGATTServer{}
	ret.Value_JS = value
	return ret
}

// RemoteGATTServerFromJS is casting from something that holds a js.Value into RemoteGATTServer.
func RemoteGATTServerFromWrapper(input core.Wrapper) *RemoteGATTServer {
	return RemoteGATTServerFromJS(input.JSValue())
}

// Device returning attribute 'device' with
// type Device (idl: BluetoothDevice).
func (_this *RemoteGATTServer) Device() *Device {
	var ret *Device
	value := _this.Value_JS.Get("device")
	ret = DeviceFromJS(value)
	return ret
}

// Connected returning attribute 'connected' with
// type bool (idl: boolean).
func (_this *RemoteGATTServer) Connected() bool {
	var ret bool
	value := _this.Value_JS.Get("connected")
	ret = (value).Bool()
	return ret
}

func (_this *RemoteGATTServer) Connect() (_result *PromiseRemoteGATTServer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("connect", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTServer // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServerFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTServer) Disconnect() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("disconnect", _args[0:_end]...)
	return
}

func (_this *RemoteGATTServer) GetPrimaryService(service *Union) (_result *PromiseRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := service.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getPrimaryService", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTServer) GetPrimaryServices(service *Union) (_result *PromiseSequenceRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)
	if service != nil {
		_p0 := service.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getPrimaryServices", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothRemoteGATTService
type RemoteGATTService struct {
	domcore.EventTarget
}

// RemoteGATTServiceFromJS is casting a js.Value into RemoteGATTService.
func RemoteGATTServiceFromJS(value js.Value) *RemoteGATTService {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &RemoteGATTService{}
	ret.Value_JS = value
	return ret
}

// RemoteGATTServiceFromJS is casting from something that holds a js.Value into RemoteGATTService.
func RemoteGATTServiceFromWrapper(input core.Wrapper) *RemoteGATTService {
	return RemoteGATTServiceFromJS(input.JSValue())
}

// Device returning attribute 'device' with
// type Device (idl: BluetoothDevice).
func (_this *RemoteGATTService) Device() *Device {
	var ret *Device
	value := _this.Value_JS.Get("device")
	ret = DeviceFromJS(value)
	return ret
}

// Uuid returning attribute 'uuid' with
// type string (idl: DOMString).
func (_this *RemoteGATTService) Uuid() string {
	var ret string
	value := _this.Value_JS.Get("uuid")
	ret = (value).String()
	return ret
}

// IsPrimary returning attribute 'isPrimary' with
// type bool (idl: boolean).
func (_this *RemoteGATTService) IsPrimary() bool {
	var ret bool
	value := _this.Value_JS.Get("isPrimary")
	ret = (value).Bool()
	return ret
}

// OnCharacteristicValueChanged returning attribute 'oncharacteristicvaluechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *RemoteGATTService) OnCharacteristicValueChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncharacteristicvaluechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceAdded returning attribute 'onserviceadded' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *RemoteGATTService) OnServiceAdded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceadded")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceChanged returning attribute 'onservicechanged' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *RemoteGATTService) OnServiceChanged() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onservicechanged")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnServiceRemoved returning attribute 'onserviceremoved' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *RemoteGATTService) OnServiceRemoved() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onserviceremoved")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncRemoteGATTService_domcore_Event(listener func(event *domcore.Event, target *RemoteGATTService)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := RemoteGATTServiceFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCharacteristicValueChanged is adding doing AddEventListener for 'CharacteristicValueChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) AddEventCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "characteristicvaluechanged", cb)
	return cb
}

// SetOnCharacteristicValueChanged is assigning a function to 'oncharacteristicvaluechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) SetOnCharacteristicValueChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Set("oncharacteristicvaluechanged", cb)
	return cb
}

// AddServiceAdded is adding doing AddEventListener for 'ServiceAdded' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) AddEventServiceAdded(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceadded", cb)
	return cb
}

// SetOnServiceAdded is assigning a function to 'onserviceadded'. This
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) SetOnServiceAdded(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Set("onserviceadded", cb)
	return cb
}

// AddServiceChanged is adding doing AddEventListener for 'ServiceChanged' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) AddEventServiceChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "servicechanged", cb)
	return cb
}

// SetOnServiceChanged is assigning a function to 'onservicechanged'. This
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) SetOnServiceChanged(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Set("onservicechanged", cb)
	return cb
}

// AddServiceRemoved is adding doing AddEventListener for 'ServiceRemoved' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) AddEventServiceRemoved(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "serviceremoved", cb)
	return cb
}

// SetOnServiceRemoved is assigning a function to 'onserviceremoved'. This
// This method is returning allocated javascript function that need to be released.
func (_this *RemoteGATTService) SetOnServiceRemoved(listener func(event *domcore.Event, currentTarget *RemoteGATTService)) js.Func {
	cb := eventFuncRemoteGATTService_domcore_Event(listener)
	_this.Value_JS.Set("onserviceremoved", cb)
	return cb
}

func (_this *RemoteGATTService) GetCharacteristic(characteristic *Union) (_result *PromiseRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := characteristic.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getCharacteristic", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTService) GetCharacteristics(characteristic *Union) (_result *PromiseSequenceRemoteGATTCharacteristic) {
	var (
		_args [1]interface{}
		_end  int
	)
	if characteristic != nil {
		_p0 := characteristic.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getCharacteristics", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTCharacteristic // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTCharacteristicFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTService) GetIncludedService(service *Union) (_result *PromiseRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := service.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getIncludedService", _args[0:_end]...)
	var (
		_converted *PromiseRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

func (_this *RemoteGATTService) GetIncludedServices(service *Union) (_result *PromiseSequenceRemoteGATTService) {
	var (
		_args [1]interface{}
		_end  int
	)
	if service != nil {
		_p0 := service.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getIncludedServices", _args[0:_end]...)
	var (
		_converted *PromiseSequenceRemoteGATTService // javascript: Promise _what_return_name
	)
	_converted = PromiseSequenceRemoteGATTServiceFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothServiceDataMap
type ServiceDataMap struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ServiceDataMap) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ServiceDataMapFromJS is casting a js.Value into ServiceDataMap.
func ServiceDataMapFromJS(value js.Value) *ServiceDataMap {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ServiceDataMap{}
	ret.Value_JS = value
	return ret
}

// ServiceDataMapFromJS is casting from something that holds a js.Value into ServiceDataMap.
func ServiceDataMapFromWrapper(input core.Wrapper) *ServiceDataMap {
	return ServiceDataMapFromJS(input.JSValue())
}

// Size returning attribute 'size' with
// type int (idl: long).
func (_this *ServiceDataMap) Size() int {
	var ret int
	value := _this.Value_JS.Get("size")
	ret = (value).Int()
	return ret
}

func (_this *ServiceDataMap) Entries() (_result *ServiceDataMapEntryIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("entries", _args[0:_end]...)
	var (
		_converted *ServiceDataMapEntryIterator // javascript: BluetoothServiceDataMapEntryIterator _what_return_name
	)
	_converted = ServiceDataMapEntryIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ServiceDataMap) ForEach(callback *ServiceDataMapForEach, optionalThisForCallbackArgument interface{}) {
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if optionalThisForCallbackArgument != nil {
		_p1 := optionalThisForCallbackArgument
		_args[1] = _p1
		_end++
	}
	_this.Value_JS.Call("forEach", _args[0:_end]...)
	return
}

func (_this *ServiceDataMap) Keys() (_result *ServiceDataMapKeyIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("keys", _args[0:_end]...)
	var (
		_converted *ServiceDataMapKeyIterator // javascript: BluetoothServiceDataMapKeyIterator _what_return_name
	)
	_converted = ServiceDataMapKeyIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ServiceDataMap) Values() (_result *ServiceDataMapValueIterator) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("values", _args[0:_end]...)
	var (
		_converted *ServiceDataMapValueIterator // javascript: BluetoothServiceDataMapValueIterator _what_return_name
	)
	_converted = ServiceDataMapValueIteratorFromJS(_returned)
	_result = _converted
	return
}

func (_this *ServiceDataMap) Get(key string) (_result *javascript.DataView) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("get", _args[0:_end]...)
	var (
		_converted *javascript.DataView // javascript: DataView _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = javascript.DataViewFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *ServiceDataMap) Has(key string) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := key
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("has", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

// class: BluetoothServiceDataMapEntryIterator
type ServiceDataMapEntryIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ServiceDataMapEntryIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ServiceDataMapEntryIteratorFromJS is casting a js.Value into ServiceDataMapEntryIterator.
func ServiceDataMapEntryIteratorFromJS(value js.Value) *ServiceDataMapEntryIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ServiceDataMapEntryIterator{}
	ret.Value_JS = value
	return ret
}

// ServiceDataMapEntryIteratorFromJS is casting from something that holds a js.Value into ServiceDataMapEntryIterator.
func ServiceDataMapEntryIteratorFromWrapper(input core.Wrapper) *ServiceDataMapEntryIterator {
	return ServiceDataMapEntryIteratorFromJS(input.JSValue())
}

func (_this *ServiceDataMapEntryIterator) Next() (_result *ServiceDataMapEntryIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ServiceDataMapEntryIteratorValue // javascript: BluetoothServiceDataMapEntryIteratorValue _what_return_name
	)
	_converted = ServiceDataMapEntryIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothServiceDataMapKeyIterator
type ServiceDataMapKeyIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ServiceDataMapKeyIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ServiceDataMapKeyIteratorFromJS is casting a js.Value into ServiceDataMapKeyIterator.
func ServiceDataMapKeyIteratorFromJS(value js.Value) *ServiceDataMapKeyIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ServiceDataMapKeyIterator{}
	ret.Value_JS = value
	return ret
}

// ServiceDataMapKeyIteratorFromJS is casting from something that holds a js.Value into ServiceDataMapKeyIterator.
func ServiceDataMapKeyIteratorFromWrapper(input core.Wrapper) *ServiceDataMapKeyIterator {
	return ServiceDataMapKeyIteratorFromJS(input.JSValue())
}

func (_this *ServiceDataMapKeyIterator) Next() (_result *ServiceDataMapKeyIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ServiceDataMapKeyIteratorValue // javascript: BluetoothServiceDataMapKeyIteratorValue _what_return_name
	)
	_converted = ServiceDataMapKeyIteratorValueFromJS(_returned)
	_result = _converted
	return
}

// class: BluetoothServiceDataMapValueIterator
type ServiceDataMapValueIterator struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ServiceDataMapValueIterator) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ServiceDataMapValueIteratorFromJS is casting a js.Value into ServiceDataMapValueIterator.
func ServiceDataMapValueIteratorFromJS(value js.Value) *ServiceDataMapValueIterator {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ServiceDataMapValueIterator{}
	ret.Value_JS = value
	return ret
}

// ServiceDataMapValueIteratorFromJS is casting from something that holds a js.Value into ServiceDataMapValueIterator.
func ServiceDataMapValueIteratorFromWrapper(input core.Wrapper) *ServiceDataMapValueIterator {
	return ServiceDataMapValueIteratorFromJS(input.JSValue())
}

func (_this *ServiceDataMapValueIterator) Next() (_result *ServiceDataMapValueIteratorValue) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("next", _args[0:_end]...)
	var (
		_converted *ServiceDataMapValueIteratorValue // javascript: BluetoothServiceDataMapValueIteratorValue _what_return_name
	)
	_converted = ServiceDataMapValueIteratorValueFromJS(_returned)
	_result = _converted
	return
}

func GetService(name *Union) (_result string) {
	_klass := js.Global()
	_method := _klass.Get("getService")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func GetCharacteristic(name *Union) (_result string) {
	_klass := js.Global()
	_method := _klass.Get("getCharacteristic")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func GetDescriptor(name *Union) (_result string) {
	_klass := js.Global()
	_method := _klass.Get("getDescriptor")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name.JSValue()
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func CanonicalUUID(alias uint) (_result string) {
	_klass := js.Global()
	_method := _klass.Get("canonicalUUID")
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := alias
	_args[0] = _p0
	_end++
	_returned := _method.Invoke(_args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

// class: ValueEvent
type ValueEvent struct {
	domcore.Event
}

// ValueEventFromJS is casting a js.Value into ValueEvent.
func ValueEventFromJS(value js.Value) *ValueEvent {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ValueEvent{}
	ret.Value_JS = value
	return ret
}

// ValueEventFromJS is casting from something that holds a js.Value into ValueEvent.
func ValueEventFromWrapper(input core.Wrapper) *ValueEvent {
	return ValueEventFromJS(input.JSValue())
}

func NewValueEvent(_type string, initDict *ValueEventInit) (_result *ValueEvent) {
	_klass := js.Global().Get("ValueEvent")
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	if initDict != nil {
		_p1 := initDict.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ValueEvent // javascript: ValueEvent _what_return_name
	)
	_converted = ValueEventFromJS(_returned)
	_result = _converted
	return
}

// Value returning attribute 'value' with
// type Any (idl: any).
func (_this *ValueEvent) Value() js.Value {
	var ret js.Value
	value := _this.Value_JS.Get("value")
	ret = value
	return ret
}
