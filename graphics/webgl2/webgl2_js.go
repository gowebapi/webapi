// Code generated by webidl-bind. DO NOT EDIT.

package webgl2

import "syscall/js"

import (
	"github.com/gowebapi/webapi/graphics/webgl"
	"github.com/gowebapi/webapi/javascript"
)

// using following types:
// javascript.Object
// javascript.Promise
// webgl.ActiveInfo
// webgl.Buffer
// webgl.ContextAttributes
// webgl.Framebuffer
// webgl.Object
// webgl.Program
// webgl.Renderbuffer
// webgl.Shader
// webgl.ShaderPrecisionFormat
// webgl.Texture
// webgl.UniformLocation

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// interface: WebGLQuery
type Query struct {
	webgl.Object
}

// QueryFromJS is casting a js.Wrapper into Query.
func QueryFromJS(value js.Wrapper) *Query {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Query{}
	ret.Value_JS = input
	return ret
}

// interface: WebGL2RenderingContext
type RenderingContext struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *RenderingContext) JSValue() js.Value {
	return _this.Value_JS
}

// RenderingContextFromJS is casting a js.Wrapper into RenderingContext.
func RenderingContextFromJS(value js.Wrapper) *RenderingContext {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &RenderingContext{}
	ret.Value_JS = input
	return ret
}

const (
	DEPTH_BUFFER_BIT                              uint = 0x00000100
	STENCIL_BUFFER_BIT                            uint = 0x00000400
	COLOR_BUFFER_BIT                              uint = 0x00004000
	POINTS                                        uint = 0x0000
	LINES                                         uint = 0x0001
	LINE_LOOP                                     uint = 0x0002
	LINE_STRIP                                    uint = 0x0003
	TRIANGLES                                     uint = 0x0004
	TRIANGLE_STRIP                                uint = 0x0005
	TRIANGLE_FAN                                  uint = 0x0006
	ZERO                                          uint = 0
	ONE                                           uint = 1
	SRC_COLOR                                     uint = 0x0300
	ONE_MINUS_SRC_COLOR                           uint = 0x0301
	SRC_ALPHA                                     uint = 0x0302
	ONE_MINUS_SRC_ALPHA                           uint = 0x0303
	DST_ALPHA                                     uint = 0x0304
	ONE_MINUS_DST_ALPHA                           uint = 0x0305
	DST_COLOR                                     uint = 0x0306
	ONE_MINUS_DST_COLOR                           uint = 0x0307
	SRC_ALPHA_SATURATE                            uint = 0x0308
	FUNC_ADD                                      uint = 0x8006
	BLEND_EQUATION                                uint = 0x8009
	BLEND_EQUATION_RGB                            uint = 0x8009
	BLEND_EQUATION_ALPHA                          uint = 0x883D
	FUNC_SUBTRACT                                 uint = 0x800A
	FUNC_REVERSE_SUBTRACT                         uint = 0x800B
	BLEND_DST_RGB                                 uint = 0x80C8
	BLEND_SRC_RGB                                 uint = 0x80C9
	BLEND_DST_ALPHA                               uint = 0x80CA
	BLEND_SRC_ALPHA                               uint = 0x80CB
	CONSTANT_COLOR                                uint = 0x8001
	ONE_MINUS_CONSTANT_COLOR                      uint = 0x8002
	CONSTANT_ALPHA                                uint = 0x8003
	ONE_MINUS_CONSTANT_ALPHA                      uint = 0x8004
	BLEND_COLOR                                   uint = 0x8005
	ARRAY_BUFFER                                  uint = 0x8892
	ELEMENT_ARRAY_BUFFER                          uint = 0x8893
	ARRAY_BUFFER_BINDING                          uint = 0x8894
	ELEMENT_ARRAY_BUFFER_BINDING                  uint = 0x8895
	STREAM_DRAW                                   uint = 0x88E0
	STATIC_DRAW                                   uint = 0x88E4
	DYNAMIC_DRAW                                  uint = 0x88E8
	BUFFER_SIZE                                   uint = 0x8764
	BUFFER_USAGE                                  uint = 0x8765
	CURRENT_VERTEX_ATTRIB                         uint = 0x8626
	FRONT                                         uint = 0x0404
	BACK                                          uint = 0x0405
	FRONT_AND_BACK                                uint = 0x0408
	CULL_FACE                                     uint = 0x0B44
	BLEND                                         uint = 0x0BE2
	DITHER                                        uint = 0x0BD0
	STENCIL_TEST                                  uint = 0x0B90
	DEPTH_TEST                                    uint = 0x0B71
	SCISSOR_TEST                                  uint = 0x0C11
	POLYGON_OFFSET_FILL                           uint = 0x8037
	SAMPLE_ALPHA_TO_COVERAGE                      uint = 0x809E
	SAMPLE_COVERAGE                               uint = 0x80A0
	NO_ERROR                                      uint = 0
	INVALID_ENUM                                  uint = 0x0500
	INVALID_VALUE                                 uint = 0x0501
	INVALID_OPERATION                             uint = 0x0502
	OUT_OF_MEMORY                                 uint = 0x0505
	CW                                            uint = 0x0900
	CCW                                           uint = 0x0901
	LINE_WIDTH                                    uint = 0x0B21
	ALIASED_POINT_SIZE_RANGE                      uint = 0x846D
	ALIASED_LINE_WIDTH_RANGE                      uint = 0x846E
	CULL_FACE_MODE                                uint = 0x0B45
	FRONT_FACE                                    uint = 0x0B46
	DEPTH_RANGE                                   uint = 0x0B70
	DEPTH_WRITEMASK                               uint = 0x0B72
	DEPTH_CLEAR_VALUE                             uint = 0x0B73
	DEPTH_FUNC                                    uint = 0x0B74
	STENCIL_CLEAR_VALUE                           uint = 0x0B91
	STENCIL_FUNC                                  uint = 0x0B92
	STENCIL_FAIL                                  uint = 0x0B94
	STENCIL_PASS_DEPTH_FAIL                       uint = 0x0B95
	STENCIL_PASS_DEPTH_PASS                       uint = 0x0B96
	STENCIL_REF                                   uint = 0x0B97
	STENCIL_VALUE_MASK                            uint = 0x0B93
	STENCIL_WRITEMASK                             uint = 0x0B98
	STENCIL_BACK_FUNC                             uint = 0x8800
	STENCIL_BACK_FAIL                             uint = 0x8801
	STENCIL_BACK_PASS_DEPTH_FAIL                  uint = 0x8802
	STENCIL_BACK_PASS_DEPTH_PASS                  uint = 0x8803
	STENCIL_BACK_REF                              uint = 0x8CA3
	STENCIL_BACK_VALUE_MASK                       uint = 0x8CA4
	STENCIL_BACK_WRITEMASK                        uint = 0x8CA5
	VIEWPORT                                      uint = 0x0BA2
	SCISSOR_BOX                                   uint = 0x0C10
	COLOR_CLEAR_VALUE                             uint = 0x0C22
	COLOR_WRITEMASK                               uint = 0x0C23
	UNPACK_ALIGNMENT                              uint = 0x0CF5
	PACK_ALIGNMENT                                uint = 0x0D05
	MAX_TEXTURE_SIZE                              uint = 0x0D33
	MAX_VIEWPORT_DIMS                             uint = 0x0D3A
	SUBPIXEL_BITS                                 uint = 0x0D50
	RED_BITS                                      uint = 0x0D52
	GREEN_BITS                                    uint = 0x0D53
	BLUE_BITS                                     uint = 0x0D54
	ALPHA_BITS                                    uint = 0x0D55
	DEPTH_BITS                                    uint = 0x0D56
	STENCIL_BITS                                  uint = 0x0D57
	POLYGON_OFFSET_UNITS                          uint = 0x2A00
	POLYGON_OFFSET_FACTOR                         uint = 0x8038
	TEXTURE_BINDING_2D                            uint = 0x8069
	SAMPLE_BUFFERS                                uint = 0x80A8
	SAMPLES                                       uint = 0x80A9
	SAMPLE_COVERAGE_VALUE                         uint = 0x80AA
	SAMPLE_COVERAGE_INVERT                        uint = 0x80AB
	COMPRESSED_TEXTURE_FORMATS                    uint = 0x86A3
	DONT_CARE                                     uint = 0x1100
	FASTEST                                       uint = 0x1101
	NICEST                                        uint = 0x1102
	GENERATE_MIPMAP_HINT                          uint = 0x8192
	BYTE                                          uint = 0x1400
	UNSIGNED_BYTE                                 uint = 0x1401
	SHORT                                         uint = 0x1402
	UNSIGNED_SHORT                                uint = 0x1403
	INT                                           uint = 0x1404
	UNSIGNED_INT                                  uint = 0x1405
	FLOAT                                         uint = 0x1406
	DEPTH_COMPONENT                               uint = 0x1902
	ALPHA                                         uint = 0x1906
	RGB                                           uint = 0x1907
	RGBA                                          uint = 0x1908
	LUMINANCE                                     uint = 0x1909
	LUMINANCE_ALPHA                               uint = 0x190A
	UNSIGNED_SHORT_4_4_4_4                        uint = 0x8033
	UNSIGNED_SHORT_5_5_5_1                        uint = 0x8034
	UNSIGNED_SHORT_5_6_5                          uint = 0x8363
	FRAGMENT_SHADER                               uint = 0x8B30
	VERTEX_SHADER                                 uint = 0x8B31
	MAX_VERTEX_ATTRIBS                            uint = 0x8869
	MAX_VERTEX_UNIFORM_VECTORS                    uint = 0x8DFB
	MAX_VARYING_VECTORS                           uint = 0x8DFC
	MAX_COMBINED_TEXTURE_IMAGE_UNITS              uint = 0x8B4D
	MAX_VERTEX_TEXTURE_IMAGE_UNITS                uint = 0x8B4C
	MAX_TEXTURE_IMAGE_UNITS                       uint = 0x8872
	MAX_FRAGMENT_UNIFORM_VECTORS                  uint = 0x8DFD
	SHADER_TYPE                                   uint = 0x8B4F
	DELETE_STATUS                                 uint = 0x8B80
	LINK_STATUS                                   uint = 0x8B82
	VALIDATE_STATUS                               uint = 0x8B83
	ATTACHED_SHADERS                              uint = 0x8B85
	ACTIVE_UNIFORMS                               uint = 0x8B86
	ACTIVE_ATTRIBUTES                             uint = 0x8B89
	SHADING_LANGUAGE_VERSION                      uint = 0x8B8C
	CURRENT_PROGRAM                               uint = 0x8B8D
	NEVER                                         uint = 0x0200
	LESS                                          uint = 0x0201
	EQUAL                                         uint = 0x0202
	LEQUAL                                        uint = 0x0203
	GREATER                                       uint = 0x0204
	NOTEQUAL                                      uint = 0x0205
	GEQUAL                                        uint = 0x0206
	ALWAYS                                        uint = 0x0207
	KEEP                                          uint = 0x1E00
	REPLACE                                       uint = 0x1E01
	INCR                                          uint = 0x1E02
	DECR                                          uint = 0x1E03
	INVERT                                        uint = 0x150A
	INCR_WRAP                                     uint = 0x8507
	DECR_WRAP                                     uint = 0x8508
	VENDOR                                        uint = 0x1F00
	RENDERER                                      uint = 0x1F01
	VERSION                                       uint = 0x1F02
	NEAREST                                       uint = 0x2600
	LINEAR                                        uint = 0x2601
	NEAREST_MIPMAP_NEAREST                        uint = 0x2700
	LINEAR_MIPMAP_NEAREST                         uint = 0x2701
	NEAREST_MIPMAP_LINEAR                         uint = 0x2702
	LINEAR_MIPMAP_LINEAR                          uint = 0x2703
	TEXTURE_MAG_FILTER                            uint = 0x2800
	TEXTURE_MIN_FILTER                            uint = 0x2801
	TEXTURE_WRAP_S                                uint = 0x2802
	TEXTURE_WRAP_T                                uint = 0x2803
	TEXTURE_2D                                    uint = 0x0DE1
	TEXTURE                                       uint = 0x1702
	TEXTURE_CUBE_MAP                              uint = 0x8513
	TEXTURE_BINDING_CUBE_MAP                      uint = 0x8514
	TEXTURE_CUBE_MAP_POSITIVE_X                   uint = 0x8515
	TEXTURE_CUBE_MAP_NEGATIVE_X                   uint = 0x8516
	TEXTURE_CUBE_MAP_POSITIVE_Y                   uint = 0x8517
	TEXTURE_CUBE_MAP_NEGATIVE_Y                   uint = 0x8518
	TEXTURE_CUBE_MAP_POSITIVE_Z                   uint = 0x8519
	TEXTURE_CUBE_MAP_NEGATIVE_Z                   uint = 0x851A
	MAX_CUBE_MAP_TEXTURE_SIZE                     uint = 0x851C
	TEXTURE0                                      uint = 0x84C0
	TEXTURE1                                      uint = 0x84C1
	TEXTURE2                                      uint = 0x84C2
	TEXTURE3                                      uint = 0x84C3
	TEXTURE4                                      uint = 0x84C4
	TEXTURE5                                      uint = 0x84C5
	TEXTURE6                                      uint = 0x84C6
	TEXTURE7                                      uint = 0x84C7
	TEXTURE8                                      uint = 0x84C8
	TEXTURE9                                      uint = 0x84C9
	TEXTURE10                                     uint = 0x84CA
	TEXTURE11                                     uint = 0x84CB
	TEXTURE12                                     uint = 0x84CC
	TEXTURE13                                     uint = 0x84CD
	TEXTURE14                                     uint = 0x84CE
	TEXTURE15                                     uint = 0x84CF
	TEXTURE16                                     uint = 0x84D0
	TEXTURE17                                     uint = 0x84D1
	TEXTURE18                                     uint = 0x84D2
	TEXTURE19                                     uint = 0x84D3
	TEXTURE20                                     uint = 0x84D4
	TEXTURE21                                     uint = 0x84D5
	TEXTURE22                                     uint = 0x84D6
	TEXTURE23                                     uint = 0x84D7
	TEXTURE24                                     uint = 0x84D8
	TEXTURE25                                     uint = 0x84D9
	TEXTURE26                                     uint = 0x84DA
	TEXTURE27                                     uint = 0x84DB
	TEXTURE28                                     uint = 0x84DC
	TEXTURE29                                     uint = 0x84DD
	TEXTURE30                                     uint = 0x84DE
	TEXTURE31                                     uint = 0x84DF
	ACTIVE_TEXTURE                                uint = 0x84E0
	REPEAT                                        uint = 0x2901
	CLAMP_TO_EDGE                                 uint = 0x812F
	MIRRORED_REPEAT                               uint = 0x8370
	FLOAT_VEC2                                    uint = 0x8B50
	FLOAT_VEC3                                    uint = 0x8B51
	FLOAT_VEC4                                    uint = 0x8B52
	INT_VEC2                                      uint = 0x8B53
	INT_VEC3                                      uint = 0x8B54
	INT_VEC4                                      uint = 0x8B55
	BOOL                                          uint = 0x8B56
	BOOL_VEC2                                     uint = 0x8B57
	BOOL_VEC3                                     uint = 0x8B58
	BOOL_VEC4                                     uint = 0x8B59
	FLOAT_MAT2                                    uint = 0x8B5A
	FLOAT_MAT3                                    uint = 0x8B5B
	FLOAT_MAT4                                    uint = 0x8B5C
	SAMPLER_2D                                    uint = 0x8B5E
	SAMPLER_CUBE                                  uint = 0x8B60
	VERTEX_ATTRIB_ARRAY_ENABLED                   uint = 0x8622
	VERTEX_ATTRIB_ARRAY_SIZE                      uint = 0x8623
	VERTEX_ATTRIB_ARRAY_STRIDE                    uint = 0x8624
	VERTEX_ATTRIB_ARRAY_TYPE                      uint = 0x8625
	VERTEX_ATTRIB_ARRAY_NORMALIZED                uint = 0x886A
	VERTEX_ATTRIB_ARRAY_POINTER                   uint = 0x8645
	VERTEX_ATTRIB_ARRAY_BUFFER_BINDING            uint = 0x889F
	IMPLEMENTATION_COLOR_READ_TYPE                uint = 0x8B9A
	IMPLEMENTATION_COLOR_READ_FORMAT              uint = 0x8B9B
	COMPILE_STATUS                                uint = 0x8B81
	LOW_FLOAT                                     uint = 0x8DF0
	MEDIUM_FLOAT                                  uint = 0x8DF1
	HIGH_FLOAT                                    uint = 0x8DF2
	LOW_INT                                       uint = 0x8DF3
	MEDIUM_INT                                    uint = 0x8DF4
	HIGH_INT                                      uint = 0x8DF5
	FRAMEBUFFER                                   uint = 0x8D40
	RENDERBUFFER                                  uint = 0x8D41
	RGBA4                                         uint = 0x8056
	RGB5_A1                                       uint = 0x8057
	RGB565                                        uint = 0x8D62
	DEPTH_COMPONENT16                             uint = 0x81A5
	STENCIL_INDEX8                                uint = 0x8D48
	DEPTH_STENCIL                                 uint = 0x84F9
	RENDERBUFFER_WIDTH                            uint = 0x8D42
	RENDERBUFFER_HEIGHT                           uint = 0x8D43
	RENDERBUFFER_INTERNAL_FORMAT                  uint = 0x8D44
	RENDERBUFFER_RED_SIZE                         uint = 0x8D50
	RENDERBUFFER_GREEN_SIZE                       uint = 0x8D51
	RENDERBUFFER_BLUE_SIZE                        uint = 0x8D52
	RENDERBUFFER_ALPHA_SIZE                       uint = 0x8D53
	RENDERBUFFER_DEPTH_SIZE                       uint = 0x8D54
	RENDERBUFFER_STENCIL_SIZE                     uint = 0x8D55
	FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE            uint = 0x8CD0
	FRAMEBUFFER_ATTACHMENT_OBJECT_NAME            uint = 0x8CD1
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL          uint = 0x8CD2
	FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE  uint = 0x8CD3
	COLOR_ATTACHMENT0                             uint = 0x8CE0
	DEPTH_ATTACHMENT                              uint = 0x8D00
	STENCIL_ATTACHMENT                            uint = 0x8D20
	DEPTH_STENCIL_ATTACHMENT                      uint = 0x821A
	NONE                                          uint = 0
	FRAMEBUFFER_COMPLETE                          uint = 0x8CD5
	FRAMEBUFFER_INCOMPLETE_ATTACHMENT             uint = 0x8CD6
	FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT     uint = 0x8CD7
	FRAMEBUFFER_INCOMPLETE_DIMENSIONS             uint = 0x8CD9
	FRAMEBUFFER_UNSUPPORTED                       uint = 0x8CDD
	FRAMEBUFFER_BINDING                           uint = 0x8CA6
	RENDERBUFFER_BINDING                          uint = 0x8CA7
	MAX_RENDERBUFFER_SIZE                         uint = 0x84E8
	INVALID_FRAMEBUFFER_OPERATION                 uint = 0x0506
	UNPACK_FLIP_Y_WEBGL                           uint = 0x9240
	UNPACK_PREMULTIPLY_ALPHA_WEBGL                uint = 0x9241
	CONTEXT_LOST_WEBGL                            uint = 0x9242
	UNPACK_COLORSPACE_CONVERSION_WEBGL            uint = 0x9243
	BROWSER_DEFAULT_WEBGL                         uint = 0x9244
	READ_BUFFER                                   uint = 0x0C02
	UNPACK_ROW_LENGTH                             uint = 0x0CF2
	UNPACK_SKIP_ROWS                              uint = 0x0CF3
	UNPACK_SKIP_PIXELS                            uint = 0x0CF4
	PACK_ROW_LENGTH                               uint = 0x0D02
	PACK_SKIP_ROWS                                uint = 0x0D03
	PACK_SKIP_PIXELS                              uint = 0x0D04
	COLOR                                         uint = 0x1800
	DEPTH                                         uint = 0x1801
	STENCIL                                       uint = 0x1802
	RED                                           uint = 0x1903
	RGB8                                          uint = 0x8051
	RGBA8                                         uint = 0x8058
	RGB10_A2                                      uint = 0x8059
	TEXTURE_BINDING_3D                            uint = 0x806A
	UNPACK_SKIP_IMAGES                            uint = 0x806D
	UNPACK_IMAGE_HEIGHT                           uint = 0x806E
	TEXTURE_3D                                    uint = 0x806F
	TEXTURE_WRAP_R                                uint = 0x8072
	MAX_3D_TEXTURE_SIZE                           uint = 0x8073
	UNSIGNED_INT_2_10_10_10_REV                   uint = 0x8368
	MAX_ELEMENTS_VERTICES                         uint = 0x80E8
	MAX_ELEMENTS_INDICES                          uint = 0x80E9
	TEXTURE_MIN_LOD                               uint = 0x813A
	TEXTURE_MAX_LOD                               uint = 0x813B
	TEXTURE_BASE_LEVEL                            uint = 0x813C
	TEXTURE_MAX_LEVEL                             uint = 0x813D
	MIN                                           uint = 0x8007
	MAX                                           uint = 0x8008
	DEPTH_COMPONENT24                             uint = 0x81A6
	MAX_TEXTURE_LOD_BIAS                          uint = 0x84FD
	TEXTURE_COMPARE_MODE                          uint = 0x884C
	TEXTURE_COMPARE_FUNC                          uint = 0x884D
	CURRENT_QUERY                                 uint = 0x8865
	QUERY_RESULT                                  uint = 0x8866
	QUERY_RESULT_AVAILABLE                        uint = 0x8867
	STREAM_READ                                   uint = 0x88E1
	STREAM_COPY                                   uint = 0x88E2
	STATIC_READ                                   uint = 0x88E5
	STATIC_COPY                                   uint = 0x88E6
	DYNAMIC_READ                                  uint = 0x88E9
	DYNAMIC_COPY                                  uint = 0x88EA
	MAX_DRAW_BUFFERS                              uint = 0x8824
	DRAW_BUFFER0                                  uint = 0x8825
	DRAW_BUFFER1                                  uint = 0x8826
	DRAW_BUFFER2                                  uint = 0x8827
	DRAW_BUFFER3                                  uint = 0x8828
	DRAW_BUFFER4                                  uint = 0x8829
	DRAW_BUFFER5                                  uint = 0x882A
	DRAW_BUFFER6                                  uint = 0x882B
	DRAW_BUFFER7                                  uint = 0x882C
	DRAW_BUFFER8                                  uint = 0x882D
	DRAW_BUFFER9                                  uint = 0x882E
	DRAW_BUFFER10                                 uint = 0x882F
	DRAW_BUFFER11                                 uint = 0x8830
	DRAW_BUFFER12                                 uint = 0x8831
	DRAW_BUFFER13                                 uint = 0x8832
	DRAW_BUFFER14                                 uint = 0x8833
	DRAW_BUFFER15                                 uint = 0x8834
	MAX_FRAGMENT_UNIFORM_COMPONENTS               uint = 0x8B49
	MAX_VERTEX_UNIFORM_COMPONENTS                 uint = 0x8B4A
	SAMPLER_3D                                    uint = 0x8B5F
	SAMPLER_2D_SHADOW                             uint = 0x8B62
	FRAGMENT_SHADER_DERIVATIVE_HINT               uint = 0x8B8B
	PIXEL_PACK_BUFFER                             uint = 0x88EB
	PIXEL_UNPACK_BUFFER                           uint = 0x88EC
	PIXEL_PACK_BUFFER_BINDING                     uint = 0x88ED
	PIXEL_UNPACK_BUFFER_BINDING                   uint = 0x88EF
	FLOAT_MAT2x3                                  uint = 0x8B65
	FLOAT_MAT2x4                                  uint = 0x8B66
	FLOAT_MAT3x2                                  uint = 0x8B67
	FLOAT_MAT3x4                                  uint = 0x8B68
	FLOAT_MAT4x2                                  uint = 0x8B69
	FLOAT_MAT4x3                                  uint = 0x8B6A
	SRGB                                          uint = 0x8C40
	SRGB8                                         uint = 0x8C41
	SRGB8_ALPHA8                                  uint = 0x8C43
	COMPARE_REF_TO_TEXTURE                        uint = 0x884E
	RGBA32F                                       uint = 0x8814
	RGB32F                                        uint = 0x8815
	RGBA16F                                       uint = 0x881A
	RGB16F                                        uint = 0x881B
	VERTEX_ATTRIB_ARRAY_INTEGER                   uint = 0x88FD
	MAX_ARRAY_TEXTURE_LAYERS                      uint = 0x88FF
	MIN_PROGRAM_TEXEL_OFFSET                      uint = 0x8904
	MAX_PROGRAM_TEXEL_OFFSET                      uint = 0x8905
	MAX_VARYING_COMPONENTS                        uint = 0x8B4B
	TEXTURE_2D_ARRAY                              uint = 0x8C1A
	TEXTURE_BINDING_2D_ARRAY                      uint = 0x8C1D
	R11F_G11F_B10F                                uint = 0x8C3A
	UNSIGNED_INT_10F_11F_11F_REV                  uint = 0x8C3B
	RGB9_E5                                       uint = 0x8C3D
	UNSIGNED_INT_5_9_9_9_REV                      uint = 0x8C3E
	TRANSFORM_FEEDBACK_BUFFER_MODE                uint = 0x8C7F
	MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS    uint = 0x8C80
	TRANSFORM_FEEDBACK_VARYINGS                   uint = 0x8C83
	TRANSFORM_FEEDBACK_BUFFER_START               uint = 0x8C84
	TRANSFORM_FEEDBACK_BUFFER_SIZE                uint = 0x8C85
	TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN         uint = 0x8C88
	RASTERIZER_DISCARD                            uint = 0x8C89
	MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS uint = 0x8C8A
	MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS       uint = 0x8C8B
	INTERLEAVED_ATTRIBS                           uint = 0x8C8C
	SEPARATE_ATTRIBS                              uint = 0x8C8D
	TRANSFORM_FEEDBACK_BUFFER                     uint = 0x8C8E
	TRANSFORM_FEEDBACK_BUFFER_BINDING             uint = 0x8C8F
	RGBA32UI                                      uint = 0x8D70
	RGB32UI                                       uint = 0x8D71
	RGBA16UI                                      uint = 0x8D76
	RGB16UI                                       uint = 0x8D77
	RGBA8UI                                       uint = 0x8D7C
	RGB8UI                                        uint = 0x8D7D
	RGBA32I                                       uint = 0x8D82
	RGB32I                                        uint = 0x8D83
	RGBA16I                                       uint = 0x8D88
	RGB16I                                        uint = 0x8D89
	RGBA8I                                        uint = 0x8D8E
	RGB8I                                         uint = 0x8D8F
	RED_INTEGER                                   uint = 0x8D94
	RGB_INTEGER                                   uint = 0x8D98
	RGBA_INTEGER                                  uint = 0x8D99
	SAMPLER_2D_ARRAY                              uint = 0x8DC1
	SAMPLER_2D_ARRAY_SHADOW                       uint = 0x8DC4
	SAMPLER_CUBE_SHADOW                           uint = 0x8DC5
	UNSIGNED_INT_VEC2                             uint = 0x8DC6
	UNSIGNED_INT_VEC3                             uint = 0x8DC7
	UNSIGNED_INT_VEC4                             uint = 0x8DC8
	INT_SAMPLER_2D                                uint = 0x8DCA
	INT_SAMPLER_3D                                uint = 0x8DCB
	INT_SAMPLER_CUBE                              uint = 0x8DCC
	INT_SAMPLER_2D_ARRAY                          uint = 0x8DCF
	UNSIGNED_INT_SAMPLER_2D                       uint = 0x8DD2
	UNSIGNED_INT_SAMPLER_3D                       uint = 0x8DD3
	UNSIGNED_INT_SAMPLER_CUBE                     uint = 0x8DD4
	UNSIGNED_INT_SAMPLER_2D_ARRAY                 uint = 0x8DD7
	DEPTH_COMPONENT32F                            uint = 0x8CAC
	DEPTH32F_STENCIL8                             uint = 0x8CAD
	FLOAT_32_UNSIGNED_INT_24_8_REV                uint = 0x8DAD
	FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING         uint = 0x8210
	FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE         uint = 0x8211
	FRAMEBUFFER_ATTACHMENT_RED_SIZE               uint = 0x8212
	FRAMEBUFFER_ATTACHMENT_GREEN_SIZE             uint = 0x8213
	FRAMEBUFFER_ATTACHMENT_BLUE_SIZE              uint = 0x8214
	FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE             uint = 0x8215
	FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE             uint = 0x8216
	FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE           uint = 0x8217
	FRAMEBUFFER_DEFAULT                           uint = 0x8218
	UNSIGNED_INT_24_8                             uint = 0x84FA
	DEPTH24_STENCIL8                              uint = 0x88F0
	UNSIGNED_NORMALIZED                           uint = 0x8C17
	DRAW_FRAMEBUFFER_BINDING                      uint = 0x8CA6
	READ_FRAMEBUFFER                              uint = 0x8CA8
	DRAW_FRAMEBUFFER                              uint = 0x8CA9
	READ_FRAMEBUFFER_BINDING                      uint = 0x8CAA
	RENDERBUFFER_SAMPLES                          uint = 0x8CAB
	FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER          uint = 0x8CD4
	MAX_COLOR_ATTACHMENTS                         uint = 0x8CDF
	COLOR_ATTACHMENT1                             uint = 0x8CE1
	COLOR_ATTACHMENT2                             uint = 0x8CE2
	COLOR_ATTACHMENT3                             uint = 0x8CE3
	COLOR_ATTACHMENT4                             uint = 0x8CE4
	COLOR_ATTACHMENT5                             uint = 0x8CE5
	COLOR_ATTACHMENT6                             uint = 0x8CE6
	COLOR_ATTACHMENT7                             uint = 0x8CE7
	COLOR_ATTACHMENT8                             uint = 0x8CE8
	COLOR_ATTACHMENT9                             uint = 0x8CE9
	COLOR_ATTACHMENT10                            uint = 0x8CEA
	COLOR_ATTACHMENT11                            uint = 0x8CEB
	COLOR_ATTACHMENT12                            uint = 0x8CEC
	COLOR_ATTACHMENT13                            uint = 0x8CED
	COLOR_ATTACHMENT14                            uint = 0x8CEE
	COLOR_ATTACHMENT15                            uint = 0x8CEF
	FRAMEBUFFER_INCOMPLETE_MULTISAMPLE            uint = 0x8D56
	MAX_SAMPLES                                   uint = 0x8D57
	HALF_FLOAT                                    uint = 0x140B
	RG                                            uint = 0x8227
	RG_INTEGER                                    uint = 0x8228
	R8                                            uint = 0x8229
	RG8                                           uint = 0x822B
	R16F                                          uint = 0x822D
	R32F                                          uint = 0x822E
	RG16F                                         uint = 0x822F
	RG32F                                         uint = 0x8230
	R8I                                           uint = 0x8231
	R8UI                                          uint = 0x8232
	R16I                                          uint = 0x8233
	R16UI                                         uint = 0x8234
	R32I                                          uint = 0x8235
	R32UI                                         uint = 0x8236
	RG8I                                          uint = 0x8237
	RG8UI                                         uint = 0x8238
	RG16I                                         uint = 0x8239
	RG16UI                                        uint = 0x823A
	RG32I                                         uint = 0x823B
	RG32UI                                        uint = 0x823C
	VERTEX_ARRAY_BINDING                          uint = 0x85B5
	R8_SNORM                                      uint = 0x8F94
	RG8_SNORM                                     uint = 0x8F95
	RGB8_SNORM                                    uint = 0x8F96
	RGBA8_SNORM                                   uint = 0x8F97
	SIGNED_NORMALIZED                             uint = 0x8F9C
	COPY_READ_BUFFER                              uint = 0x8F36
	COPY_WRITE_BUFFER                             uint = 0x8F37
	COPY_READ_BUFFER_BINDING                      uint = 0x8F36
	COPY_WRITE_BUFFER_BINDING                     uint = 0x8F37
	UNIFORM_BUFFER                                uint = 0x8A11
	UNIFORM_BUFFER_BINDING                        uint = 0x8A28
	UNIFORM_BUFFER_START                          uint = 0x8A29
	UNIFORM_BUFFER_SIZE                           uint = 0x8A2A
	MAX_VERTEX_UNIFORM_BLOCKS                     uint = 0x8A2B
	MAX_FRAGMENT_UNIFORM_BLOCKS                   uint = 0x8A2D
	MAX_COMBINED_UNIFORM_BLOCKS                   uint = 0x8A2E
	MAX_UNIFORM_BUFFER_BINDINGS                   uint = 0x8A2F
	MAX_UNIFORM_BLOCK_SIZE                        uint = 0x8A30
	MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS        uint = 0x8A31
	MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS      uint = 0x8A33
	UNIFORM_BUFFER_OFFSET_ALIGNMENT               uint = 0x8A34
	ACTIVE_UNIFORM_BLOCKS                         uint = 0x8A36
	UNIFORM_TYPE                                  uint = 0x8A37
	UNIFORM_SIZE                                  uint = 0x8A38
	UNIFORM_BLOCK_INDEX                           uint = 0x8A3A
	UNIFORM_OFFSET                                uint = 0x8A3B
	UNIFORM_ARRAY_STRIDE                          uint = 0x8A3C
	UNIFORM_MATRIX_STRIDE                         uint = 0x8A3D
	UNIFORM_IS_ROW_MAJOR                          uint = 0x8A3E
	UNIFORM_BLOCK_BINDING                         uint = 0x8A3F
	UNIFORM_BLOCK_DATA_SIZE                       uint = 0x8A40
	UNIFORM_BLOCK_ACTIVE_UNIFORMS                 uint = 0x8A42
	UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES          uint = 0x8A43
	UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER     uint = 0x8A44
	UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER   uint = 0x8A46
	INVALID_INDEX                                 uint = 0xFFFFFFFF
	MAX_VERTEX_OUTPUT_COMPONENTS                  uint = 0x9122
	MAX_FRAGMENT_INPUT_COMPONENTS                 uint = 0x9125
	MAX_SERVER_WAIT_TIMEOUT                       uint = 0x9111
	OBJECT_TYPE                                   uint = 0x9112
	SYNC_CONDITION                                uint = 0x9113
	SYNC_STATUS                                   uint = 0x9114
	SYNC_FLAGS                                    uint = 0x9115
	SYNC_FENCE                                    uint = 0x9116
	SYNC_GPU_COMMANDS_COMPLETE                    uint = 0x9117
	UNSIGNALED                                    uint = 0x9118
	SIGNALED                                      uint = 0x9119
	ALREADY_SIGNALED                              uint = 0x911A
	TIMEOUT_EXPIRED                               uint = 0x911B
	CONDITION_SATISFIED                           uint = 0x911C
	WAIT_FAILED                                   uint = 0x911D
	SYNC_FLUSH_COMMANDS_BIT                       uint = 0x00000001
	VERTEX_ATTRIB_ARRAY_DIVISOR                   uint = 0x88FE
	ANY_SAMPLES_PASSED                            uint = 0x8C2F
	ANY_SAMPLES_PASSED_CONSERVATIVE               uint = 0x8D6A
	SAMPLER_BINDING                               uint = 0x8919
	RGB10_A2UI                                    uint = 0x906F
	INT_2_10_10_10_REV                            uint = 0x8D9F
	TRANSFORM_FEEDBACK                            uint = 0x8E22
	TRANSFORM_FEEDBACK_PAUSED                     uint = 0x8E23
	TRANSFORM_FEEDBACK_ACTIVE                     uint = 0x8E24
	TRANSFORM_FEEDBACK_BINDING                    uint = 0x8E25
	TEXTURE_IMMUTABLE_FORMAT                      uint = 0x912F
	MAX_ELEMENT_INDEX                             uint = 0x8D6B
	TEXTURE_IMMUTABLE_LEVELS                      uint = 0x82DF
	TIMEOUT_IGNORED                               int  = -1
	MAX_CLIENT_WAIT_TIMEOUT_WEBGL                 uint = 0x9247
)

// Canvas returning attribute 'canvas' with
// type Union (idl: Union).
func (_this *RenderingContext) Canvas() *Union {
	var ret *Union
	value := _this.Value_JS.Get("canvas")
	ret = UnionFromJS(value)
	return ret
}

// DrawingBufferWidth returning attribute 'drawingBufferWidth' with
// type int (idl: long).
func (_this *RenderingContext) DrawingBufferWidth() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferWidth")
	ret = (value).Int()
	return ret
}

// DrawingBufferHeight returning attribute 'drawingBufferHeight' with
// type int (idl: long).
func (_this *RenderingContext) DrawingBufferHeight() int {
	var ret int
	value := _this.Value_JS.Get("drawingBufferHeight")
	ret = (value).Int()
	return ret
}

func (_this *RenderingContext) GetContextAttributes() (_result *webgl.ContextAttributes) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getContextAttributes", _args[0:_end]...)
	var (
		_converted *webgl.ContextAttributes // javascript: WebGLContextAttributes _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ContextAttributesFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) IsContextLost() (_result bool) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("isContextLost", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) GetSupportedExtensions() (_result []string) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getSupportedExtensions", _args[0:_end]...)
	var (
		_converted []string // javascript: sequence<DOMString> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]string, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 string
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = (__seq_in0).String()
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetExtension(name string) (_result *javascript.Object) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := name
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtension", _args[0:_end]...)
	var (
		_converted *javascript.Object // javascript: object _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = javascript.ObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) ActiveTexture(texture uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("activeTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) AttachShader(program *webgl.Program, shader *webgl.Shader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("attachShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindAttribLocation(program *webgl.Program, index uint, name string) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := name
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindAttribLocation", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindBuffer(target uint, buffer *webgl.Buffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := buffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindBuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindFramebuffer(target uint, framebuffer *webgl.Framebuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := framebuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindRenderbuffer(target uint, renderbuffer *webgl.Renderbuffer) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := renderbuffer.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindTexture(target uint, texture *webgl.Texture) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := texture.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendColor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendEquation(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("blendEquation", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendEquationSeparate(modeRGB uint, modeAlpha uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := modeRGB
	_args[0] = _p0
	_end++
	_p1 := modeAlpha
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendEquationSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendFunc(sfactor uint, dfactor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sfactor
	_args[0] = _p0
	_end++
	_p1 := dfactor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("blendFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlendFuncSeparate(srcRGB uint, dstRGB uint, srcAlpha uint, dstAlpha uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := srcRGB
	_args[0] = _p0
	_end++
	_p1 := dstRGB
	_args[1] = _p1
	_end++
	_p2 := srcAlpha
	_args[2] = _p2
	_end++
	_p3 := dstAlpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("blendFuncSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData2(target uint, data *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferSubData(target uint, offset int, data *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := offset
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CheckFramebufferStatus(target uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("checkFramebufferStatus", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) Clear(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearColor(red float32, green float32, blue float32, alpha float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearColor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearDepth(depth float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := depth
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearDepth", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearStencil(s int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := s
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("clearStencil", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ColorMask(red bool, green bool, blue bool, alpha bool) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := red
	_args[0] = _p0
	_end++
	_p1 := green
	_args[1] = _p1
	_end++
	_p2 := blue
	_args[2] = _p2
	_end++
	_p3 := alpha
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("colorMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompileShader(shader *webgl.Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("compileShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage2D(target uint, level int, internalformat uint, width int, height int, border int, data *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := data.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, data *Union) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := data.JSValue()
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyTexImage2D(target uint, level int, internalformat uint, x int, y int, width int, height int, border int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := x
	_args[3] = _p3
	_end++
	_p4 := y
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := border
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyTexSubImage2D(target uint, level int, xoffset int, yoffset int, x int, y int, width int, height int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := x
	_args[4] = _p4
	_end++
	_p5 := y
	_args[5] = _p5
	_end++
	_p6 := width
	_args[6] = _p6
	_end++
	_p7 := height
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("copyTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CreateBuffer() (_result *webgl.Buffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createBuffer", _args[0:_end]...)
	var (
		_converted *webgl.Buffer // javascript: WebGLBuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.BufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateFramebuffer() (_result *webgl.Framebuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createFramebuffer", _args[0:_end]...)
	var (
		_converted *webgl.Framebuffer // javascript: WebGLFramebuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.FramebufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateProgram() (_result *webgl.Program) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createProgram", _args[0:_end]...)
	var (
		_converted *webgl.Program // javascript: WebGLProgram _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ProgramFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateRenderbuffer() (_result *webgl.Renderbuffer) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createRenderbuffer", _args[0:_end]...)
	var (
		_converted *webgl.Renderbuffer // javascript: WebGLRenderbuffer _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.RenderbufferFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateShader(_type uint) (_result *webgl.Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _type
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("createShader", _args[0:_end]...)
	var (
		_converted *webgl.Shader // javascript: WebGLShader _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ShaderFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CreateTexture() (_result *webgl.Texture) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTexture", _args[0:_end]...)
	var (
		_converted *webgl.Texture // javascript: WebGLTexture _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.TextureFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) CullFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("cullFace", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteBuffer(buffer *webgl.Buffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteBuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteFramebuffer(framebuffer *webgl.Framebuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteProgram(program *webgl.Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteRenderbuffer(renderbuffer *webgl.Renderbuffer) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteShader(shader *webgl.Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DeleteTexture(texture *webgl.Texture) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTexture", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthFunc(_func uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthMask(flag bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := flag
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("depthMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DepthRange(zNear float32, zFar float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := zNear
	_args[0] = _p0
	_end++
	_p1 := zFar
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("depthRange", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DetachShader(program *webgl.Program, shader *webgl.Shader) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := shader.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("detachShader", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Disable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disable", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DisableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("disableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawArrays(mode uint, first int, count int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("drawArrays", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawElements(mode uint, count int, _type uint, offset int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawElements", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Enable(cap uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enable", _args[0:_end]...)
	return
}

func (_this *RenderingContext) EnableVertexAttribArray(index uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("enableVertexAttribArray", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Finish() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("finish", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Flush() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("flush", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FramebufferRenderbuffer(target uint, attachment uint, renderbuffertarget uint, renderbuffer *webgl.Renderbuffer) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := renderbuffertarget
	_args[2] = _p2
	_end++
	_p3 := renderbuffer.JSValue()
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("framebufferRenderbuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FramebufferTexture2D(target uint, attachment uint, textarget uint, texture *webgl.Texture, level int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := textarget
	_args[2] = _p2
	_end++
	_p3 := texture.JSValue()
	_args[3] = _p3
	_end++
	_p4 := level
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTexture2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FrontFace(mode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("frontFace", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GenerateMipmap(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("generateMipmap", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetActiveAttrib(program *webgl.Program, index uint) (_result *webgl.ActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveAttrib", _args[0:_end]...)
	var (
		_converted *webgl.ActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetActiveUniform(program *webgl.Program, index uint) (_result *webgl.ActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniform", _args[0:_end]...)
	var (
		_converted *webgl.ActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetAttachedShaders(program *webgl.Program) (_result []*webgl.Shader) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getAttachedShaders", _args[0:_end]...)
	var (
		_converted []*webgl.Shader // javascript: sequence<WebGLShader> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]*webgl.Shader, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *webgl.Shader
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = webgl.ShaderFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetAttribLocation(program *webgl.Program, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getAttribLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *RenderingContext) GetBufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getBufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetParameter(pname uint) (_result js.Value) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetError() (_result uint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getError", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) GetFramebufferAttachmentParameter(target uint, attachment uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getFramebufferAttachmentParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetProgramParameter(program *webgl.Program, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getProgramParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetProgramInfoLog(program *webgl.Program) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getProgramInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetRenderbufferParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getRenderbufferParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderParameter(shader *webgl.Shader, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderPrecisionFormat(shadertype uint, precisiontype uint) (_result *webgl.ShaderPrecisionFormat) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shadertype
	_args[0] = _p0
	_end++
	_p1 := precisiontype
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getShaderPrecisionFormat", _args[0:_end]...)
	var (
		_converted *webgl.ShaderPrecisionFormat // javascript: WebGLShaderPrecisionFormat _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ShaderPrecisionFormatFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderInfoLog(shader *webgl.Shader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderInfoLog", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetShaderSource(shader *webgl.Shader) (_result *string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getShaderSource", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetTexParameter(target uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTexParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniform(program *webgl.Program, location *webgl.UniformLocation) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := location.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniform", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniformLocation(program *webgl.Program, name string) (_result *webgl.UniformLocation) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformLocation", _args[0:_end]...)
	var (
		_converted *webgl.UniformLocation // javascript: WebGLUniformLocation _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.UniformLocationFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetVertexAttrib(index uint, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttrib", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetVertexAttribOffset(index uint, pname uint) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getVertexAttribOffset", _args[0:_end]...)
	var (
		_converted int // javascript: long long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *RenderingContext) Hint(target uint, mode uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := mode
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("hint", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsBuffer(buffer *webgl.Buffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := buffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isBuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsEnabled(cap uint) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := cap
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isEnabled", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsFramebuffer(framebuffer *webgl.Framebuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := framebuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isFramebuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsProgram(program *webgl.Program) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isProgram", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsRenderbuffer(renderbuffer *webgl.Renderbuffer) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := renderbuffer.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isRenderbuffer", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsShader(shader *webgl.Shader) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isShader", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) IsTexture(texture *webgl.Texture) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := texture.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTexture", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) LineWidth(width float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := width
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("lineWidth", _args[0:_end]...)
	return
}

func (_this *RenderingContext) LinkProgram(program *webgl.Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("linkProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) PixelStorei(pname uint, param int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := pname
	_args[0] = _p0
	_end++
	_p1 := param
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("pixelStorei", _args[0:_end]...)
	return
}

func (_this *RenderingContext) PolygonOffset(factor float32, units float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := factor
	_args[0] = _p0
	_end++
	_p1 := units
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("polygonOffset", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadPixels(x int, y int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := pixels.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *RenderingContext) RenderbufferStorage(target uint, internalformat uint, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("renderbufferStorage", _args[0:_end]...)
	return
}

func (_this *RenderingContext) SampleCoverage(value float32, invert bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := value
	_args[0] = _p0
	_end++
	_p1 := invert
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("sampleCoverage", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Scissor(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("scissor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ShaderSource(shader *webgl.Shader, source string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := shader.JSValue()
	_args[0] = _p0
	_end++
	_p1 := source
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("shaderSource", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilFunc(_func uint, ref int, mask uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := _func
	_args[0] = _p0
	_end++
	_p1 := ref
	_args[1] = _p1
	_end++
	_p2 := mask
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilFunc", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilFuncSeparate(face uint, _func uint, ref int, mask uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := _func
	_args[1] = _p1
	_end++
	_p2 := ref
	_args[2] = _p2
	_end++
	_p3 := mask
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilFuncSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilMask(mask uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := mask
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("stencilMask", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilMaskSeparate(face uint, mask uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := mask
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("stencilMaskSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilOp(fail uint, zfail uint, zpass uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := fail
	_args[0] = _p0
	_end++
	_p1 := zfail
	_args[1] = _p1
	_end++
	_p2 := zpass
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("stencilOp", _args[0:_end]...)
	return
}

func (_this *RenderingContext) StencilOpSeparate(face uint, fail uint, zfail uint, zpass uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := face
	_args[0] = _p0
	_end++
	_p1 := fail
	_args[1] = _p1
	_end++
	_p2 := zfail
	_args[2] = _p2
	_end++
	_p3 := zpass
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("stencilOpSeparate", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D2(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexParameterf(target uint, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameterf", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexParameteri(target uint, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("texParameteri", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D2(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1f(location *webgl.UniformLocation, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2f(location *webgl.UniformLocation, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3f(location *webgl.UniformLocation, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4f(location *webgl.UniformLocation, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1i(location *webgl.UniformLocation, x int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2i(location *webgl.UniformLocation, x int, y int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3i(location *webgl.UniformLocation, x int, y int, z int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4i(location *webgl.UniformLocation, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1fv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2fv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3fv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4fv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1iv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2iv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3iv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4iv(location *webgl.UniformLocation, v *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix2fv(location *webgl.UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix3fv(location *webgl.UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix4fv(location *webgl.UniformLocation, transpose bool, value *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := value.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UseProgram(program *webgl.Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("useProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ValidateProgram(program *webgl.Program) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("validateProgram", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib1f(index uint, x float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib2f(index uint, x float32, y float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("vertexAttrib2f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib3f(index uint, x float32, y float32, z float32) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("vertexAttrib3f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib4f(index uint, x float32, y float32, z float32, w float32) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttrib4f", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib1fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib1fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib2fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib3fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttrib4fv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttrib4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribPointer(index uint, size int, _type uint, normalized bool, stride int, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := normalized
	_args[3] = _p3
	_end++
	_p4 := stride
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("vertexAttribPointer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Viewport(x int, y int, width int, height int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("viewport", _args[0:_end]...)
	return
}

func (_this *RenderingContext) MakeXRCompatible() (_result *javascript.Promise) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("makeXRCompatible", _args[0:_end]...)
	var (
		_converted *javascript.Promise // javascript: Promise _what_return_name
	)
	_converted = javascript.PromiseFromJS(_returned)
	_result = _converted
	return
}

func (_this *RenderingContext) BufferData3(target uint, size int, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData4(target uint, srcData *Union, usage uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcData.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferSubData2(target uint, dstByteOffset int, srcData *Union) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := dstByteOffset
	_args[1] = _p1
	_end++
	_p2 := srcData.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferData5(target uint, srcData *Union, usage uint, srcOffset uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcData.JSValue()
	_args[1] = _p1
	_end++
	_p2 := usage
	_args[2] = _p2
	_end++
	_p3 := srcOffset
	_args[3] = _p3
	_end++
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("bufferData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BufferSubData3(target uint, dstByteOffset int, srcData *Union, srcOffset uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := dstByteOffset
	_args[1] = _p1
	_end++
	_p2 := srcData.JSValue()
	_args[2] = _p2
	_end++
	_p3 := srcOffset
	_args[3] = _p3
	_end++
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("bufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyBufferSubData(readTarget uint, writeTarget uint, readOffset int, writeOffset int, size int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := readTarget
	_args[0] = _p0
	_end++
	_p1 := writeTarget
	_args[1] = _p1
	_end++
	_p2 := readOffset
	_args[2] = _p2
	_end++
	_p3 := writeOffset
	_args[3] = _p3
	_end++
	_p4 := size
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("copyBufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetBufferSubData(target uint, srcByteOffset int, dstBuffer *Union, dstOffset *uint, length *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := srcByteOffset
	_args[1] = _p1
	_end++
	_p2 := dstBuffer.JSValue()
	_args[2] = _p2
	_end++
	if dstOffset != nil {
		_p3 := dstOffset
		_args[3] = _p3
		_end++
	}
	if length != nil {
		_p4 := length
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("getBufferSubData", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BlitFramebuffer(srcX0 int, srcY0 int, srcX1 int, srcY1 int, dstX0 int, dstY0 int, dstX1 int, dstY1 int, mask uint, filter uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := srcX0
	_args[0] = _p0
	_end++
	_p1 := srcY0
	_args[1] = _p1
	_end++
	_p2 := srcX1
	_args[2] = _p2
	_end++
	_p3 := srcY1
	_args[3] = _p3
	_end++
	_p4 := dstX0
	_args[4] = _p4
	_end++
	_p5 := dstY0
	_args[5] = _p5
	_end++
	_p6 := dstX1
	_args[6] = _p6
	_end++
	_p7 := dstY1
	_args[7] = _p7
	_end++
	_p8 := mask
	_args[8] = _p8
	_end++
	_p9 := filter
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("blitFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) FramebufferTextureLayer(target uint, attachment uint, texture *webgl.Texture, level int, layer int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := attachment
	_args[1] = _p1
	_end++
	_p2 := texture.JSValue()
	_args[2] = _p2
	_end++
	_p3 := level
	_args[3] = _p3
	_end++
	_p4 := layer
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("framebufferTextureLayer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) InvalidateFramebuffer(target uint, attachments []uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(attachments))
	for __idx1, __seq_in1 := range attachments {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("invalidateFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) InvalidateSubFramebuffer(target uint, attachments []uint, x int, y int, width int, height int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(attachments))
	for __idx1, __seq_in1 := range attachments {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := x
	_args[2] = _p2
	_end++
	_p3 := y
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("invalidateSubFramebuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadBuffer(src uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := src
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("readBuffer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetInternalformatParameter(target uint, internalformat uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := internalformat
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getInternalformatParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) RenderbufferStorageMultisample(target uint, samples int, internalformat uint, width int, height int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := samples
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("renderbufferStorageMultisample", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexStorage2D(target uint, levels int, internalformat uint, width int, height int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := levels
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("texStorage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexStorage3D(target uint, levels int, internalformat uint, width int, height int, depth int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := levels
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texStorage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D3(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D4(target uint, level int, internalformat int, format uint, _type uint, source *Union) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := format
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := source.JSValue()
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D3(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pixels *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pixels.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D4(target uint, level int, xoffset int, yoffset int, format uint, _type uint, source *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := source.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D5(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, pboOffset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pboOffset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D6(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, source *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := source.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage2D7(target uint, level int, internalformat int, width int, height int, border int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := srcData.JSValue()
	_args[8] = _p8
	_end++
	_p9 := srcOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage3D(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, pboOffset int) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := pboOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage3D2(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, source *Union) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := source.JSValue()
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage3D3(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, srcData *Union) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexImage3D4(target uint, level int, internalformat int, width int, height int, depth int, border int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := format
	_args[7] = _p7
	_end++
	_p8 := _type
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	_p10 := srcOffset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D5(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, pboOffset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := pboOffset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D6(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, source *Union) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := source.JSValue()
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage2D7(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, _type uint, srcData *Union, srcOffset uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := _type
	_args[7] = _p7
	_end++
	_p8 := srcData.JSValue()
	_args[8] = _p8
	_end++
	_p9 := srcOffset
	_args[9] = _p9
	_end++
	_this.Value_JS.Call("texSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, pboOffset int) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := pboOffset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage3D2(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, source *Union) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := source.JSValue()
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TexSubImage3D3(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, _type uint, srcData *Union, srcOffset *uint) {
	var (
		_args [12]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := _type
	_args[9] = _p9
	_end++
	_p10 := srcData.JSValue()
	_args[10] = _p10
	_end++
	if srcOffset != nil {
		_p11 := srcOffset
		_args[11] = _p11
		_end++
	}
	_this.Value_JS.Call("texSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CopyTexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, x int, y int, width int, height int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := x
	_args[5] = _p5
	_end++
	_p6 := y
	_args[6] = _p6
	_end++
	_p7 := width
	_args[7] = _p7
	_end++
	_p8 := height
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("copyTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage2D2(target uint, level int, internalformat uint, width int, height int, border int, imageSize int, offset int) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := imageSize
	_args[6] = _p6
	_end++
	_p7 := offset
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage2D3(target uint, level int, internalformat uint, width int, height int, border int, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := border
	_args[5] = _p5
	_end++
	_p6 := srcData.JSValue()
	_args[6] = _p6
	_end++
	if srcOffset != nil {
		_p7 := srcOffset
		_args[7] = _p7
		_end++
	}
	if srcLengthOverride != nil {
		_p8 := srcLengthOverride
		_args[8] = _p8
		_end++
	}
	_this.Value_JS.Call("compressedTexImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage3D(target uint, level int, internalformat uint, width int, height int, depth int, border int, imageSize int, offset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := imageSize
	_args[7] = _p7
	_end++
	_p8 := offset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("compressedTexImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexImage3D2(target uint, level int, internalformat uint, width int, height int, depth int, border int, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := internalformat
	_args[2] = _p2
	_end++
	_p3 := width
	_args[3] = _p3
	_end++
	_p4 := height
	_args[4] = _p4
	_end++
	_p5 := depth
	_args[5] = _p5
	_end++
	_p6 := border
	_args[6] = _p6
	_end++
	_p7 := srcData.JSValue()
	_args[7] = _p7
	_end++
	if srcOffset != nil {
		_p8 := srcOffset
		_args[8] = _p8
		_end++
	}
	if srcLengthOverride != nil {
		_p9 := srcLengthOverride
		_args[9] = _p9
		_end++
	}
	_this.Value_JS.Call("compressedTexImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage2D2(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, imageSize int, offset int) {
	var (
		_args [9]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := imageSize
	_args[7] = _p7
	_end++
	_p8 := offset
	_args[8] = _p8
	_end++
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage2D3(target uint, level int, xoffset int, yoffset int, width int, height int, format uint, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [10]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := width
	_args[4] = _p4
	_end++
	_p5 := height
	_args[5] = _p5
	_end++
	_p6 := format
	_args[6] = _p6
	_end++
	_p7 := srcData.JSValue()
	_args[7] = _p7
	_end++
	if srcOffset != nil {
		_p8 := srcOffset
		_args[8] = _p8
		_end++
	}
	if srcLengthOverride != nil {
		_p9 := srcLengthOverride
		_args[9] = _p9
		_end++
	}
	_this.Value_JS.Call("compressedTexSubImage2D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage3D(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, imageSize int, offset int) {
	var (
		_args [11]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := imageSize
	_args[9] = _p9
	_end++
	_p10 := offset
	_args[10] = _p10
	_end++
	_this.Value_JS.Call("compressedTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CompressedTexSubImage3D2(target uint, level int, xoffset int, yoffset int, zoffset int, width int, height int, depth int, format uint, srcData *Union, srcOffset *uint, srcLengthOverride *uint) {
	var (
		_args [12]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := level
	_args[1] = _p1
	_end++
	_p2 := xoffset
	_args[2] = _p2
	_end++
	_p3 := yoffset
	_args[3] = _p3
	_end++
	_p4 := zoffset
	_args[4] = _p4
	_end++
	_p5 := width
	_args[5] = _p5
	_end++
	_p6 := height
	_args[6] = _p6
	_end++
	_p7 := depth
	_args[7] = _p7
	_end++
	_p8 := format
	_args[8] = _p8
	_end++
	_p9 := srcData.JSValue()
	_args[9] = _p9
	_end++
	if srcOffset != nil {
		_p10 := srcOffset
		_args[10] = _p10
		_end++
	}
	if srcLengthOverride != nil {
		_p11 := srcLengthOverride
		_args[11] = _p11
		_end++
	}
	_this.Value_JS.Call("compressedTexSubImage3D", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetFragDataLocation(program *webgl.Program, name string) (_result int) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := name
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getFragDataLocation", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *RenderingContext) Uniform1ui(location *webgl.UniformLocation, v0 uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("uniform1ui", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2ui(location *webgl.UniformLocation, v0 uint, v1 uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniform2ui", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3ui(location *webgl.UniformLocation, v0 uint, v1 uint, v2 uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_p3 := v2
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("uniform3ui", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4ui(location *webgl.UniformLocation, v0 uint, v1 uint, v2 uint, v3 uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := v0
	_args[1] = _p1
	_end++
	_p2 := v1
	_args[2] = _p2
	_end++
	_p3 := v2
	_args[3] = _p3
	_end++
	_p4 := v3
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("uniform4ui", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1fv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2fv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3fv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4fv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1iv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2iv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3iv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4iv2(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform1uiv(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform1uiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform2uiv(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform2uiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform3uiv(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform3uiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) Uniform4uiv(location *webgl.UniformLocation, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := data.JSValue()
	_args[1] = _p1
	_end++
	if srcOffset != nil {
		_p2 := srcOffset
		_args[2] = _p2
		_end++
	}
	if srcLength != nil {
		_p3 := srcLength
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("uniform4uiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix2fv2(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix3x2fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3x2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix4x2fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4x2fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix2x3fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2x3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix3fv2(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix4x3fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4x3fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix2x4fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix2x4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix3x4fv(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix3x4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) UniformMatrix4fv2(location *webgl.UniformLocation, transpose bool, data *Union, srcOffset *uint, srcLength *uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := location.JSValue()
	_args[0] = _p0
	_end++
	_p1 := transpose
	_args[1] = _p1
	_end++
	_p2 := data.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	if srcLength != nil {
		_p4 := srcLength
		_args[4] = _p4
		_end++
	}
	_this.Value_JS.Call("uniformMatrix4fv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribI4i(index uint, x int, y int, z int, w int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribI4i", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribI4iv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribI4iv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribI4ui(index uint, x uint, y uint, z uint, w uint) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := x
	_args[1] = _p1
	_end++
	_p2 := y
	_args[2] = _p2
	_end++
	_p3 := z
	_args[3] = _p3
	_end++
	_p4 := w
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribI4ui", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribI4uiv(index uint, values *Union) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := values.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribI4uiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribIPointer(index uint, size int, _type uint, stride int, offset int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := size
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := stride
	_args[3] = _p3
	_end++
	_p4 := offset
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("vertexAttribIPointer", _args[0:_end]...)
	return
}

func (_this *RenderingContext) VertexAttribDivisor(index uint, divisor uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := divisor
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("vertexAttribDivisor", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawArraysInstanced(mode uint, first int, count int, instanceCount int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := first
	_args[1] = _p1
	_end++
	_p2 := count
	_args[2] = _p2
	_end++
	_p3 := instanceCount
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("drawArraysInstanced", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawElementsInstanced(mode uint, count int, _type uint, offset int, instanceCount int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := count
	_args[1] = _p1
	_end++
	_p2 := _type
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_p4 := instanceCount
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("drawElementsInstanced", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawRangeElements(mode uint, start uint, end uint, count int, _type uint, offset int) {
	var (
		_args [6]interface{}
		_end  int
	)
	_p0 := mode
	_args[0] = _p0
	_end++
	_p1 := start
	_args[1] = _p1
	_end++
	_p2 := end
	_args[2] = _p2
	_end++
	_p3 := count
	_args[3] = _p3
	_end++
	_p4 := _type
	_args[4] = _p4
	_end++
	_p5 := offset
	_args[5] = _p5
	_end++
	_this.Value_JS.Call("drawRangeElements", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadPixels2(x int, y int, width int, height int, format uint, _type uint, dstData *Union) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := dstData.JSValue()
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadPixels3(x int, y int, width int, height int, format uint, _type uint, offset int) {
	var (
		_args [7]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := offset
	_args[6] = _p6
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ReadPixels4(x int, y int, width int, height int, format uint, _type uint, dstData *Union, dstOffset uint) {
	var (
		_args [8]interface{}
		_end  int
	)
	_p0 := x
	_args[0] = _p0
	_end++
	_p1 := y
	_args[1] = _p1
	_end++
	_p2 := width
	_args[2] = _p2
	_end++
	_p3 := height
	_args[3] = _p3
	_end++
	_p4 := format
	_args[4] = _p4
	_end++
	_p5 := _type
	_args[5] = _p5
	_end++
	_p6 := dstData.JSValue()
	_args[6] = _p6
	_end++
	_p7 := dstOffset
	_args[7] = _p7
	_end++
	_this.Value_JS.Call("readPixels", _args[0:_end]...)
	return
}

func (_this *RenderingContext) DrawBuffers(buffers []uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := js.Global().Get("Array").New(len(buffers))
	for __idx0, __seq_in0 := range buffers {
		__seq_out0 := __seq_in0
		_p0.SetIndex(__idx0, __seq_out0)
	}
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("drawBuffers", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearBufferfv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferfv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearBufferiv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearBufferuiv(buffer uint, drawbuffer int, values *Union, srcOffset *uint) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := values.JSValue()
	_args[2] = _p2
	_end++
	if srcOffset != nil {
		_p3 := srcOffset
		_args[3] = _p3
		_end++
	}
	_this.Value_JS.Call("clearBufferuiv", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClearBufferfi(buffer uint, drawbuffer int, depth float32, stencil int) {
	var (
		_args [4]interface{}
		_end  int
	)
	_p0 := buffer
	_args[0] = _p0
	_end++
	_p1 := drawbuffer
	_args[1] = _p1
	_end++
	_p2 := depth
	_args[2] = _p2
	_end++
	_p3 := stencil
	_args[3] = _p3
	_end++
	_this.Value_JS.Call("clearBufferfi", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CreateQuery() (_result *Query) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createQuery", _args[0:_end]...)
	var (
		_converted *Query // javascript: WebGLQuery _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = QueryFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) DeleteQuery(query *Query) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteQuery", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsQuery(query *Query) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isQuery", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) BeginQuery(target uint, query *Query) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := query.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("beginQuery", _args[0:_end]...)
	return
}

func (_this *RenderingContext) EndQuery(target uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("endQuery", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetQuery(target uint, pname uint) (_result *Query) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getQuery", _args[0:_end]...)
	var (
		_converted *Query // javascript: WebGLQuery _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = QueryFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetQueryParameter(query *Query, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := query.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getQueryParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) CreateSampler() (_result *Sampler) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSampler", _args[0:_end]...)
	var (
		_converted *Sampler // javascript: WebGLSampler _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = SamplerFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) DeleteSampler(sampler *Sampler) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteSampler", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsSampler(sampler *Sampler) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isSampler", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) BindSampler(unit uint, sampler *Sampler) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unit
	_args[0] = _p0
	_end++
	_p1 := sampler.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindSampler", _args[0:_end]...)
	return
}

func (_this *RenderingContext) SamplerParameteri(sampler *Sampler, pname uint, param int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("samplerParameteri", _args[0:_end]...)
	return
}

func (_this *RenderingContext) SamplerParameterf(sampler *Sampler, pname uint, param float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_p2 := param
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("samplerParameterf", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetSamplerParameter(sampler *Sampler, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sampler.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSamplerParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) FenceSync(condition uint, flags uint) (_result *Sync) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := condition
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("fenceSync", _args[0:_end]...)
	var (
		_converted *Sync // javascript: WebGLSync _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = SyncFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) IsSync(sync *Sync) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isSync", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) DeleteSync(sync *Sync) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteSync", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ClientWaitSync(sync *Sync, flags uint, timeout int) (_result uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_p2 := timeout
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("clientWaitSync", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) WaitSync(sync *Sync, flags uint, timeout int) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := flags
	_args[1] = _p1
	_end++
	_p2 := timeout
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("waitSync", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetSyncParameter(sync *Sync, pname uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sync.JSValue()
	_args[0] = _p0
	_end++
	_p1 := pname
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSyncParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) CreateTransformFeedback() (_result *TransformFeedback) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createTransformFeedback", _args[0:_end]...)
	var (
		_converted *TransformFeedback // javascript: WebGLTransformFeedback _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = TransformFeedbackFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) DeleteTransformFeedback(tf *TransformFeedback) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := tf.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsTransformFeedback(tf *TransformFeedback) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := tf.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isTransformFeedback", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) BindTransformFeedback(target uint, tf *TransformFeedback) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := tf.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("bindTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BeginTransformFeedback(primitiveMode uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := primitiveMode
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("beginTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) EndTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("endTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) TransformFeedbackVaryings(program *webgl.Program, varyings []string, bufferMode uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(varyings))
	for __idx1, __seq_in1 := range varyings {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := bufferMode
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("transformFeedbackVaryings", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetTransformFeedbackVarying(program *webgl.Program, index uint) (_result *webgl.ActiveInfo) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getTransformFeedbackVarying", _args[0:_end]...)
	var (
		_converted *webgl.ActiveInfo // javascript: WebGLActiveInfo _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = webgl.ActiveInfoFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) PauseTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("pauseTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) ResumeTransformFeedback() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("resumeTransformFeedback", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindBufferBase(target uint, index uint, buffer *webgl.Buffer) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := buffer.JSValue()
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("bindBufferBase", _args[0:_end]...)
	return
}

func (_this *RenderingContext) BindBufferRange(target uint, index uint, buffer *webgl.Buffer, offset int, size int) {
	var (
		_args [5]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_p2 := buffer.JSValue()
	_args[2] = _p2
	_end++
	_p3 := offset
	_args[3] = _p3
	_end++
	_p4 := size
	_args[4] = _p4
	_end++
	_this.Value_JS.Call("bindBufferRange", _args[0:_end]...)
	return
}

func (_this *RenderingContext) GetIndexedParameter(target uint, index uint) (_result js.Value) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := target
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getIndexedParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniformIndices(program *webgl.Program, uniformNames []string) (_result []uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(uniformNames))
	for __idx1, __seq_in1 := range uniformNames {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformIndices", _args[0:_end]...)
	var (
		_converted []uint // javascript: sequence<unsigned long> _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__length0 := _returned.Length()
		__array0 := make([]uint, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 uint
			__seq_in0 := _returned.Index(__idx0)
			__seq_out0 = (uint)((__seq_in0).Int())
			__array0[__idx0] = __seq_out0
		}
		_converted = __array0
	}
	_result = _converted
	return
}

func (_this *RenderingContext) GetActiveUniforms(program *webgl.Program, uniformIndices []uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := js.Global().Get("Array").New(len(uniformIndices))
	for __idx1, __seq_in1 := range uniformIndices {
		__seq_out1 := __seq_in1
		_p1.SetIndex(__idx1, __seq_out1)
	}
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getActiveUniforms", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetUniformBlockIndex(program *webgl.Program, uniformBlockName string) (_result uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockName
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getUniformBlockIndex", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *RenderingContext) GetActiveUniformBlockParameter(program *webgl.Program, uniformBlockIndex uint, pname uint) (_result js.Value) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_p2 := pname
	_args[2] = _p2
	_end++
	_returned := _this.Value_JS.Call("getActiveUniformBlockParameter", _args[0:_end]...)
	var (
		_converted js.Value // javascript: any _what_return_name
	)
	_converted = _returned
	_result = _converted
	return
}

func (_this *RenderingContext) GetActiveUniformBlockName(program *webgl.Program, uniformBlockIndex uint) (_result *string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getActiveUniformBlockName", _args[0:_end]...)
	var (
		_converted *string // javascript: DOMString _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		__tmp := (_returned).String()
		_converted = &__tmp
	}
	_result = _converted
	return
}

func (_this *RenderingContext) UniformBlockBinding(program *webgl.Program, uniformBlockIndex uint, uniformBlockBinding uint) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := program.JSValue()
	_args[0] = _p0
	_end++
	_p1 := uniformBlockIndex
	_args[1] = _p1
	_end++
	_p2 := uniformBlockBinding
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("uniformBlockBinding", _args[0:_end]...)
	return
}

func (_this *RenderingContext) CreateVertexArray() (_result *VertexArrayObject) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createVertexArray", _args[0:_end]...)
	var (
		_converted *VertexArrayObject // javascript: WebGLVertexArrayObject _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = VertexArrayObjectFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *RenderingContext) DeleteVertexArray(vertexArray *VertexArrayObject) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := vertexArray.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("deleteVertexArray", _args[0:_end]...)
	return
}

func (_this *RenderingContext) IsVertexArray(vertexArray *VertexArrayObject) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := vertexArray.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("isVertexArray", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *RenderingContext) BindVertexArray(array *VertexArrayObject) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := array.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("bindVertexArray", _args[0:_end]...)
	return
}

// interface: WebGLSampler
type Sampler struct {
	webgl.Object
}

// SamplerFromJS is casting a js.Wrapper into Sampler.
func SamplerFromJS(value js.Wrapper) *Sampler {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Sampler{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLSync
type Sync struct {
	webgl.Object
}

// SyncFromJS is casting a js.Wrapper into Sync.
func SyncFromJS(value js.Wrapper) *Sync {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &Sync{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLTransformFeedback
type TransformFeedback struct {
	webgl.Object
}

// TransformFeedbackFromJS is casting a js.Wrapper into TransformFeedback.
func TransformFeedbackFromJS(value js.Wrapper) *TransformFeedback {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &TransformFeedback{}
	ret.Value_JS = input
	return ret
}

// interface: WebGLVertexArrayObject
type VertexArrayObject struct {
	webgl.Object
}

// VertexArrayObjectFromJS is casting a js.Wrapper into VertexArrayObject.
func VertexArrayObjectFromJS(value js.Wrapper) *VertexArrayObject {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &VertexArrayObject{}
	ret.Value_JS = input
	return ret
}
