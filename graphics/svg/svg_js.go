// Code generated by webidl-bind. DO NOT EDIT.

package svg

import "syscall/js"

import (
	"github.com/gowebapi/webapi/css/animations/webani"
	"github.com/gowebapi/webapi/css/cssom"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/html/htmlcommon"
)

// using following types:
// cssom.CSSStyleDeclaration
// cssom.CSSStyleSheet
// dom.Element
// dom.NodeList
// dom.ShadowRoot
// domcore.DOMStringMap
// domcore.DOMTokenList
// domcore.EventHandler
// geometry.DOMMatrix
// geometry.DOMMatrix2DInit
// geometry.DOMPoint
// geometry.DOMPointInit
// geometry.DOMPointReadOnly
// geometry.DOMRect
// geometry.DOMRectReadOnly
// html.FocusOptions
// htmlcommon.OnBeforeUnloadEventHandler
// htmlcommon.OnErrorEventHandler
// typedom.StylePropertyMap
// webani.Animation

// ReleasableApiResource is used to release underlaying
// allocated resources.
type ReleasableApiResource interface {
	Release()
}

type releasableApiResourceList []ReleasableApiResource

func (a releasableApiResourceList) Release() {
	for _, v := range a {
		v.Release()
	}
}

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: SVGBoundingBoxOptions
type SVGBoundingBoxOptions struct {
	Fill    bool
	Stroke  bool
	Markers bool
	Clipped bool
}

// JSValue is allocating a new javasript object and copy
// all values
func (_this *SVGBoundingBoxOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Fill
	out.Set("fill", value0)
	value1 := _this.Stroke
	out.Set("stroke", value1)
	value2 := _this.Markers
	out.Set("markers", value2)
	value3 := _this.Clipped
	out.Set("clipped", value3)
	return out
}

// SVGBoundingBoxOptionsFromJS is allocating a new
// SVGBoundingBoxOptions object and copy all values from
// input javascript object
func SVGBoundingBoxOptionsFromJS(value js.Wrapper) *SVGBoundingBoxOptions {
	input := value.JSValue()
	var out SVGBoundingBoxOptions
	var (
		value0 bool // javascript: boolean {fill Fill fill}
		value1 bool // javascript: boolean {stroke Stroke stroke}
		value2 bool // javascript: boolean {markers Markers markers}
		value3 bool // javascript: boolean {clipped Clipped clipped}
	)
	value0 = (input.Get("fill")).Bool()
	out.Fill = value0
	value1 = (input.Get("stroke")).Bool()
	out.Stroke = value1
	value2 = (input.Get("markers")).Bool()
	out.Markers = value2
	value3 = (input.Get("clipped")).Bool()
	out.Clipped = value3
	return &out
}

// interface: SVGAElement
type SVGAElement struct {
	SVGGraphicsElement
}

// SVGAElementFromJS is casting a js.Wrapper into SVGAElement.
func SVGAElementFromJS(value js.Wrapper) *SVGAElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAElement{}
	ret.Value_JS = input
	return ret
}

// Target returning attribute 'target' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGAElement) Target() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("target")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// Download returning attribute 'download' with
// type string (idl: DOMString).
func (_this *SVGAElement) Download() string {
	var ret string
	value := _this.Value_JS.Get("download")
	ret = (value).String()
	return ret
}

// SetDownload setting attribute 'download' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetDownload(value string) {
	input := value
	_this.Value_JS.Set("download", input)
}

// Ping returning attribute 'ping' with
// type string (idl: USVString).
func (_this *SVGAElement) Ping() string {
	var ret string
	value := _this.Value_JS.Get("ping")
	ret = (value).String()
	return ret
}

// SetPing setting attribute 'ping' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPing(value string) {
	input := value
	_this.Value_JS.Set("ping", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *SVGAElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *SVGAElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Hreflang returning attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *SVGAElement) Hreflang() string {
	var ret string
	value := _this.Value_JS.Get("hreflang")
	ret = (value).String()
	return ret
}

// SetHreflang setting attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetHreflang(value string) {
	input := value
	_this.Value_JS.Set("hreflang", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGAElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *SVGAElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *SVGAElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *SVGAElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *SVGAElement) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *SVGAElement) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// SetProtocol setting attribute 'protocol' with
// type string (idl: USVString).
func (_this *SVGAElement) SetProtocol(value string) {
	input := value
	_this.Value_JS.Set("protocol", input)
}

// Username returning attribute 'username' with
// type string (idl: USVString).
func (_this *SVGAElement) Username() string {
	var ret string
	value := _this.Value_JS.Get("username")
	ret = (value).String()
	return ret
}

// SetUsername setting attribute 'username' with
// type string (idl: USVString).
func (_this *SVGAElement) SetUsername(value string) {
	input := value
	_this.Value_JS.Set("username", input)
}

// Password returning attribute 'password' with
// type string (idl: USVString).
func (_this *SVGAElement) Password() string {
	var ret string
	value := _this.Value_JS.Get("password")
	ret = (value).String()
	return ret
}

// SetPassword setting attribute 'password' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPassword(value string) {
	input := value
	_this.Value_JS.Set("password", input)
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *SVGAElement) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// SetHost setting attribute 'host' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHost(value string) {
	input := value
	_this.Value_JS.Set("host", input)
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *SVGAElement) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// SetHostname setting attribute 'hostname' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHostname(value string) {
	input := value
	_this.Value_JS.Set("hostname", input)
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *SVGAElement) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// SetPort setting attribute 'port' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPort(value string) {
	input := value
	_this.Value_JS.Set("port", input)
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *SVGAElement) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// SetPathname setting attribute 'pathname' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPathname(value string) {
	input := value
	_this.Value_JS.Set("pathname", input)
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *SVGAElement) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// SetSearch setting attribute 'search' with
// type string (idl: USVString).
func (_this *SVGAElement) SetSearch(value string) {
	input := value
	_this.Value_JS.Set("search", input)
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *SVGAElement) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// SetHash setting attribute 'hash' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHash(value string) {
	input := value
	_this.Value_JS.Set("hash", input)
}

// interface: SVGAngle
type SVGAngle struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAngle) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAngleFromJS is casting a js.Wrapper into SVGAngle.
func SVGAngleFromJS(value js.Wrapper) *SVGAngle {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAngle{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_ANGLETYPE_UNKNOWN     int = 0
	SVG_ANGLETYPE_UNSPECIFIED int = 1
	SVG_ANGLETYPE_DEG         int = 2
	SVG_ANGLETYPE_RAD         int = 3
	SVG_ANGLETYPE_GRAD        int = 4
)

// UnitType returning attribute 'unitType' with
// type int (idl: unsigned short).
func (_this *SVGAngle) UnitType() int {
	var ret int
	value := _this.Value_JS.Get("unitType")
	ret = (value).Int()
	return ret
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGAngle) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGAngle) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// ValueInSpecifiedUnits returning attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGAngle) ValueInSpecifiedUnits() float32 {
	var ret float32
	value := _this.Value_JS.Get("valueInSpecifiedUnits")
	ret = (float32)((value).Float())
	return ret
}

// SetValueInSpecifiedUnits setting attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGAngle) SetValueInSpecifiedUnits(value float32) {
	input := value
	_this.Value_JS.Set("valueInSpecifiedUnits", input)
}

// ValueAsString returning attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGAngle) ValueAsString() string {
	var ret string
	value := _this.Value_JS.Get("valueAsString")
	ret = (value).String()
	return ret
}

// SetValueAsString setting attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGAngle) SetValueAsString(value string) {
	input := value
	_this.Value_JS.Set("valueAsString", input)
}

func (_this *SVGAngle) NewValueSpecifiedUnits(unitType int, valueInSpecifiedUnits float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_p1 := valueInSpecifiedUnits
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("newValueSpecifiedUnits", _args[0:_end]...)
	return
}

func (_this *SVGAngle) ConvertToSpecifiedUnits(unitType int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("convertToSpecifiedUnits", _args[0:_end]...)
	return
}

// interface: SVGAnimatedAngle
type SVGAnimatedAngle struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedAngle) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedAngleFromJS is casting a js.Wrapper into SVGAnimatedAngle.
func SVGAnimatedAngleFromJS(value js.Wrapper) *SVGAnimatedAngle {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedAngle{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGAngle (idl: SVGAngle).
func (_this *SVGAnimatedAngle) BaseVal() *SVGAngle {
	var ret *SVGAngle
	value := _this.Value_JS.Get("baseVal")
	ret = SVGAngleFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGAngle (idl: SVGAngle).
func (_this *SVGAnimatedAngle) AnimVal() *SVGAngle {
	var ret *SVGAngle
	value := _this.Value_JS.Get("animVal")
	ret = SVGAngleFromJS(value)
	return ret
}

// interface: SVGAnimatedBoolean
type SVGAnimatedBoolean struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedBoolean) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedBooleanFromJS is casting a js.Wrapper into SVGAnimatedBoolean.
func SVGAnimatedBooleanFromJS(value js.Wrapper) *SVGAnimatedBoolean {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedBoolean{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) BaseVal() bool {
	var ret bool
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Bool()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) SetBaseVal(value bool) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) AnimVal() bool {
	var ret bool
	value := _this.Value_JS.Get("animVal")
	ret = (value).Bool()
	return ret
}

// interface: SVGAnimatedEnumeration
type SVGAnimatedEnumeration struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedEnumeration) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedEnumerationFromJS is casting a js.Wrapper into SVGAnimatedEnumeration.
func SVGAnimatedEnumerationFromJS(value js.Wrapper) *SVGAnimatedEnumeration {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedEnumeration{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) BaseVal() int {
	var ret int
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Int()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) SetBaseVal(value int) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) AnimVal() int {
	var ret int
	value := _this.Value_JS.Get("animVal")
	ret = (value).Int()
	return ret
}

// interface: SVGAnimatedInteger
type SVGAnimatedInteger struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedInteger) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedIntegerFromJS is casting a js.Wrapper into SVGAnimatedInteger.
func SVGAnimatedIntegerFromJS(value js.Wrapper) *SVGAnimatedInteger {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedInteger{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) BaseVal() int {
	var ret int
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Int()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) SetBaseVal(value int) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) AnimVal() int {
	var ret int
	value := _this.Value_JS.Get("animVal")
	ret = (value).Int()
	return ret
}

// interface: SVGAnimatedLength
type SVGAnimatedLength struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedLength) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedLengthFromJS is casting a js.Wrapper into SVGAnimatedLength.
func SVGAnimatedLengthFromJS(value js.Wrapper) *SVGAnimatedLength {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedLength{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGLength (idl: SVGLength).
func (_this *SVGAnimatedLength) BaseVal() *SVGLength {
	var ret *SVGLength
	value := _this.Value_JS.Get("baseVal")
	ret = SVGLengthFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGLength (idl: SVGLength).
func (_this *SVGAnimatedLength) AnimVal() *SVGLength {
	var ret *SVGLength
	value := _this.Value_JS.Get("animVal")
	ret = SVGLengthFromJS(value)
	return ret
}

// interface: SVGAnimatedLengthList
type SVGAnimatedLengthList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedLengthList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedLengthListFromJS is casting a js.Wrapper into SVGAnimatedLengthList.
func SVGAnimatedLengthListFromJS(value js.Wrapper) *SVGAnimatedLengthList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedLengthList{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGLengthList (idl: SVGLengthList).
func (_this *SVGAnimatedLengthList) BaseVal() *SVGLengthList {
	var ret *SVGLengthList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGLengthListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGLengthList (idl: SVGLengthList).
func (_this *SVGAnimatedLengthList) AnimVal() *SVGLengthList {
	var ret *SVGLengthList
	value := _this.Value_JS.Get("animVal")
	ret = SVGLengthListFromJS(value)
	return ret
}

// interface: SVGAnimatedNumber
type SVGAnimatedNumber struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedNumber) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedNumberFromJS is casting a js.Wrapper into SVGAnimatedNumber.
func SVGAnimatedNumberFromJS(value js.Wrapper) *SVGAnimatedNumber {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedNumber{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) BaseVal() float32 {
	var ret float32
	value := _this.Value_JS.Get("baseVal")
	ret = (float32)((value).Float())
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) SetBaseVal(value float32) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) AnimVal() float32 {
	var ret float32
	value := _this.Value_JS.Get("animVal")
	ret = (float32)((value).Float())
	return ret
}

// interface: SVGAnimatedNumberList
type SVGAnimatedNumberList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedNumberList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedNumberListFromJS is casting a js.Wrapper into SVGAnimatedNumberList.
func SVGAnimatedNumberListFromJS(value js.Wrapper) *SVGAnimatedNumberList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedNumberList{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGNumberList (idl: SVGNumberList).
func (_this *SVGAnimatedNumberList) BaseVal() *SVGNumberList {
	var ret *SVGNumberList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGNumberListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGNumberList (idl: SVGNumberList).
func (_this *SVGAnimatedNumberList) AnimVal() *SVGNumberList {
	var ret *SVGNumberList
	value := _this.Value_JS.Get("animVal")
	ret = SVGNumberListFromJS(value)
	return ret
}

// interface: SVGAnimatedPreserveAspectRatio
type SVGAnimatedPreserveAspectRatio struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedPreserveAspectRatio) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedPreserveAspectRatioFromJS is casting a js.Wrapper into SVGAnimatedPreserveAspectRatio.
func SVGAnimatedPreserveAspectRatioFromJS(value js.Wrapper) *SVGAnimatedPreserveAspectRatio {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedPreserveAspectRatio{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGPreserveAspectRatio (idl: SVGPreserveAspectRatio).
func (_this *SVGAnimatedPreserveAspectRatio) BaseVal() *SVGPreserveAspectRatio {
	var ret *SVGPreserveAspectRatio
	value := _this.Value_JS.Get("baseVal")
	ret = SVGPreserveAspectRatioFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGPreserveAspectRatio (idl: SVGPreserveAspectRatio).
func (_this *SVGAnimatedPreserveAspectRatio) AnimVal() *SVGPreserveAspectRatio {
	var ret *SVGPreserveAspectRatio
	value := _this.Value_JS.Get("animVal")
	ret = SVGPreserveAspectRatioFromJS(value)
	return ret
}

// interface: SVGAnimatedRect
type SVGAnimatedRect struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedRect) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedRectFromJS is casting a js.Wrapper into SVGAnimatedRect.
func SVGAnimatedRectFromJS(value js.Wrapper) *SVGAnimatedRect {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedRect{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type geometry.DOMRect (idl: DOMRect).
func (_this *SVGAnimatedRect) BaseVal() *geometry.DOMRect {
	var ret *geometry.DOMRect
	value := _this.Value_JS.Get("baseVal")
	ret = geometry.DOMRectFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type geometry.DOMRectReadOnly (idl: DOMRectReadOnly).
func (_this *SVGAnimatedRect) AnimVal() *geometry.DOMRectReadOnly {
	var ret *geometry.DOMRectReadOnly
	value := _this.Value_JS.Get("animVal")
	ret = geometry.DOMRectReadOnlyFromJS(value)
	return ret
}

// interface: SVGAnimatedString
type SVGAnimatedString struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedString) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedStringFromJS is casting a js.Wrapper into SVGAnimatedString.
func SVGAnimatedStringFromJS(value js.Wrapper) *SVGAnimatedString {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedString{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) BaseVal() string {
	var ret string
	value := _this.Value_JS.Get("baseVal")
	ret = (value).String()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) SetBaseVal(value string) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) AnimVal() string {
	var ret string
	value := _this.Value_JS.Get("animVal")
	ret = (value).String()
	return ret
}

// interface: SVGAnimatedTransformList
type SVGAnimatedTransformList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGAnimatedTransformList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGAnimatedTransformListFromJS is casting a js.Wrapper into SVGAnimatedTransformList.
func SVGAnimatedTransformListFromJS(value js.Wrapper) *SVGAnimatedTransformList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGAnimatedTransformList{}
	ret.Value_JS = input
	return ret
}

// BaseVal returning attribute 'baseVal' with
// type SVGTransformList (idl: SVGTransformList).
func (_this *SVGAnimatedTransformList) BaseVal() *SVGTransformList {
	var ret *SVGTransformList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGTransformListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGTransformList (idl: SVGTransformList).
func (_this *SVGAnimatedTransformList) AnimVal() *SVGTransformList {
	var ret *SVGTransformList
	value := _this.Value_JS.Get("animVal")
	ret = SVGTransformListFromJS(value)
	return ret
}

// interface: SVGCircleElement
type SVGCircleElement struct {
	SVGGeometryElement
}

// SVGCircleElementFromJS is casting a js.Wrapper into SVGCircleElement.
func SVGCircleElementFromJS(value js.Wrapper) *SVGCircleElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGCircleElement{}
	ret.Value_JS = input
	return ret
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// R returning attribute 'r' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) R() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("r")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGDefsElement
type SVGDefsElement struct {
	SVGGraphicsElement
}

// SVGDefsElementFromJS is casting a js.Wrapper into SVGDefsElement.
func SVGDefsElementFromJS(value js.Wrapper) *SVGDefsElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGDefsElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGDescElement
type SVGDescElement struct {
	SVGElement
}

// SVGDescElementFromJS is casting a js.Wrapper into SVGDescElement.
func SVGDescElementFromJS(value js.Wrapper) *SVGDescElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGDescElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGElement
type SVGElement struct {
	dom.Element
}

// SVGElementFromJS is casting a js.Wrapper into SVGElement.
func SVGElementFromJS(value js.Wrapper) *SVGElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGElement{}
	ret.Value_JS = input
	return ret
}

// ClassName returning attribute 'className' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGElement) ClassName() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("className")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// OwnerSVGElement returning attribute 'ownerSVGElement' with
// type SVGSVGElement (idl: SVGSVGElement).
func (_this *SVGElement) OwnerSVGElement() *SVGSVGElement {
	var ret *SVGSVGElement
	value := _this.Value_JS.Get("ownerSVGElement")
	if value.Type() != js.TypeNull {
		ret = SVGSVGElementFromJS(value)
	}
	return ret
}

// ViewportElement returning attribute 'viewportElement' with
// type SVGElement (idl: SVGElement).
func (_this *SVGElement) ViewportElement() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("viewportElement")
	if value.Type() != js.TypeNull {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// Onabort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onabort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnabort setting attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnabort(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onabort", input)
}

// Onauxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onauxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnauxclick setting attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnauxclick(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onauxclick", input)
}

// Onblur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onblur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnblur setting attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnblur(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onblur", input)
}

// Oncancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncancel setting attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncancel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncancel", input)
}

// Oncanplay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncanplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplay setting attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncanplay(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncanplay", input)
}

// Oncanplaythrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncanplaythrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncanplaythrough setting attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncanplaythrough(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncanplaythrough", input)
}

// Onchange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnchange setting attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onchange", input)
}

// Onclick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclick setting attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnclick(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onclick", input)
}

// Onclose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onclose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnclose setting attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnclose(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onclose", input)
}

// Oncontextmenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncontextmenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncontextmenu setting attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncontextmenu(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncontextmenu", input)
}

// Oncuechange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncuechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncuechange setting attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncuechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncuechange", input)
}

// Ondblclick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondblclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndblclick setting attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndblclick(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondblclick", input)
}

// Ondrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrag setting attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndrag(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondrag", input)
}

// Ondragend returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragend setting attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragend", input)
}

// Ondragenter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragenter setting attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragenter(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragenter", input)
}

// Ondragexit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragexit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragexit setting attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragexit(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragexit", input)
}

// Ondragleave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragleave setting attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragleave(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragleave", input)
}

// Ondragover returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragover setting attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragover(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragover", input)
}

// Ondragstart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondragstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndragstart setting attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndragstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondragstart", input)
}

// Ondrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndrop setting attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndrop(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondrop", input)
}

// Ondurationchange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ondurationchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOndurationchange setting attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOndurationchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ondurationchange", input)
}

// Onemptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onemptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnemptied setting attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnemptied(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onemptied", input)
}

// Onended returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onended() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnended setting attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnended(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onended", input)
}

// Onerror returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *SVGElement) Onerror() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// SetOnerror setting attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *SVGElement) SetOnerror(value *htmlcommon.OnErrorEventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onerror", input)
}

// Onfocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onfocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnfocus setting attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnfocus(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onfocus", input)
}

// Onformdata returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onformdata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnformdata setting attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnformdata(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onformdata", input)
}

// Oninput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oninput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninput setting attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOninput(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oninput", input)
}

// Oninvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oninvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOninvalid setting attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOninvalid(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oninvalid", input)
}

// Onkeydown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onkeydown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeydown setting attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnkeydown(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onkeydown", input)
}

// Onkeypress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onkeypress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeypress setting attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnkeypress(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onkeypress", input)
}

// Onkeyup returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onkeyup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnkeyup setting attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnkeyup(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onkeyup", input)
}

// Onload returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnload setting attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnload(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onload", input)
}

// Onloadeddata returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onloadeddata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadeddata setting attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnloadeddata(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onloadeddata", input)
}

// Onloadedmetadata returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onloadedmetadata() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadedmetadata setting attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnloadedmetadata(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onloadedmetadata", input)
}

// Onloadend returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onloadend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadend setting attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnloadend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onloadend", input)
}

// Onloadstart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onloadstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnloadstart setting attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnloadstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onloadstart", input)
}

// Onmousedown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmousedown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousedown setting attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmousedown(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmousedown", input)
}

// Onmouseenter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmouseenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseenter setting attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmouseenter(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmouseenter", input)
}

// Onmouseleave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmouseleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseleave setting attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmouseleave(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmouseleave", input)
}

// Onmousemove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmousemove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmousemove setting attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmousemove(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmousemove", input)
}

// Onmouseout returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmouseout() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseout setting attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmouseout(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmouseout", input)
}

// Onmouseover returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmouseover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseover setting attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmouseover(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmouseover", input)
}

// Onmouseup returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onmouseup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmouseup setting attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnmouseup(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmouseup", input)
}

// Onwheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onwheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwheel setting attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnwheel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onwheel", input)
}

// Onpause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpause setting attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpause(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpause", input)
}

// Onplay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onplay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplay setting attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnplay(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onplay", input)
}

// Onplaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onplaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnplaying setting attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnplaying(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onplaying", input)
}

// Onprogress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onprogress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnprogress setting attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnprogress(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onprogress", input)
}

// Onratechange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onratechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnratechange setting attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnratechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onratechange", input)
}

// Onreset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onreset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnreset setting attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnreset(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onreset", input)
}

// Onresize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onresize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnresize setting attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnresize(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onresize", input)
}

// Onscroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onscroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnscroll setting attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnscroll(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onscroll", input)
}

// Onsecuritypolicyviolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onsecuritypolicyviolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsecuritypolicyviolation setting attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnsecuritypolicyviolation(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onsecuritypolicyviolation", input)
}

// Onseeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onseeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeked setting attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnseeked(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onseeked", input)
}

// Onseeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onseeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnseeking setting attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnseeking(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onseeking", input)
}

// Onselect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onselect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselect setting attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnselect(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselect", input)
}

// Onstalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onstalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnstalled setting attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnstalled(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onstalled", input)
}

// Onsubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onsubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsubmit setting attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnsubmit(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onsubmit", input)
}

// Onsuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onsuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnsuspend setting attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnsuspend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onsuspend", input)
}

// Ontimeupdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontimeupdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntimeupdate setting attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntimeupdate(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontimeupdate", input)
}

// Ontoggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontoggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntoggle setting attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntoggle(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontoggle", input)
}

// Onvolumechange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onvolumechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnvolumechange setting attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnvolumechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onvolumechange", input)
}

// Onwaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onwaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnwaiting setting attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnwaiting(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onwaiting", input)
}

// Ongotpointercapture returning attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ongotpointercapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongotpointercapture")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOngotpointercapture setting attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOngotpointercapture(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ongotpointercapture", input)
}

// Onlostpointercapture returning attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onlostpointercapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlostpointercapture")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnlostpointercapture setting attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnlostpointercapture(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onlostpointercapture", input)
}

// Onpointerdown returning attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerdown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerdown")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerdown setting attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerdown(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerdown", input)
}

// Onpointermove returning attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointermove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointermove")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointermove setting attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointermove(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointermove", input)
}

// Onpointerup returning attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerup() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerup")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerup setting attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerup(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerup", input)
}

// Onpointercancel returning attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointercancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointercancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointercancel setting attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointercancel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointercancel", input)
}

// Onpointerover returning attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerover() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerover")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerover setting attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerover(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerover", input)
}

// Onpointerout returning attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerout() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerout")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerout setting attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerout(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerout", input)
}

// Onpointerenter returning attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerenter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerenter")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerenter setting attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerenter(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerenter", input)
}

// Onpointerleave returning attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpointerleave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerleave")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpointerleave setting attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpointerleave(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpointerleave", input)
}

// Ontouchstart returning attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontouchstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntouchstart setting attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntouchstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontouchstart", input)
}

// Ontouchend returning attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontouchend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntouchend setting attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntouchend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontouchend", input)
}

// Ontouchmove returning attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontouchmove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchmove")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntouchmove setting attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntouchmove(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontouchmove", input)
}

// Ontouchcancel returning attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontouchcancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchcancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntouchcancel setting attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntouchcancel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontouchcancel", input)
}

// Onanimationstart returning attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onanimationstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnanimationstart setting attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnanimationstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onanimationstart", input)
}

// Onanimationiteration returning attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onanimationiteration() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationiteration")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnanimationiteration setting attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnanimationiteration(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onanimationiteration", input)
}

// Onanimationend returning attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onanimationend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnanimationend setting attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnanimationend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onanimationend", input)
}

// Onanimationcancel returning attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onanimationcancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationcancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnanimationcancel setting attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnanimationcancel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onanimationcancel", input)
}

// Ontransitionrun returning attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontransitionrun() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionrun")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntransitionrun setting attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntransitionrun(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontransitionrun", input)
}

// Ontransitionstart returning attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontransitionstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntransitionstart setting attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntransitionstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontransitionstart", input)
}

// Ontransitionend returning attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontransitionend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionend")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntransitionend setting attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntransitionend(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontransitionend", input)
}

// Ontransitioncancel returning attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Ontransitioncancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitioncancel")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOntransitioncancel setting attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOntransitioncancel(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ontransitioncancel", input)
}

// Onselectstart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onselectstart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselectstart setting attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnselectstart(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselectstart", input)
}

// Onselectionchange returning attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onselectionchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectionchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnselectionchange setting attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnselectionchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onselectionchange", input)
}

// Oncopy returning attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncopy() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncopy")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncopy setting attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncopy(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncopy", input)
}

// Oncut returning attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Oncut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncut")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOncut setting attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOncut(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("oncut", input)
}

// Onpaste returning attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) Onpaste() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaste")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpaste setting attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) SetOnpaste(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpaste", input)
}

// CorrespondingElement returning attribute 'correspondingElement' with
// type SVGElement (idl: SVGElement).
func (_this *SVGElement) CorrespondingElement() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("correspondingElement")
	if value.Type() != js.TypeNull {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// CorrespondingUseElement returning attribute 'correspondingUseElement' with
// type SVGUseElement (idl: SVGUseElement).
func (_this *SVGElement) CorrespondingUseElement() *SVGUseElement {
	var ret *SVGUseElement
	value := _this.Value_JS.Get("correspondingUseElement")
	if value.Type() != js.TypeNull {
		ret = SVGUseElementFromJS(value)
	}
	return ret
}

// Dataset returning attribute 'dataset' with
// type domcore.DOMStringMap (idl: DOMStringMap).
func (_this *SVGElement) Dataset() *domcore.DOMStringMap {
	var ret *domcore.DOMStringMap
	value := _this.Value_JS.Get("dataset")
	ret = domcore.DOMStringMapFromJS(value)
	return ret
}

// Nonce returning attribute 'nonce' with
// type string (idl: DOMString).
func (_this *SVGElement) Nonce() string {
	var ret string
	value := _this.Value_JS.Get("nonce")
	ret = (value).String()
	return ret
}

// SetNonce setting attribute 'nonce' with
// type string (idl: DOMString).
func (_this *SVGElement) SetNonce(value string) {
	input := value
	_this.Value_JS.Set("nonce", input)
}

// TabIndex returning attribute 'tabIndex' with
// type int (idl: long).
func (_this *SVGElement) TabIndex() int {
	var ret int
	value := _this.Value_JS.Get("tabIndex")
	ret = (value).Int()
	return ret
}

// SetTabIndex setting attribute 'tabIndex' with
// type int (idl: long).
func (_this *SVGElement) SetTabIndex(value int) {
	input := value
	_this.Value_JS.Set("tabIndex", input)
}

// Style returning attribute 'style' with
// type cssom.CSSStyleDeclaration (idl: CSSStyleDeclaration).
func (_this *SVGElement) Style() *cssom.CSSStyleDeclaration {
	var ret *cssom.CSSStyleDeclaration
	value := _this.Value_JS.Get("style")
	ret = cssom.CSSStyleDeclarationFromJS(value)
	return ret
}

// AttributeStyleMap returning attribute 'attributeStyleMap' with
// type typedom.StylePropertyMap (idl: StylePropertyMap).
func (_this *SVGElement) AttributeStyleMap() *typedom.StylePropertyMap {
	var ret *typedom.StylePropertyMap
	value := _this.Value_JS.Get("attributeStyleMap")
	ret = typedom.StylePropertyMapFromJS(value)
	return ret
}

func (_this *SVGElement) Focus(options *html.FocusOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("focus", _args[0:_end]...)
	return
}

func (_this *SVGElement) Blur() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("blur", _args[0:_end]...)
	return
}

// interface: SVGEllipseElement
type SVGEllipseElement struct {
	SVGGeometryElement
}

// SVGEllipseElementFromJS is casting a js.Wrapper into SVGEllipseElement.
func SVGEllipseElementFromJS(value js.Wrapper) *SVGEllipseElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGEllipseElement{}
	ret.Value_JS = input
	return ret
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Rx returning attribute 'rx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Rx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("rx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Ry returning attribute 'ry' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Ry() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("ry")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGForeignObjectElement
type SVGForeignObjectElement struct {
	SVGGraphicsElement
}

// SVGForeignObjectElementFromJS is casting a js.Wrapper into SVGForeignObjectElement.
func SVGForeignObjectElementFromJS(value js.Wrapper) *SVGForeignObjectElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGForeignObjectElement{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGGElement
type SVGGElement struct {
	SVGGraphicsElement
}

// SVGGElementFromJS is casting a js.Wrapper into SVGGElement.
func SVGGElementFromJS(value js.Wrapper) *SVGGElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGGElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGGeometryElement
type SVGGeometryElement struct {
	SVGGraphicsElement
}

// SVGGeometryElementFromJS is casting a js.Wrapper into SVGGeometryElement.
func SVGGeometryElementFromJS(value js.Wrapper) *SVGGeometryElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGGeometryElement{}
	ret.Value_JS = input
	return ret
}

// PathLength returning attribute 'pathLength' with
// type SVGAnimatedNumber (idl: SVGAnimatedNumber).
func (_this *SVGGeometryElement) PathLength() *SVGAnimatedNumber {
	var ret *SVGAnimatedNumber
	value := _this.Value_JS.Get("pathLength")
	ret = SVGAnimatedNumberFromJS(value)
	return ret
}

func (_this *SVGGeometryElement) IsPointInFill(point *geometry.DOMPointInit) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInFill", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGGeometryElement) IsPointInStroke(point *geometry.DOMPointInit) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGGeometryElement) GetTotalLength() (_result float32) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTotalLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGGeometryElement) GetPointAtLength(distance float32) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := distance
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getPointAtLength", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

// interface: SVGGradientElement
type SVGGradientElement struct {
	SVGElement
}

// SVGGradientElementFromJS is casting a js.Wrapper into SVGGradientElement.
func SVGGradientElementFromJS(value js.Wrapper) *SVGGradientElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGGradientElement{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_SPREADMETHOD_UNKNOWN int = 0
	SVG_SPREADMETHOD_PAD     int = 1
	SVG_SPREADMETHOD_REFLECT int = 2
	SVG_SPREADMETHOD_REPEAT  int = 3
)

// GradientUnits returning attribute 'gradientUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGGradientElement) GradientUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("gradientUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// GradientTransform returning attribute 'gradientTransform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGGradientElement) GradientTransform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("gradientTransform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// SpreadMethod returning attribute 'spreadMethod' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGGradientElement) SpreadMethod() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("spreadMethod")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGGradientElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// interface: SVGGraphicsElement
type SVGGraphicsElement struct {
	SVGElement
}

// SVGGraphicsElementFromJS is casting a js.Wrapper into SVGGraphicsElement.
func SVGGraphicsElementFromJS(value js.Wrapper) *SVGGraphicsElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGGraphicsElement{}
	ret.Value_JS = input
	return ret
}

// Transform returning attribute 'transform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGGraphicsElement) Transform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("transform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// RequiredExtensions returning attribute 'requiredExtensions' with
// type SVGStringList (idl: SVGStringList).
func (_this *SVGGraphicsElement) RequiredExtensions() *SVGStringList {
	var ret *SVGStringList
	value := _this.Value_JS.Get("requiredExtensions")
	ret = SVGStringListFromJS(value)
	return ret
}

// SystemLanguage returning attribute 'systemLanguage' with
// type SVGStringList (idl: SVGStringList).
func (_this *SVGGraphicsElement) SystemLanguage() *SVGStringList {
	var ret *SVGStringList
	value := _this.Value_JS.Get("systemLanguage")
	ret = SVGStringListFromJS(value)
	return ret
}

func (_this *SVGGraphicsElement) GetBBox(options *SVGBoundingBoxOptions) (_result *geometry.DOMRect) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getBBox", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGGraphicsElement) GetCTM() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCTM", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = geometry.DOMMatrixFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *SVGGraphicsElement) GetScreenCTM() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getScreenCTM", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = geometry.DOMMatrixFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: SVGImageElement
type SVGImageElement struct {
	SVGGraphicsElement
}

// SVGImageElementFromJS is casting a js.Wrapper into SVGImageElement.
func SVGImageElementFromJS(value js.Wrapper) *SVGImageElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGImageElement{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGImageElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGImageElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGImageElement) SetCrossOrigin(value *string) {
	input := value
	_this.Value_JS.Set("crossOrigin", input)
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGImageElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// interface: SVGLength
type SVGLength struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGLength) JSValue() js.Value {
	return _this.Value_JS
}

// SVGLengthFromJS is casting a js.Wrapper into SVGLength.
func SVGLengthFromJS(value js.Wrapper) *SVGLength {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGLength{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_LENGTHTYPE_UNKNOWN    int = 0
	SVG_LENGTHTYPE_NUMBER     int = 1
	SVG_LENGTHTYPE_PERCENTAGE int = 2
	SVG_LENGTHTYPE_EMS        int = 3
	SVG_LENGTHTYPE_EXS        int = 4
	SVG_LENGTHTYPE_PX         int = 5
	SVG_LENGTHTYPE_CM         int = 6
	SVG_LENGTHTYPE_MM         int = 7
	SVG_LENGTHTYPE_IN         int = 8
	SVG_LENGTHTYPE_PT         int = 9
	SVG_LENGTHTYPE_PC         int = 10
)

// UnitType returning attribute 'unitType' with
// type int (idl: unsigned short).
func (_this *SVGLength) UnitType() int {
	var ret int
	value := _this.Value_JS.Get("unitType")
	ret = (value).Int()
	return ret
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGLength) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGLength) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// ValueInSpecifiedUnits returning attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGLength) ValueInSpecifiedUnits() float32 {
	var ret float32
	value := _this.Value_JS.Get("valueInSpecifiedUnits")
	ret = (float32)((value).Float())
	return ret
}

// SetValueInSpecifiedUnits setting attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGLength) SetValueInSpecifiedUnits(value float32) {
	input := value
	_this.Value_JS.Set("valueInSpecifiedUnits", input)
}

// ValueAsString returning attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGLength) ValueAsString() string {
	var ret string
	value := _this.Value_JS.Get("valueAsString")
	ret = (value).String()
	return ret
}

// SetValueAsString setting attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGLength) SetValueAsString(value string) {
	input := value
	_this.Value_JS.Set("valueAsString", input)
}

func (_this *SVGLength) NewValueSpecifiedUnits(unitType int, valueInSpecifiedUnits float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_p1 := valueInSpecifiedUnits
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("newValueSpecifiedUnits", _args[0:_end]...)
	return
}

func (_this *SVGLength) ConvertToSpecifiedUnits(unitType int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("convertToSpecifiedUnits", _args[0:_end]...)
	return
}

// interface: SVGLengthList
type SVGLengthList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGLengthList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGLengthListFromJS is casting a js.Wrapper into SVGLengthList.
func SVGLengthListFromJS(value js.Wrapper) *SVGLengthList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGLengthList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGLengthList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGLengthList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGLengthList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGLengthList) Initialize(newItem *SVGLength) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) GetItem(index uint) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) InsertItemBefore(newItem *SVGLength, index uint) (_result *SVGLength) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) ReplaceItem(newItem *SVGLength, index uint) (_result *SVGLength) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) RemoveItem(index uint) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) AppendItem(newItem *SVGLength) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

// interface: SVGLineElement
type SVGLineElement struct {
	SVGGeometryElement
}

// SVGLineElementFromJS is casting a js.Wrapper into SVGLineElement.
func SVGLineElementFromJS(value js.Wrapper) *SVGLineElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGLineElement{}
	ret.Value_JS = input
	return ret
}

// X1 returning attribute 'x1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) X1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y1 returning attribute 'y1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) Y1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// X2 returning attribute 'x2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) X2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y2 returning attribute 'y2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) Y2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGLinearGradientElement
type SVGLinearGradientElement struct {
	SVGGradientElement
}

// SVGLinearGradientElementFromJS is casting a js.Wrapper into SVGLinearGradientElement.
func SVGLinearGradientElementFromJS(value js.Wrapper) *SVGLinearGradientElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGLinearGradientElement{}
	ret.Value_JS = input
	return ret
}

// X1 returning attribute 'x1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) X1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y1 returning attribute 'y1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) Y1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// X2 returning attribute 'x2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) X2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y2 returning attribute 'y2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) Y2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGMarkerElement
type SVGMarkerElement struct {
	SVGElement
}

// SVGMarkerElementFromJS is casting a js.Wrapper into SVGMarkerElement.
func SVGMarkerElementFromJS(value js.Wrapper) *SVGMarkerElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGMarkerElement{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_MARKERUNITS_UNKNOWN        int = 0
	SVG_MARKERUNITS_USERSPACEONUSE int = 1
	SVG_MARKERUNITS_STROKEWIDTH    int = 2
	SVG_MARKER_ORIENT_UNKNOWN      int = 0
	SVG_MARKER_ORIENT_AUTO         int = 1
	SVG_MARKER_ORIENT_ANGLE        int = 2
)

// RefX returning attribute 'refX' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) RefX() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("refX")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// RefY returning attribute 'refY' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) RefY() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("refY")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// MarkerUnits returning attribute 'markerUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGMarkerElement) MarkerUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("markerUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// MarkerWidth returning attribute 'markerWidth' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) MarkerWidth() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("markerWidth")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// MarkerHeight returning attribute 'markerHeight' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) MarkerHeight() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("markerHeight")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// OrientType returning attribute 'orientType' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGMarkerElement) OrientType() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("orientType")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// OrientAngle returning attribute 'orientAngle' with
// type SVGAnimatedAngle (idl: SVGAnimatedAngle).
func (_this *SVGMarkerElement) OrientAngle() *SVGAnimatedAngle {
	var ret *SVGAnimatedAngle
	value := _this.Value_JS.Get("orientAngle")
	ret = SVGAnimatedAngleFromJS(value)
	return ret
}

// Orient returning attribute 'orient' with
// type string (idl: DOMString).
func (_this *SVGMarkerElement) Orient() string {
	var ret string
	value := _this.Value_JS.Get("orient")
	ret = (value).String()
	return ret
}

// SetOrient setting attribute 'orient' with
// type string (idl: DOMString).
func (_this *SVGMarkerElement) SetOrient(value string) {
	input := value
	_this.Value_JS.Set("orient", input)
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGMarkerElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGMarkerElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

func (_this *SVGMarkerElement) SetOrientToAuto() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("setOrientToAuto", _args[0:_end]...)
	return
}

func (_this *SVGMarkerElement) SetOrientToAngle(angle *SVGAngle) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setOrientToAngle", _args[0:_end]...)
	return
}

// interface: SVGMetadataElement
type SVGMetadataElement struct {
	SVGElement
}

// SVGMetadataElementFromJS is casting a js.Wrapper into SVGMetadataElement.
func SVGMetadataElementFromJS(value js.Wrapper) *SVGMetadataElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGMetadataElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGNumber
type SVGNumber struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGNumber) JSValue() js.Value {
	return _this.Value_JS
}

// SVGNumberFromJS is casting a js.Wrapper into SVGNumber.
func SVGNumberFromJS(value js.Wrapper) *SVGNumber {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGNumber{}
	ret.Value_JS = input
	return ret
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGNumber) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGNumber) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// interface: SVGNumberList
type SVGNumberList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGNumberList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGNumberListFromJS is casting a js.Wrapper into SVGNumberList.
func SVGNumberListFromJS(value js.Wrapper) *SVGNumberList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGNumberList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGNumberList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGNumberList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGNumberList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGNumberList) Initialize(newItem *SVGNumber) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) GetItem(index uint) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) InsertItemBefore(newItem *SVGNumber, index uint) (_result *SVGNumber) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) ReplaceItem(newItem *SVGNumber, index uint) (_result *SVGNumber) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) RemoveItem(index uint) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) AppendItem(newItem *SVGNumber) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

// interface: SVGPathElement
type SVGPathElement struct {
	SVGGeometryElement
}

// SVGPathElementFromJS is casting a js.Wrapper into SVGPathElement.
func SVGPathElementFromJS(value js.Wrapper) *SVGPathElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPathElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGPatternElement
type SVGPatternElement struct {
	SVGElement
}

// SVGPatternElementFromJS is casting a js.Wrapper into SVGPatternElement.
func SVGPatternElementFromJS(value js.Wrapper) *SVGPatternElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPatternElement{}
	ret.Value_JS = input
	return ret
}

// PatternUnits returning attribute 'patternUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGPatternElement) PatternUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("patternUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// PatternContentUnits returning attribute 'patternContentUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGPatternElement) PatternContentUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("patternContentUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// PatternTransform returning attribute 'patternTransform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGPatternElement) PatternTransform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("patternTransform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGPatternElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGPatternElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGPatternElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// interface: SVGPointList
type SVGPointList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGPointList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGPointListFromJS is casting a js.Wrapper into SVGPointList.
func SVGPointListFromJS(value js.Wrapper) *SVGPointList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPointList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGPointList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGPointList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGPointList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGPointList) Initialize(newItem *geometry.DOMPoint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) GetItem(index uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) InsertItemBefore(newItem *geometry.DOMPoint, index uint) (_result *geometry.DOMPoint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) ReplaceItem(newItem *geometry.DOMPoint, index uint) (_result *geometry.DOMPoint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) RemoveItem(index uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) AppendItem(newItem *geometry.DOMPoint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

// interface: SVGPolygonElement
type SVGPolygonElement struct {
	SVGGeometryElement
}

// SVGPolygonElementFromJS is casting a js.Wrapper into SVGPolygonElement.
func SVGPolygonElementFromJS(value js.Wrapper) *SVGPolygonElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPolygonElement{}
	ret.Value_JS = input
	return ret
}

// Points returning attribute 'points' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolygonElement) Points() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("points")
	ret = SVGPointListFromJS(value)
	return ret
}

// AnimatedPoints returning attribute 'animatedPoints' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolygonElement) AnimatedPoints() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("animatedPoints")
	ret = SVGPointListFromJS(value)
	return ret
}

// interface: SVGPolylineElement
type SVGPolylineElement struct {
	SVGGeometryElement
}

// SVGPolylineElementFromJS is casting a js.Wrapper into SVGPolylineElement.
func SVGPolylineElementFromJS(value js.Wrapper) *SVGPolylineElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPolylineElement{}
	ret.Value_JS = input
	return ret
}

// Points returning attribute 'points' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolylineElement) Points() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("points")
	ret = SVGPointListFromJS(value)
	return ret
}

// AnimatedPoints returning attribute 'animatedPoints' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolylineElement) AnimatedPoints() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("animatedPoints")
	ret = SVGPointListFromJS(value)
	return ret
}

// interface: SVGPreserveAspectRatio
type SVGPreserveAspectRatio struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGPreserveAspectRatio) JSValue() js.Value {
	return _this.Value_JS
}

// SVGPreserveAspectRatioFromJS is casting a js.Wrapper into SVGPreserveAspectRatio.
func SVGPreserveAspectRatioFromJS(value js.Wrapper) *SVGPreserveAspectRatio {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGPreserveAspectRatio{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_PRESERVEASPECTRATIO_UNKNOWN  int = 0
	SVG_PRESERVEASPECTRATIO_NONE     int = 1
	SVG_PRESERVEASPECTRATIO_XMINYMIN int = 2
	SVG_PRESERVEASPECTRATIO_XMIDYMIN int = 3
	SVG_PRESERVEASPECTRATIO_XMAXYMIN int = 4
	SVG_PRESERVEASPECTRATIO_XMINYMID int = 5
	SVG_PRESERVEASPECTRATIO_XMIDYMID int = 6
	SVG_PRESERVEASPECTRATIO_XMAXYMID int = 7
	SVG_PRESERVEASPECTRATIO_XMINYMAX int = 8
	SVG_PRESERVEASPECTRATIO_XMIDYMAX int = 9
	SVG_PRESERVEASPECTRATIO_XMAXYMAX int = 10
	SVG_MEETORSLICE_UNKNOWN          int = 0
	SVG_MEETORSLICE_MEET             int = 1
	SVG_MEETORSLICE_SLICE            int = 2
)

// Align returning attribute 'align' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) Align() int {
	var ret int
	value := _this.Value_JS.Get("align")
	ret = (value).Int()
	return ret
}

// SetAlign setting attribute 'align' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) SetAlign(value int) {
	input := value
	_this.Value_JS.Set("align", input)
}

// MeetOrSlice returning attribute 'meetOrSlice' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) MeetOrSlice() int {
	var ret int
	value := _this.Value_JS.Get("meetOrSlice")
	ret = (value).Int()
	return ret
}

// SetMeetOrSlice setting attribute 'meetOrSlice' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) SetMeetOrSlice(value int) {
	input := value
	_this.Value_JS.Set("meetOrSlice", input)
}

// interface: SVGRadialGradientElement
type SVGRadialGradientElement struct {
	SVGGradientElement
}

// SVGRadialGradientElementFromJS is casting a js.Wrapper into SVGRadialGradientElement.
func SVGRadialGradientElementFromJS(value js.Wrapper) *SVGRadialGradientElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGRadialGradientElement{}
	ret.Value_JS = input
	return ret
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// R returning attribute 'r' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) R() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("r")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fx returning attribute 'fx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fy returning attribute 'fy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fr returning attribute 'fr' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fr() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fr")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGRectElement
type SVGRectElement struct {
	SVGGeometryElement
}

// SVGRectElementFromJS is casting a js.Wrapper into SVGRectElement.
func SVGRectElementFromJS(value js.Wrapper) *SVGRectElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGRectElement{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Rx returning attribute 'rx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Rx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("rx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Ry returning attribute 'ry' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Ry() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("ry")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// interface: SVGSVGElement
type SVGSVGElement struct {
	SVGGraphicsElement
}

// SVGSVGElementFromJS is casting a js.Wrapper into SVGSVGElement.
func SVGSVGElementFromJS(value js.Wrapper) *SVGSVGElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGSVGElement{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_ZOOMANDPAN_UNKNOWN int = 0
	SVG_ZOOMANDPAN_DISABLE int = 1
	SVG_ZOOMANDPAN_MAGNIFY int = 2
)

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// CurrentScale returning attribute 'currentScale' with
// type float32 (idl: float).
func (_this *SVGSVGElement) CurrentScale() float32 {
	var ret float32
	value := _this.Value_JS.Get("currentScale")
	ret = (float32)((value).Float())
	return ret
}

// SetCurrentScale setting attribute 'currentScale' with
// type float32 (idl: float).
func (_this *SVGSVGElement) SetCurrentScale(value float32) {
	input := value
	_this.Value_JS.Set("currentScale", input)
}

// CurrentTranslate returning attribute 'currentTranslate' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *SVGSVGElement) CurrentTranslate() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("currentTranslate")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGSVGElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGSVGElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// ZoomAndPan returning attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGSVGElement) ZoomAndPan() int {
	var ret int
	value := _this.Value_JS.Get("zoomAndPan")
	ret = (value).Int()
	return ret
}

// SetZoomAndPan setting attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGSVGElement) SetZoomAndPan(value int) {
	input := value
	_this.Value_JS.Set("zoomAndPan", input)
}

// Onafterprint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onafterprint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnafterprint setting attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnafterprint(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onafterprint", input)
}

// Onbeforeprint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onbeforeprint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnbeforeprint setting attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnbeforeprint(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbeforeprint", input)
}

// Onbeforeunload returning attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *SVGSVGElement) Onbeforeunload() htmlcommon.OnBeforeUnloadEventHandlerFunc {
	var ret htmlcommon.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull {
		ret = htmlcommon.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// SetOnbeforeunload setting attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *SVGSVGElement) SetOnbeforeunload(value *htmlcommon.OnBeforeUnloadEventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onbeforeunload", input)
}

// Onhashchange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onhashchange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnhashchange setting attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnhashchange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onhashchange", input)
}

// Onlanguagechange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onlanguagechange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnlanguagechange setting attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnlanguagechange(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onlanguagechange", input)
}

// Onmessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onmessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessage setting attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnmessage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessage", input)
}

// Onmessageerror returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onmessageerror() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnmessageerror setting attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnmessageerror(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onmessageerror", input)
}

// Onoffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onoffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnoffline setting attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnoffline(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onoffline", input)
}

// Ononline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Ononline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnonline setting attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnonline(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("ononline", input)
}

// Onpagehide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onpagehide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpagehide setting attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnpagehide(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpagehide", input)
}

// Onpageshow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onpageshow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpageshow setting attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnpageshow(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpageshow", input)
}

// Onpopstate returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onpopstate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnpopstate setting attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnpopstate(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onpopstate", input)
}

// Onrejectionhandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onrejectionhandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnrejectionhandled setting attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnrejectionhandled(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onrejectionhandled", input)
}

// Onstorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onstorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnstorage setting attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnstorage(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onstorage", input)
}

// Onunhandledrejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onunhandledrejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunhandledrejection setting attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnunhandledrejection(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onunhandledrejection", input)
}

// Onunload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) Onunload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// SetOnunload setting attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) SetOnunload(value *domcore.EventHandler) {
	var __callback0 js.Value
	if value != nil {
		__callback0 = (*value).Value
	} else {
		__callback0 = js.Null()
	}
	input := __callback0
	_this.Value_JS.Set("onunload", input)
}

func (_this *SVGSVGElement) GetIntersectionList(rect *geometry.DOMRectReadOnly, referenceElement *SVGElement) (_result *dom.NodeList) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := referenceElement.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getIntersectionList", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) GetEnclosureList(rect *geometry.DOMRectReadOnly, referenceElement *SVGElement) (_result *dom.NodeList) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := referenceElement.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getEnclosureList", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CheckIntersection(element *SVGElement, rect *geometry.DOMRectReadOnly) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_p1 := rect.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("checkIntersection", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGSVGElement) CheckEnclosure(element *SVGElement, rect *geometry.DOMRectReadOnly) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_p1 := rect.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("checkEnclosure", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGSVGElement) DeselectAll() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deselectAll", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) CreateSVGNumber() (_result *SVGNumber) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGNumber", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGLength() (_result *SVGLength) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGLength", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGAngle() (_result *SVGAngle) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGAngle", _args[0:_end]...)
	var (
		_converted *SVGAngle // javascript: SVGAngle _what_return_name
	)
	_converted = SVGAngleFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGPoint() (_result *geometry.DOMPoint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGPoint", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGMatrix() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGMatrix", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = geometry.DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGRect() (_result *geometry.DOMRect) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGRect", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGTransform() (_result *SVGTransform) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGTransform", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGTransformFromMatrix(matrix *geometry.DOMMatrix2DInit) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createSVGTransformFromMatrix", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) GetElementById(elementId string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementById", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) SuspendRedraw(maxWaitMilliseconds uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := maxWaitMilliseconds
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("suspendRedraw", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *SVGSVGElement) UnsuspendRedraw(suspendHandleID uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := suspendHandleID
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("unsuspendRedraw", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) UnsuspendRedrawAll() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("unsuspendRedrawAll", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) ForceRedraw() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("forceRedraw", _args[0:_end]...)
	return
}

// interface: SVGScriptElement
type SVGScriptElement struct {
	SVGElement
}

// SVGScriptElementFromJS is casting a js.Wrapper into SVGScriptElement.
func SVGScriptElementFromJS(value js.Wrapper) *SVGScriptElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGScriptElement{}
	ret.Value_JS = input
	return ret
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) SetCrossOrigin(value *string) {
	input := value
	_this.Value_JS.Set("crossOrigin", input)
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGScriptElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// interface: SVGStopElement
type SVGStopElement struct {
	SVGElement
}

// SVGStopElementFromJS is casting a js.Wrapper into SVGStopElement.
func SVGStopElementFromJS(value js.Wrapper) *SVGStopElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGStopElement{}
	ret.Value_JS = input
	return ret
}

// Offset returning attribute 'offset' with
// type SVGAnimatedNumber (idl: SVGAnimatedNumber).
func (_this *SVGStopElement) Offset() *SVGAnimatedNumber {
	var ret *SVGAnimatedNumber
	value := _this.Value_JS.Get("offset")
	ret = SVGAnimatedNumberFromJS(value)
	return ret
}

// interface: SVGStringList
type SVGStringList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGStringList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGStringListFromJS is casting a js.Wrapper into SVGStringList.
func SVGStringListFromJS(value js.Wrapper) *SVGStringList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGStringList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGStringList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGStringList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGStringList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGStringList) Initialize(newItem string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) GetItem(index uint) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) InsertItemBefore(newItem string, index uint) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) ReplaceItem(newItem string, index uint) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) RemoveItem(index uint) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) AppendItem(newItem string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

// interface: SVGStyleElement
type SVGStyleElement struct {
	SVGElement
}

// SVGStyleElementFromJS is casting a js.Wrapper into SVGStyleElement.
func SVGStyleElementFromJS(value js.Wrapper) *SVGStyleElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGStyleElement{}
	ret.Value_JS = input
	return ret
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Media returning attribute 'media' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Media() string {
	var ret string
	value := _this.Value_JS.Get("media")
	ret = (value).String()
	return ret
}

// SetMedia setting attribute 'media' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetMedia(value string) {
	input := value
	_this.Value_JS.Set("media", input)
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Sheet returning attribute 'sheet' with
// type cssom.CSSStyleSheet (idl: CSSStyleSheet).
func (_this *SVGStyleElement) Sheet() *cssom.CSSStyleSheet {
	var ret *cssom.CSSStyleSheet
	value := _this.Value_JS.Get("sheet")
	if value.Type() != js.TypeNull {
		ret = cssom.CSSStyleSheetFromJS(value)
	}
	return ret
}

// interface: SVGSwitchElement
type SVGSwitchElement struct {
	SVGGraphicsElement
}

// SVGSwitchElementFromJS is casting a js.Wrapper into SVGSwitchElement.
func SVGSwitchElementFromJS(value js.Wrapper) *SVGSwitchElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGSwitchElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGSymbolElement
type SVGSymbolElement struct {
	SVGGraphicsElement
}

// SVGSymbolElementFromJS is casting a js.Wrapper into SVGSymbolElement.
func SVGSymbolElementFromJS(value js.Wrapper) *SVGSymbolElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGSymbolElement{}
	ret.Value_JS = input
	return ret
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGSymbolElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGSymbolElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// interface: SVGTSpanElement
type SVGTSpanElement struct {
	SVGTextPositioningElement
}

// SVGTSpanElementFromJS is casting a js.Wrapper into SVGTSpanElement.
func SVGTSpanElementFromJS(value js.Wrapper) *SVGTSpanElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTSpanElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGTextContentElement
type SVGTextContentElement struct {
	SVGGraphicsElement
}

// SVGTextContentElementFromJS is casting a js.Wrapper into SVGTextContentElement.
func SVGTextContentElementFromJS(value js.Wrapper) *SVGTextContentElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTextContentElement{}
	ret.Value_JS = input
	return ret
}

const (
	LENGTHADJUST_UNKNOWN          int = 0
	LENGTHADJUST_SPACING          int = 1
	LENGTHADJUST_SPACINGANDGLYPHS int = 2
)

// TextLength returning attribute 'textLength' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGTextContentElement) TextLength() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("textLength")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// LengthAdjust returning attribute 'lengthAdjust' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextContentElement) LengthAdjust() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("lengthAdjust")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

func (_this *SVGTextContentElement) GetNumberOfChars() (_result int) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getNumberOfChars", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetComputedTextLength() (_result float32) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getComputedTextLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetSubStringLength(charnum uint, nchars uint) (_result float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_p1 := nchars
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSubStringLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetStartPositionOfChar(charnum uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getStartPositionOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetEndPositionOfChar(charnum uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getEndPositionOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetExtentOfChar(charnum uint) (_result *geometry.DOMRect) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtentOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetRotationOfChar(charnum uint) (_result float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getRotationOfChar", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetCharNumAtPosition(point *geometry.DOMPointInit) (_result int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getCharNumAtPosition", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *SVGTextContentElement) SelectSubString(charnum uint, nchars uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_p1 := nchars
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("selectSubString", _args[0:_end]...)
	return
}

// interface: SVGTextElement
type SVGTextElement struct {
	SVGTextPositioningElement
}

// SVGTextElementFromJS is casting a js.Wrapper into SVGTextElement.
func SVGTextElementFromJS(value js.Wrapper) *SVGTextElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTextElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGTextPathElement
type SVGTextPathElement struct {
	SVGTextContentElement
}

// SVGTextPathElementFromJS is casting a js.Wrapper into SVGTextPathElement.
func SVGTextPathElementFromJS(value js.Wrapper) *SVGTextPathElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTextPathElement{}
	ret.Value_JS = input
	return ret
}

const (
	TEXTPATH_METHODTYPE_UNKNOWN  int = 0
	TEXTPATH_METHODTYPE_ALIGN    int = 1
	TEXTPATH_METHODTYPE_STRETCH  int = 2
	TEXTPATH_SPACINGTYPE_UNKNOWN int = 0
	TEXTPATH_SPACINGTYPE_AUTO    int = 1
	TEXTPATH_SPACINGTYPE_EXACT   int = 2
)

// StartOffset returning attribute 'startOffset' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGTextPathElement) StartOffset() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("startOffset")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Method returning attribute 'method' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextPathElement) Method() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("method")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Spacing returning attribute 'spacing' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextPathElement) Spacing() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("spacing")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGTextPathElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// interface: SVGTextPositioningElement
type SVGTextPositioningElement struct {
	SVGTextContentElement
}

// SVGTextPositioningElementFromJS is casting a js.Wrapper into SVGTextPositioningElement.
func SVGTextPositioningElementFromJS(value js.Wrapper) *SVGTextPositioningElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTextPositioningElement{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) X() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Y() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Dx returning attribute 'dx' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Dx() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("dx")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Dy returning attribute 'dy' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Dy() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("dy")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Rotate returning attribute 'rotate' with
// type SVGAnimatedNumberList (idl: SVGAnimatedNumberList).
func (_this *SVGTextPositioningElement) Rotate() *SVGAnimatedNumberList {
	var ret *SVGAnimatedNumberList
	value := _this.Value_JS.Get("rotate")
	ret = SVGAnimatedNumberListFromJS(value)
	return ret
}

// interface: SVGTitleElement
type SVGTitleElement struct {
	SVGElement
}

// SVGTitleElementFromJS is casting a js.Wrapper into SVGTitleElement.
func SVGTitleElementFromJS(value js.Wrapper) *SVGTitleElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTitleElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGTransform
type SVGTransform struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGTransform) JSValue() js.Value {
	return _this.Value_JS
}

// SVGTransformFromJS is casting a js.Wrapper into SVGTransform.
func SVGTransformFromJS(value js.Wrapper) *SVGTransform {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTransform{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_TRANSFORM_UNKNOWN   int = 0
	SVG_TRANSFORM_MATRIX    int = 1
	SVG_TRANSFORM_TRANSLATE int = 2
	SVG_TRANSFORM_SCALE     int = 3
	SVG_TRANSFORM_ROTATE    int = 4
	SVG_TRANSFORM_SKEWX     int = 5
	SVG_TRANSFORM_SKEWY     int = 6
)

// Type returning attribute 'type' with
// type int (idl: unsigned short).
func (_this *SVGTransform) Type() int {
	var ret int
	value := _this.Value_JS.Get("type")
	ret = (value).Int()
	return ret
}

// Matrix returning attribute 'matrix' with
// type geometry.DOMMatrix (idl: DOMMatrix).
func (_this *SVGTransform) Matrix() *geometry.DOMMatrix {
	var ret *geometry.DOMMatrix
	value := _this.Value_JS.Get("matrix")
	ret = geometry.DOMMatrixFromJS(value)
	return ret
}

// Angle returning attribute 'angle' with
// type float32 (idl: float).
func (_this *SVGTransform) Angle() float32 {
	var ret float32
	value := _this.Value_JS.Get("angle")
	ret = (float32)((value).Float())
	return ret
}

func (_this *SVGTransform) SetMatrix(matrix *geometry.DOMMatrix2DInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("setMatrix", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetTranslate(tx float32, ty float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := tx
	_args[0] = _p0
	_end++
	_p1 := ty
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setTranslate", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetScale(sx float32, sy float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sx
	_args[0] = _p0
	_end++
	_p1 := sy
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setScale", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetRotate(angle float32, cx float32, cy float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_p1 := cx
	_args[1] = _p1
	_end++
	_p2 := cy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("setRotate", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetSkewX(angle float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setSkewX", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetSkewY(angle float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setSkewY", _args[0:_end]...)
	return
}

// interface: SVGTransformList
type SVGTransformList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGTransformList) JSValue() js.Value {
	return _this.Value_JS
}

// SVGTransformListFromJS is casting a js.Wrapper into SVGTransformList.
func SVGTransformListFromJS(value js.Wrapper) *SVGTransformList {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGTransformList{}
	ret.Value_JS = input
	return ret
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGTransformList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGTransformList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGTransformList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGTransformList) Initialize(newItem *SVGTransform) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) GetItem(index uint) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) InsertItemBefore(newItem *SVGTransform, index uint) (_result *SVGTransform) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) ReplaceItem(newItem *SVGTransform, index uint) (_result *SVGTransform) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) RemoveItem(index uint) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) AppendItem(newItem *SVGTransform) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) CreateSVGTransformFromMatrix(matrix *geometry.DOMMatrix2DInit) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createSVGTransformFromMatrix", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) Consolidate() (_result *SVGTransform) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("consolidate", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	if _returned.Type() != js.TypeNull {
		_converted = SVGTransformFromJS(_returned)
	}
	_result = _converted
	return
}

// interface: SVGUnitTypes
type SVGUnitTypes struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

func (_this *SVGUnitTypes) JSValue() js.Value {
	return _this.Value_JS
}

// SVGUnitTypesFromJS is casting a js.Wrapper into SVGUnitTypes.
func SVGUnitTypesFromJS(value js.Wrapper) *SVGUnitTypes {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGUnitTypes{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_UNIT_TYPE_UNKNOWN           int = 0
	SVG_UNIT_TYPE_USERSPACEONUSE    int = 1
	SVG_UNIT_TYPE_OBJECTBOUNDINGBOX int = 2
)

// interface: SVGUnknownElement
type SVGUnknownElement struct {
	SVGGraphicsElement
}

// SVGUnknownElementFromJS is casting a js.Wrapper into SVGUnknownElement.
func SVGUnknownElementFromJS(value js.Wrapper) *SVGUnknownElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGUnknownElement{}
	ret.Value_JS = input
	return ret
}

// interface: SVGUseElement
type SVGUseElement struct {
	SVGGraphicsElement
}

// SVGUseElementFromJS is casting a js.Wrapper into SVGUseElement.
func SVGUseElementFromJS(value js.Wrapper) *SVGUseElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGUseElement{}
	ret.Value_JS = input
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// InstanceRoot returning attribute 'instanceRoot' with
// type SVGElement (idl: SVGElement).
func (_this *SVGUseElement) InstanceRoot() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("instanceRoot")
	if value.Type() != js.TypeNull {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// AnimatedInstanceRoot returning attribute 'animatedInstanceRoot' with
// type SVGElement (idl: SVGElement).
func (_this *SVGUseElement) AnimatedInstanceRoot() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("animatedInstanceRoot")
	if value.Type() != js.TypeNull {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGUseElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// interface: SVGUseElementShadowRoot
type SVGUseElementShadowRoot struct {
	dom.ShadowRoot
}

// SVGUseElementShadowRootFromJS is casting a js.Wrapper into SVGUseElementShadowRoot.
func SVGUseElementShadowRootFromJS(value js.Wrapper) *SVGUseElementShadowRoot {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGUseElementShadowRoot{}
	ret.Value_JS = input
	return ret
}

// interface: SVGViewElement
type SVGViewElement struct {
	SVGElement
}

// SVGViewElementFromJS is casting a js.Wrapper into SVGViewElement.
func SVGViewElementFromJS(value js.Wrapper) *SVGViewElement {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &SVGViewElement{}
	ret.Value_JS = input
	return ret
}

const (
	SVG_ZOOMANDPAN_UNKNOWN_VE int = 0
	SVG_ZOOMANDPAN_DISABLE_VE int = 1
	SVG_ZOOMANDPAN_MAGNIFY_VE int = 2
)

// ZoomAndPan returning attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGViewElement) ZoomAndPan() int {
	var ret int
	value := _this.Value_JS.Get("zoomAndPan")
	ret = (value).Int()
	return ret
}

// SetZoomAndPan setting attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGViewElement) SetZoomAndPan(value int) {
	input := value
	_this.Value_JS.Set("zoomAndPan", input)
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGViewElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGViewElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// interface: ShadowAnimation
type ShadowAnimation struct {
	webani.Animation
}

// ShadowAnimationFromJS is casting a js.Wrapper into ShadowAnimation.
func ShadowAnimationFromJS(value js.Wrapper) *ShadowAnimation {
	input := value.JSValue()
	if input.Type() == js.TypeNull {
		return nil
	}
	ret := &ShadowAnimation{}
	ret.Value_JS = input
	return ret
}

// SourceAnimation returning attribute 'sourceAnimation' with
// type webani.Animation (idl: Animation).
func (_this *ShadowAnimation) SourceAnimation() *webani.Animation {
	var ret *webani.Animation
	value := _this.Value_JS.Get("sourceAnimation")
	ret = webani.AnimationFromJS(value)
	return ret
}
