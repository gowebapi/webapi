// Code generated by webidl-bind. DO NOT EDIT.

package svg

import "syscall/js"

import (
	"github.com/gowebapi/webapi/clipboard"
	"github.com/gowebapi/webapi/communication/xhr"
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/csp"
	"github.com/gowebapi/webapi/css/animations"
	"github.com/gowebapi/webapi/css/animations/webani"
	"github.com/gowebapi/webapi/css/cssom"
	"github.com/gowebapi/webapi/css/transitions"
	"github.com/gowebapi/webapi/css/typedom"
	"github.com/gowebapi/webapi/device/touchevents"
	"github.com/gowebapi/webapi/dom"
	"github.com/gowebapi/webapi/dom/domcore"
	"github.com/gowebapi/webapi/dom/geometry"
	"github.com/gowebapi/webapi/html"
	"github.com/gowebapi/webapi/html/channel"
	"github.com/gowebapi/webapi/html/htmlcommon"
	"github.com/gowebapi/webapi/html/htmlevent"
)

// using following types:
// animations.AnimationEvent
// channel.MessageEvent
// clipboard.ClipboardEvent
// csp.SecurityPolicyViolationEvent
// cssom.CSSStyleDeclaration
// cssom.CSSStyleSheet
// dom.Element
// dom.NodeList
// dom.ShadowRoot
// domcore.DOMStringMap
// domcore.DOMTokenList
// domcore.Event
// domcore.EventHandler
// geometry.DOMMatrix
// geometry.DOMMatrix2DInit
// geometry.DOMPoint
// geometry.DOMPointInit
// geometry.DOMPointReadOnly
// geometry.DOMRect
// geometry.DOMRectReadOnly
// html.FocusOptions
// html.FormDataEvent
// htmlcommon.BeforeUnloadEvent
// htmlcommon.OnBeforeUnloadEventHandler
// htmlcommon.OnErrorEventHandler
// htmlevent.DragEvent
// htmlevent.FocusEvent
// htmlevent.HashChangeEvent
// htmlevent.InputEvent
// htmlevent.KeyboardEvent
// htmlevent.MouseEvent
// htmlevent.PageTransitionEvent
// htmlevent.PointerEvent
// htmlevent.PopStateEvent
// htmlevent.PromiseRejectionEvent
// htmlevent.StorageEvent
// htmlevent.UIEvent
// htmlevent.WheelEvent
// touchevents.TouchEvent
// transitions.TransitionEvent
// typedom.StylePropertyMap
// webani.Animation
// xhr.ProgressEvent

// source idl files:
// SVG.idl

// transform files:
// SVG.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// dictionary: SVGBoundingBoxOptions
type SVGBoundingBoxOptions struct {
	Fill    bool
	Stroke  bool
	Markers bool
	Clipped bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *SVGBoundingBoxOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Fill
	out.Set("fill", value0)
	value1 := _this.Stroke
	out.Set("stroke", value1)
	value2 := _this.Markers
	out.Set("markers", value2)
	value3 := _this.Clipped
	out.Set("clipped", value3)
	return out
}

// SVGBoundingBoxOptionsFromJS is allocating a new
// SVGBoundingBoxOptions object and copy all values in the value javascript object.
func SVGBoundingBoxOptionsFromJS(value js.Value) *SVGBoundingBoxOptions {
	var out SVGBoundingBoxOptions
	var (
		value0 bool // javascript: boolean {fill Fill fill}
		value1 bool // javascript: boolean {stroke Stroke stroke}
		value2 bool // javascript: boolean {markers Markers markers}
		value3 bool // javascript: boolean {clipped Clipped clipped}
	)
	value0 = (value.Get("fill")).Bool()
	out.Fill = value0
	value1 = (value.Get("stroke")).Bool()
	out.Stroke = value1
	value2 = (value.Get("markers")).Bool()
	out.Markers = value2
	value3 = (value.Get("clipped")).Bool()
	out.Clipped = value3
	return &out
}

// class: SVGAElement
type SVGAElement struct {
	SVGGraphicsElement
}

// SVGAElementFromJS is casting a js.Value into SVGAElement.
func SVGAElementFromJS(value js.Value) *SVGAElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAElement{}
	ret.Value_JS = value
	return ret
}

// SVGAElementFromJS is casting from something that holds a js.Value into SVGAElement.
func SVGAElementFromWrapper(input core.Wrapper) *SVGAElement {
	return SVGAElementFromJS(input.JSValue())
}

// Target returning attribute 'target' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGAElement) Target() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("target")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// Download returning attribute 'download' with
// type string (idl: DOMString).
func (_this *SVGAElement) Download() string {
	var ret string
	value := _this.Value_JS.Get("download")
	ret = (value).String()
	return ret
}

// SetDownload setting attribute 'download' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetDownload(value string) {
	input := value
	_this.Value_JS.Set("download", input)
}

// Ping returning attribute 'ping' with
// type string (idl: USVString).
func (_this *SVGAElement) Ping() string {
	var ret string
	value := _this.Value_JS.Get("ping")
	ret = (value).String()
	return ret
}

// SetPing setting attribute 'ping' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPing(value string) {
	input := value
	_this.Value_JS.Set("ping", input)
}

// Rel returning attribute 'rel' with
// type string (idl: DOMString).
func (_this *SVGAElement) Rel() string {
	var ret string
	value := _this.Value_JS.Get("rel")
	ret = (value).String()
	return ret
}

// SetRel setting attribute 'rel' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetRel(value string) {
	input := value
	_this.Value_JS.Set("rel", input)
}

// RelList returning attribute 'relList' with
// type domcore.DOMTokenList (idl: DOMTokenList).
func (_this *SVGAElement) RelList() *domcore.DOMTokenList {
	var ret *domcore.DOMTokenList
	value := _this.Value_JS.Get("relList")
	ret = domcore.DOMTokenListFromJS(value)
	return ret
}

// Hreflang returning attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *SVGAElement) Hreflang() string {
	var ret string
	value := _this.Value_JS.Get("hreflang")
	ret = (value).String()
	return ret
}

// SetHreflang setting attribute 'hreflang' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetHreflang(value string) {
	input := value
	_this.Value_JS.Set("hreflang", input)
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGAElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Text returning attribute 'text' with
// type string (idl: DOMString).
func (_this *SVGAElement) Text() string {
	var ret string
	value := _this.Value_JS.Get("text")
	ret = (value).String()
	return ret
}

// SetText setting attribute 'text' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetText(value string) {
	input := value
	_this.Value_JS.Set("text", input)
}

// ReferrerPolicy returning attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *SVGAElement) ReferrerPolicy() string {
	var ret string
	value := _this.Value_JS.Get("referrerPolicy")
	ret = (value).String()
	return ret
}

// SetReferrerPolicy setting attribute 'referrerPolicy' with
// type string (idl: DOMString).
func (_this *SVGAElement) SetReferrerPolicy(value string) {
	input := value
	_this.Value_JS.Set("referrerPolicy", input)
}

// Href returning attribute 'href' with
// type string (idl: USVString).
func (_this *SVGAElement) Href() string {
	var ret string
	value := _this.Value_JS.Get("href")
	ret = (value).String()
	return ret
}

// ToString is an alias for Href.
func (_this *SVGAElement) ToString() string {
	return _this.Href()
}

// SetHref setting attribute 'href' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHref(value string) {
	input := value
	_this.Value_JS.Set("href", input)
}

// Origin returning attribute 'origin' with
// type string (idl: USVString).
func (_this *SVGAElement) Origin() string {
	var ret string
	value := _this.Value_JS.Get("origin")
	ret = (value).String()
	return ret
}

// Protocol returning attribute 'protocol' with
// type string (idl: USVString).
func (_this *SVGAElement) Protocol() string {
	var ret string
	value := _this.Value_JS.Get("protocol")
	ret = (value).String()
	return ret
}

// SetProtocol setting attribute 'protocol' with
// type string (idl: USVString).
func (_this *SVGAElement) SetProtocol(value string) {
	input := value
	_this.Value_JS.Set("protocol", input)
}

// Username returning attribute 'username' with
// type string (idl: USVString).
func (_this *SVGAElement) Username() string {
	var ret string
	value := _this.Value_JS.Get("username")
	ret = (value).String()
	return ret
}

// SetUsername setting attribute 'username' with
// type string (idl: USVString).
func (_this *SVGAElement) SetUsername(value string) {
	input := value
	_this.Value_JS.Set("username", input)
}

// Password returning attribute 'password' with
// type string (idl: USVString).
func (_this *SVGAElement) Password() string {
	var ret string
	value := _this.Value_JS.Get("password")
	ret = (value).String()
	return ret
}

// SetPassword setting attribute 'password' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPassword(value string) {
	input := value
	_this.Value_JS.Set("password", input)
}

// Host returning attribute 'host' with
// type string (idl: USVString).
func (_this *SVGAElement) Host() string {
	var ret string
	value := _this.Value_JS.Get("host")
	ret = (value).String()
	return ret
}

// SetHost setting attribute 'host' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHost(value string) {
	input := value
	_this.Value_JS.Set("host", input)
}

// Hostname returning attribute 'hostname' with
// type string (idl: USVString).
func (_this *SVGAElement) Hostname() string {
	var ret string
	value := _this.Value_JS.Get("hostname")
	ret = (value).String()
	return ret
}

// SetHostname setting attribute 'hostname' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHostname(value string) {
	input := value
	_this.Value_JS.Set("hostname", input)
}

// Port returning attribute 'port' with
// type string (idl: USVString).
func (_this *SVGAElement) Port() string {
	var ret string
	value := _this.Value_JS.Get("port")
	ret = (value).String()
	return ret
}

// SetPort setting attribute 'port' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPort(value string) {
	input := value
	_this.Value_JS.Set("port", input)
}

// Pathname returning attribute 'pathname' with
// type string (idl: USVString).
func (_this *SVGAElement) Pathname() string {
	var ret string
	value := _this.Value_JS.Get("pathname")
	ret = (value).String()
	return ret
}

// SetPathname setting attribute 'pathname' with
// type string (idl: USVString).
func (_this *SVGAElement) SetPathname(value string) {
	input := value
	_this.Value_JS.Set("pathname", input)
}

// Search returning attribute 'search' with
// type string (idl: USVString).
func (_this *SVGAElement) Search() string {
	var ret string
	value := _this.Value_JS.Get("search")
	ret = (value).String()
	return ret
}

// SetSearch setting attribute 'search' with
// type string (idl: USVString).
func (_this *SVGAElement) SetSearch(value string) {
	input := value
	_this.Value_JS.Set("search", input)
}

// Hash returning attribute 'hash' with
// type string (idl: USVString).
func (_this *SVGAElement) Hash() string {
	var ret string
	value := _this.Value_JS.Get("hash")
	ret = (value).String()
	return ret
}

// SetHash setting attribute 'hash' with
// type string (idl: USVString).
func (_this *SVGAElement) SetHash(value string) {
	input := value
	_this.Value_JS.Set("hash", input)
}

// class: SVGAngle
type SVGAngle struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAngle) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAngleFromJS is casting a js.Value into SVGAngle.
func SVGAngleFromJS(value js.Value) *SVGAngle {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAngle{}
	ret.Value_JS = value
	return ret
}

// SVGAngleFromJS is casting from something that holds a js.Value into SVGAngle.
func SVGAngleFromWrapper(input core.Wrapper) *SVGAngle {
	return SVGAngleFromJS(input.JSValue())
}

const (
	SVG_ANGLETYPE_UNKNOWN     int = 0
	SVG_ANGLETYPE_UNSPECIFIED int = 1
	SVG_ANGLETYPE_DEG         int = 2
	SVG_ANGLETYPE_RAD         int = 3
	SVG_ANGLETYPE_GRAD        int = 4
)

// UnitType returning attribute 'unitType' with
// type int (idl: unsigned short).
func (_this *SVGAngle) UnitType() int {
	var ret int
	value := _this.Value_JS.Get("unitType")
	ret = (value).Int()
	return ret
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGAngle) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGAngle) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// ValueInSpecifiedUnits returning attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGAngle) ValueInSpecifiedUnits() float32 {
	var ret float32
	value := _this.Value_JS.Get("valueInSpecifiedUnits")
	ret = (float32)((value).Float())
	return ret
}

// SetValueInSpecifiedUnits setting attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGAngle) SetValueInSpecifiedUnits(value float32) {
	input := value
	_this.Value_JS.Set("valueInSpecifiedUnits", input)
}

// ValueAsString returning attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGAngle) ValueAsString() string {
	var ret string
	value := _this.Value_JS.Get("valueAsString")
	ret = (value).String()
	return ret
}

// SetValueAsString setting attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGAngle) SetValueAsString(value string) {
	input := value
	_this.Value_JS.Set("valueAsString", input)
}

func (_this *SVGAngle) NewValueSpecifiedUnits(unitType int, valueInSpecifiedUnits float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_p1 := valueInSpecifiedUnits
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("newValueSpecifiedUnits", _args[0:_end]...)
	return
}

func (_this *SVGAngle) ConvertToSpecifiedUnits(unitType int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("convertToSpecifiedUnits", _args[0:_end]...)
	return
}

// class: SVGAnimatedAngle
type SVGAnimatedAngle struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedAngle) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedAngleFromJS is casting a js.Value into SVGAnimatedAngle.
func SVGAnimatedAngleFromJS(value js.Value) *SVGAnimatedAngle {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedAngle{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedAngleFromJS is casting from something that holds a js.Value into SVGAnimatedAngle.
func SVGAnimatedAngleFromWrapper(input core.Wrapper) *SVGAnimatedAngle {
	return SVGAnimatedAngleFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGAngle (idl: SVGAngle).
func (_this *SVGAnimatedAngle) BaseVal() *SVGAngle {
	var ret *SVGAngle
	value := _this.Value_JS.Get("baseVal")
	ret = SVGAngleFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGAngle (idl: SVGAngle).
func (_this *SVGAnimatedAngle) AnimVal() *SVGAngle {
	var ret *SVGAngle
	value := _this.Value_JS.Get("animVal")
	ret = SVGAngleFromJS(value)
	return ret
}

// class: SVGAnimatedBoolean
type SVGAnimatedBoolean struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedBoolean) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedBooleanFromJS is casting a js.Value into SVGAnimatedBoolean.
func SVGAnimatedBooleanFromJS(value js.Value) *SVGAnimatedBoolean {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedBoolean{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedBooleanFromJS is casting from something that holds a js.Value into SVGAnimatedBoolean.
func SVGAnimatedBooleanFromWrapper(input core.Wrapper) *SVGAnimatedBoolean {
	return SVGAnimatedBooleanFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) BaseVal() bool {
	var ret bool
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Bool()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) SetBaseVal(value bool) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type bool (idl: boolean).
func (_this *SVGAnimatedBoolean) AnimVal() bool {
	var ret bool
	value := _this.Value_JS.Get("animVal")
	ret = (value).Bool()
	return ret
}

// class: SVGAnimatedEnumeration
type SVGAnimatedEnumeration struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedEnumeration) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedEnumerationFromJS is casting a js.Value into SVGAnimatedEnumeration.
func SVGAnimatedEnumerationFromJS(value js.Value) *SVGAnimatedEnumeration {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedEnumeration{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedEnumerationFromJS is casting from something that holds a js.Value into SVGAnimatedEnumeration.
func SVGAnimatedEnumerationFromWrapper(input core.Wrapper) *SVGAnimatedEnumeration {
	return SVGAnimatedEnumerationFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) BaseVal() int {
	var ret int
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Int()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) SetBaseVal(value int) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type int (idl: unsigned short).
func (_this *SVGAnimatedEnumeration) AnimVal() int {
	var ret int
	value := _this.Value_JS.Get("animVal")
	ret = (value).Int()
	return ret
}

// class: SVGAnimatedInteger
type SVGAnimatedInteger struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedInteger) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedIntegerFromJS is casting a js.Value into SVGAnimatedInteger.
func SVGAnimatedIntegerFromJS(value js.Value) *SVGAnimatedInteger {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedInteger{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedIntegerFromJS is casting from something that holds a js.Value into SVGAnimatedInteger.
func SVGAnimatedIntegerFromWrapper(input core.Wrapper) *SVGAnimatedInteger {
	return SVGAnimatedIntegerFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) BaseVal() int {
	var ret int
	value := _this.Value_JS.Get("baseVal")
	ret = (value).Int()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) SetBaseVal(value int) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type int (idl: long).
func (_this *SVGAnimatedInteger) AnimVal() int {
	var ret int
	value := _this.Value_JS.Get("animVal")
	ret = (value).Int()
	return ret
}

// class: SVGAnimatedLength
type SVGAnimatedLength struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedLength) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedLengthFromJS is casting a js.Value into SVGAnimatedLength.
func SVGAnimatedLengthFromJS(value js.Value) *SVGAnimatedLength {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedLength{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedLengthFromJS is casting from something that holds a js.Value into SVGAnimatedLength.
func SVGAnimatedLengthFromWrapper(input core.Wrapper) *SVGAnimatedLength {
	return SVGAnimatedLengthFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGLength (idl: SVGLength).
func (_this *SVGAnimatedLength) BaseVal() *SVGLength {
	var ret *SVGLength
	value := _this.Value_JS.Get("baseVal")
	ret = SVGLengthFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGLength (idl: SVGLength).
func (_this *SVGAnimatedLength) AnimVal() *SVGLength {
	var ret *SVGLength
	value := _this.Value_JS.Get("animVal")
	ret = SVGLengthFromJS(value)
	return ret
}

// class: SVGAnimatedLengthList
type SVGAnimatedLengthList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedLengthList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedLengthListFromJS is casting a js.Value into SVGAnimatedLengthList.
func SVGAnimatedLengthListFromJS(value js.Value) *SVGAnimatedLengthList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedLengthList{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedLengthListFromJS is casting from something that holds a js.Value into SVGAnimatedLengthList.
func SVGAnimatedLengthListFromWrapper(input core.Wrapper) *SVGAnimatedLengthList {
	return SVGAnimatedLengthListFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGLengthList (idl: SVGLengthList).
func (_this *SVGAnimatedLengthList) BaseVal() *SVGLengthList {
	var ret *SVGLengthList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGLengthListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGLengthList (idl: SVGLengthList).
func (_this *SVGAnimatedLengthList) AnimVal() *SVGLengthList {
	var ret *SVGLengthList
	value := _this.Value_JS.Get("animVal")
	ret = SVGLengthListFromJS(value)
	return ret
}

// class: SVGAnimatedNumber
type SVGAnimatedNumber struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedNumber) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedNumberFromJS is casting a js.Value into SVGAnimatedNumber.
func SVGAnimatedNumberFromJS(value js.Value) *SVGAnimatedNumber {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedNumber{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedNumberFromJS is casting from something that holds a js.Value into SVGAnimatedNumber.
func SVGAnimatedNumberFromWrapper(input core.Wrapper) *SVGAnimatedNumber {
	return SVGAnimatedNumberFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) BaseVal() float32 {
	var ret float32
	value := _this.Value_JS.Get("baseVal")
	ret = (float32)((value).Float())
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) SetBaseVal(value float32) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type float32 (idl: float).
func (_this *SVGAnimatedNumber) AnimVal() float32 {
	var ret float32
	value := _this.Value_JS.Get("animVal")
	ret = (float32)((value).Float())
	return ret
}

// class: SVGAnimatedNumberList
type SVGAnimatedNumberList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedNumberList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedNumberListFromJS is casting a js.Value into SVGAnimatedNumberList.
func SVGAnimatedNumberListFromJS(value js.Value) *SVGAnimatedNumberList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedNumberList{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedNumberListFromJS is casting from something that holds a js.Value into SVGAnimatedNumberList.
func SVGAnimatedNumberListFromWrapper(input core.Wrapper) *SVGAnimatedNumberList {
	return SVGAnimatedNumberListFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGNumberList (idl: SVGNumberList).
func (_this *SVGAnimatedNumberList) BaseVal() *SVGNumberList {
	var ret *SVGNumberList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGNumberListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGNumberList (idl: SVGNumberList).
func (_this *SVGAnimatedNumberList) AnimVal() *SVGNumberList {
	var ret *SVGNumberList
	value := _this.Value_JS.Get("animVal")
	ret = SVGNumberListFromJS(value)
	return ret
}

// class: SVGAnimatedPreserveAspectRatio
type SVGAnimatedPreserveAspectRatio struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedPreserveAspectRatio) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedPreserveAspectRatioFromJS is casting a js.Value into SVGAnimatedPreserveAspectRatio.
func SVGAnimatedPreserveAspectRatioFromJS(value js.Value) *SVGAnimatedPreserveAspectRatio {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedPreserveAspectRatio{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedPreserveAspectRatioFromJS is casting from something that holds a js.Value into SVGAnimatedPreserveAspectRatio.
func SVGAnimatedPreserveAspectRatioFromWrapper(input core.Wrapper) *SVGAnimatedPreserveAspectRatio {
	return SVGAnimatedPreserveAspectRatioFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGPreserveAspectRatio (idl: SVGPreserveAspectRatio).
func (_this *SVGAnimatedPreserveAspectRatio) BaseVal() *SVGPreserveAspectRatio {
	var ret *SVGPreserveAspectRatio
	value := _this.Value_JS.Get("baseVal")
	ret = SVGPreserveAspectRatioFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGPreserveAspectRatio (idl: SVGPreserveAspectRatio).
func (_this *SVGAnimatedPreserveAspectRatio) AnimVal() *SVGPreserveAspectRatio {
	var ret *SVGPreserveAspectRatio
	value := _this.Value_JS.Get("animVal")
	ret = SVGPreserveAspectRatioFromJS(value)
	return ret
}

// class: SVGAnimatedRect
type SVGAnimatedRect struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedRect) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedRectFromJS is casting a js.Value into SVGAnimatedRect.
func SVGAnimatedRectFromJS(value js.Value) *SVGAnimatedRect {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedRect{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedRectFromJS is casting from something that holds a js.Value into SVGAnimatedRect.
func SVGAnimatedRectFromWrapper(input core.Wrapper) *SVGAnimatedRect {
	return SVGAnimatedRectFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type geometry.DOMRect (idl: DOMRect).
func (_this *SVGAnimatedRect) BaseVal() *geometry.DOMRect {
	var ret *geometry.DOMRect
	value := _this.Value_JS.Get("baseVal")
	ret = geometry.DOMRectFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type geometry.DOMRectReadOnly (idl: DOMRectReadOnly).
func (_this *SVGAnimatedRect) AnimVal() *geometry.DOMRectReadOnly {
	var ret *geometry.DOMRectReadOnly
	value := _this.Value_JS.Get("animVal")
	ret = geometry.DOMRectReadOnlyFromJS(value)
	return ret
}

// class: SVGAnimatedString
type SVGAnimatedString struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedString) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedStringFromJS is casting a js.Value into SVGAnimatedString.
func SVGAnimatedStringFromJS(value js.Value) *SVGAnimatedString {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedString{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedStringFromJS is casting from something that holds a js.Value into SVGAnimatedString.
func SVGAnimatedStringFromWrapper(input core.Wrapper) *SVGAnimatedString {
	return SVGAnimatedStringFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) BaseVal() string {
	var ret string
	value := _this.Value_JS.Get("baseVal")
	ret = (value).String()
	return ret
}

// SetBaseVal setting attribute 'baseVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) SetBaseVal(value string) {
	input := value
	_this.Value_JS.Set("baseVal", input)
}

// AnimVal returning attribute 'animVal' with
// type string (idl: DOMString).
func (_this *SVGAnimatedString) AnimVal() string {
	var ret string
	value := _this.Value_JS.Get("animVal")
	ret = (value).String()
	return ret
}

// class: SVGAnimatedTransformList
type SVGAnimatedTransformList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGAnimatedTransformList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGAnimatedTransformListFromJS is casting a js.Value into SVGAnimatedTransformList.
func SVGAnimatedTransformListFromJS(value js.Value) *SVGAnimatedTransformList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGAnimatedTransformList{}
	ret.Value_JS = value
	return ret
}

// SVGAnimatedTransformListFromJS is casting from something that holds a js.Value into SVGAnimatedTransformList.
func SVGAnimatedTransformListFromWrapper(input core.Wrapper) *SVGAnimatedTransformList {
	return SVGAnimatedTransformListFromJS(input.JSValue())
}

// BaseVal returning attribute 'baseVal' with
// type SVGTransformList (idl: SVGTransformList).
func (_this *SVGAnimatedTransformList) BaseVal() *SVGTransformList {
	var ret *SVGTransformList
	value := _this.Value_JS.Get("baseVal")
	ret = SVGTransformListFromJS(value)
	return ret
}

// AnimVal returning attribute 'animVal' with
// type SVGTransformList (idl: SVGTransformList).
func (_this *SVGAnimatedTransformList) AnimVal() *SVGTransformList {
	var ret *SVGTransformList
	value := _this.Value_JS.Get("animVal")
	ret = SVGTransformListFromJS(value)
	return ret
}

// class: SVGCircleElement
type SVGCircleElement struct {
	SVGGeometryElement
}

// SVGCircleElementFromJS is casting a js.Value into SVGCircleElement.
func SVGCircleElementFromJS(value js.Value) *SVGCircleElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGCircleElement{}
	ret.Value_JS = value
	return ret
}

// SVGCircleElementFromJS is casting from something that holds a js.Value into SVGCircleElement.
func SVGCircleElementFromWrapper(input core.Wrapper) *SVGCircleElement {
	return SVGCircleElementFromJS(input.JSValue())
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// R returning attribute 'r' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGCircleElement) R() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("r")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGDefsElement
type SVGDefsElement struct {
	SVGGraphicsElement
}

// SVGDefsElementFromJS is casting a js.Value into SVGDefsElement.
func SVGDefsElementFromJS(value js.Value) *SVGDefsElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGDefsElement{}
	ret.Value_JS = value
	return ret
}

// SVGDefsElementFromJS is casting from something that holds a js.Value into SVGDefsElement.
func SVGDefsElementFromWrapper(input core.Wrapper) *SVGDefsElement {
	return SVGDefsElementFromJS(input.JSValue())
}

// class: SVGDescElement
type SVGDescElement struct {
	SVGElement
}

// SVGDescElementFromJS is casting a js.Value into SVGDescElement.
func SVGDescElementFromJS(value js.Value) *SVGDescElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGDescElement{}
	ret.Value_JS = value
	return ret
}

// SVGDescElementFromJS is casting from something that holds a js.Value into SVGDescElement.
func SVGDescElementFromWrapper(input core.Wrapper) *SVGDescElement {
	return SVGDescElementFromJS(input.JSValue())
}

// class: SVGElement
type SVGElement struct {
	dom.Element
}

// SVGElementFromJS is casting a js.Value into SVGElement.
func SVGElementFromJS(value js.Value) *SVGElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGElement{}
	ret.Value_JS = value
	return ret
}

// SVGElementFromJS is casting from something that holds a js.Value into SVGElement.
func SVGElementFromWrapper(input core.Wrapper) *SVGElement {
	return SVGElementFromJS(input.JSValue())
}

// ClassName returning attribute 'className' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGElement) ClassName() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("className")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// OwnerSVGElement returning attribute 'ownerSVGElement' with
// type SVGSVGElement (idl: SVGSVGElement).
func (_this *SVGElement) OwnerSVGElement() *SVGSVGElement {
	var ret *SVGSVGElement
	value := _this.Value_JS.Get("ownerSVGElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGSVGElementFromJS(value)
	}
	return ret
}

// ViewportElement returning attribute 'viewportElement' with
// type SVGElement (idl: SVGElement).
func (_this *SVGElement) ViewportElement() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("viewportElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// OnAbort returning attribute 'onabort' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAbort() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onabort")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAuxclick returning attribute 'onauxclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAuxclick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onauxclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBlur returning attribute 'onblur' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnBlur() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onblur")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCancel returning attribute 'oncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlay returning attribute 'oncanplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCanPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCanPlayThrough returning attribute 'oncanplaythrough' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCanPlayThrough() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncanplaythrough")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnChange returning attribute 'onchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClick returning attribute 'onclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnClose returning attribute 'onclose' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnClose() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onclose")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnContextMenu returning attribute 'oncontextmenu' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnContextMenu() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncontextmenu")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCueChange returning attribute 'oncuechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCueChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncuechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDblClick returning attribute 'ondblclick' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDblClick() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondblclick")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrag returning attribute 'ondrag' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDrag() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrag")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnd returning attribute 'ondragend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragEnter returning attribute 'ondragenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragExit returning attribute 'ondragexit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragExit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragexit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragLeave returning attribute 'ondragleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragOver returning attribute 'ondragover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDragStart returning attribute 'ondragstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDragStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondragstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDrop returning attribute 'ondrop' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDrop() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondrop")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnDurationChange returning attribute 'ondurationchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnDurationChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ondurationchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEmptied returning attribute 'onemptied' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnEmptied() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onemptied")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnEnded returning attribute 'onended' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnEnded() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onended")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnError returning attribute 'onerror' with
// type htmlcommon.OnErrorEventHandler (idl: OnErrorEventHandlerNonNull).
func (_this *SVGElement) OnError() htmlcommon.OnErrorEventHandlerFunc {
	var ret htmlcommon.OnErrorEventHandlerFunc
	value := _this.Value_JS.Get("onerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnErrorEventHandlerFromJS(value)
	}
	return ret
}

// OnFocus returning attribute 'onfocus' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnFocus() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onfocus")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnFormData returning attribute 'onformdata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnFormData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onformdata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInput returning attribute 'oninput' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnInput() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninput")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnInvalid returning attribute 'oninvalid' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnInvalid() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oninvalid")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyDown returning attribute 'onkeydown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnKeyDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeydown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyPress returning attribute 'onkeypress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnKeyPress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeypress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnKeyUp returning attribute 'onkeyup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnKeyUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onkeyup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoad returning attribute 'onload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLoad() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedData returning attribute 'onloadeddata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLoadedData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadeddata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadedMetaData returning attribute 'onloadedmetadata' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLoadedMetaData() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadedmetadata")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadEnd returning attribute 'onloadend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLoadEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLoadStart returning attribute 'onloadstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLoadStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onloadstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseDown returning attribute 'onmousedown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousedown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseEnter returning attribute 'onmouseenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseLeave returning attribute 'onmouseleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseMove returning attribute 'onmousemove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmousemove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOut returning attribute 'onmouseout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseOver returning attribute 'onmouseover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMouseUp returning attribute 'onmouseup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnMouseUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmouseup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWheel returning attribute 'onwheel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnWheel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwheel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPause returning attribute 'onpause' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPause() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpause")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlay returning attribute 'onplay' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPlay() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplay")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPlaying returning attribute 'onplaying' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPlaying() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onplaying")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnProgress returning attribute 'onprogress' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnProgress() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onprogress")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRateChange returning attribute 'onratechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnRateChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onratechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnReset returning attribute 'onreset' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnReset() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onreset")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnResize returning attribute 'onresize' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnResize() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onresize")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnScroll returning attribute 'onscroll' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnScroll() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onscroll")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSecurityPolicyViolation returning attribute 'onsecuritypolicyviolation' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSecurityPolicyViolation() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsecuritypolicyviolation")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeked returning attribute 'onseeked' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSeeked() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeked")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSeeking returning attribute 'onseeking' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSeeking() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onseeking")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelect returning attribute 'onselect' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSelect() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselect")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStalled returning attribute 'onstalled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnStalled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstalled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSubmit returning attribute 'onsubmit' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSubmit() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsubmit")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSuspend returning attribute 'onsuspend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSuspend() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onsuspend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTimeUpdate returning attribute 'ontimeupdate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTimeUpdate() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontimeupdate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnToggle returning attribute 'ontoggle' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnToggle() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontoggle")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnVolumeChange returning attribute 'onvolumechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnVolumeChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onvolumechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnWaiting returning attribute 'onwaiting' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnWaiting() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onwaiting")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnGotPointerCapture returning attribute 'ongotpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnGotPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ongotpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLostPointerCapture returning attribute 'onlostpointercapture' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnLostPointerCapture() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlostpointercapture")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerDown returning attribute 'onpointerdown' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerDown() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerdown")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerMove returning attribute 'onpointermove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointermove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerUp returning attribute 'onpointerup' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerUp() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerup")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerCancel returning attribute 'onpointercancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointercancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOver returning attribute 'onpointerover' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerOver() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerover")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerOut returning attribute 'onpointerout' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerOut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerout")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerEnter returning attribute 'onpointerenter' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerEnter() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerenter")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPointerLeave returning attribute 'onpointerleave' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPointerLeave() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpointerleave")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchStart returning attribute 'ontouchstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTouchStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchEnd returning attribute 'ontouchend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTouchEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchMove returning attribute 'ontouchmove' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTouchMove() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchmove")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTouchCancel returning attribute 'ontouchcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTouchCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontouchcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationStart returning attribute 'onanimationstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAnimationStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationIteration returning attribute 'onanimationiteration' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAnimationIteration() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationiteration")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationEnd returning attribute 'onanimationend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAnimationEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnAnimationCancel returning attribute 'onanimationcancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnAnimationCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onanimationcancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionRun returning attribute 'ontransitionrun' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTransitionRun() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionrun")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionStart returning attribute 'ontransitionstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTransitionStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionEnd returning attribute 'ontransitionend' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTransitionEnd() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitionend")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnTransitionCancel returning attribute 'ontransitioncancel' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnTransitionCancel() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ontransitioncancel")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectStart returning attribute 'onselectstart' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSelectStart() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectstart")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnSelectionChange returning attribute 'onselectionchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnSelectionChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onselectionchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCopy returning attribute 'oncopy' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCopy() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncopy")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnCut returning attribute 'oncut' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnCut() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("oncut")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPaste returning attribute 'onpaste' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGElement) OnPaste() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpaste")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// CorrespondingElement returning attribute 'correspondingElement' with
// type SVGElement (idl: SVGElement).
func (_this *SVGElement) CorrespondingElement() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("correspondingElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// CorrespondingUseElement returning attribute 'correspondingUseElement' with
// type SVGUseElement (idl: SVGUseElement).
func (_this *SVGElement) CorrespondingUseElement() *SVGUseElement {
	var ret *SVGUseElement
	value := _this.Value_JS.Get("correspondingUseElement")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGUseElementFromJS(value)
	}
	return ret
}

// Dataset returning attribute 'dataset' with
// type domcore.DOMStringMap (idl: DOMStringMap).
func (_this *SVGElement) Dataset() *domcore.DOMStringMap {
	var ret *domcore.DOMStringMap
	value := _this.Value_JS.Get("dataset")
	ret = domcore.DOMStringMapFromJS(value)
	return ret
}

// Nonce returning attribute 'nonce' with
// type string (idl: DOMString).
func (_this *SVGElement) Nonce() string {
	var ret string
	value := _this.Value_JS.Get("nonce")
	ret = (value).String()
	return ret
}

// SetNonce setting attribute 'nonce' with
// type string (idl: DOMString).
func (_this *SVGElement) SetNonce(value string) {
	input := value
	_this.Value_JS.Set("nonce", input)
}

// TabIndex returning attribute 'tabIndex' with
// type int (idl: long).
func (_this *SVGElement) TabIndex() int {
	var ret int
	value := _this.Value_JS.Get("tabIndex")
	ret = (value).Int()
	return ret
}

// SetTabIndex setting attribute 'tabIndex' with
// type int (idl: long).
func (_this *SVGElement) SetTabIndex(value int) {
	input := value
	_this.Value_JS.Set("tabIndex", input)
}

// Style returning attribute 'style' with
// type cssom.CSSStyleDeclaration (idl: CSSStyleDeclaration).
func (_this *SVGElement) Style() *cssom.CSSStyleDeclaration {
	var ret *cssom.CSSStyleDeclaration
	value := _this.Value_JS.Get("style")
	ret = cssom.CSSStyleDeclarationFromJS(value)
	return ret
}

// AttributeStyleMap returning attribute 'attributeStyleMap' with
// type typedom.StylePropertyMap (idl: StylePropertyMap).
func (_this *SVGElement) AttributeStyleMap() *typedom.StylePropertyMap {
	var ret *typedom.StylePropertyMap
	value := _this.Value_JS.Get("attributeStyleMap")
	ret = typedom.StylePropertyMapFromJS(value)
	return ret
}

// event attribute: domcore.Event
func eventFuncSVGElement_domcore_Event(listener func(event *domcore.Event, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAbort is adding doing AddEventListener for 'Abort' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAbort(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "abort", cb)
	return cb
}

// SetOnAbort is assigning a function to 'onabort'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAbort(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onabort", cb)
	return cb
}

// event attribute: animations.AnimationEvent
func eventFuncSVGElement_animations_AnimationEvent(listener func(event *animations.AnimationEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *animations.AnimationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = animations.AnimationEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAnimationCancel is adding doing AddEventListener for 'AnimationCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationcancel", cb)
	return cb
}

// SetOnAnimationCancel is assigning a function to 'onanimationcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAnimationCancel(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationcancel", cb)
	return cb
}

// AddAnimationEnd is adding doing AddEventListener for 'AnimationEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationend", cb)
	return cb
}

// SetOnAnimationEnd is assigning a function to 'onanimationend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAnimationEnd(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationend", cb)
	return cb
}

// AddAnimationIteration is adding doing AddEventListener for 'AnimationIteration' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationiteration", cb)
	return cb
}

// SetOnAnimationIteration is assigning a function to 'onanimationiteration'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAnimationIteration(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationiteration", cb)
	return cb
}

// AddAnimationStart is adding doing AddEventListener for 'AnimationStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Call("addEventListener", "animationstart", cb)
	return cb
}

// SetOnAnimationStart is assigning a function to 'onanimationstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAnimationStart(listener func(event *animations.AnimationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_animations_AnimationEvent(listener)
	_this.Value_JS.Set("onanimationstart", cb)
	return cb
}

// event attribute: htmlevent.MouseEvent
func eventFuncSVGElement_htmlevent_MouseEvent(listener func(event *htmlevent.MouseEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.MouseEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.MouseEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAuxclick is adding doing AddEventListener for 'Auxclick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "auxclick", cb)
	return cb
}

// SetOnAuxclick is assigning a function to 'onauxclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnAuxclick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onauxclick", cb)
	return cb
}

// event attribute: htmlevent.FocusEvent
func eventFuncSVGElement_htmlevent_FocusEvent(listener func(event *htmlevent.FocusEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.FocusEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.FocusEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBlur is adding doing AddEventListener for 'Blur' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventBlur(listener func(event *htmlevent.FocusEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "blur", cb)
	return cb
}

// SetOnBlur is assigning a function to 'onblur'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnBlur(listener func(event *htmlevent.FocusEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onblur", cb)
	return cb
}

// AddCancel is adding doing AddEventListener for 'Cancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCancel(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cancel", cb)
	return cb
}

// SetOnCancel is assigning a function to 'oncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCancel(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("oncancel", cb)
	return cb
}

// AddCanPlay is adding doing AddEventListener for 'CanPlay' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCanPlay(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplay", cb)
	return cb
}

// SetOnCanPlay is assigning a function to 'oncanplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCanPlay(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("oncanplay", cb)
	return cb
}

// AddCanPlayThrough is adding doing AddEventListener for 'CanPlayThrough' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCanPlayThrough(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "canplaythrough", cb)
	return cb
}

// SetOnCanPlayThrough is assigning a function to 'oncanplaythrough'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCanPlayThrough(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("oncanplaythrough", cb)
	return cb
}

// AddChange is adding doing AddEventListener for 'Change' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "change", cb)
	return cb
}

// SetOnChange is assigning a function to 'onchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onchange", cb)
	return cb
}

// AddClick is adding doing AddEventListener for 'Click' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventClick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "click", cb)
	return cb
}

// SetOnClick is assigning a function to 'onclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnClick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onclick", cb)
	return cb
}

// AddClose is adding doing AddEventListener for 'Close' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventClose(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "close", cb)
	return cb
}

// SetOnClose is assigning a function to 'onclose'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnClose(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onclose", cb)
	return cb
}

// AddContextMenu is adding doing AddEventListener for 'ContextMenu' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "contextmenu", cb)
	return cb
}

// SetOnContextMenu is assigning a function to 'oncontextmenu'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnContextMenu(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("oncontextmenu", cb)
	return cb
}

// event attribute: clipboard.ClipboardEvent
func eventFuncSVGElement_clipboard_ClipboardEvent(listener func(event *clipboard.ClipboardEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *clipboard.ClipboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = clipboard.ClipboardEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddCopy is adding doing AddEventListener for 'Copy' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "copy", cb)
	return cb
}

// SetOnCopy is assigning a function to 'oncopy'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCopy(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncopy", cb)
	return cb
}

// AddCueChange is adding doing AddEventListener for 'CueChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCueChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "cuechange", cb)
	return cb
}

// SetOnCueChange is assigning a function to 'oncuechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCueChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("oncuechange", cb)
	return cb
}

// AddCut is adding doing AddEventListener for 'Cut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventCut(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "cut", cb)
	return cb
}

// SetOnCut is assigning a function to 'oncut'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnCut(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("oncut", cb)
	return cb
}

// AddDblClick is adding doing AddEventListener for 'DblClick' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "dblclick", cb)
	return cb
}

// SetOnDblClick is assigning a function to 'ondblclick'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDblClick(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("ondblclick", cb)
	return cb
}

// event attribute: htmlevent.DragEvent
func eventFuncSVGElement_htmlevent_DragEvent(listener func(event *htmlevent.DragEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.DragEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.DragEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddDrag is adding doing AddEventListener for 'Drag' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDrag(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drag", cb)
	return cb
}

// SetOnDrag is assigning a function to 'ondrag'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDrag(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrag", cb)
	return cb
}

// AddDragEnd is adding doing AddEventListener for 'DragEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragend", cb)
	return cb
}

// SetOnDragEnd is assigning a function to 'ondragend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragEnd(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragend", cb)
	return cb
}

// AddDragEnter is adding doing AddEventListener for 'DragEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragenter", cb)
	return cb
}

// SetOnDragEnter is assigning a function to 'ondragenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragEnter(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragenter", cb)
	return cb
}

// AddDragExit is adding doing AddEventListener for 'DragExit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragExit(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragexit", cb)
	return cb
}

// SetOnDragExit is assigning a function to 'ondragexit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragExit(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragexit", cb)
	return cb
}

// AddDragLeave is adding doing AddEventListener for 'DragLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragleave", cb)
	return cb
}

// SetOnDragLeave is assigning a function to 'ondragleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragLeave(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragleave", cb)
	return cb
}

// AddDragOver is adding doing AddEventListener for 'DragOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragOver(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragover", cb)
	return cb
}

// SetOnDragOver is assigning a function to 'ondragover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragOver(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragover", cb)
	return cb
}

// AddDragStart is adding doing AddEventListener for 'DragStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDragStart(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "dragstart", cb)
	return cb
}

// SetOnDragStart is assigning a function to 'ondragstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDragStart(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondragstart", cb)
	return cb
}

// AddDrop is adding doing AddEventListener for 'Drop' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDrop(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Call("addEventListener", "drop", cb)
	return cb
}

// SetOnDrop is assigning a function to 'ondrop'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDrop(listener func(event *htmlevent.DragEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_DragEvent(listener)
	_this.Value_JS.Set("ondrop", cb)
	return cb
}

// AddDurationChange is adding doing AddEventListener for 'DurationChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventDurationChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "durationchange", cb)
	return cb
}

// SetOnDurationChange is assigning a function to 'ondurationchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnDurationChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("ondurationchange", cb)
	return cb
}

// AddEmptied is adding doing AddEventListener for 'Emptied' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventEmptied(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "emptied", cb)
	return cb
}

// SetOnEmptied is assigning a function to 'onemptied'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnEmptied(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onemptied", cb)
	return cb
}

// AddEnded is adding doing AddEventListener for 'Ended' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventEnded(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ended", cb)
	return cb
}

// SetOnEnded is assigning a function to 'onended'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnEnded(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onended", cb)
	return cb
}

// AddError is adding doing AddEventListener for 'Error' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventError(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "error", cb)
	return cb
}

// SetOnError is assigning a function to 'onerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnError(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onerror", cb)
	return cb
}

// AddFocus is adding doing AddEventListener for 'Focus' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventFocus(listener func(event *htmlevent.FocusEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Call("addEventListener", "focus", cb)
	return cb
}

// SetOnFocus is assigning a function to 'onfocus'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnFocus(listener func(event *htmlevent.FocusEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_FocusEvent(listener)
	_this.Value_JS.Set("onfocus", cb)
	return cb
}

// event attribute: html.FormDataEvent
func eventFuncSVGElement_html_FormDataEvent(listener func(event *html.FormDataEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *html.FormDataEvent
		value := args[0]
		incoming := value.Get("target")
		ret = html.FormDataEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddFormData is adding doing AddEventListener for 'FormData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventFormData(listener func(event *html.FormDataEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_html_FormDataEvent(listener)
	_this.Value_JS.Call("addEventListener", "formdata", cb)
	return cb
}

// SetOnFormData is assigning a function to 'onformdata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnFormData(listener func(event *html.FormDataEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_html_FormDataEvent(listener)
	_this.Value_JS.Set("onformdata", cb)
	return cb
}

// event attribute: htmlevent.PointerEvent
func eventFuncSVGElement_htmlevent_PointerEvent(listener func(event *htmlevent.PointerEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PointerEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PointerEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddGotPointerCapture is adding doing AddEventListener for 'GotPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "gotpointercapture", cb)
	return cb
}

// SetOnGotPointerCapture is assigning a function to 'ongotpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnGotPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("ongotpointercapture", cb)
	return cb
}

// event attribute: htmlevent.InputEvent
func eventFuncSVGElement_htmlevent_InputEvent(listener func(event *htmlevent.InputEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.InputEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.InputEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddInput is adding doing AddEventListener for 'Input' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventInput(listener func(event *htmlevent.InputEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_InputEvent(listener)
	_this.Value_JS.Call("addEventListener", "input", cb)
	return cb
}

// SetOnInput is assigning a function to 'oninput'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnInput(listener func(event *htmlevent.InputEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_InputEvent(listener)
	_this.Value_JS.Set("oninput", cb)
	return cb
}

// AddInvalid is adding doing AddEventListener for 'Invalid' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventInvalid(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "invalid", cb)
	return cb
}

// SetOnInvalid is assigning a function to 'oninvalid'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnInvalid(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("oninvalid", cb)
	return cb
}

// event attribute: htmlevent.KeyboardEvent
func eventFuncSVGElement_htmlevent_KeyboardEvent(listener func(event *htmlevent.KeyboardEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.KeyboardEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.KeyboardEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddKeyDown is adding doing AddEventListener for 'KeyDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keydown", cb)
	return cb
}

// SetOnKeyDown is assigning a function to 'onkeydown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnKeyDown(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeydown", cb)
	return cb
}

// AddKeyPress is adding doing AddEventListener for 'KeyPress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keypress", cb)
	return cb
}

// SetOnKeyPress is assigning a function to 'onkeypress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnKeyPress(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeypress", cb)
	return cb
}

// AddKeyUp is adding doing AddEventListener for 'KeyUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "keyup", cb)
	return cb
}

// SetOnKeyUp is assigning a function to 'onkeyup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnKeyUp(listener func(event *htmlevent.KeyboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_KeyboardEvent(listener)
	_this.Value_JS.Set("onkeyup", cb)
	return cb
}

// AddLoad is adding doing AddEventListener for 'Load' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLoad(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "load", cb)
	return cb
}

// SetOnLoad is assigning a function to 'onload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLoad(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onload", cb)
	return cb
}

// AddLoadedData is adding doing AddEventListener for 'LoadedData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLoadedData(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadeddata", cb)
	return cb
}

// SetOnLoadedData is assigning a function to 'onloadeddata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLoadedData(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadeddata", cb)
	return cb
}

// AddLoadedMetaData is adding doing AddEventListener for 'LoadedMetaData' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLoadedMetaData(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadedmetadata", cb)
	return cb
}

// SetOnLoadedMetaData is assigning a function to 'onloadedmetadata'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLoadedMetaData(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadedmetadata", cb)
	return cb
}

// event attribute: xhr.ProgressEvent
func eventFuncSVGElement_xhr_ProgressEvent(listener func(event *xhr.ProgressEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *xhr.ProgressEvent
		value := args[0]
		incoming := value.Get("target")
		ret = xhr.ProgressEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddLoadEnd is adding doing AddEventListener for 'LoadEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "loadend", cb)
	return cb
}

// SetOnLoadEnd is assigning a function to 'onloadend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLoadEnd(listener func(event *xhr.ProgressEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onloadend", cb)
	return cb
}

// AddLoadStart is adding doing AddEventListener for 'LoadStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLoadStart(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "loadstart", cb)
	return cb
}

// SetOnLoadStart is assigning a function to 'onloadstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLoadStart(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onloadstart", cb)
	return cb
}

// AddLostPointerCapture is adding doing AddEventListener for 'LostPointerCapture' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "lostpointercapture", cb)
	return cb
}

// SetOnLostPointerCapture is assigning a function to 'onlostpointercapture'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnLostPointerCapture(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onlostpointercapture", cb)
	return cb
}

// AddMouseDown is adding doing AddEventListener for 'MouseDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousedown", cb)
	return cb
}

// SetOnMouseDown is assigning a function to 'onmousedown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseDown(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousedown", cb)
	return cb
}

// AddMouseEnter is adding doing AddEventListener for 'MouseEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseenter", cb)
	return cb
}

// SetOnMouseEnter is assigning a function to 'onmouseenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseEnter(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseenter", cb)
	return cb
}

// AddMouseLeave is adding doing AddEventListener for 'MouseLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseleave", cb)
	return cb
}

// SetOnMouseLeave is assigning a function to 'onmouseleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseLeave(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseleave", cb)
	return cb
}

// AddMouseMove is adding doing AddEventListener for 'MouseMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mousemove", cb)
	return cb
}

// SetOnMouseMove is assigning a function to 'onmousemove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseMove(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmousemove", cb)
	return cb
}

// AddMouseOut is adding doing AddEventListener for 'MouseOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseout", cb)
	return cb
}

// SetOnMouseOut is assigning a function to 'onmouseout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseOut(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseout", cb)
	return cb
}

// AddMouseOver is adding doing AddEventListener for 'MouseOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseover", cb)
	return cb
}

// SetOnMouseOver is assigning a function to 'onmouseover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseOver(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseover", cb)
	return cb
}

// AddMouseUp is adding doing AddEventListener for 'MouseUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Call("addEventListener", "mouseup", cb)
	return cb
}

// SetOnMouseUp is assigning a function to 'onmouseup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnMouseUp(listener func(event *htmlevent.MouseEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_MouseEvent(listener)
	_this.Value_JS.Set("onmouseup", cb)
	return cb
}

// AddPaste is adding doing AddEventListener for 'Paste' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Call("addEventListener", "paste", cb)
	return cb
}

// SetOnPaste is assigning a function to 'onpaste'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPaste(listener func(event *clipboard.ClipboardEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_clipboard_ClipboardEvent(listener)
	_this.Value_JS.Set("onpaste", cb)
	return cb
}

// AddPause is adding doing AddEventListener for 'Pause' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPause(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "pause", cb)
	return cb
}

// SetOnPause is assigning a function to 'onpause'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPause(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onpause", cb)
	return cb
}

// AddPlay is adding doing AddEventListener for 'Play' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPlay(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "play", cb)
	return cb
}

// SetOnPlay is assigning a function to 'onplay'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPlay(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onplay", cb)
	return cb
}

// AddPlaying is adding doing AddEventListener for 'Playing' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPlaying(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "playing", cb)
	return cb
}

// SetOnPlaying is assigning a function to 'onplaying'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPlaying(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onplaying", cb)
	return cb
}

// AddPointerCancel is adding doing AddEventListener for 'PointerCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointercancel", cb)
	return cb
}

// SetOnPointerCancel is assigning a function to 'onpointercancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerCancel(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointercancel", cb)
	return cb
}

// AddPointerDown is adding doing AddEventListener for 'PointerDown' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerdown", cb)
	return cb
}

// SetOnPointerDown is assigning a function to 'onpointerdown'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerDown(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerdown", cb)
	return cb
}

// AddPointerEnter is adding doing AddEventListener for 'PointerEnter' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerenter", cb)
	return cb
}

// SetOnPointerEnter is assigning a function to 'onpointerenter'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerEnter(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerenter", cb)
	return cb
}

// AddPointerLeave is adding doing AddEventListener for 'PointerLeave' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerleave", cb)
	return cb
}

// SetOnPointerLeave is assigning a function to 'onpointerleave'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerLeave(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerleave", cb)
	return cb
}

// AddPointerMove is adding doing AddEventListener for 'PointerMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointermove", cb)
	return cb
}

// SetOnPointerMove is assigning a function to 'onpointermove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerMove(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointermove", cb)
	return cb
}

// AddPointerOut is adding doing AddEventListener for 'PointerOut' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerout", cb)
	return cb
}

// SetOnPointerOut is assigning a function to 'onpointerout'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerOut(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerout", cb)
	return cb
}

// AddPointerOver is adding doing AddEventListener for 'PointerOver' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerover", cb)
	return cb
}

// SetOnPointerOver is assigning a function to 'onpointerover'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerOver(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerover", cb)
	return cb
}

// AddPointerUp is adding doing AddEventListener for 'PointerUp' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Call("addEventListener", "pointerup", cb)
	return cb
}

// SetOnPointerUp is assigning a function to 'onpointerup'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnPointerUp(listener func(event *htmlevent.PointerEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_PointerEvent(listener)
	_this.Value_JS.Set("onpointerup", cb)
	return cb
}

// AddProgress is adding doing AddEventListener for 'Progress' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventProgress(listener func(event *xhr.ProgressEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Call("addEventListener", "progress", cb)
	return cb
}

// SetOnProgress is assigning a function to 'onprogress'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnProgress(listener func(event *xhr.ProgressEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_xhr_ProgressEvent(listener)
	_this.Value_JS.Set("onprogress", cb)
	return cb
}

// AddRateChange is adding doing AddEventListener for 'RateChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventRateChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "ratechange", cb)
	return cb
}

// SetOnRateChange is assigning a function to 'onratechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnRateChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onratechange", cb)
	return cb
}

// AddReset is adding doing AddEventListener for 'Reset' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventReset(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "reset", cb)
	return cb
}

// SetOnReset is assigning a function to 'onreset'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnReset(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onreset", cb)
	return cb
}

// event attribute: htmlevent.UIEvent
func eventFuncSVGElement_htmlevent_UIEvent(listener func(event *htmlevent.UIEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.UIEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.UIEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddResize is adding doing AddEventListener for 'Resize' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventResize(listener func(event *htmlevent.UIEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_UIEvent(listener)
	_this.Value_JS.Call("addEventListener", "resize", cb)
	return cb
}

// SetOnResize is assigning a function to 'onresize'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnResize(listener func(event *htmlevent.UIEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_UIEvent(listener)
	_this.Value_JS.Set("onresize", cb)
	return cb
}

// AddScroll is adding doing AddEventListener for 'Scroll' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventScroll(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "scroll", cb)
	return cb
}

// SetOnScroll is assigning a function to 'onscroll'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnScroll(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onscroll", cb)
	return cb
}

// event attribute: csp.SecurityPolicyViolationEvent
func eventFuncSVGElement_csp_SecurityPolicyViolationEvent(listener func(event *csp.SecurityPolicyViolationEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *csp.SecurityPolicyViolationEvent
		value := args[0]
		incoming := value.Get("target")
		ret = csp.SecurityPolicyViolationEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddSecurityPolicyViolation is adding doing AddEventListener for 'SecurityPolicyViolation' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Call("addEventListener", "securitypolicyviolation", cb)
	return cb
}

// SetOnSecurityPolicyViolation is assigning a function to 'onsecuritypolicyviolation'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSecurityPolicyViolation(listener func(event *csp.SecurityPolicyViolationEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_csp_SecurityPolicyViolationEvent(listener)
	_this.Value_JS.Set("onsecuritypolicyviolation", cb)
	return cb
}

// AddSeeked is adding doing AddEventListener for 'Seeked' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSeeked(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeked", cb)
	return cb
}

// SetOnSeeked is assigning a function to 'onseeked'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSeeked(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onseeked", cb)
	return cb
}

// AddSeeking is adding doing AddEventListener for 'Seeking' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSeeking(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "seeking", cb)
	return cb
}

// SetOnSeeking is assigning a function to 'onseeking'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSeeking(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onseeking", cb)
	return cb
}

// AddSelect is adding doing AddEventListener for 'Select' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSelect(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "select", cb)
	return cb
}

// SetOnSelect is assigning a function to 'onselect'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSelect(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onselect", cb)
	return cb
}

// AddSelectionChange is adding doing AddEventListener for 'SelectionChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSelectionChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectionchange", cb)
	return cb
}

// SetOnSelectionChange is assigning a function to 'onselectionchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSelectionChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onselectionchange", cb)
	return cb
}

// AddSelectStart is adding doing AddEventListener for 'SelectStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSelectStart(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "selectstart", cb)
	return cb
}

// SetOnSelectStart is assigning a function to 'onselectstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSelectStart(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onselectstart", cb)
	return cb
}

// AddStalled is adding doing AddEventListener for 'Stalled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventStalled(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "stalled", cb)
	return cb
}

// SetOnStalled is assigning a function to 'onstalled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnStalled(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onstalled", cb)
	return cb
}

// AddSubmit is adding doing AddEventListener for 'Submit' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSubmit(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "submit", cb)
	return cb
}

// SetOnSubmit is assigning a function to 'onsubmit'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSubmit(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onsubmit", cb)
	return cb
}

// AddSuspend is adding doing AddEventListener for 'Suspend' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventSuspend(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "suspend", cb)
	return cb
}

// SetOnSuspend is assigning a function to 'onsuspend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnSuspend(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onsuspend", cb)
	return cb
}

// AddTimeUpdate is adding doing AddEventListener for 'TimeUpdate' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTimeUpdate(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "timeupdate", cb)
	return cb
}

// SetOnTimeUpdate is assigning a function to 'ontimeupdate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTimeUpdate(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("ontimeupdate", cb)
	return cb
}

// AddToggle is adding doing AddEventListener for 'Toggle' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventToggle(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "toggle", cb)
	return cb
}

// SetOnToggle is assigning a function to 'ontoggle'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnToggle(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("ontoggle", cb)
	return cb
}

// event attribute: touchevents.TouchEvent
func eventFuncSVGElement_touchevents_TouchEvent(listener func(event *touchevents.TouchEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *touchevents.TouchEvent
		value := args[0]
		incoming := value.Get("target")
		ret = touchevents.TouchEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTouchCancel is adding doing AddEventListener for 'TouchCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchcancel", cb)
	return cb
}

// SetOnTouchCancel is assigning a function to 'ontouchcancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTouchCancel(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchcancel", cb)
	return cb
}

// AddTouchEnd is adding doing AddEventListener for 'TouchEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchend", cb)
	return cb
}

// SetOnTouchEnd is assigning a function to 'ontouchend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTouchEnd(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchend", cb)
	return cb
}

// AddTouchMove is adding doing AddEventListener for 'TouchMove' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchmove", cb)
	return cb
}

// SetOnTouchMove is assigning a function to 'ontouchmove'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTouchMove(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchmove", cb)
	return cb
}

// AddTouchStart is adding doing AddEventListener for 'TouchStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Call("addEventListener", "touchstart", cb)
	return cb
}

// SetOnTouchStart is assigning a function to 'ontouchstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTouchStart(listener func(event *touchevents.TouchEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_touchevents_TouchEvent(listener)
	_this.Value_JS.Set("ontouchstart", cb)
	return cb
}

// event attribute: transitions.TransitionEvent
func eventFuncSVGElement_transitions_TransitionEvent(listener func(event *transitions.TransitionEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *transitions.TransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = transitions.TransitionEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddTransitionCancel is adding doing AddEventListener for 'TransitionCancel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitioncancel", cb)
	return cb
}

// SetOnTransitionCancel is assigning a function to 'ontransitioncancel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTransitionCancel(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitioncancel", cb)
	return cb
}

// AddTransitionEnd is adding doing AddEventListener for 'TransitionEnd' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionend", cb)
	return cb
}

// SetOnTransitionEnd is assigning a function to 'ontransitionend'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTransitionEnd(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionend", cb)
	return cb
}

// AddTransitionRun is adding doing AddEventListener for 'TransitionRun' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionrun", cb)
	return cb
}

// SetOnTransitionRun is assigning a function to 'ontransitionrun'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTransitionRun(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionrun", cb)
	return cb
}

// AddTransitionStart is adding doing AddEventListener for 'TransitionStart' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "transitionstart", cb)
	return cb
}

// SetOnTransitionStart is assigning a function to 'ontransitionstart'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnTransitionStart(listener func(event *transitions.TransitionEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_transitions_TransitionEvent(listener)
	_this.Value_JS.Set("ontransitionstart", cb)
	return cb
}

// AddVolumeChange is adding doing AddEventListener for 'VolumeChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventVolumeChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "volumechange", cb)
	return cb
}

// SetOnVolumeChange is assigning a function to 'onvolumechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnVolumeChange(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onvolumechange", cb)
	return cb
}

// AddWaiting is adding doing AddEventListener for 'Waiting' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventWaiting(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "waiting", cb)
	return cb
}

// SetOnWaiting is assigning a function to 'onwaiting'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnWaiting(listener func(event *domcore.Event, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onwaiting", cb)
	return cb
}

// event attribute: htmlevent.WheelEvent
func eventFuncSVGElement_htmlevent_WheelEvent(listener func(event *htmlevent.WheelEvent, target *SVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.WheelEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.WheelEventFromJS(value)
		src := SVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddWheel is adding doing AddEventListener for 'Wheel' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) AddEventWheel(listener func(event *htmlevent.WheelEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_WheelEvent(listener)
	_this.Value_JS.Call("addEventListener", "wheel", cb)
	return cb
}

// SetOnWheel is assigning a function to 'onwheel'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGElement) SetOnWheel(listener func(event *htmlevent.WheelEvent, currentTarget *SVGElement)) js.Func {
	cb := eventFuncSVGElement_htmlevent_WheelEvent(listener)
	_this.Value_JS.Set("onwheel", cb)
	return cb
}

func (_this *SVGElement) Focus(options *html.FocusOptions) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("focus", _args[0:_end]...)
	return
}

func (_this *SVGElement) Blur() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("blur", _args[0:_end]...)
	return
}

// class: SVGEllipseElement
type SVGEllipseElement struct {
	SVGGeometryElement
}

// SVGEllipseElementFromJS is casting a js.Value into SVGEllipseElement.
func SVGEllipseElementFromJS(value js.Value) *SVGEllipseElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGEllipseElement{}
	ret.Value_JS = value
	return ret
}

// SVGEllipseElementFromJS is casting from something that holds a js.Value into SVGEllipseElement.
func SVGEllipseElementFromWrapper(input core.Wrapper) *SVGEllipseElement {
	return SVGEllipseElementFromJS(input.JSValue())
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Rx returning attribute 'rx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Rx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("rx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Ry returning attribute 'ry' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGEllipseElement) Ry() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("ry")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGForeignObjectElement
type SVGForeignObjectElement struct {
	SVGGraphicsElement
}

// SVGForeignObjectElementFromJS is casting a js.Value into SVGForeignObjectElement.
func SVGForeignObjectElementFromJS(value js.Value) *SVGForeignObjectElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGForeignObjectElement{}
	ret.Value_JS = value
	return ret
}

// SVGForeignObjectElementFromJS is casting from something that holds a js.Value into SVGForeignObjectElement.
func SVGForeignObjectElementFromWrapper(input core.Wrapper) *SVGForeignObjectElement {
	return SVGForeignObjectElementFromJS(input.JSValue())
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGForeignObjectElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGGElement
type SVGGElement struct {
	SVGGraphicsElement
}

// SVGGElementFromJS is casting a js.Value into SVGGElement.
func SVGGElementFromJS(value js.Value) *SVGGElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGGElement{}
	ret.Value_JS = value
	return ret
}

// SVGGElementFromJS is casting from something that holds a js.Value into SVGGElement.
func SVGGElementFromWrapper(input core.Wrapper) *SVGGElement {
	return SVGGElementFromJS(input.JSValue())
}

// class: SVGGeometryElement
type SVGGeometryElement struct {
	SVGGraphicsElement
}

// SVGGeometryElementFromJS is casting a js.Value into SVGGeometryElement.
func SVGGeometryElementFromJS(value js.Value) *SVGGeometryElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGGeometryElement{}
	ret.Value_JS = value
	return ret
}

// SVGGeometryElementFromJS is casting from something that holds a js.Value into SVGGeometryElement.
func SVGGeometryElementFromWrapper(input core.Wrapper) *SVGGeometryElement {
	return SVGGeometryElementFromJS(input.JSValue())
}

// PathLength returning attribute 'pathLength' with
// type SVGAnimatedNumber (idl: SVGAnimatedNumber).
func (_this *SVGGeometryElement) PathLength() *SVGAnimatedNumber {
	var ret *SVGAnimatedNumber
	value := _this.Value_JS.Get("pathLength")
	ret = SVGAnimatedNumberFromJS(value)
	return ret
}

func (_this *SVGGeometryElement) IsPointInFill(point *geometry.DOMPointInit) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInFill", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGGeometryElement) IsPointInStroke(point *geometry.DOMPointInit) (_result bool) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("isPointInStroke", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGGeometryElement) GetTotalLength() (_result float32) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getTotalLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGGeometryElement) GetPointAtLength(distance float32) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := distance
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getPointAtLength", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

// class: SVGGradientElement
type SVGGradientElement struct {
	SVGElement
}

// SVGGradientElementFromJS is casting a js.Value into SVGGradientElement.
func SVGGradientElementFromJS(value js.Value) *SVGGradientElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGGradientElement{}
	ret.Value_JS = value
	return ret
}

// SVGGradientElementFromJS is casting from something that holds a js.Value into SVGGradientElement.
func SVGGradientElementFromWrapper(input core.Wrapper) *SVGGradientElement {
	return SVGGradientElementFromJS(input.JSValue())
}

const (
	SVG_SPREADMETHOD_UNKNOWN int = 0
	SVG_SPREADMETHOD_PAD     int = 1
	SVG_SPREADMETHOD_REFLECT int = 2
	SVG_SPREADMETHOD_REPEAT  int = 3
)

// GradientUnits returning attribute 'gradientUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGGradientElement) GradientUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("gradientUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// GradientTransform returning attribute 'gradientTransform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGGradientElement) GradientTransform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("gradientTransform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// SpreadMethod returning attribute 'spreadMethod' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGGradientElement) SpreadMethod() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("spreadMethod")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGGradientElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGGraphicsElement
type SVGGraphicsElement struct {
	SVGElement
}

// SVGGraphicsElementFromJS is casting a js.Value into SVGGraphicsElement.
func SVGGraphicsElementFromJS(value js.Value) *SVGGraphicsElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGGraphicsElement{}
	ret.Value_JS = value
	return ret
}

// SVGGraphicsElementFromJS is casting from something that holds a js.Value into SVGGraphicsElement.
func SVGGraphicsElementFromWrapper(input core.Wrapper) *SVGGraphicsElement {
	return SVGGraphicsElementFromJS(input.JSValue())
}

// Transform returning attribute 'transform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGGraphicsElement) Transform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("transform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// RequiredExtensions returning attribute 'requiredExtensions' with
// type SVGStringList (idl: SVGStringList).
func (_this *SVGGraphicsElement) RequiredExtensions() *SVGStringList {
	var ret *SVGStringList
	value := _this.Value_JS.Get("requiredExtensions")
	ret = SVGStringListFromJS(value)
	return ret
}

// SystemLanguage returning attribute 'systemLanguage' with
// type SVGStringList (idl: SVGStringList).
func (_this *SVGGraphicsElement) SystemLanguage() *SVGStringList {
	var ret *SVGStringList
	value := _this.Value_JS.Get("systemLanguage")
	ret = SVGStringListFromJS(value)
	return ret
}

func (_this *SVGGraphicsElement) GetBBox(options *SVGBoundingBoxOptions) (_result *geometry.DOMRect) {
	var (
		_args [1]interface{}
		_end  int
	)
	if options != nil {
		_p0 := options.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getBBox", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGGraphicsElement) GetCTM() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getCTM", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = geometry.DOMMatrixFromJS(_returned)
	}
	_result = _converted
	return
}

func (_this *SVGGraphicsElement) GetScreenCTM() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getScreenCTM", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = geometry.DOMMatrixFromJS(_returned)
	}
	_result = _converted
	return
}

// class: SVGImageElement
type SVGImageElement struct {
	SVGGraphicsElement
}

// SVGImageElementFromJS is casting a js.Value into SVGImageElement.
func SVGImageElementFromJS(value js.Value) *SVGImageElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGImageElement{}
	ret.Value_JS = value
	return ret
}

// SVGImageElementFromJS is casting from something that holds a js.Value into SVGImageElement.
func SVGImageElementFromWrapper(input core.Wrapper) *SVGImageElement {
	return SVGImageElementFromJS(input.JSValue())
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGImageElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGImageElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGImageElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGImageElement) SetCrossOrigin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("crossOrigin", input)
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGImageElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGLength
type SVGLength struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGLength) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGLengthFromJS is casting a js.Value into SVGLength.
func SVGLengthFromJS(value js.Value) *SVGLength {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGLength{}
	ret.Value_JS = value
	return ret
}

// SVGLengthFromJS is casting from something that holds a js.Value into SVGLength.
func SVGLengthFromWrapper(input core.Wrapper) *SVGLength {
	return SVGLengthFromJS(input.JSValue())
}

const (
	SVG_LENGTHTYPE_UNKNOWN    int = 0
	SVG_LENGTHTYPE_NUMBER     int = 1
	SVG_LENGTHTYPE_PERCENTAGE int = 2
	SVG_LENGTHTYPE_EMS        int = 3
	SVG_LENGTHTYPE_EXS        int = 4
	SVG_LENGTHTYPE_PX         int = 5
	SVG_LENGTHTYPE_CM         int = 6
	SVG_LENGTHTYPE_MM         int = 7
	SVG_LENGTHTYPE_IN         int = 8
	SVG_LENGTHTYPE_PT         int = 9
	SVG_LENGTHTYPE_PC         int = 10
)

// UnitType returning attribute 'unitType' with
// type int (idl: unsigned short).
func (_this *SVGLength) UnitType() int {
	var ret int
	value := _this.Value_JS.Get("unitType")
	ret = (value).Int()
	return ret
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGLength) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGLength) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// ValueInSpecifiedUnits returning attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGLength) ValueInSpecifiedUnits() float32 {
	var ret float32
	value := _this.Value_JS.Get("valueInSpecifiedUnits")
	ret = (float32)((value).Float())
	return ret
}

// SetValueInSpecifiedUnits setting attribute 'valueInSpecifiedUnits' with
// type float32 (idl: float).
func (_this *SVGLength) SetValueInSpecifiedUnits(value float32) {
	input := value
	_this.Value_JS.Set("valueInSpecifiedUnits", input)
}

// ValueAsString returning attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGLength) ValueAsString() string {
	var ret string
	value := _this.Value_JS.Get("valueAsString")
	ret = (value).String()
	return ret
}

// SetValueAsString setting attribute 'valueAsString' with
// type string (idl: DOMString).
func (_this *SVGLength) SetValueAsString(value string) {
	input := value
	_this.Value_JS.Set("valueAsString", input)
}

func (_this *SVGLength) NewValueSpecifiedUnits(unitType int, valueInSpecifiedUnits float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_p1 := valueInSpecifiedUnits
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("newValueSpecifiedUnits", _args[0:_end]...)
	return
}

func (_this *SVGLength) ConvertToSpecifiedUnits(unitType int) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := unitType
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("convertToSpecifiedUnits", _args[0:_end]...)
	return
}

// class: SVGLengthList
type SVGLengthList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGLengthList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGLengthListFromJS is casting a js.Value into SVGLengthList.
func SVGLengthListFromJS(value js.Value) *SVGLengthList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGLengthList{}
	ret.Value_JS = value
	return ret
}

// SVGLengthListFromJS is casting from something that holds a js.Value into SVGLengthList.
func SVGLengthListFromWrapper(input core.Wrapper) *SVGLengthList {
	return SVGLengthListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGLengthList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGLengthList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGLengthList) Index(index uint) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) SetIndex(index uint, newItem *SVGLength) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := newItem.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *SVGLengthList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGLengthList) Initialize(newItem *SVGLength) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) GetItem(index uint) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) InsertItemBefore(newItem *SVGLength, index uint) (_result *SVGLength) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) ReplaceItem(newItem *SVGLength, index uint) (_result *SVGLength) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) RemoveItem(index uint) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGLengthList) AppendItem(newItem *SVGLength) (_result *SVGLength) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

// class: SVGLineElement
type SVGLineElement struct {
	SVGGeometryElement
}

// SVGLineElementFromJS is casting a js.Value into SVGLineElement.
func SVGLineElementFromJS(value js.Value) *SVGLineElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGLineElement{}
	ret.Value_JS = value
	return ret
}

// SVGLineElementFromJS is casting from something that holds a js.Value into SVGLineElement.
func SVGLineElementFromWrapper(input core.Wrapper) *SVGLineElement {
	return SVGLineElementFromJS(input.JSValue())
}

// X1 returning attribute 'x1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) X1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y1 returning attribute 'y1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) Y1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// X2 returning attribute 'x2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) X2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y2 returning attribute 'y2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLineElement) Y2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGLinearGradientElement
type SVGLinearGradientElement struct {
	SVGGradientElement
}

// SVGLinearGradientElementFromJS is casting a js.Value into SVGLinearGradientElement.
func SVGLinearGradientElementFromJS(value js.Value) *SVGLinearGradientElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGLinearGradientElement{}
	ret.Value_JS = value
	return ret
}

// SVGLinearGradientElementFromJS is casting from something that holds a js.Value into SVGLinearGradientElement.
func SVGLinearGradientElementFromWrapper(input core.Wrapper) *SVGLinearGradientElement {
	return SVGLinearGradientElementFromJS(input.JSValue())
}

// X1 returning attribute 'x1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) X1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y1 returning attribute 'y1' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) Y1() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y1")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// X2 returning attribute 'x2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) X2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y2 returning attribute 'y2' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGLinearGradientElement) Y2() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y2")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGMarkerElement
type SVGMarkerElement struct {
	SVGElement
}

// SVGMarkerElementFromJS is casting a js.Value into SVGMarkerElement.
func SVGMarkerElementFromJS(value js.Value) *SVGMarkerElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGMarkerElement{}
	ret.Value_JS = value
	return ret
}

// SVGMarkerElementFromJS is casting from something that holds a js.Value into SVGMarkerElement.
func SVGMarkerElementFromWrapper(input core.Wrapper) *SVGMarkerElement {
	return SVGMarkerElementFromJS(input.JSValue())
}

const (
	SVG_MARKERUNITS_UNKNOWN        int = 0
	SVG_MARKERUNITS_USERSPACEONUSE int = 1
	SVG_MARKERUNITS_STROKEWIDTH    int = 2
	SVG_MARKER_ORIENT_UNKNOWN      int = 0
	SVG_MARKER_ORIENT_AUTO         int = 1
	SVG_MARKER_ORIENT_ANGLE        int = 2
)

// RefX returning attribute 'refX' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) RefX() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("refX")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// RefY returning attribute 'refY' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) RefY() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("refY")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// MarkerUnits returning attribute 'markerUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGMarkerElement) MarkerUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("markerUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// MarkerWidth returning attribute 'markerWidth' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) MarkerWidth() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("markerWidth")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// MarkerHeight returning attribute 'markerHeight' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGMarkerElement) MarkerHeight() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("markerHeight")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// OrientType returning attribute 'orientType' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGMarkerElement) OrientType() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("orientType")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// OrientAngle returning attribute 'orientAngle' with
// type SVGAnimatedAngle (idl: SVGAnimatedAngle).
func (_this *SVGMarkerElement) OrientAngle() *SVGAnimatedAngle {
	var ret *SVGAnimatedAngle
	value := _this.Value_JS.Get("orientAngle")
	ret = SVGAnimatedAngleFromJS(value)
	return ret
}

// Orient returning attribute 'orient' with
// type string (idl: DOMString).
func (_this *SVGMarkerElement) Orient() string {
	var ret string
	value := _this.Value_JS.Get("orient")
	ret = (value).String()
	return ret
}

// SetOrient setting attribute 'orient' with
// type string (idl: DOMString).
func (_this *SVGMarkerElement) SetOrient(value string) {
	input := value
	_this.Value_JS.Set("orient", input)
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGMarkerElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGMarkerElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

func (_this *SVGMarkerElement) SetOrientToAuto() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("setOrientToAuto", _args[0:_end]...)
	return
}

func (_this *SVGMarkerElement) SetOrientToAngle(angle *SVGAngle) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle.JSValue()
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setOrientToAngle", _args[0:_end]...)
	return
}

// class: SVGMetadataElement
type SVGMetadataElement struct {
	SVGElement
}

// SVGMetadataElementFromJS is casting a js.Value into SVGMetadataElement.
func SVGMetadataElementFromJS(value js.Value) *SVGMetadataElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGMetadataElement{}
	ret.Value_JS = value
	return ret
}

// SVGMetadataElementFromJS is casting from something that holds a js.Value into SVGMetadataElement.
func SVGMetadataElementFromWrapper(input core.Wrapper) *SVGMetadataElement {
	return SVGMetadataElementFromJS(input.JSValue())
}

// class: SVGNumber
type SVGNumber struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGNumber) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGNumberFromJS is casting a js.Value into SVGNumber.
func SVGNumberFromJS(value js.Value) *SVGNumber {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGNumber{}
	ret.Value_JS = value
	return ret
}

// SVGNumberFromJS is casting from something that holds a js.Value into SVGNumber.
func SVGNumberFromWrapper(input core.Wrapper) *SVGNumber {
	return SVGNumberFromJS(input.JSValue())
}

// Value returning attribute 'value' with
// type float32 (idl: float).
func (_this *SVGNumber) Value() float32 {
	var ret float32
	value := _this.Value_JS.Get("value")
	ret = (float32)((value).Float())
	return ret
}

// SetValue setting attribute 'value' with
// type float32 (idl: float).
func (_this *SVGNumber) SetValue(value float32) {
	input := value
	_this.Value_JS.Set("value", input)
}

// class: SVGNumberList
type SVGNumberList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGNumberList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGNumberListFromJS is casting a js.Value into SVGNumberList.
func SVGNumberListFromJS(value js.Value) *SVGNumberList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGNumberList{}
	ret.Value_JS = value
	return ret
}

// SVGNumberListFromJS is casting from something that holds a js.Value into SVGNumberList.
func SVGNumberListFromWrapper(input core.Wrapper) *SVGNumberList {
	return SVGNumberListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGNumberList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGNumberList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGNumberList) Index(index uint) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) SetIndex(index uint, newItem *SVGNumber) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := newItem.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *SVGNumberList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGNumberList) Initialize(newItem *SVGNumber) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) GetItem(index uint) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) InsertItemBefore(newItem *SVGNumber, index uint) (_result *SVGNumber) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) ReplaceItem(newItem *SVGNumber, index uint) (_result *SVGNumber) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) RemoveItem(index uint) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGNumberList) AppendItem(newItem *SVGNumber) (_result *SVGNumber) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

// class: SVGPathElement
type SVGPathElement struct {
	SVGGeometryElement
}

// SVGPathElementFromJS is casting a js.Value into SVGPathElement.
func SVGPathElementFromJS(value js.Value) *SVGPathElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPathElement{}
	ret.Value_JS = value
	return ret
}

// SVGPathElementFromJS is casting from something that holds a js.Value into SVGPathElement.
func SVGPathElementFromWrapper(input core.Wrapper) *SVGPathElement {
	return SVGPathElementFromJS(input.JSValue())
}

// class: SVGPatternElement
type SVGPatternElement struct {
	SVGElement
}

// SVGPatternElementFromJS is casting a js.Value into SVGPatternElement.
func SVGPatternElementFromJS(value js.Value) *SVGPatternElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPatternElement{}
	ret.Value_JS = value
	return ret
}

// SVGPatternElementFromJS is casting from something that holds a js.Value into SVGPatternElement.
func SVGPatternElementFromWrapper(input core.Wrapper) *SVGPatternElement {
	return SVGPatternElementFromJS(input.JSValue())
}

// PatternUnits returning attribute 'patternUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGPatternElement) PatternUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("patternUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// PatternContentUnits returning attribute 'patternContentUnits' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGPatternElement) PatternContentUnits() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("patternContentUnits")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// PatternTransform returning attribute 'patternTransform' with
// type SVGAnimatedTransformList (idl: SVGAnimatedTransformList).
func (_this *SVGPatternElement) PatternTransform() *SVGAnimatedTransformList {
	var ret *SVGAnimatedTransformList
	value := _this.Value_JS.Get("patternTransform")
	ret = SVGAnimatedTransformListFromJS(value)
	return ret
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGPatternElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGPatternElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGPatternElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGPatternElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGPointList
type SVGPointList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGPointList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGPointListFromJS is casting a js.Value into SVGPointList.
func SVGPointListFromJS(value js.Value) *SVGPointList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPointList{}
	ret.Value_JS = value
	return ret
}

// SVGPointListFromJS is casting from something that holds a js.Value into SVGPointList.
func SVGPointListFromWrapper(input core.Wrapper) *SVGPointList {
	return SVGPointListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGPointList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGPointList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGPointList) Index(index uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) SetIndex(index uint, newItem *geometry.DOMPoint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := newItem.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *SVGPointList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGPointList) Initialize(newItem *geometry.DOMPoint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) GetItem(index uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) InsertItemBefore(newItem *geometry.DOMPoint, index uint) (_result *geometry.DOMPoint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) ReplaceItem(newItem *geometry.DOMPoint, index uint) (_result *geometry.DOMPoint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) RemoveItem(index uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGPointList) AppendItem(newItem *geometry.DOMPoint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

// class: SVGPolygonElement
type SVGPolygonElement struct {
	SVGGeometryElement
}

// SVGPolygonElementFromJS is casting a js.Value into SVGPolygonElement.
func SVGPolygonElementFromJS(value js.Value) *SVGPolygonElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPolygonElement{}
	ret.Value_JS = value
	return ret
}

// SVGPolygonElementFromJS is casting from something that holds a js.Value into SVGPolygonElement.
func SVGPolygonElementFromWrapper(input core.Wrapper) *SVGPolygonElement {
	return SVGPolygonElementFromJS(input.JSValue())
}

// Points returning attribute 'points' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolygonElement) Points() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("points")
	ret = SVGPointListFromJS(value)
	return ret
}

// AnimatedPoints returning attribute 'animatedPoints' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolygonElement) AnimatedPoints() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("animatedPoints")
	ret = SVGPointListFromJS(value)
	return ret
}

// class: SVGPolylineElement
type SVGPolylineElement struct {
	SVGGeometryElement
}

// SVGPolylineElementFromJS is casting a js.Value into SVGPolylineElement.
func SVGPolylineElementFromJS(value js.Value) *SVGPolylineElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPolylineElement{}
	ret.Value_JS = value
	return ret
}

// SVGPolylineElementFromJS is casting from something that holds a js.Value into SVGPolylineElement.
func SVGPolylineElementFromWrapper(input core.Wrapper) *SVGPolylineElement {
	return SVGPolylineElementFromJS(input.JSValue())
}

// Points returning attribute 'points' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolylineElement) Points() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("points")
	ret = SVGPointListFromJS(value)
	return ret
}

// AnimatedPoints returning attribute 'animatedPoints' with
// type SVGPointList (idl: SVGPointList).
func (_this *SVGPolylineElement) AnimatedPoints() *SVGPointList {
	var ret *SVGPointList
	value := _this.Value_JS.Get("animatedPoints")
	ret = SVGPointListFromJS(value)
	return ret
}

// class: SVGPreserveAspectRatio
type SVGPreserveAspectRatio struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGPreserveAspectRatio) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGPreserveAspectRatioFromJS is casting a js.Value into SVGPreserveAspectRatio.
func SVGPreserveAspectRatioFromJS(value js.Value) *SVGPreserveAspectRatio {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGPreserveAspectRatio{}
	ret.Value_JS = value
	return ret
}

// SVGPreserveAspectRatioFromJS is casting from something that holds a js.Value into SVGPreserveAspectRatio.
func SVGPreserveAspectRatioFromWrapper(input core.Wrapper) *SVGPreserveAspectRatio {
	return SVGPreserveAspectRatioFromJS(input.JSValue())
}

const (
	SVG_PRESERVEASPECTRATIO_UNKNOWN  int = 0
	SVG_PRESERVEASPECTRATIO_NONE     int = 1
	SVG_PRESERVEASPECTRATIO_XMINYMIN int = 2
	SVG_PRESERVEASPECTRATIO_XMIDYMIN int = 3
	SVG_PRESERVEASPECTRATIO_XMAXYMIN int = 4
	SVG_PRESERVEASPECTRATIO_XMINYMID int = 5
	SVG_PRESERVEASPECTRATIO_XMIDYMID int = 6
	SVG_PRESERVEASPECTRATIO_XMAXYMID int = 7
	SVG_PRESERVEASPECTRATIO_XMINYMAX int = 8
	SVG_PRESERVEASPECTRATIO_XMIDYMAX int = 9
	SVG_PRESERVEASPECTRATIO_XMAXYMAX int = 10
	SVG_MEETORSLICE_UNKNOWN          int = 0
	SVG_MEETORSLICE_MEET             int = 1
	SVG_MEETORSLICE_SLICE            int = 2
)

// Align returning attribute 'align' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) Align() int {
	var ret int
	value := _this.Value_JS.Get("align")
	ret = (value).Int()
	return ret
}

// SetAlign setting attribute 'align' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) SetAlign(value int) {
	input := value
	_this.Value_JS.Set("align", input)
}

// MeetOrSlice returning attribute 'meetOrSlice' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) MeetOrSlice() int {
	var ret int
	value := _this.Value_JS.Get("meetOrSlice")
	ret = (value).Int()
	return ret
}

// SetMeetOrSlice setting attribute 'meetOrSlice' with
// type int (idl: unsigned short).
func (_this *SVGPreserveAspectRatio) SetMeetOrSlice(value int) {
	input := value
	_this.Value_JS.Set("meetOrSlice", input)
}

// class: SVGRadialGradientElement
type SVGRadialGradientElement struct {
	SVGGradientElement
}

// SVGRadialGradientElementFromJS is casting a js.Value into SVGRadialGradientElement.
func SVGRadialGradientElementFromJS(value js.Value) *SVGRadialGradientElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGRadialGradientElement{}
	ret.Value_JS = value
	return ret
}

// SVGRadialGradientElementFromJS is casting from something that holds a js.Value into SVGRadialGradientElement.
func SVGRadialGradientElementFromWrapper(input core.Wrapper) *SVGRadialGradientElement {
	return SVGRadialGradientElementFromJS(input.JSValue())
}

// Cx returning attribute 'cx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Cx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Cy returning attribute 'cy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Cy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("cy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// R returning attribute 'r' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) R() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("r")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fx returning attribute 'fx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fy returning attribute 'fy' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fy() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fy")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Fr returning attribute 'fr' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRadialGradientElement) Fr() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("fr")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGRectElement
type SVGRectElement struct {
	SVGGeometryElement
}

// SVGRectElementFromJS is casting a js.Value into SVGRectElement.
func SVGRectElementFromJS(value js.Value) *SVGRectElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGRectElement{}
	ret.Value_JS = value
	return ret
}

// SVGRectElementFromJS is casting from something that holds a js.Value into SVGRectElement.
func SVGRectElementFromWrapper(input core.Wrapper) *SVGRectElement {
	return SVGRectElementFromJS(input.JSValue())
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Rx returning attribute 'rx' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Rx() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("rx")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Ry returning attribute 'ry' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGRectElement) Ry() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("ry")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// class: SVGSVGElement
type SVGSVGElement struct {
	SVGGraphicsElement
}

// SVGSVGElementFromJS is casting a js.Value into SVGSVGElement.
func SVGSVGElementFromJS(value js.Value) *SVGSVGElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGSVGElement{}
	ret.Value_JS = value
	return ret
}

// SVGSVGElementFromJS is casting from something that holds a js.Value into SVGSVGElement.
func SVGSVGElementFromWrapper(input core.Wrapper) *SVGSVGElement {
	return SVGSVGElementFromJS(input.JSValue())
}

const (
	SVG_ZOOMANDPAN_UNKNOWN int = 0
	SVG_ZOOMANDPAN_DISABLE int = 1
	SVG_ZOOMANDPAN_MAGNIFY int = 2
)

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGSVGElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// CurrentScale returning attribute 'currentScale' with
// type float32 (idl: float).
func (_this *SVGSVGElement) CurrentScale() float32 {
	var ret float32
	value := _this.Value_JS.Get("currentScale")
	ret = (float32)((value).Float())
	return ret
}

// SetCurrentScale setting attribute 'currentScale' with
// type float32 (idl: float).
func (_this *SVGSVGElement) SetCurrentScale(value float32) {
	input := value
	_this.Value_JS.Set("currentScale", input)
}

// CurrentTranslate returning attribute 'currentTranslate' with
// type geometry.DOMPointReadOnly (idl: DOMPointReadOnly).
func (_this *SVGSVGElement) CurrentTranslate() *geometry.DOMPointReadOnly {
	var ret *geometry.DOMPointReadOnly
	value := _this.Value_JS.Get("currentTranslate")
	ret = geometry.DOMPointReadOnlyFromJS(value)
	return ret
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGSVGElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGSVGElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// ZoomAndPan returning attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGSVGElement) ZoomAndPan() int {
	var ret int
	value := _this.Value_JS.Get("zoomAndPan")
	ret = (value).Int()
	return ret
}

// SetZoomAndPan setting attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGSVGElement) SetZoomAndPan(value int) {
	input := value
	_this.Value_JS.Set("zoomAndPan", input)
}

// OnAfterPrint returning attribute 'onafterprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnAfterPrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onafterprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforePrint returning attribute 'onbeforeprint' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnBeforePrint() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onbeforeprint")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnBeforeUnload returning attribute 'onbeforeunload' with
// type htmlcommon.OnBeforeUnloadEventHandler (idl: OnBeforeUnloadEventHandlerNonNull).
func (_this *SVGSVGElement) OnBeforeUnload() htmlcommon.OnBeforeUnloadEventHandlerFunc {
	var ret htmlcommon.OnBeforeUnloadEventHandlerFunc
	value := _this.Value_JS.Get("onbeforeunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = htmlcommon.OnBeforeUnloadEventHandlerFromJS(value)
	}
	return ret
}

// OnHashChange returning attribute 'onhashchange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnHashChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onhashchange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnLanguageChange returning attribute 'onlanguagechange' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnLanguageChange() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onlanguagechange")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessage returning attribute 'onmessage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnMessage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnMessageError returning attribute 'onmessageerror' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnMessageError() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onmessageerror")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOffline returning attribute 'onoffline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnOffline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onoffline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnOnline returning attribute 'ononline' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnOnline() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("ononline")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageHide returning attribute 'onpagehide' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnPageHide() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpagehide")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPageShow returning attribute 'onpageshow' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnPageShow() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpageshow")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnPopState returning attribute 'onpopstate' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnPopState() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onpopstate")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnRejectionHandled returning attribute 'onrejectionhandled' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnRejectionHandled() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onrejectionhandled")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnStorage returning attribute 'onstorage' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnStorage() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onstorage")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnhandledRejection returning attribute 'onunhandledrejection' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnUnhandledRejection() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunhandledrejection")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// OnUnload returning attribute 'onunload' with
// type domcore.EventHandler (idl: EventHandlerNonNull).
func (_this *SVGSVGElement) OnUnload() domcore.EventHandlerFunc {
	var ret domcore.EventHandlerFunc
	value := _this.Value_JS.Get("onunload")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = domcore.EventHandlerFromJS(value)
	}
	return ret
}

// event attribute: domcore.Event
func eventFuncSVGSVGElement_domcore_Event(listener func(event *domcore.Event, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *domcore.Event
		value := args[0]
		incoming := value.Get("target")
		ret = domcore.EventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddAfterPrint is adding doing AddEventListener for 'AfterPrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventAfterPrint(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "afterprint", cb)
	return cb
}

// SetOnAfterPrint is assigning a function to 'onafterprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnAfterPrint(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onafterprint", cb)
	return cb
}

// AddBeforePrint is adding doing AddEventListener for 'BeforePrint' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventBeforePrint(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "beforeprint", cb)
	return cb
}

// SetOnBeforePrint is assigning a function to 'onbeforeprint'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnBeforePrint(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onbeforeprint", cb)
	return cb
}

// event attribute: htmlcommon.BeforeUnloadEvent
func eventFuncSVGSVGElement_htmlcommon_BeforeUnloadEvent(listener func(event *htmlcommon.BeforeUnloadEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlcommon.BeforeUnloadEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlcommon.BeforeUnloadEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddBeforeUnload is adding doing AddEventListener for 'BeforeUnload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Call("addEventListener", "beforeunload", cb)
	return cb
}

// SetOnBeforeUnload is assigning a function to 'onbeforeunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnBeforeUnload(listener func(event *htmlcommon.BeforeUnloadEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlcommon_BeforeUnloadEvent(listener)
	_this.Value_JS.Set("onbeforeunload", cb)
	return cb
}

// event attribute: htmlevent.HashChangeEvent
func eventFuncSVGSVGElement_htmlevent_HashChangeEvent(listener func(event *htmlevent.HashChangeEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.HashChangeEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.HashChangeEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddHashChange is adding doing AddEventListener for 'HashChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Call("addEventListener", "hashchange", cb)
	return cb
}

// SetOnHashChange is assigning a function to 'onhashchange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnHashChange(listener func(event *htmlevent.HashChangeEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_HashChangeEvent(listener)
	_this.Value_JS.Set("onhashchange", cb)
	return cb
}

// AddLanguageChange is adding doing AddEventListener for 'LanguageChange' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventLanguageChange(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "languagechange", cb)
	return cb
}

// SetOnLanguageChange is assigning a function to 'onlanguagechange'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnLanguageChange(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onlanguagechange", cb)
	return cb
}

// event attribute: channel.MessageEvent
func eventFuncSVGSVGElement_channel_MessageEvent(listener func(event *channel.MessageEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *channel.MessageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = channel.MessageEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddMessage is adding doing AddEventListener for 'Message' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventMessage(listener func(event *channel.MessageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "message", cb)
	return cb
}

// SetOnMessage is assigning a function to 'onmessage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnMessage(listener func(event *channel.MessageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessage", cb)
	return cb
}

// AddMessageError is adding doing AddEventListener for 'MessageError' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventMessageError(listener func(event *channel.MessageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_channel_MessageEvent(listener)
	_this.Value_JS.Call("addEventListener", "messageerror", cb)
	return cb
}

// SetOnMessageError is assigning a function to 'onmessageerror'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnMessageError(listener func(event *channel.MessageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_channel_MessageEvent(listener)
	_this.Value_JS.Set("onmessageerror", cb)
	return cb
}

// AddOffline is adding doing AddEventListener for 'Offline' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventOffline(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "offline", cb)
	return cb
}

// SetOnOffline is assigning a function to 'onoffline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnOffline(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onoffline", cb)
	return cb
}

// AddOnline is adding doing AddEventListener for 'Online' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventOnline(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "online", cb)
	return cb
}

// SetOnOnline is assigning a function to 'ononline'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnOnline(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("ononline", cb)
	return cb
}

// event attribute: htmlevent.PageTransitionEvent
func eventFuncSVGSVGElement_htmlevent_PageTransitionEvent(listener func(event *htmlevent.PageTransitionEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PageTransitionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PageTransitionEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPageHide is adding doing AddEventListener for 'PageHide' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pagehide", cb)
	return cb
}

// SetOnPageHide is assigning a function to 'onpagehide'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnPageHide(listener func(event *htmlevent.PageTransitionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpagehide", cb)
	return cb
}

// AddPageShow is adding doing AddEventListener for 'PageShow' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Call("addEventListener", "pageshow", cb)
	return cb
}

// SetOnPageShow is assigning a function to 'onpageshow'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnPageShow(listener func(event *htmlevent.PageTransitionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PageTransitionEvent(listener)
	_this.Value_JS.Set("onpageshow", cb)
	return cb
}

// event attribute: htmlevent.PopStateEvent
func eventFuncSVGSVGElement_htmlevent_PopStateEvent(listener func(event *htmlevent.PopStateEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PopStateEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PopStateEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddPopState is adding doing AddEventListener for 'PopState' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Call("addEventListener", "popstate", cb)
	return cb
}

// SetOnPopState is assigning a function to 'onpopstate'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnPopState(listener func(event *htmlevent.PopStateEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PopStateEvent(listener)
	_this.Value_JS.Set("onpopstate", cb)
	return cb
}

// event attribute: htmlevent.PromiseRejectionEvent
func eventFuncSVGSVGElement_htmlevent_PromiseRejectionEvent(listener func(event *htmlevent.PromiseRejectionEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.PromiseRejectionEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.PromiseRejectionEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddRejectionHandled is adding doing AddEventListener for 'RejectionHandled' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "rejectionhandled", cb)
	return cb
}

// SetOnRejectionHandled is assigning a function to 'onrejectionhandled'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnRejectionHandled(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onrejectionhandled", cb)
	return cb
}

// event attribute: htmlevent.StorageEvent
func eventFuncSVGSVGElement_htmlevent_StorageEvent(listener func(event *htmlevent.StorageEvent, target *SVGSVGElement)) js.Func {
	fn := func(this js.Value, args []js.Value) interface{} {
		var ret *htmlevent.StorageEvent
		value := args[0]
		incoming := value.Get("target")
		ret = htmlevent.StorageEventFromJS(value)
		src := SVGSVGElementFromJS(incoming)
		listener(ret, src)
		return js.Undefined()
	}
	return js.FuncOf(fn)
}

// AddStorage is adding doing AddEventListener for 'Storage' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventStorage(listener func(event *htmlevent.StorageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Call("addEventListener", "storage", cb)
	return cb
}

// SetOnStorage is assigning a function to 'onstorage'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnStorage(listener func(event *htmlevent.StorageEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_StorageEvent(listener)
	_this.Value_JS.Set("onstorage", cb)
	return cb
}

// AddUnhandledRejection is adding doing AddEventListener for 'UnhandledRejection' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Call("addEventListener", "unhandledrejection", cb)
	return cb
}

// SetOnUnhandledRejection is assigning a function to 'onunhandledrejection'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnUnhandledRejection(listener func(event *htmlevent.PromiseRejectionEvent, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_htmlevent_PromiseRejectionEvent(listener)
	_this.Value_JS.Set("onunhandledrejection", cb)
	return cb
}

// AddUnload is adding doing AddEventListener for 'Unload' on target.
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) AddEventUnload(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Call("addEventListener", "unload", cb)
	return cb
}

// SetOnUnload is assigning a function to 'onunload'. This
// This method is returning allocated javascript function that need to be released.
func (_this *SVGSVGElement) SetOnUnload(listener func(event *domcore.Event, currentTarget *SVGSVGElement)) js.Func {
	cb := eventFuncSVGSVGElement_domcore_Event(listener)
	_this.Value_JS.Set("onunload", cb)
	return cb
}

func (_this *SVGSVGElement) GetIntersectionList(rect *geometry.DOMRectReadOnly, referenceElement *SVGElement) (_result *dom.NodeList) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := referenceElement.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getIntersectionList", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) GetEnclosureList(rect *geometry.DOMRectReadOnly, referenceElement *SVGElement) (_result *dom.NodeList) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := rect.JSValue()
	_args[0] = _p0
	_end++
	_p1 := referenceElement.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getEnclosureList", _args[0:_end]...)
	var (
		_converted *dom.NodeList // javascript: NodeList _what_return_name
	)
	_converted = dom.NodeListFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CheckIntersection(element *SVGElement, rect *geometry.DOMRectReadOnly) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_p1 := rect.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("checkIntersection", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGSVGElement) CheckEnclosure(element *SVGElement, rect *geometry.DOMRectReadOnly) (_result bool) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := element.JSValue()
	_args[0] = _p0
	_end++
	_p1 := rect.JSValue()
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("checkEnclosure", _args[0:_end]...)
	var (
		_converted bool // javascript: boolean _what_return_name
	)
	_converted = (_returned).Bool()
	_result = _converted
	return
}

func (_this *SVGSVGElement) DeselectAll() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("deselectAll", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) CreateSVGNumber() (_result *SVGNumber) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGNumber", _args[0:_end]...)
	var (
		_converted *SVGNumber // javascript: SVGNumber _what_return_name
	)
	_converted = SVGNumberFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGLength() (_result *SVGLength) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGLength", _args[0:_end]...)
	var (
		_converted *SVGLength // javascript: SVGLength _what_return_name
	)
	_converted = SVGLengthFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGAngle() (_result *SVGAngle) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGAngle", _args[0:_end]...)
	var (
		_converted *SVGAngle // javascript: SVGAngle _what_return_name
	)
	_converted = SVGAngleFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGPoint() (_result *geometry.DOMPoint) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGPoint", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGMatrix() (_result *geometry.DOMMatrix) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGMatrix", _args[0:_end]...)
	var (
		_converted *geometry.DOMMatrix // javascript: DOMMatrix _what_return_name
	)
	_converted = geometry.DOMMatrixFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGRect() (_result *geometry.DOMRect) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGRect", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGTransform() (_result *SVGTransform) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("createSVGTransform", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) CreateSVGTransformFromMatrix(matrix *geometry.DOMMatrix2DInit) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createSVGTransformFromMatrix", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) GetElementById(elementId string) (_result *dom.Element) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := elementId
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getElementById", _args[0:_end]...)
	var (
		_converted *dom.Element // javascript: Element _what_return_name
	)
	_converted = dom.ElementFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGSVGElement) SuspendRedraw(maxWaitMilliseconds uint) (_result uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := maxWaitMilliseconds
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("suspendRedraw", _args[0:_end]...)
	var (
		_converted uint // javascript: unsigned long _what_return_name
	)
	_converted = (uint)((_returned).Int())
	_result = _converted
	return
}

func (_this *SVGSVGElement) UnsuspendRedraw(suspendHandleID uint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := suspendHandleID
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("unsuspendRedraw", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) UnsuspendRedrawAll() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("unsuspendRedrawAll", _args[0:_end]...)
	return
}

func (_this *SVGSVGElement) ForceRedraw() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("forceRedraw", _args[0:_end]...)
	return
}

// class: SVGScriptElement
type SVGScriptElement struct {
	SVGElement
}

// SVGScriptElementFromJS is casting a js.Value into SVGScriptElement.
func SVGScriptElementFromJS(value js.Value) *SVGScriptElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGScriptElement{}
	ret.Value_JS = value
	return ret
}

// SVGScriptElementFromJS is casting from something that holds a js.Value into SVGScriptElement.
func SVGScriptElementFromWrapper(input core.Wrapper) *SVGScriptElement {
	return SVGScriptElementFromJS(input.JSValue())
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// CrossOrigin returning attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) CrossOrigin() *string {
	var ret *string
	value := _this.Value_JS.Get("crossOrigin")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// SetCrossOrigin setting attribute 'crossOrigin' with
// type string (idl: DOMString).
func (_this *SVGScriptElement) SetCrossOrigin(value *string) {
	var input interface{}
	if value != nil {
		input = *(value)
	} else {
		input = nil
	}
	_this.Value_JS.Set("crossOrigin", input)
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGScriptElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGStopElement
type SVGStopElement struct {
	SVGElement
}

// SVGStopElementFromJS is casting a js.Value into SVGStopElement.
func SVGStopElementFromJS(value js.Value) *SVGStopElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGStopElement{}
	ret.Value_JS = value
	return ret
}

// SVGStopElementFromJS is casting from something that holds a js.Value into SVGStopElement.
func SVGStopElementFromWrapper(input core.Wrapper) *SVGStopElement {
	return SVGStopElementFromJS(input.JSValue())
}

// Offset returning attribute 'offset' with
// type SVGAnimatedNumber (idl: SVGAnimatedNumber).
func (_this *SVGStopElement) Offset() *SVGAnimatedNumber {
	var ret *SVGAnimatedNumber
	value := _this.Value_JS.Get("offset")
	ret = SVGAnimatedNumberFromJS(value)
	return ret
}

// class: SVGStringList
type SVGStringList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGStringList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGStringListFromJS is casting a js.Value into SVGStringList.
func SVGStringListFromJS(value js.Value) *SVGStringList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGStringList{}
	ret.Value_JS = value
	return ret
}

// SVGStringListFromJS is casting from something that holds a js.Value into SVGStringList.
func SVGStringListFromWrapper(input core.Wrapper) *SVGStringList {
	return SVGStringListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGStringList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGStringList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGStringList) Index(index uint) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) SetIndex(index uint, newItem string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := newItem
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *SVGStringList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGStringList) Initialize(newItem string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) GetItem(index uint) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) InsertItemBefore(newItem string, index uint) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) ReplaceItem(newItem string, index uint) (_result string) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) RemoveItem(index uint) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

func (_this *SVGStringList) AppendItem(newItem string) (_result string) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted string // javascript: DOMString _what_return_name
	)
	_converted = (_returned).String()
	_result = _converted
	return
}

// class: SVGStyleElement
type SVGStyleElement struct {
	SVGElement
}

// SVGStyleElementFromJS is casting a js.Value into SVGStyleElement.
func SVGStyleElementFromJS(value js.Value) *SVGStyleElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGStyleElement{}
	ret.Value_JS = value
	return ret
}

// SVGStyleElementFromJS is casting from something that holds a js.Value into SVGStyleElement.
func SVGStyleElementFromWrapper(input core.Wrapper) *SVGStyleElement {
	return SVGStyleElementFromJS(input.JSValue())
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// SetType setting attribute 'type' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetType(value string) {
	input := value
	_this.Value_JS.Set("type", input)
}

// Media returning attribute 'media' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Media() string {
	var ret string
	value := _this.Value_JS.Get("media")
	ret = (value).String()
	return ret
}

// SetMedia setting attribute 'media' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetMedia(value string) {
	input := value
	_this.Value_JS.Set("media", input)
}

// Title returning attribute 'title' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) Title() string {
	var ret string
	value := _this.Value_JS.Get("title")
	ret = (value).String()
	return ret
}

// SetTitle setting attribute 'title' with
// type string (idl: DOMString).
func (_this *SVGStyleElement) SetTitle(value string) {
	input := value
	_this.Value_JS.Set("title", input)
}

// Sheet returning attribute 'sheet' with
// type cssom.CSSStyleSheet (idl: CSSStyleSheet).
func (_this *SVGStyleElement) Sheet() *cssom.CSSStyleSheet {
	var ret *cssom.CSSStyleSheet
	value := _this.Value_JS.Get("sheet")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = cssom.CSSStyleSheetFromJS(value)
	}
	return ret
}

// class: SVGSwitchElement
type SVGSwitchElement struct {
	SVGGraphicsElement
}

// SVGSwitchElementFromJS is casting a js.Value into SVGSwitchElement.
func SVGSwitchElementFromJS(value js.Value) *SVGSwitchElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGSwitchElement{}
	ret.Value_JS = value
	return ret
}

// SVGSwitchElementFromJS is casting from something that holds a js.Value into SVGSwitchElement.
func SVGSwitchElementFromWrapper(input core.Wrapper) *SVGSwitchElement {
	return SVGSwitchElementFromJS(input.JSValue())
}

// class: SVGSymbolElement
type SVGSymbolElement struct {
	SVGGraphicsElement
}

// SVGSymbolElementFromJS is casting a js.Value into SVGSymbolElement.
func SVGSymbolElementFromJS(value js.Value) *SVGSymbolElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGSymbolElement{}
	ret.Value_JS = value
	return ret
}

// SVGSymbolElementFromJS is casting from something that holds a js.Value into SVGSymbolElement.
func SVGSymbolElementFromWrapper(input core.Wrapper) *SVGSymbolElement {
	return SVGSymbolElementFromJS(input.JSValue())
}

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGSymbolElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGSymbolElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// class: SVGTSpanElement
type SVGTSpanElement struct {
	SVGTextPositioningElement
}

// SVGTSpanElementFromJS is casting a js.Value into SVGTSpanElement.
func SVGTSpanElementFromJS(value js.Value) *SVGTSpanElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTSpanElement{}
	ret.Value_JS = value
	return ret
}

// SVGTSpanElementFromJS is casting from something that holds a js.Value into SVGTSpanElement.
func SVGTSpanElementFromWrapper(input core.Wrapper) *SVGTSpanElement {
	return SVGTSpanElementFromJS(input.JSValue())
}

// class: SVGTextContentElement
type SVGTextContentElement struct {
	SVGGraphicsElement
}

// SVGTextContentElementFromJS is casting a js.Value into SVGTextContentElement.
func SVGTextContentElementFromJS(value js.Value) *SVGTextContentElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTextContentElement{}
	ret.Value_JS = value
	return ret
}

// SVGTextContentElementFromJS is casting from something that holds a js.Value into SVGTextContentElement.
func SVGTextContentElementFromWrapper(input core.Wrapper) *SVGTextContentElement {
	return SVGTextContentElementFromJS(input.JSValue())
}

const (
	LENGTHADJUST_UNKNOWN          int = 0
	LENGTHADJUST_SPACING          int = 1
	LENGTHADJUST_SPACINGANDGLYPHS int = 2
)

// TextLength returning attribute 'textLength' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGTextContentElement) TextLength() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("textLength")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// LengthAdjust returning attribute 'lengthAdjust' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextContentElement) LengthAdjust() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("lengthAdjust")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

func (_this *SVGTextContentElement) GetNumberOfChars() (_result int) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getNumberOfChars", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetComputedTextLength() (_result float32) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("getComputedTextLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetSubStringLength(charnum uint, nchars uint) (_result float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_p1 := nchars
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("getSubStringLength", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetStartPositionOfChar(charnum uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getStartPositionOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetEndPositionOfChar(charnum uint) (_result *geometry.DOMPoint) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getEndPositionOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMPoint // javascript: DOMPoint _what_return_name
	)
	_converted = geometry.DOMPointFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetExtentOfChar(charnum uint) (_result *geometry.DOMRect) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getExtentOfChar", _args[0:_end]...)
	var (
		_converted *geometry.DOMRect // javascript: DOMRect _what_return_name
	)
	_converted = geometry.DOMRectFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetRotationOfChar(charnum uint) (_result float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getRotationOfChar", _args[0:_end]...)
	var (
		_converted float32 // javascript: float _what_return_name
	)
	_converted = (float32)((_returned).Float())
	_result = _converted
	return
}

func (_this *SVGTextContentElement) GetCharNumAtPosition(point *geometry.DOMPointInit) (_result int) {
	var (
		_args [1]interface{}
		_end  int
	)
	if point != nil {
		_p0 := point.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("getCharNumAtPosition", _args[0:_end]...)
	var (
		_converted int // javascript: long _what_return_name
	)
	_converted = (_returned).Int()
	_result = _converted
	return
}

func (_this *SVGTextContentElement) SelectSubString(charnum uint, nchars uint) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := charnum
	_args[0] = _p0
	_end++
	_p1 := nchars
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("selectSubString", _args[0:_end]...)
	return
}

// class: SVGTextElement
type SVGTextElement struct {
	SVGTextPositioningElement
}

// SVGTextElementFromJS is casting a js.Value into SVGTextElement.
func SVGTextElementFromJS(value js.Value) *SVGTextElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTextElement{}
	ret.Value_JS = value
	return ret
}

// SVGTextElementFromJS is casting from something that holds a js.Value into SVGTextElement.
func SVGTextElementFromWrapper(input core.Wrapper) *SVGTextElement {
	return SVGTextElementFromJS(input.JSValue())
}

// class: SVGTextPathElement
type SVGTextPathElement struct {
	SVGTextContentElement
}

// SVGTextPathElementFromJS is casting a js.Value into SVGTextPathElement.
func SVGTextPathElementFromJS(value js.Value) *SVGTextPathElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTextPathElement{}
	ret.Value_JS = value
	return ret
}

// SVGTextPathElementFromJS is casting from something that holds a js.Value into SVGTextPathElement.
func SVGTextPathElementFromWrapper(input core.Wrapper) *SVGTextPathElement {
	return SVGTextPathElementFromJS(input.JSValue())
}

const (
	TEXTPATH_METHODTYPE_UNKNOWN  int = 0
	TEXTPATH_METHODTYPE_ALIGN    int = 1
	TEXTPATH_METHODTYPE_STRETCH  int = 2
	TEXTPATH_SPACINGTYPE_UNKNOWN int = 0
	TEXTPATH_SPACINGTYPE_AUTO    int = 1
	TEXTPATH_SPACINGTYPE_EXACT   int = 2
)

// StartOffset returning attribute 'startOffset' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGTextPathElement) StartOffset() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("startOffset")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Method returning attribute 'method' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextPathElement) Method() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("method")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Spacing returning attribute 'spacing' with
// type SVGAnimatedEnumeration (idl: SVGAnimatedEnumeration).
func (_this *SVGTextPathElement) Spacing() *SVGAnimatedEnumeration {
	var ret *SVGAnimatedEnumeration
	value := _this.Value_JS.Get("spacing")
	ret = SVGAnimatedEnumerationFromJS(value)
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGTextPathElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGTextPositioningElement
type SVGTextPositioningElement struct {
	SVGTextContentElement
}

// SVGTextPositioningElementFromJS is casting a js.Value into SVGTextPositioningElement.
func SVGTextPositioningElementFromJS(value js.Value) *SVGTextPositioningElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTextPositioningElement{}
	ret.Value_JS = value
	return ret
}

// SVGTextPositioningElementFromJS is casting from something that holds a js.Value into SVGTextPositioningElement.
func SVGTextPositioningElementFromWrapper(input core.Wrapper) *SVGTextPositioningElement {
	return SVGTextPositioningElementFromJS(input.JSValue())
}

// X returning attribute 'x' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) X() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Y() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Dx returning attribute 'dx' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Dx() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("dx")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Dy returning attribute 'dy' with
// type SVGAnimatedLengthList (idl: SVGAnimatedLengthList).
func (_this *SVGTextPositioningElement) Dy() *SVGAnimatedLengthList {
	var ret *SVGAnimatedLengthList
	value := _this.Value_JS.Get("dy")
	ret = SVGAnimatedLengthListFromJS(value)
	return ret
}

// Rotate returning attribute 'rotate' with
// type SVGAnimatedNumberList (idl: SVGAnimatedNumberList).
func (_this *SVGTextPositioningElement) Rotate() *SVGAnimatedNumberList {
	var ret *SVGAnimatedNumberList
	value := _this.Value_JS.Get("rotate")
	ret = SVGAnimatedNumberListFromJS(value)
	return ret
}

// class: SVGTitleElement
type SVGTitleElement struct {
	SVGElement
}

// SVGTitleElementFromJS is casting a js.Value into SVGTitleElement.
func SVGTitleElementFromJS(value js.Value) *SVGTitleElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTitleElement{}
	ret.Value_JS = value
	return ret
}

// SVGTitleElementFromJS is casting from something that holds a js.Value into SVGTitleElement.
func SVGTitleElementFromWrapper(input core.Wrapper) *SVGTitleElement {
	return SVGTitleElementFromJS(input.JSValue())
}

// class: SVGTransform
type SVGTransform struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGTransform) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGTransformFromJS is casting a js.Value into SVGTransform.
func SVGTransformFromJS(value js.Value) *SVGTransform {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTransform{}
	ret.Value_JS = value
	return ret
}

// SVGTransformFromJS is casting from something that holds a js.Value into SVGTransform.
func SVGTransformFromWrapper(input core.Wrapper) *SVGTransform {
	return SVGTransformFromJS(input.JSValue())
}

const (
	SVG_TRANSFORM_UNKNOWN   int = 0
	SVG_TRANSFORM_MATRIX    int = 1
	SVG_TRANSFORM_TRANSLATE int = 2
	SVG_TRANSFORM_SCALE     int = 3
	SVG_TRANSFORM_ROTATE    int = 4
	SVG_TRANSFORM_SKEWX     int = 5
	SVG_TRANSFORM_SKEWY     int = 6
)

// Type returning attribute 'type' with
// type int (idl: unsigned short).
func (_this *SVGTransform) Type() int {
	var ret int
	value := _this.Value_JS.Get("type")
	ret = (value).Int()
	return ret
}

// Matrix returning attribute 'matrix' with
// type geometry.DOMMatrix (idl: DOMMatrix).
func (_this *SVGTransform) Matrix() *geometry.DOMMatrix {
	var ret *geometry.DOMMatrix
	value := _this.Value_JS.Get("matrix")
	ret = geometry.DOMMatrixFromJS(value)
	return ret
}

// Angle returning attribute 'angle' with
// type float32 (idl: float).
func (_this *SVGTransform) Angle() float32 {
	var ret float32
	value := _this.Value_JS.Get("angle")
	ret = (float32)((value).Float())
	return ret
}

func (_this *SVGTransform) SetMatrix(matrix *geometry.DOMMatrix2DInit) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_this.Value_JS.Call("setMatrix", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetTranslate(tx float32, ty float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := tx
	_args[0] = _p0
	_end++
	_p1 := ty
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setTranslate", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetScale(sx float32, sy float32) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := sx
	_args[0] = _p0
	_end++
	_p1 := sy
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("setScale", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetRotate(angle float32, cx float32, cy float32) {
	var (
		_args [3]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_p1 := cx
	_args[1] = _p1
	_end++
	_p2 := cy
	_args[2] = _p2
	_end++
	_this.Value_JS.Call("setRotate", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetSkewX(angle float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setSkewX", _args[0:_end]...)
	return
}

func (_this *SVGTransform) SetSkewY(angle float32) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := angle
	_args[0] = _p0
	_end++
	_this.Value_JS.Call("setSkewY", _args[0:_end]...)
	return
}

// class: SVGTransformList
type SVGTransformList struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGTransformList) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGTransformListFromJS is casting a js.Value into SVGTransformList.
func SVGTransformListFromJS(value js.Value) *SVGTransformList {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGTransformList{}
	ret.Value_JS = value
	return ret
}

// SVGTransformListFromJS is casting from something that holds a js.Value into SVGTransformList.
func SVGTransformListFromWrapper(input core.Wrapper) *SVGTransformList {
	return SVGTransformListFromJS(input.JSValue())
}

// Length returning attribute 'length' with
// type uint (idl: unsigned long).
func (_this *SVGTransformList) Length() uint {
	var ret uint
	value := _this.Value_JS.Get("length")
	ret = (uint)((value).Int())
	return ret
}

// NumberOfItems returning attribute 'numberOfItems' with
// type uint (idl: unsigned long).
func (_this *SVGTransformList) NumberOfItems() uint {
	var ret uint
	value := _this.Value_JS.Get("numberOfItems")
	ret = (uint)((value).Int())
	return ret
}

func (_this *SVGTransformList) Index(index uint) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) SetIndex(index uint, newItem *SVGTransform) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_p1 := newItem.JSValue()
	_args[1] = _p1
	_end++
	_this.Value_JS.Call("", _args[0:_end]...)
	return
}

func (_this *SVGTransformList) Clear() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("clear", _args[0:_end]...)
	return
}

func (_this *SVGTransformList) Initialize(newItem *SVGTransform) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("initialize", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) GetItem(index uint) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("getItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) InsertItemBefore(newItem *SVGTransform, index uint) (_result *SVGTransform) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("insertItemBefore", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) ReplaceItem(newItem *SVGTransform, index uint) (_result *SVGTransform) {
	var (
		_args [2]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_p1 := index
	_args[1] = _p1
	_end++
	_returned := _this.Value_JS.Call("replaceItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) RemoveItem(index uint) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := index
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("removeItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) AppendItem(newItem *SVGTransform) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	_p0 := newItem.JSValue()
	_args[0] = _p0
	_end++
	_returned := _this.Value_JS.Call("appendItem", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) CreateSVGTransformFromMatrix(matrix *geometry.DOMMatrix2DInit) (_result *SVGTransform) {
	var (
		_args [1]interface{}
		_end  int
	)
	if matrix != nil {
		_p0 := matrix.JSValue()
		_args[0] = _p0
		_end++
	}
	_returned := _this.Value_JS.Call("createSVGTransformFromMatrix", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	_converted = SVGTransformFromJS(_returned)
	_result = _converted
	return
}

func (_this *SVGTransformList) Consolidate() (_result *SVGTransform) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("consolidate", _args[0:_end]...)
	var (
		_converted *SVGTransform // javascript: SVGTransform _what_return_name
	)
	if _returned.Type() != js.TypeNull && _returned.Type() != js.TypeUndefined {
		_converted = SVGTransformFromJS(_returned)
	}
	_result = _converted
	return
}

// class: SVGUnitTypes
type SVGUnitTypes struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *SVGUnitTypes) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// SVGUnitTypesFromJS is casting a js.Value into SVGUnitTypes.
func SVGUnitTypesFromJS(value js.Value) *SVGUnitTypes {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGUnitTypes{}
	ret.Value_JS = value
	return ret
}

// SVGUnitTypesFromJS is casting from something that holds a js.Value into SVGUnitTypes.
func SVGUnitTypesFromWrapper(input core.Wrapper) *SVGUnitTypes {
	return SVGUnitTypesFromJS(input.JSValue())
}

const (
	SVG_UNIT_TYPE_UNKNOWN           int = 0
	SVG_UNIT_TYPE_USERSPACEONUSE    int = 1
	SVG_UNIT_TYPE_OBJECTBOUNDINGBOX int = 2
)

// class: SVGUnknownElement
type SVGUnknownElement struct {
	SVGGraphicsElement
}

// SVGUnknownElementFromJS is casting a js.Value into SVGUnknownElement.
func SVGUnknownElementFromJS(value js.Value) *SVGUnknownElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGUnknownElement{}
	ret.Value_JS = value
	return ret
}

// SVGUnknownElementFromJS is casting from something that holds a js.Value into SVGUnknownElement.
func SVGUnknownElementFromWrapper(input core.Wrapper) *SVGUnknownElement {
	return SVGUnknownElementFromJS(input.JSValue())
}

// class: SVGUseElement
type SVGUseElement struct {
	SVGGraphicsElement
}

// SVGUseElementFromJS is casting a js.Value into SVGUseElement.
func SVGUseElementFromJS(value js.Value) *SVGUseElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGUseElement{}
	ret.Value_JS = value
	return ret
}

// SVGUseElementFromJS is casting from something that holds a js.Value into SVGUseElement.
func SVGUseElementFromWrapper(input core.Wrapper) *SVGUseElement {
	return SVGUseElementFromJS(input.JSValue())
}

// X returning attribute 'x' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) X() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("x")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Y returning attribute 'y' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Y() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("y")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Width returning attribute 'width' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Width() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("width")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// Height returning attribute 'height' with
// type SVGAnimatedLength (idl: SVGAnimatedLength).
func (_this *SVGUseElement) Height() *SVGAnimatedLength {
	var ret *SVGAnimatedLength
	value := _this.Value_JS.Get("height")
	ret = SVGAnimatedLengthFromJS(value)
	return ret
}

// InstanceRoot returning attribute 'instanceRoot' with
// type SVGElement (idl: SVGElement).
func (_this *SVGUseElement) InstanceRoot() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("instanceRoot")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// AnimatedInstanceRoot returning attribute 'animatedInstanceRoot' with
// type SVGElement (idl: SVGElement).
func (_this *SVGUseElement) AnimatedInstanceRoot() *SVGElement {
	var ret *SVGElement
	value := _this.Value_JS.Get("animatedInstanceRoot")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = SVGElementFromJS(value)
	}
	return ret
}

// Href returning attribute 'href' with
// type SVGAnimatedString (idl: SVGAnimatedString).
func (_this *SVGUseElement) Href() *SVGAnimatedString {
	var ret *SVGAnimatedString
	value := _this.Value_JS.Get("href")
	ret = SVGAnimatedStringFromJS(value)
	return ret
}

// class: SVGUseElementShadowRoot
type SVGUseElementShadowRoot struct {
	dom.ShadowRoot
}

// SVGUseElementShadowRootFromJS is casting a js.Value into SVGUseElementShadowRoot.
func SVGUseElementShadowRootFromJS(value js.Value) *SVGUseElementShadowRoot {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGUseElementShadowRoot{}
	ret.Value_JS = value
	return ret
}

// SVGUseElementShadowRootFromJS is casting from something that holds a js.Value into SVGUseElementShadowRoot.
func SVGUseElementShadowRootFromWrapper(input core.Wrapper) *SVGUseElementShadowRoot {
	return SVGUseElementShadowRootFromJS(input.JSValue())
}

// class: SVGViewElement
type SVGViewElement struct {
	SVGElement
}

// SVGViewElementFromJS is casting a js.Value into SVGViewElement.
func SVGViewElementFromJS(value js.Value) *SVGViewElement {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &SVGViewElement{}
	ret.Value_JS = value
	return ret
}

// SVGViewElementFromJS is casting from something that holds a js.Value into SVGViewElement.
func SVGViewElementFromWrapper(input core.Wrapper) *SVGViewElement {
	return SVGViewElementFromJS(input.JSValue())
}

const (
	SVG_ZOOMANDPAN_UNKNOWN_VE int = 0
	SVG_ZOOMANDPAN_DISABLE_VE int = 1
	SVG_ZOOMANDPAN_MAGNIFY_VE int = 2
)

// ViewBox returning attribute 'viewBox' with
// type SVGAnimatedRect (idl: SVGAnimatedRect).
func (_this *SVGViewElement) ViewBox() *SVGAnimatedRect {
	var ret *SVGAnimatedRect
	value := _this.Value_JS.Get("viewBox")
	ret = SVGAnimatedRectFromJS(value)
	return ret
}

// PreserveAspectRatio returning attribute 'preserveAspectRatio' with
// type SVGAnimatedPreserveAspectRatio (idl: SVGAnimatedPreserveAspectRatio).
func (_this *SVGViewElement) PreserveAspectRatio() *SVGAnimatedPreserveAspectRatio {
	var ret *SVGAnimatedPreserveAspectRatio
	value := _this.Value_JS.Get("preserveAspectRatio")
	ret = SVGAnimatedPreserveAspectRatioFromJS(value)
	return ret
}

// ZoomAndPan returning attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGViewElement) ZoomAndPan() int {
	var ret int
	value := _this.Value_JS.Get("zoomAndPan")
	ret = (value).Int()
	return ret
}

// SetZoomAndPan setting attribute 'zoomAndPan' with
// type int (idl: unsigned short).
func (_this *SVGViewElement) SetZoomAndPan(value int) {
	input := value
	_this.Value_JS.Set("zoomAndPan", input)
}

// class: ShadowAnimation
type ShadowAnimation struct {
	webani.Animation
}

// ShadowAnimationFromJS is casting a js.Value into ShadowAnimation.
func ShadowAnimationFromJS(value js.Value) *ShadowAnimation {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ShadowAnimation{}
	ret.Value_JS = value
	return ret
}

// ShadowAnimationFromJS is casting from something that holds a js.Value into ShadowAnimation.
func ShadowAnimationFromWrapper(input core.Wrapper) *ShadowAnimation {
	return ShadowAnimationFromJS(input.JSValue())
}

// SourceAnimation returning attribute 'sourceAnimation' with
// type webani.Animation (idl: Animation).
func (_this *ShadowAnimation) SourceAnimation() *webani.Animation {
	var ret *webani.Animation
	value := _this.Value_JS.Get("sourceAnimation")
	ret = webani.AnimationFromJS(value)
	return ret
}
