// Code generated by webidl-bind. DO NOT EDIT.

package reporting

import "syscall/js"

import (
	"github.com/gowebapi/webapi/core"
	"github.com/gowebapi/webapi/javascript/missingtypes"
)

// using following types:
// missingtypes.Date

// source idl files:
// reporting.idl

// transform files:
// reporting.go.md

// workaround for compiler error
func unused(value interface{}) {
	// TODO remove this method
}

type Union struct {
	Value js.Value
}

func (u *Union) JSValue() js.Value {
	return u.Value
}

func UnionFromJS(value js.Value) *Union {
	return &Union{Value: value}
}

// callback: ReportingObserverCallback
type ReportingObserverCallbackFunc func(reports []*Report, observer *ReportingObserver)

// ReportingObserverCallback is a javascript function type.
//
// Call Release() when done to release resouces
// allocated to this type.
type ReportingObserverCallback js.Func

func ReportingObserverCallbackToJS(callback ReportingObserverCallbackFunc) *ReportingObserverCallback {
	if callback == nil {
		return nil
	}
	ret := ReportingObserverCallback(js.FuncOf(func(this js.Value, args []js.Value) interface{} {
		var (
			_p0 []*Report          // javascript: sequence<Report> reports
			_p1 *ReportingObserver // javascript: ReportingObserver observer
		)
		__length0 := args[0].Length()
		__array0 := make([]*Report, __length0, __length0)
		for __idx0 := 0; __idx0 < __length0; __idx0++ {
			var __seq_out0 *Report
			__seq_in0 := args[0].Index(__idx0)
			__seq_out0 = ReportFromJS(__seq_in0)
			__array0[__idx0] = __seq_out0
		}
		_p0 = __array0
		_p1 = ReportingObserverFromJS(args[1])
		callback(_p0, _p1)

		// returning no return value
		return nil
	}))
	return &ret
}

func ReportingObserverCallbackFromJS(_value js.Value) ReportingObserverCallbackFunc {
	return func(reports []*Report, observer *ReportingObserver) {
		var (
			_args [2]interface{}
			_end  int
		)
		_p0 := js.Global().Get("Array").New(len(reports))
		for __idx0, __seq_in0 := range reports {
			__seq_out0 := __seq_in0.JSValue()
			_p0.SetIndex(__idx0, __seq_out0)
		}
		_args[0] = _p0
		_end++
		_p1 := observer.JSValue()
		_args[1] = _p1
		_end++
		_value.Invoke(_args[0:_end]...)
		return
	}
}

// dictionary: GenerateTestReportParameters
type GenerateTestReportParameters struct {
	Message string
	Group   string
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *GenerateTestReportParameters) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := _this.Message
	out.Set("message", value0)
	value1 := _this.Group
	out.Set("group", value1)
	return out
}

// GenerateTestReportParametersFromJS is allocating a new
// GenerateTestReportParameters object and copy all values in the value javascript object.
func GenerateTestReportParametersFromJS(value js.Value) *GenerateTestReportParameters {
	var out GenerateTestReportParameters
	var (
		value0 string // javascript: DOMString {message Message message}
		value1 string // javascript: DOMString {group Group group}
	)
	value0 = (value.Get("message")).String()
	out.Message = value0
	value1 = (value.Get("group")).String()
	out.Group = value1
	return &out
}

// dictionary: ReportingObserverOptions
type ReportingObserverOptions struct {
	Types    []string
	Buffered bool
}

// JSValue is allocating a new javascript object and copy
// all values
func (_this *ReportingObserverOptions) JSValue() js.Value {
	out := js.Global().Get("Object").New()
	value0 := js.Global().Get("Array").New(len(_this.Types))
	for __idx0, __seq_in0 := range _this.Types {
		__seq_out0 := __seq_in0
		value0.SetIndex(__idx0, __seq_out0)
	}
	out.Set("types", value0)
	value1 := _this.Buffered
	out.Set("buffered", value1)
	return out
}

// ReportingObserverOptionsFromJS is allocating a new
// ReportingObserverOptions object and copy all values in the value javascript object.
func ReportingObserverOptionsFromJS(value js.Value) *ReportingObserverOptions {
	var out ReportingObserverOptions
	var (
		value0 []string // javascript: sequence<DOMString> {types Types types}
		value1 bool     // javascript: boolean {buffered Buffered buffered}
	)
	__length0 := value.Get("types").Length()
	__array0 := make([]string, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 string
		__seq_in0 := value.Get("types").Index(__idx0)
		__seq_out0 = (__seq_in0).String()
		__array0[__idx0] = __seq_out0
	}
	value0 = __array0
	out.Types = value0
	value1 = (value.Get("buffered")).Bool()
	out.Buffered = value1
	return &out
}

// class: CrashReportBody
type CrashReportBody struct {
	ReportBody
}

// CrashReportBodyFromJS is casting a js.Value into CrashReportBody.
func CrashReportBodyFromJS(value js.Value) *CrashReportBody {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &CrashReportBody{}
	ret.Value_JS = value
	return ret
}

// CrashReportBodyFromJS is casting from something that holds a js.Value into CrashReportBody.
func CrashReportBodyFromWrapper(input core.Wrapper) *CrashReportBody {
	return CrashReportBodyFromJS(input.JSValue())
}

// Reason returning attribute 'reason' with
// type string (idl: DOMString).
func (_this *CrashReportBody) Reason() *string {
	var ret *string
	value := _this.Value_JS.Get("reason")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// class: DeprecationReportBody
type DeprecationReportBody struct {
	ReportBody
}

// DeprecationReportBodyFromJS is casting a js.Value into DeprecationReportBody.
func DeprecationReportBodyFromJS(value js.Value) *DeprecationReportBody {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &DeprecationReportBody{}
	ret.Value_JS = value
	return ret
}

// DeprecationReportBodyFromJS is casting from something that holds a js.Value into DeprecationReportBody.
func DeprecationReportBodyFromWrapper(input core.Wrapper) *DeprecationReportBody {
	return DeprecationReportBodyFromJS(input.JSValue())
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *DeprecationReportBody) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// AnticipatedRemoval returning attribute 'anticipatedRemoval' with
// type missingtypes.Date (idl: Date).
func (_this *DeprecationReportBody) AnticipatedRemoval() *missingtypes.Date {
	var ret *missingtypes.Date
	value := _this.Value_JS.Get("anticipatedRemoval")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = missingtypes.DateFromJS(value)
	}
	return ret
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *DeprecationReportBody) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// SourceFile returning attribute 'sourceFile' with
// type string (idl: DOMString).
func (_this *DeprecationReportBody) SourceFile() *string {
	var ret *string
	value := _this.Value_JS.Get("sourceFile")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// LineNumber returning attribute 'lineNumber' with
// type uint (idl: unsigned long).
func (_this *DeprecationReportBody) LineNumber() *uint {
	var ret *uint
	value := _this.Value_JS.Get("lineNumber")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// ColumnNumber returning attribute 'columnNumber' with
// type uint (idl: unsigned long).
func (_this *DeprecationReportBody) ColumnNumber() *uint {
	var ret *uint
	value := _this.Value_JS.Get("columnNumber")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// class: InterventionReportBody
type InterventionReportBody struct {
	ReportBody
}

// InterventionReportBodyFromJS is casting a js.Value into InterventionReportBody.
func InterventionReportBodyFromJS(value js.Value) *InterventionReportBody {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &InterventionReportBody{}
	ret.Value_JS = value
	return ret
}

// InterventionReportBodyFromJS is casting from something that holds a js.Value into InterventionReportBody.
func InterventionReportBodyFromWrapper(input core.Wrapper) *InterventionReportBody {
	return InterventionReportBodyFromJS(input.JSValue())
}

// Id returning attribute 'id' with
// type string (idl: DOMString).
func (_this *InterventionReportBody) Id() string {
	var ret string
	value := _this.Value_JS.Get("id")
	ret = (value).String()
	return ret
}

// Message returning attribute 'message' with
// type string (idl: DOMString).
func (_this *InterventionReportBody) Message() string {
	var ret string
	value := _this.Value_JS.Get("message")
	ret = (value).String()
	return ret
}

// SourceFile returning attribute 'sourceFile' with
// type string (idl: DOMString).
func (_this *InterventionReportBody) SourceFile() *string {
	var ret *string
	value := _this.Value_JS.Get("sourceFile")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (value).String()
		ret = &__tmp
	}
	return ret
}

// LineNumber returning attribute 'lineNumber' with
// type uint (idl: unsigned long).
func (_this *InterventionReportBody) LineNumber() *uint {
	var ret *uint
	value := _this.Value_JS.Get("lineNumber")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// ColumnNumber returning attribute 'columnNumber' with
// type uint (idl: unsigned long).
func (_this *InterventionReportBody) ColumnNumber() *uint {
	var ret *uint
	value := _this.Value_JS.Get("columnNumber")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		__tmp := (uint)((value).Int())
		ret = &__tmp
	}
	return ret
}

// class: Report
type Report struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *Report) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ReportFromJS is casting a js.Value into Report.
func ReportFromJS(value js.Value) *Report {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &Report{}
	ret.Value_JS = value
	return ret
}

// ReportFromJS is casting from something that holds a js.Value into Report.
func ReportFromWrapper(input core.Wrapper) *Report {
	return ReportFromJS(input.JSValue())
}

// Type returning attribute 'type' with
// type string (idl: DOMString).
func (_this *Report) Type() string {
	var ret string
	value := _this.Value_JS.Get("type")
	ret = (value).String()
	return ret
}

// Url returning attribute 'url' with
// type string (idl: DOMString).
func (_this *Report) Url() string {
	var ret string
	value := _this.Value_JS.Get("url")
	ret = (value).String()
	return ret
}

// Body returning attribute 'body' with
// type ReportBody (idl: ReportBody).
func (_this *Report) Body() *ReportBody {
	var ret *ReportBody
	value := _this.Value_JS.Get("body")
	if value.Type() != js.TypeNull && value.Type() != js.TypeUndefined {
		ret = ReportBodyFromJS(value)
	}
	return ret
}

// class: ReportBody
type ReportBody struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ReportBody) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ReportBodyFromJS is casting a js.Value into ReportBody.
func ReportBodyFromJS(value js.Value) *ReportBody {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ReportBody{}
	ret.Value_JS = value
	return ret
}

// ReportBodyFromJS is casting from something that holds a js.Value into ReportBody.
func ReportBodyFromWrapper(input core.Wrapper) *ReportBody {
	return ReportBodyFromJS(input.JSValue())
}

// class: ReportingObserver
type ReportingObserver struct {
	// Value_JS holds a reference to a javascript value
	Value_JS js.Value
}

// JSValue returns the js.Value or js.Null() if _this is nil
func (_this *ReportingObserver) JSValue() js.Value {
	if _this == nil {
		return js.Null()
	}
	return _this.Value_JS
}

// ReportingObserverFromJS is casting a js.Value into ReportingObserver.
func ReportingObserverFromJS(value js.Value) *ReportingObserver {
	if typ := value.Type(); typ == js.TypeNull || typ == js.TypeUndefined {
		return nil
	}
	ret := &ReportingObserver{}
	ret.Value_JS = value
	return ret
}

// ReportingObserverFromJS is casting from something that holds a js.Value into ReportingObserver.
func ReportingObserverFromWrapper(input core.Wrapper) *ReportingObserver {
	return ReportingObserverFromJS(input.JSValue())
}

func NewReportingObserver(callback *ReportingObserverCallback, options *ReportingObserverOptions) (_result *ReportingObserver) {
	_klass := js.Global().Get("ReportingObserver")
	var (
		_args [2]interface{}
		_end  int
	)

	var __callback0 js.Value
	if callback != nil {
		__callback0 = (*callback).Value
	} else {
		__callback0 = js.Null()
	}
	_p0 := __callback0
	_args[0] = _p0
	_end++
	if options != nil {
		_p1 := options.JSValue()
		_args[1] = _p1
		_end++
	}
	_returned := _klass.New(_args[0:_end]...)
	var (
		_converted *ReportingObserver // javascript: ReportingObserver _what_return_name
	)
	_converted = ReportingObserverFromJS(_returned)
	_result = _converted
	return
}

func (_this *ReportingObserver) Observe() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("observe", _args[0:_end]...)
	return
}

func (_this *ReportingObserver) Disconnect() {
	var (
		_args [0]interface{}
		_end  int
	)
	_this.Value_JS.Call("disconnect", _args[0:_end]...)
	return
}

func (_this *ReportingObserver) TakeRecords() (_result []*Report) {
	var (
		_args [0]interface{}
		_end  int
	)
	_returned := _this.Value_JS.Call("takeRecords", _args[0:_end]...)
	var (
		_converted []*Report // javascript: sequence<Report> _what_return_name
	)
	__length0 := _returned.Length()
	__array0 := make([]*Report, __length0, __length0)
	for __idx0 := 0; __idx0 < __length0; __idx0++ {
		var __seq_out0 *Report
		__seq_in0 := _returned.Index(__idx0)
		__seq_out0 = ReportFromJS(__seq_in0)
		__array0[__idx0] = __seq_out0
	}
	_converted = __array0
	_result = _converted
	return
}
